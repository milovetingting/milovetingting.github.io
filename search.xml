<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android Gradle 多项目构建</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC10%E7%AB%A0-Android_Gradle%E5%A4%9A%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Android-Gradle-多项目构建"><a href="#Android-Gradle-多项目构建" class="headerlink" title="Android Gradle 多项目构建"></a>Android Gradle 多项目构建</h1><h2 id="Android-项目区别"><a href="#Android-项目区别" class="headerlink" title="Android 项目区别"></a>Android 项目区别</h2><p>Android项目一般分为库项目，应用项目，测试项目，Android Gradle 根据这些项目分别对应3种插件：com.android.library,com.android.application,com.android.test。</p>
<h2 id="Android多项目设置"><a href="#Android多项目设置" class="headerlink" title="Android多项目设置"></a>Android多项目设置</h2><p>定义一个工程，包含很多项目，在Gradle中，项目的结构没有那么多限制，只要在settings.gradle里配置好这些项目就可以了。</p>
<h2 id="库项目引用的配置"><a href="#库项目引用的配置" class="headerlink" title="库项目引用的配置"></a>库项目引用的配置</h2><p>Android库项目的引用，通过dependencies实现:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    <span class="keyword">implements</span> <span class="keyword">project</span>(<span class="string">':plugin'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="库项目单独发布"><a href="#库项目单独发布" class="headerlink" title="库项目单独发布"></a>库项目单独发布</h2><h3 id="Maven私服搭建"><a href="#Maven私服搭建" class="headerlink" title="Maven私服搭建"></a>Maven私服搭建</h3><p>搭建自己的Maven私服，推荐使用Nexus Repositories Manager。</p>
<p>具体的搭建如下：</p>
<p>1、下载。在<a href="https://www.sonatype.com/" target="_blank" rel="noopener">https://www.sonatype.com/</a> 选择对应的软件类型，我这里选择的是OSS3版本，即免费版。 在<a href="https://www.sonatype.com/download-nexus-repo-oss" target="_blank" rel="noopener">https://www.sonatype.com/download-nexus-repo-oss</a> 页面根据操作系统选择需要下载的应用。</p>
<p>2、解压。解压后有两个文件夹，nexus-3.13.0-01和sonatype-work。</p>
<p>3、启动。进入nexus-3.13.0-01目录下的bin目录，然后在命令行中输入./nexus start，启动nexus。</p>
<p>4、浏览器访问<a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a> ,如访问成功，即表示nexus搭建成功。以默认的管理员帐号admin,密码admin123登录，可以看到默认创建的仓库。</p>
<p>nexus的具体配置这里不展开讲，具体可以在网上找相关资源，这里只用默认配置。</p>
<h3 id="库项目发布"><a href="#库项目发布" class="headerlink" title="库项目发布"></a>库项目发布</h3><p>新建名为TestLib的Android Library，在根目录的gradle.properties中配置如下(这里配置是为了方便统一管理，也可以直接写在library的build.gradle中):</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># maven local config</span><br><span class="line">#正式版本号</span><br><span class="line">versionName=<span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line">#快照版本号</span><br><span class="line">snapshotVersionName=<span class="number">1.0</span>-SNAPSHOT</span><br><span class="line">#快照仓库地址</span><br><span class="line">mavenSnapshotUrl=http:<span class="comment">//localhost:8081/repository/maven-snapshots/</span></span><br><span class="line">#发布仓库地址</span><br><span class="line">mavenReleasesUrl=http:<span class="comment">//localhost:8081/repository/maven-releases/</span></span><br><span class="line">maven_local_username=admin</span><br><span class="line">maven_local_password=admin123</span><br><span class="line">#项目组 id</span><br><span class="line">maven_pom_groupId=com.wangyz.plugins</span><br><span class="line">#项目名称</span><br><span class="line">maven_pom__artifactId=testlib</span><br><span class="line">#打包类型</span><br><span class="line">maven_pom__packaging=aar</span><br><span class="line">maven_pom__description=test upload</span><br></pre></td></tr></table></figure></div>

<p>在TestLib目录下的build.gradle的android节点下增加以下配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">// type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义</span></span><br><span class="line">    <span class="keyword">task</span> androidJavadocs(type: Javadoc) &#123;</span><br><span class="line">        <span class="comment">// 设置源码所在的位置</span></span><br><span class="line">        <span class="keyword">source</span> = android.<span class="keyword">sourceSets</span>.main.java.sourceFiles</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成javadoc.jar</span></span><br><span class="line">    <span class="keyword">task</span> androidJavadocsJar(type: Jar) &#123;</span><br><span class="line">        <span class="comment">// 指定文档名称</span></span><br><span class="line">        classifier = <span class="string">'javadoc'</span></span><br><span class="line">        <span class="keyword">from</span> androidJavadocs.<span class="keyword">destinationDir</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成sources.jar</span></span><br><span class="line">    <span class="keyword">task</span> androidSourcesJar(type: Jar) &#123;</span><br><span class="line">        classifier = <span class="string">'sources'</span></span><br><span class="line">        <span class="keyword">from</span> android.<span class="keyword">sourceSets</span>.main.java.sourceFiles</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 产生相关配置文件的任务</span></span><br><span class="line">    <span class="keyword">artifacts</span> &#123;</span><br><span class="line">        archives androidSourcesJar</span><br><span class="line">        archives androidJavadocsJar</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传 到 maven 的任务</span></span><br><span class="line">    uploadArchives &#123;</span><br><span class="line">        <span class="keyword">repositories</span>.mavenDeployer &#123;</span><br><span class="line"></span><br><span class="line">            repository(url: mavenReleasesUrl) &#123;</span><br><span class="line">                authentication(userName: maven_local_username, password: maven_local_password)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            snapshotRepository(url: mavenSnapshotUrl) &#123;</span><br><span class="line">                authentication(userName: maven_local_username, password: maven_local_password)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pom.<span class="keyword">project</span> &#123;</span><br><span class="line">                <span class="comment">// 注意：【这里通过切换 versionName 的赋值来区分上传快照包还是正式包（snapshot 版本必须以 -SNAPSHOT 结尾）】</span></span><br><span class="line">                <span class="comment">//version snapshotVersionName</span></span><br><span class="line">                version versionName</span><br><span class="line">                artifactId maven_pom__artifactId</span><br><span class="line">                groupId maven_pom_groupId</span><br><span class="line">                packaging maven_pom__packaging</span><br><span class="line">                <span class="keyword">description</span> maven_pom__description</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>命令行切换到TestLib目录下，执行gradle uploadArchives命令，执行成功后，在浏览器中可看到上传成功。</p>
<h3 id="库项目的引用"><a href="#库项目的引用" class="headerlink" title="库项目的引用"></a>库项目的引用</h3><p>在要引用的项目，如app，在项目根目录的build.gradle的allprojects节点中添加以下配置:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line"></span><br><span class="line">        mavenCentral()</span><br><span class="line">        mavenLocal()</span><br><span class="line"></span><br><span class="line">        maven &#123;</span><br><span class="line">            url mavenReleasesUrl</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        maven &#123;</span><br><span class="line">            url mavenSnapshotUrl</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">'https://maven.google.com'</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后在app的build.gradle中引入依赖:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">'com.wangyz.plugins:testlib:1.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>同步项目后，即可引用TestLib的相关资源。</p>
<p>参考以下资源，在此表示感谢！</p>
<p><a href="https://www.jianshu.com/p/33d9861217bf" target="_blank" rel="noopener">https://www.jianshu.com/p/33d9861217bf</a></p>
]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>多项目</tag>
        <tag>构建</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Android Gradle工程</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC8%E7%AB%A0-%E8%87%AA%E5%AE%9A%E4%B9%89Android_Gradle%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="自定义Android-Gradle工程"><a href="#自定义Android-Gradle工程" class="headerlink" title="自定义Android Gradle工程"></a>自定义Android Gradle工程</h1><h2 id="defaultConfig默认配置"><a href="#defaultConfig默认配置" class="headerlink" title="defaultConfig默认配置"></a>defaultConfig默认配置</h2><p>defaultConfig是Android对象中的一个配置项，负责定义所有的默认配置。一个基本的defaultConfig配置如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.app"</span></span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="applicationId"><a href="#applicationId" class="headerlink" title="applicationId"></a>applicationId</h3><p>applicationId是ProductFlavor的一个属性，用于指定生成的App的包名，默认情况下是Null.这个时候在构建的时候，会从我们的AndroidManifest.xml文件读取，也就是我们在AndroidManifest.xml文件中配置的manifest标签的package属性值。</p>
<h3 id="minSdkVersion"><a href="#minSdkVersion" class="headerlink" title="minSdkVersion"></a>minSdkVersion</h3><p>minSdkVersion是ProductFlavor的一个方法，对应的方法原型为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> minSdkVersion(<span class="keyword">int</span> minSdkVersion)&#123;</span><br><span class="line">    setMinSdkVersion(minSdkVersion);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>它可以指定我们的App最低支持的Android操作系统版本，其对应的值是Android Sdk的API LEVEL.它还有两个方法原型:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setMinSdkVersion(@Nullable String minSdkVersion)&#123;</span><br><span class="line">    setMinSdkVersion(getApiVersion(minSdkVersion))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> minSdkVersion(@Nullable String minSdkVersion)&#123;</span><br><span class="line">    setMinSdkVersion(minSdkVersion)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="targetSdkVersion"><a href="#targetSdkVersion" class="headerlink" title="targetSdkVersion"></a>targetSdkVersion</h3><p>这个用于配置我们基于哪个Android SDK开发，它的可选值和minSdkVersion一样。没有配置的时候，也会从AndroidManifest.xml读取。</p>
<h3 id="versionCode"><a href="#versionCode" class="headerlink" title="versionCode"></a>versionCode</h3><p>它也是ProductFlavor的一个属性，用于配置Android App的内部版本号，是一个整数，通常用于版本的升级，没有配置的时候，从AndroidManifest.xml读取。方法原型是:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">@NonNull</span><br><span class="line"><span class="keyword">public</span> ProductFlavor setVersionCode(Integer versionCode)&#123;</span><br><span class="line">    mVersionCode = versionCode;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">@NonNull</span><br><span class="line"><span class="keyword">public</span> Integer getVersionCode()&#123;</span><br><span class="line">    <span class="keyword">return</span> mVersionCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="versionName"><a href="#versionName" class="headerlink" title="versionName"></a>versionName</h3><p>用于配置Android App的版本名称，如V1.0.0等。</p>
<h3 id="testApplicationId"><a href="#testApplicationId" class="headerlink" title="testApplicationId"></a>testApplicationId</h3><p>用于配置测试App的包名，默认情况下是applicationId+”.test”。</p>
<h3 id="testInstrumentationRunner"><a href="#testInstrumentationRunner" class="headerlink" title="testInstrumentationRunner"></a>testInstrumentationRunner</h3><p>用于配置单元测试时使用的Runner，默认使用的是android.test.InstrumentationTestRunner。</p>
<h3 id="signingConfig"><a href="#signingConfig" class="headerlink" title="signingConfig"></a>signingConfig</h3><p>配置默认的签名信息，对生成的App签名。</p>
<h3 id="proguardFile"><a href="#proguardFile" class="headerlink" title="proguardFile"></a>proguardFile</h3><p>用于配置App ProGuard混淆所使用的Proguard配置文件。</p>
<h3 id="proguardFiles"><a href="#proguardFiles" class="headerlink" title="proguardFiles"></a>proguardFiles</h3><p>这个也是配置ProGuard的配置文件，只不过它可以同时接受多个配置文件，因为它的参数是一个可变类型的参数。</p>
<h2 id="配置签名信息"><a href="#配置签名信息" class="headerlink" title="配置签名信息"></a>配置签名信息</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line"></span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"myrelease.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyReleaseKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面例子中，配置了一个名为release的签名配置，除此之外，还可以配置多个不同的签名信息。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line"></span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"myrelease.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyReleaseKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"mydebug.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyDebugKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>现在已经配置好了两个签名信息，但还没有被应用，应用方法如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line"></span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"myrelease.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyReleaseKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"mydebug.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyDebugKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.app"</span></span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        signingConfig signingConfigs.debug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>除了上面的默认签名配置外，也可以对构建类型分别配置签名信息。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line"></span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"myrelease.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyReleaseKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"mydebug.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyDebugKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">        &#125;</span><br><span class="line">        debug&#123;</span><br><span class="line">            signingConfig signingConfigs.debug</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="构建的应用类型"><a href="#构建的应用类型" class="headerlink" title="构建的应用类型"></a>构建的应用类型</h2><p>如果想增加新的构建类型，在buildTypes{}代码块中继续添加元素就可以。</p>
<h3 id="applicationIdSuffix"><a href="#applicationIdSuffix" class="headerlink" title="applicationIdSuffix"></a>applicationIdSuffix</h3><p>applicationIdSuffix是BuildType的一个属性，用于配置基于默认的applicationId的后缀。</p>
<h3 id="debuggable"><a href="#debuggable" class="headerlink" title="debuggable"></a>debuggable</h3><p>debuggable用于配置一个可供调试的apk。其值可以true或false。</p>
<h3 id="jniDebuggable"><a href="#jniDebuggable" class="headerlink" title="jniDebuggable"></a>jniDebuggable</h3><p>用于配置是否生成一个可供调试jni代码的apk。可接受boolean类型的值。</p>
<h3 id="minifyEnabled"><a href="#minifyEnabled" class="headerlink" title="minifyEnabled"></a>minifyEnabled</h3><p>用于配置该BuildType是否启用Proguard混淆，接受boolean类型的值。</p>
<h3 id="multiDexEnabled"><a href="#multiDexEnabled" class="headerlink" title="multiDexEnabled"></a>multiDexEnabled</h3><p>用于配置该BuildType是否启用自动拆分多个Dex的功能。</p>
<h3 id="proguardFile-1"><a href="#proguardFile-1" class="headerlink" title="proguardFile"></a>proguardFile</h3><p>用于配置Proguard混淆使用的配置文件。</p>
<h3 id="proguardFiles-1"><a href="#proguardFiles-1" class="headerlink" title="proguardFiles"></a>proguardFiles</h3><p>用于配置Proguard混淆使用的配置文件，可同时配置多个Proguard配置文件。</p>
<h3 id="shrinkResources"><a href="#shrinkResources" class="headerlink" title="shrinkResources"></a>shrinkResources</h3><p>用于配置是否自动清理未使用的资源，默认为false。</p>
<h3 id="signingConfig-1"><a href="#signingConfig-1" class="headerlink" title="signingConfig"></a>signingConfig</h3><p>配置该BuildType使用的签名配置。</p>
<p>每一个BuildType都会生成一个SourceSet，默认位置为src//。新增的BuildType名字不能是main和androidTest,因为这两个已经被系统占用，同时每个BuildType之间名称不能相同。</p>
<h2 id="使用混淆"><a href="#使用混淆" class="headerlink" title="使用混淆"></a>使用混淆</h2><p>代码混淆是一个非常有用的功能，它不仅能优化代码，让apk包变得更小，还可以混淆原来的代码，让反编译的人不容易看明白业务逻辑。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    buildTypes&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            minifyEnabled <span class="keyword">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>),<span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="启用Zipalign优化"><a href="#启用Zipalign优化" class="headerlink" title="启用Zipalign优化"></a>启用Zipalign优化</h2><p>zipalign是Android为我们提供的一个整理优化apk文件的工具。它能提高系统和应用的运行效率，更快地读写apk中的资源，降低内存的使。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    buildTypes&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            zipAlignEnabled <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>IPC机制</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/IPC%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="IPC机制"><a href="#IPC机制" class="headerlink" title="IPC机制"></a>IPC机制</h1><h2 id="1、Android-IPC简介"><a href="#1、Android-IPC简介" class="headerlink" title="1、Android IPC简介"></a>1、Android IPC简介</h2><blockquote>
<p>IPC是Inter-Process Communication的缩写，含义为进程间通信或者跨进程通信，是指两个进程之间进行数据交换的过程。</p>
</blockquote>
<p>ANR:Application Not Responding,应用无响应。</p>
<h2 id="2、Android中的多进程模式"><a href="#2、Android中的多进程模式" class="headerlink" title="2、Android中的多进程模式"></a>2、Android中的多进程模式</h2><p>在Android中使用多进程，可以通过给四大组件在AndroidMenifest中指定android:process属性。默认进程的进程名是包名。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:process</span>=<span class="string">":remote"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:process</span>=<span class="string">"com.example.ipc.remote"</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>上述两种声明的区别：</p>
<blockquote>
<p>首先，”:”的含义是指要在当前的进程名前附加上当前的包名，即完整进程名为:com.example.ipc:remote,而第二种则为完整的命名方式。其次，进程名以”:”开头的进程属于当前应用的私有进程，其它应用的组件不可以和它跑在同一个进程中，而进程名不以”:”开头的进程属于全局进程，其它应用通过ShareUID方式可以和它跑在同一个进程中。</p>
</blockquote>
<blockquote>
<p>Android系统会为每个应用分配一个唯一的UID，具有相同UID的应用才能共享数据。两个应用通过ShareUID跑在同一个进程，需要这两个应用有相同的ShareUID并且签名相同才可以。在这种情况下，它们可以互相访问对方的私有数据，比如data目录，组件信息等，不管他们是否跑在同一个进程中。如果在同一个进程中，还可以共享内存数据。</p>
</blockquote>
<h2 id="3、IPC基础概念"><a href="#3、IPC基础概念" class="headerlink" title="3、IPC基础概念"></a>3、IPC基础概念</h2><p>Serializable接口</p>
<blockquote>
<p>静态成员变量属于类不属于对象，所以不会参与序列化过程；用transient关键字标记的成员变量不参与序列化过程。</p>
<p>可以通过重写writeObject和readObject方法去修改serialize的过程。</p>
</blockquote>
<p>Parcelable接口</p>
<blockquote>
<p>一个类只要实现这个接口，就可以实现序列化并可以通过Intent和Binder传递。</p>
</blockquote>
<p>Serializable是Java中的序列化接口，其使用起来简单但是开销很大，序列化和反序列化过程需要大量I/O操作。Parcelable是Android中的序列化方式，因此更适合在Android平台上，它的缺点是使用起来稍微麻烦，但是效率很高，这是Android推荐的序列化方式，因此首选Parcelable。Parcelable主要用在内存序列化上。如果要将对象序列化到存储设备或将对象序列化后通过网络传输，建议使用Serializable。</p>
<p>Binder</p>
<blockquote>
<p>首先，当客户端发起远程请求时，由于当前线程会被挂起直至服务端进程返回数据，所以如果一个远程方法是很耗时的，那么不能在UI线程中发起此远程请求；其它，由于服务端的Binder方法运行在Binder的线程池中，所以Binder方法不管是否耗时都应该采用同步的方式去实现，因为它已经运行在一个线程中了。</p>
</blockquote>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="Binder的工作机制" class="fancybox"><img alt="Binder的工作机制" data-src="/images/Binder%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" src="/img/loading.gif" class="lazyload" title="Binder的工作机制"></a></p>
<p>linkToDeath和unlinkToDeath</p>
<blockquote>
<p>Binder运行在服务端进程，如果服务端进程由于某些原因异常终止，这个时候我们到服务端的Binder连接断裂（称之为Binder死亡）,会导致我们的远程调用失败。如果我们不知道Binder连接已经断裂，那么客户端的功能就会受到影响。为了解决这个问题，Binder中提供了两个配对的方法linkToDeath和unlinkToDeath,通过linkToDeath，可以给Binder设置一个死亡代理，当Binder死亡时，我们就会收到通知，这个时候就可以重新发起连接请求从而恢复连接。具体设置代理的步骤如下：</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> IBinder.DeathRecipient mDeathRecipient = <span class="keyword">new</span> IBinder.DeathRecipient()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binderDied</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(mBookManager==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		mBookManager.asBinder().unlinkToDeath(mDeathRecipient,<span class="number">0</span>);</span><br><span class="line">		mBookManager=<span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>重新绑定远程Service</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在客户端绑定远程服务成功后，给binder设置死亡代理:<br>    mService = IMessageBoxManager.Stub.asInterface(binder);<br>    binder.linkToDeath(mDeathRecipient,0);</p>
<p>通过Binder的isBinderAlive方法可以判断Binder是否死亡。</p>
<h2 id="4、Android中的IPC方式"><a href="#4、Android中的IPC方式" class="headerlink" title="4、Android中的IPC方式"></a>4、Android中的IPC方式</h2><ul>
<li><p>使用Bundle</p>
<blockquote>
<p>Bundle实现了Parcelable接口，可以方便地在不同的进程间传输。传输的数据必须能被序列化，比如基本类型、实现了Parcelable接口的对象、实现了Serializable接口的对象以及一些Android支持的特殊对象。</p>
</blockquote>
</li>
<li><p>使用文件共享</p>
</li>
<li><p>使用Messenger</p>
<blockquote>
<p>一次处理一个请求，因此在服务端不用考虑线程同步的问题，因为服务端中不存在并发执行的情形。</p>
</blockquote>
</li>
</ul>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="Messenger的工作原理" class="fancybox"><img alt="Messenger的工作原理" data-src="/images/Messenger%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" src="/img/loading.gif" class="lazyload" title="Messenger的工作原理"></a></p>
<ul>
<li>使用AIDL</li>
</ul>
<p>AIDL支持的数据类型:</p>
<blockquote>
<p>基本数据类型(int、long、char、boolean、double等)；</p>
</blockquote>
<blockquote>
<p>String和CharSequence;</p>
</blockquote>
<blockquote>
<p>List:只支持ArrayList,里面每个元素都必须能够被AIDL支持;</p>
</blockquote>
<blockquote>
<p>Map:只支持HashMap,里面的每个元素都必须能够被AIDL支持，包括key和value;</p>
</blockquote>
<blockquote>
<p>Parcelable:所有实现了Parcelable接口的对象;</p>
</blockquote>
<blockquote>
<p>AIDL:所有的AIDL接口本身也可以在AIDL文件中使用。</p>
</blockquote>
<p>以上6种数据类型就是AIDL所支持的所有类型，其中自定义的Parcelable对象和AIDL对象必须要显式import进来，不管它们是否和当前的AIDL文件位于同一个包内。</p>
<p>如果AIDL文件中用到了自定义的Parcelable对象，那么必须新建一个和它同名的AIDL文件，并在其中声明它为Parcelable类型。</p>
<p>AIDL中除了基本数据类型，其它类型的参数必须标上方向：in、out或者inout，in表示输入型参数，out表示输出型参数，inout表示输入输出型参数。</p>
<p>AIDL接口只支持方法，不支持声明静态常量。</p>
<p>为了方便AIDL开发，建议把所有和AIDL相关的类和文件全部放入同一个包中。AIDL的包结构在服务端和客户端要保持一致，否则运行会出错。这是因为客户端需要反序列化服务端中和AIDL接口相关的所有类，如果类的完整路径不一样的话，就无法成功反序列化，程序也无法正常运行。</p>
<p>CopyOnWriteArrayList支持并发读/写。</p>
<p>RemoteCallbackList是系统专门提供的用于删除跨进程listener的接口。RemoteCallbackList是一个泛型，支持管理任意的AIDL接口。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteCallbackList</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">IInterface</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在它的内部有一个Map结构专门用来保存所有的AIDL回调，这个Map的key是IBinder类型，value是Callback类型。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayMap&lt;IBinder,Callback&gt; mCallbacks = <span class="keyword">new</span> ArrayMap&lt;IBinder,Callback&gt;();</span><br></pre></td></tr></table></figure></div>

<p>其中Callback封装了真正的远程listener。当客户端注册listener的时候，它会把这个listener的信息存入mCallbacks中，其中Key和value分别通过下面的方式获得：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IBinder key = listener.asBinder();</span><br><span class="line">Callback value = <span class="keyword">new</span> Callback(listener,cookie);</span><br></pre></td></tr></table></figure></div>

<p>当客户端解注册的时候，只要遍历服务端所有的listener,找出那个和解注册listener具有相同Binder对象的服务端listener并把它删除就可以了。当客户端进程终止后，RemoteCallbackList能够自动移除客户端所注册的listener。RemoteCallbackList内部自动实现了线程同步的功能，所以使用它来注册和解注册时，不需要做额外的线程同步工作。</p>
<p>使用RemoteCallbackList,有一点需要注意。我们无法像操作List一样去操作它，尽管它的名字中也带个List，但是它并不是一个List。遍历RemoteCallbackList，必须要按照下面的方式进行，其中beginBroadcast和finishBroadcast必须配对使用，哪怕我们仅仅是想要获取RemoteCallbackList的元素个数。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">final</span> <span class="keyword">int</span> N = mListenerList.beginBroadcast();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;	</span><br><span class="line">	IOnNewBookArrivedListener l = mListenerList.getBroadcastItem(i);</span><br><span class="line">	<span class="keyword">if</span>(l!=<span class="keyword">null</span>)&#123;</span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">mListenerList.finishBroadcast();</span><br></pre></td></tr></table></figure></div>

<p>AIDL中使用权限验证功能</p>
<blockquote>
<p>第一种方法：在onBind中进行验证，验证不通过就直接返回null。可以使用permission验证这种验证方式。先在AndroidMenifest中声明所需的权限。</p>
</blockquote>
<blockquote>
<p>定义权限后，就可以在Service的onBind方法做权限验证。</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> check = checkCallingOrSelfPermission(<span class="string">"xx.xx.xx"</span>);</span><br><span class="line">	<span class="keyword">if</span>(check==PackageManager.PERMISSION_DENIED)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> mBinder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>第二种方法：可以在服务端的onTransact中进行权限验证，如果验证失败，就直接返回false,这样服务端就不会终止执行AIDL中的方法从而达到保护服务端的效果。可以验证permission,也可以验证Uid和Pid。</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code,Parcel data,Parcel reply,<span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> RemoteException</span>&#123;</span><br><span class="line">	<span class="keyword">int</span> check = checkCallingOrSelfPermission(<span class="string">"xx.xx.xx"</span>);</span><br><span class="line">	<span class="keyword">if</span>(check==PackageManager.PERMISSION_DENIED)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	String packageName = <span class="keyword">null</span>;</span><br><span class="line">	String[] packages = getPackageManager().getPackgesForUid(getCallingUid());</span><br><span class="line">	<span class="keyword">if</span>(packages!=<span class="keyword">null</span>&amp;&amp;packages.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		packageName = packages[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!packageName.startWith(<span class="string">"xx.xx"</span>))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code,data,reply,flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>使用ContentProvider</li>
</ul>
<blockquote>
<p>ContentProvider的onCreate方法运行在主线程，其它query、getType、insert、delete、update方法运行在Binder线程池中。需要注意，query、update、insert、delete四大方法存在多线程并发访问，因此方法内部要做好线程同步。</p>
</blockquote>
<ul>
<li>使用Socket</li>
</ul>
]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>IPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Activity的生命周期和启动模式</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/Activity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Activity的生命周期和启动模式"><a href="#Activity的生命周期和启动模式" class="headerlink" title="Activity的生命周期和启动模式"></a>Activity的生命周期和启动模式</h1><h2 id="1、Activity的生命周期"><a href="#1、Activity的生命周期" class="headerlink" title="1、Activity的生命周期"></a>1、Activity的生命周期</h2><h3 id="1-1、典型情况下的生命周期"><a href="#1-1、典型情况下的生命周期" class="headerlink" title="1.1、典型情况下的生命周期"></a>1.1、典型情况下的生命周期</h3><blockquote>
<p>在有用户参与的情况下，Activity所经过的生命周期的改变。</p>
</blockquote>
<p><strong>Activity会经历如下生命周期:</strong></p>
<p>onCreate-onRestart-onStart-onResume-onPause-onStop-onDestroy</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="Activity生命周期" class="fancybox"><img alt="Activity生命周期" data-src="/images/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" src="/img/loading.gif" class="lazyload" title="Activity生命周期"></a></p>
<h3 id="1-2、异常情况下的生命周期"><a href="#1-2、异常情况下的生命周期" class="headerlink" title="1.2、异常情况下的生命周期"></a>1.2、异常情况下的生命周期</h3><blockquote>
<p>Activity被系统回收或者由于当前设备的Configuration发生改变从而导致Activity被销毁重建。</p>
</blockquote>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="异常情况下的Activity的重建过程.png" class="fancybox"><img alt="异常情况下的Activity的重建过程.png" data-src="/images/%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84Activity%E7%9A%84%E9%87%8D%E5%BB%BA%E8%BF%87%E7%A8%8B.png" src="/img/loading.gif" class="lazyload" title="异常情况下的Activity的重建过程.png"></a></p>
<h4 id="1-2-1资源相关的系统配置发生改变导致Activity被杀死并重新创建"><a href="#1-2-1资源相关的系统配置发生改变导致Activity被杀死并重新创建" class="headerlink" title="1.2.1资源相关的系统配置发生改变导致Activity被杀死并重新创建"></a>1.2.1资源相关的系统配置发生改变导致Activity被杀死并重新创建</h4><p>系统只在Activity异常终止的时候才会调用onSaveInstanceState和onRestoreInstanceState来存储和恢复数据，其它情况不会触发这个过程。</p>
<h4 id="1-2-2资源内存不足导致低优先级的Activity被杀死"><a href="#1-2-2资源内存不足导致低优先级的Activity被杀死" class="headerlink" title="1.2.2资源内存不足导致低优先级的Activity被杀死"></a>1.2.2资源内存不足导致低优先级的Activity被杀死</h4><p>Activity优先级:</p>
<p>1、前台Activity–正在和用户交互的Activity，优先级最高。</p>
<p>2、可见但非前台Activity–Activity可见但位于后台无法和用户直接交互，如Activity中弹出一个对话框。</p>
<p>3、后台Activity–已经被暂停的Activity，比如执行了onStop，优先级最低。</p>
<blockquote>
<p>当系统内存不足时，系统会按照上述优先级去杀死目标Activity所在的进程，并在后续通过onSaveInstanceState和onRestoreInstanceState来存储和恢复数据。如果一个进程中没有四大组件在执行，那么这个进程将很快被系统杀死，因此，一些后台工作不适合脱离四大组件而独立运行在后台中，这样进程容易被杀死。比较好的方法是将后台工作放入Service中从而保证进程有一定的优先级，这样就不会轻易被系统杀死。</p>
</blockquote>
<h2 id="2、Activity的启动模式"><a href="#2、Activity的启动模式" class="headerlink" title="2、Activity的启动模式"></a>2、Activity的启动模式</h2><p>1、standard:标准模式。</p>
<blockquote>
<p>每次启动一个Activity都会重新创建一个新的实例，不管这个实例是否已经存在。</p>
</blockquote>
<p>2、singleTop:栈顶复用模式。</p>
<blockquote>
<p>如果新Activity已经位于任务栈的栈顶，那么此Activity不会被重新创建，同时它的onNewIntent方法会被回调，通过此方法的参数，我们可以取出当前请求的信息。此时，Activity的onCreate、onStart不会被系统调用，因为它并没有发生改变。如果新Activity的实例已存在但不是位于栈顶，那么新的Activity仍然会重新创建。</p>
</blockquote>
<p>3、singleTask:栈内复用模式。</p>
<blockquote>
<p>这是一种单实例模式。在这种模式下，只要Activity在一个栈中存在，那么多次启动此Activity都不会重新创建实例，和singleTop一样，系统也会回调onNewIntent。当一个具有singleTask模式的Activity请求启动后，比如Activity A,系统首先会寻找是否存在A想要的任务栈，如果不存在，就重新创建一个任务栈，然后创建A的实例后把A放入栈中。如果存在A所需的任务栈，这时要看A是否在栈中有实例存在，如果有实例存在，那么系统会把A调到栈顶并调用它的onNewIntent方法，如果实例不存在，就创建A的实例并把A放入栈中。singleTask默认具体有clearTop的效果，会导致栈内所有在A上的Activity全部出栈。</p>
</blockquote>
<blockquote>
<p>TaskAffinity:任务相关性。这个参数标识了一个Activity所需要的任务栈的名字。默认情况下，所有Activity所需的任务栈的名字为应用的包名。我们也可以为每个Activity都单独指定TaskAffinity属性，这个属性值必须不能和包名相同，否则就相当于没有指定。TaskAffinity属性主要和singleTask启动模式或者allowTaskReparenting属性配对使用，在其它情况下没有意义。</p>
</blockquote>
<p>4、singleInstance:单实例模式。</p>
<blockquote>
<p>这是一种加强的singleTask模式，它除了具有singleTask模式的所有特性外，还加强了一点，那就是具有此种模式的Activity只能单独地位于一个任务栈中。</p>
</blockquote>
<p>可以通过AndroidMenifest为Activity指定启动模式。或者通过Intent中设置标志位来为Activity指定启动模式。这两种方式都可以为Activity指定启动模式，但是二者还是有区别。首先，优先级上，第二种方式的优先级要高于第一种；其它，上述两种方式在限定范围上有所不同，第一种方式无法直接为Activity设定FLAG_ACTIVITY_CLEAR_TOP标识，而第二种方式无法为Activity指定singleInstance模式。</p>
<h2 id="3、IntentFilter的匹配规则"><a href="#3、IntentFilter的匹配规则" class="headerlink" title="3、IntentFilter的匹配规则"></a>3、IntentFilter的匹配规则</h2><blockquote>
<p>启动Activity分为两种：显示调用和隐式调用。显示调用需要明确地指定启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确地指定组件信息。隐式调用需要Intent能够匹配目标组件的IntentFilter所设置的过滤信息，如果不匹配将无法启动目标Activity。IntentFilter中的过滤信息有action、category、data。</p>
</blockquote>
<blockquote>
<p>为了匹配过滤列表，需要同时匹配过滤列表中的action、category、data信息，否则匹配失败。只有一个Intent同时匹配action类别、category类别、data类别才算完全匹配，只有完全匹配才能启动目标Activity。一个Activity中可以有多个intent-filter，一个Intent只要能匹配任务一组intent-filter即可成功启动对应的Activity。</p>
</blockquote>
<h3 id="1、action的匹配规则"><a href="#1、action的匹配规则" class="headerlink" title="1、action的匹配规则"></a>1、action的匹配规则</h3><blockquote>
<p>一个过滤规则中可以有多个action，那么只要Intent中的action能够和过滤规则中的任务一个action相同即可匹配成功。action的匹配要求Intent中的action存在且必须和过滤规则中的其中一个aciton相同。</p>
</blockquote>
<h3 id="2、category的匹配规则"><a href="#2、category的匹配规则" class="headerlink" title="2、category的匹配规则"></a>2、category的匹配规则</h3><blockquote>
<p>如果Intent中含有category，那么所有的category必须和过滤规则中的其它一个category相同。Intent中可以没有category,如果没有category的话，系统在调用startActivity或者startActivityForResult的时候会默认为Intent加上”android.intent.category.DEFAULT”这个category。同时，为了我们的activity能够接收隐式调用，就必须在intent-filter中指定”android.intent.category.DEFAULT”这个category。</p>
</blockquote>
<h3 id="3、data的匹配规则"><a href="#3、data的匹配规则" class="headerlink" title="3、data的匹配规则"></a>3、data的匹配规则</h3><blockquote>
<p>data由两部分组成，mineType和URI。mimeType指媒体类型，比如image/jpeg、audio/mpeg4-generic和video/*等，可以表示图片、文本、视频等不同的媒体格式。而URI包含的数据就比较多了，下面是URI的结构：</p>
<p>scheme://host:port/path|pathPrefix|pathPattern</p>
<p>具体的例子如：</p>
<p><a href="http://www.baidu.com:80/search/info" target="_blank" rel="noopener">http://www.baidu.com:80/search/info</a></p>
<p>content://com.example.project:200/folder/subfolder/etc</p>
</blockquote>
<p>Scheme:URI的模式，比如http、file、content等。如果URI中没有指定scheme，那么整个URI的其它参数无效，也意味着URI是无效的。</p>
<p>Host:URI的主机名。比如:<a href="http://www.baidu.com。如果URI中没有指定host，那么整个URI的其它参数无效，也意味着URI是无效的。" target="_blank" rel="noopener">www.baidu.com。如果URI中没有指定host，那么整个URI的其它参数无效，也意味着URI是无效的。</a></p>
<p>Port：URI中的端口号，如80，仅当URI中指定了scheme和host参数，port参数才有意义。</p>
<p>Path、pathPattern、pathPrefix:这三个参数表述路径信息，其中path表示完整的路径信息；pathPattern也表示完整的路径信息，但是它里面可以包含通配符”*”,”*”表示0个或多个任意字符，需要注意的是，由于正则表达式的规则，如果想表示真实的字符串，那么”*”要写成”\*”,”&quot;要写在”\\“;pathPrefix表示路径的前缀信息。</p>
<blockquote>
<p>如果要为Intent指定完整的data，必须要调用setDataAndType方法。不能先调用setData再调用setType。因为这两个方法彼此会清除对方的值。</p>
</blockquote>
<blockquote>
<p>当我们通过隐式方式启动一个Activity的时候，可以做一下判断，看是否有Activity能够匹配我们的隐式Intent。如果不做判断就有可能出现错误。判断方法有两种：采用PackageManager的resolveActivity方式或者Intent的resolveActivity方法，如果找不到匹配的Activity会返回null。另外，PackageManager还提供了queryIntentActivities方法，这个方法和resolveActivity方法不同的是：它不是返回最佳匹配的Activity信息，而是返回所有成功的Activity信息。</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;ResolveInfo&gt; <span class="title">queryIntentActivities</span><span class="params">(Intent intent,<span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ResolveInfo <span class="title">resolveActivity</span><span class="params">(Intent intent,<span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure></div>

<p>上面两个方法的第二个参数，需要使用MATCH_DEFAULT_ONLY标记位。这个标记的含义是仅仅匹配那些在intent-filter中声明了<category android:name="android.intent.category.DEFAULT">这个category的Activity.使用这个标记位的意义在于，只要上述两个方法不返回null,那么startActivity一定可以成功。</category></p>
]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>Activity</tag>
        <tag>生命周期</tag>
        <tag>启动模式</tag>
      </tags>
  </entry>
  <entry>
    <title>View的事件体系</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="View的事件体系"><a href="#View的事件体系" class="headerlink" title="View的事件体系"></a>View的事件体系</h1><h2 id="1、View基础知识"><a href="#1、View基础知识" class="headerlink" title="1、View基础知识"></a>1、View基础知识</h2><h3 id="1-1、什么是View"><a href="#1-1、什么是View" class="headerlink" title="1.1、什么是View"></a>1.1、什么是View</h3><p>View是Android中所有控件的基类。View是一种界面层的控件的一种抽象，代表了一个控件。除了View,还有ViewGroup，内部包含了许多个控件，即一组View。</p>
<h3 id="1-2、View的位置参数"><a href="#1-2、View的位置参数" class="headerlink" title="1.2、View的位置参数"></a>1.2、View的位置参数</h3><p>View的位置主要由它的四个顶点来决定，分别对应于View的四个属性：top、left、right、bottom，其中top是左上角纵坐标，left是左上角横坐标，right是右下角横坐标，bottom是右下角纵坐标。这些坐标都是相对于View的父容器来说的。是一种相对坐标。</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="View的坐标位置和父容器的关系" class="fancybox"><img alt="View的坐标位置和父容器的关系" data-src="/images/View%E7%9A%84%E5%9D%90%E6%A0%87%E4%BD%8D%E7%BD%AE%E5%92%8C%E7%88%B6%E5%AE%B9%E5%99%A8%E7%9A%84%E5%85%B3%E7%B3%BB.png" src="/img/loading.gif" class="lazyload" title="View的坐标位置和父容器的关系"></a></p>
<blockquote>
<p>width = right - left</p>
<p>height = bottom - top</p>
</blockquote>
<p>获取这四个参数的方法:</p>
<p>left=getLeft();</p>
<p>right=getRight();</p>
<p>top=getTop();</p>
<p>bottom=getBottom();</p>
<p>Android3.0开始，View增加了额外的几个参数:x、y、translationX和translationY,其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于父容器的偏移量。这几个参数也是相对于父容器的坐标，并且translationX和translationY的默认值为0.</p>
<blockquote>
<p>x=left+translationX</p>
</blockquote>
<blockquote>
<p>y=top+translationY</p>
</blockquote>
<p>View在平移的过程中，top和left表示的是原始左上角的位置信息，其值并不会发生改变，此时发生改变的是x、y、transaltionX和translationY这四个参数。</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="ScrollX和ScrollY" class="fancybox"><img alt="ScrollX和ScrollY" data-src="/images/ScrollX%E5%92%8CScrollY.png" src="/img/loading.gif" class="lazyload" title="ScrollX和ScrollY"></a></p>
<h3 id="1-3、MotionEvent和ToushSlop"><a href="#1-3、MotionEvent和ToushSlop" class="headerlink" title="1.3、MotionEvent和ToushSlop"></a>1.3、MotionEvent和ToushSlop</h3><p><strong>MotionEvent</strong></p>
<p>在手指接触屏幕后产生的一系列事件中，典型的事件类型有如下几种:</p>
<blockquote>
<p>ACTION_DOWN–手指刚接触屏幕；</p>
<p>ACTION_MOVE–手指在屏幕上移动；</p>
<p>ACTION_UP–手指从屏幕上松开的瞬间。</p>
</blockquote>
<p>通过MotionEvent可以获取点击事件发生的x和y坐标:getX/getY和getRawX/getRawY。getX/getY返回的是相对于当前View左上角的x和y坐标，而getRawX/getRawY返回的是相对于手机屏幕左上角的x和y坐标。</p>
<p><strong>TouchSlop</strong></p>
<p>TouchSlop是系统所能识别出来的被认为是滑动的最小距离。这是一个常量，和设备有关，不同设备上这个值可能是不同的，可通过如下方式获取这个常量：ViewConfiguration.get(getContext().getScaledTouchSlop())。这个常量定义在frameworks/base/core/res/res/values/config.xml文件中，”config_viewConfigurationTouchSlop”对应的就是这个常量的定义。</p>
<h3 id="1-4、VelocityTracker、GestureDetector和Scroller"><a href="#1-4、VelocityTracker、GestureDetector和Scroller" class="headerlink" title="1.4、VelocityTracker、GestureDetector和Scroller"></a>1.4、VelocityTracker、GestureDetector和Scroller</h3><p><strong>VelocityTracker</strong></p>
<p>速度追踪，用于追踪手指在滑动过程中的速度，包括水平和竖直方向的速度。使用方法如下：</p>
<p>首先，在View的onTouchEvent方法中追踪当前单击事件的速度：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">VelocityTracker velocityTracker = VelocityTracker.obtain();</span><br><span class="line">velocityTracker.addMovement(event);</span><br></pre></td></tr></table></figure></div>

<p>接着，当我们先知道当前的滑动速度 时，可用如下方式来获得当前的速度:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">velocityTracker.computeCurrentVelocity(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">int</span> xVelocity = (<span class="keyword">int</span>) velocityTracker.getXVelocity();</span><br><span class="line"><span class="keyword">int</span> yVelocity = (<span class="keyword">int</span>) velocityTracker.getYVelocity();</span><br></pre></td></tr></table></figure></div>

<p>最后，当不需要使用它的时候，需要调用clear方法来重置并回收内存：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">velocityTracker.clear();</span><br><span class="line">velocityTracker.recycle();</span><br></pre></td></tr></table></figure></div>

<p>速度=(终点位置-起点位置)/时间段</p>
<p>速度可以为负数，当手指从右往左滑时，水平方向速度即为负值。当手指从左往右滑时，水平方向速度即为正值。</p>
<p><strong>GestureDetector</strong></p>
<p>手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。使用方法如下：</p>
<p>首先，需要创建一个GestureDetector对象并实现OnGestureListener接口，根据需要还可以实现OnDoubleTapListener从而能够监听双击行为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   GestureDetector mGestureDetector = <span class="keyword">new</span> GestureDetector(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//解决长按屏幕后无法手动的问题</span></span><br><span class="line">mGestureDetector.setIsLongpressEnabled(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></div>

<p>接着，接管目标View的onTouchEvent方法，在待监听的onTouchEvent方法中添加如下实现：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> consume = mGestureDetector.onTouchEvent(event);</span><br><span class="line"><span class="keyword">return</span> consume;</span><br></pre></td></tr></table></figure></div>

<p>如果只是监听滑动相关，可以自己在onTouchEvent中实现，如果要监听双击行为，可以使用GestureDetector。</p>
<p><strong>Scroller</strong><br>使用View的scrollTo/scrollBy方法来进行滑动时，其过程是瞬间完成的，这个没有过度效果的滑动，用户体验不好。这个时候可以使用Scroller来实现有过渡效果的滑动，其过程不是瞬间完成，而是在一定时间间隔内完成的。Scroller本身无法让View弹性滑动，它需要和View的computeScroll方法配合使用才能共同完成这个功能。使用方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   Scroller mScroller = <span class="keyword">new</span> Scroller(mContext);</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓慢滚到到指定位置</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">smoothScrollTo</span><span class="params">(<span class="keyword">int</span> destX,<span class="keyword">int</span> destY)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> scrollX = getScrollX();</span><br><span class="line">	<span class="keyword">int</span> delta = destX-scrollX;</span><br><span class="line">	<span class="comment">//1000ms内滑向destX,效果就是慢慢滑动</span></span><br><span class="line">	mScroller.startScroll(scrollX,<span class="number">0</span>,delta,<span class="number">0</span>,<span class="number">1000</span>);</span><br><span class="line">	invalidate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(mScroller.computeScrollOffset())&#123;</span><br><span class="line">		scrollTo(mScroller.getCurrX(),mScroller.getCurrY());</span><br><span class="line">		postInvalidate();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2、View的滑动"><a href="#2、View的滑动" class="headerlink" title="2、View的滑动"></a>2、View的滑动</h2><p>通过三种方式可以实现View的滑动：第一种是通过View本身提供的scrollTo/scrollBy方法来实现滑动；第二种是通过动画给View施加平移效果来实现滑动；第三种是改变View的LayoutParams使用View重新布局从而实现滑动。</p>
<h3 id="2-1、使用scrollTo-scrollBy"><a href="#2-1、使用scrollTo-scrollBy" class="headerlink" title="2.1、使用scrollTo/scrollBy"></a>2.1、使用scrollTo/scrollBy</h3><p>scrollBy实际也是调用了scrollTo方法，它实现了基于当前位置的相对滑动，而scrollTo实现了基于所传递参数的绝对滑动。在滑动过程中，mScrollX的值总是等于View的左边缘和View内容左边缘在水平方向的距离,而mScrollY的值总等于View的上边缘和View内容上边缘在竖直方向的距离。scrollTo和scrollBy只能改变View内容的位置而不能改变View在布局中的位置。mScrollX和mScrollY的单位为像素，并且当View左边缘在View内容左边缘的右边时，mScrollX为正值，反之为负值；当View上边缘在View内容上边缘的下边时，mScrollY为正值，反之为负值。换句话说，如果从左向右滑动，那么mScrollX为负值，反之为正值；如果从上往下滑动，那么mScrollY为负值，反之为正值。</p>
<h3 id="2-2、使用动画"><a href="#2-2、使用动画" class="headerlink" title="2.2、使用动画"></a>2.2、使用动画</h3><p>使用动画，主要就是操作View的translationX和translationY属性，既可以采用View动画，也可以采用属性动画。</p>
<p>View动画是对View的影像做操作，它并不能真正改变View的位置参数，包括宽/高，并且如果希望动画后的状态得以保留还必须将fillAfter属性设置为true,否则动画完成后其动画结果会消失，View会瞬间恢复到动画前的状态。使用属性动画不会存在上述问题。</p>
<h3 id="2-3、改变布局参数"><a href="#2-3、改变布局参数" class="headerlink" title="2.3、改变布局参数"></a>2.3、改变布局参数</h3><p>改变布局参数，即改变LayoutParams。简单示例如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MarginLayoutParams params = (MarginLayoutParams)mButton.getLayoutParams();</span><br><span class="line">params.width += <span class="number">100</span>;</span><br><span class="line">params.leftMargin += <span class="number">100</span>;</span><br><span class="line">mButton.requestLayout();</span><br><span class="line"><span class="comment">//或者mButton.setLayoutParams(params);</span></span><br></pre></td></tr></table></figure></div>

<p><strong>各种滑动方式的对比</strong></p>
<blockquote>
<p>scrollTo/scrollBy:View提供的原生方法，可以比较方便地实现滑动效果并且不影响内部元素的单击事件。缺点：只能滑动View的内容，并不能滑动View本身。</p>
<p>动画:如果是Android3.0以上并采用属性动画，那么这种方式没有明显的缺点；如果是使用View动画或者在Android3.0以下使用属性动画，均不能改变View本身的属性。如果动画元素不需要响应用户的交互，那么可以用动画来做滑动，否则不太适合。一些复杂的效果必须通过动画才能实现。</p>
<p>改变布局:使用起来麻烦些，没有明显的缺点。适用于一些具有交互性的View。</p>
</blockquote>
<h2 id="3、弹性滑动"><a href="#3、弹性滑动" class="headerlink" title="3、弹性滑动"></a>3、弹性滑动</h2><h3 id="3-1、使用Scroller"><a href="#3-1、使用Scroller" class="headerlink" title="3.1、使用Scroller"></a>3.1、使用Scroller</h3><p>Scroller本身并不能实现View的滑动，它需要配合View的computeScroll方法才能完成弹性滑动的效果，它不断地让View重绘，而每一次重绘距离滑动起始时间会有一个时间间隔，通过这个时间间隔Scroller就可以得出View当前的滑动位置，知道了滑动位置就可以通过scrollTo方法来完成View的滑动。View的每一次重绘都会导致View进行小幅度的滑动，而多次小幅度滑动就组成了弹性滑动，这就是Scroller的工作机制。</p>
<h3 id="3-2、通过动画"><a href="#3-2、通过动画" class="headerlink" title="3.2、通过动画"></a>3.2、通过动画</h3><h3 id="3-3、使用延时策略"><a href="#3-3、使用延时策略" class="headerlink" title="3.3、使用延时策略"></a>3.3、使用延时策略</h3><p>核心思想是通过发送一系统延时消息从而达到一种渐进式的效果。具体来说，可以使用Handler或View的postDelayed方式，也可以使用纯种的sleep方法。</p>
<h2 id="4、View的事件分发机制"><a href="#4、View的事件分发机制" class="headerlink" title="4、View的事件分发机制"></a>4、View的事件分发机制</h2><h3 id="4-1、点击事件的传递规则"><a href="#4-1、点击事件的传递规则" class="headerlink" title="4.1、点击事件的传递规则"></a>4.1、点击事件的传递规则</h3><p>所谓点击事件的事件分发，其实就是对MotionEvent事件的分发过程，即当一个Motion产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。点击事件的分发过程由三个很重要的方法来共同完成：dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent。</p>
<p><strong>public boolean dispatchTouchEvent(MotionEvent ev)</strong></p>
<p>用来进行事件的分发。如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和下级View的dispatchTouchEvent方法的影响，表示是否消耗当前事件。</p>
<p><strong>public boolean onInterceptTouchEvent(MotionEvent event)</strong></p>
<p>在上述方法内部调用，用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件。</p>
<p><strong>public boolean onTouchEvent(MotionEvent event)</strong></p>
<p>在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件。</p>
<p>上面三个方法的关系可以用以下伪代码表示:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> consume = <span class="keyword">false</span>;</span><br><span class="line">	<span class="keyword">if</span>(onInterceptTouchEvent(event))&#123;</span><br><span class="line">		consume = onTouchEvent(event);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		consume = child.dispatchTouchEvent(event);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> consume;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过上述伪代码，可以大致了解点击事件的传递规则：对于一个根ViewGroup来说，点击事件产生后，首先会传递给它，这时它的dispatchTouchEvent就会被调用，如果这个ViewGroup的onInterceptTouchEvent方法返回true就表示它要拦截当前事件，接着事件就会交给这个ViewGroup处理，即它的onTouchEvent方法就会被调用；如果这个ViewGroup的onInterceptTouchEvent方法返回false，就表示它不拦截当前事件，这时当前事件就会继续传递给它的子元素，接着子元素的dispatchTouchEvent方法就会被调用，如此反复直到事件被最终处理。</p>
<p>当一个View需要处理事件时，如果它设置了OnTouchListener，那么OnTouchListener中的onTouch方法会被回调。这时事件如何处理还要看onTouch的返回值，如果返回false,则当前View的onTouchEvent方法会被调用；如果返回true,那么onTouchEvent方法将不会被调用。由此可见，给View设置的OnTouchListener,其优先级比onTouchEvent要高。在onTouchEvent方法中，如果当前设置的有OnClickListener，那么它的onClick方法会被调用。可以看出，平时我们常用的OnClickListener，其优先级最低，即处于事件传递的尾端。</p>
<p>当一个点击事件产生后，它的传递过程遵循如下顺序：Activity-&gt;Window-&gt;View，即事件总是先传递给Activity,Activity再传递给Window，最后Window再传递给顶级View。顶级View接收到事件后，就会按照事件分发机制去分发事件。如果一个View的onTouchEvent返回false,那么父容器的onTouchEvent将会被调用，依此类推。如果所有元素都不处理这个事件，那么这个事件将会最终传递给Activity处理，即Activity的onTouchEvent方法会被调用。</p>
<p>关于事件传递的机制，有以下结论：</p>
<blockquote>
<p>1、同一个事件序列是指从手指接触屏幕的那一刻起，到手指屏幕的那一刻结束，在这个过程中所产生的一系统事件，这个事件序列以down事件开始，中间含有数量不定的move事件，最终以up事件结束。</p>
<p>2、正常情况下，一个事件序列只能被一个View拦截且消耗。因为一旦一个元素拦截了某些事件，那么同一个事件序列的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个View同时处理，但是通过特殊手段可以做到，比如一个View将本该自己处理的事件通过onTouchEvent强行传递给其它View处理。</p>
<p>3、某个View一旦决定拦截，那么这一个事件序列都只能由它来处理（如果事件序列能够传递给它的话），并且它的onInterceptTouchEvent不会再被调用。</p>
<p>4、某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvent返回了false),那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将重新交由它的父元素去处理，即父元素的onTouchEvent会被调用。</p>
<p>5、如果View不消耗除ACTION_DOWN以外的其它事件，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以持续收到后续事件，最终这些消失的点击事件会传递给Activity处理。</p>
<p>6、ViewGroup默认不拦截任何事件。</p>
<p>7、View没有onInterceptTouchEvent方法，一旦有点击事件传递给它，它的onTouchEvent方法会被调用。</p>
<p>8、View的onTouchEvent默认会消耗事件(返回true)，除非它是不可点击的(clickable和longClickable同时为false)。View的longClickable属性默认都为false,clickable属性要分情况，比如Button的clickable属性默认为true,而TextView的clickable属性默认为false。</p>
<p>9、View的enable属性不影响onTouchEvent的默认返回值。哪怕一个View是disable状态的，只要它的clickable或者longClickable有一个true,那么它的onTouchEvent返回true。</p>
<p>10、onClick会发生的前提是当前View是可点击的，并且收到了down和up的事件。</p>
<p>11、事件传递过程是由外向内的，即事件总是先传递给父元素，然后再由父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN事件除外。</p>
</blockquote>
<h3 id="4-2、事件分发的源码解析"><a href="#4-2、事件分发的源码解析" class="headerlink" title="4.2、事件分发的源码解析"></a>4.2、事件分发的源码解析</h3><h4 id="4-2-1、Activity对点击事件的分发过程"><a href="#4-2-1、Activity对点击事件的分发过程" class="headerlink" title="4.2.1、Activity对点击事件的分发过程"></a>4.2.1、Activity对点击事件的分发过程</h4><p>点击事件用MotionEvent来表示，当一个点击操作发生时，事件最先传递给当前Activity，由Activity的dispatchTouchEvent来进行事件派发，具体工作是由Activity内部的Window来完成的。Window会将事件传递给decor View,decor view一般就是当前界面的底层容器，即setContentView所设置的View的父容器,通过Activity.getWindow().getDecorView()可以获得。Activity的dispatchTouchEvent方法如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(event.getAction()==MotionEvent.ACTION_DOWN)&#123;</span><br><span class="line">		onUserInteraction();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(getWindow().superDispatchTouchEvent(event))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>首先，事件开始交给Activity所附属的Window进行分发，如果返回true，整个事件循环就结束了，返回false意味着事件没人处理，所有View的onTouchEvent都返回了false,那么Activity的onTouchEvent就会被调用。</p>
<p>接下来看Window是如何将事件传递给ViewGroup的。通过源码可以知道，Window是个抽象类，而Window的superDispatchTouchEvent方法也是个抽象方法，因此必须找到Window的实现类才行。<strong>window的唯一实现类是PhoneWindow</strong>。phoneWindow的superDispatchTouchEvent方法如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> mDecor.superDispatchTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>PhoneWindow将事件直接传递给了DecorView。通过((ViewGroup)getWindow().getDecorView().findViewById(android.R.id.content)).getChildAt(0)这种方式就可以获取Activity所设置的View,这个mDecor显示就是getWindow().getDecorView()返回的View,而我们通过setContentView设置的View是它的一个子View。</p>
<h4 id="4-2-1、顶级View对点击事件的分发过程"><a href="#4-2-1、顶级View对点击事件的分发过程" class="headerlink" title="4.2.1、顶级View对点击事件的分发过程"></a>4.2.1、顶级View对点击事件的分发过程</h4><p>点击事件达到顶级View(一般是一个ViewGroup)以后，会调用ViewGroup的dispatchTouchEvent方法，然后的逻辑是这样的：如果顶级ViewGroup拦截事件即onInterceptTouchEvent返回true，则事件由ViewGroup处理，这时如果ViewGroup的mOnTouchListener被设置，则onTouch会被调用，否则onTouchEvent会被调用，也就是说，如果都提供的话，onTouch会屏蔽掉onTouchEvent。在onTouchEvent中，如果设置了mOnClickListener，则onClick会被调用。如果顶级ViewGroup不拦截事件，则事件会传递给它所在的点击事件链上的子View.这时子View的dispatchTouchEvent会被调用 。到此为止，事件已经从顶级View传递给了下一层View。接下来的传递过程和顶级View是一致的，如此循环，完成整个事件的分发。</p>
<p><strong>ViewGroup对点击事件的分发过程：</strong></p>
<p>主要实现在ViewGroup的dispatchTouchEvent方法中。描述了当前View是否拦截点击事件的逻辑。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;</span><br><span class="line"><span class="keyword">if</span>(actionMasked==MotionEvent.ACTION_DOWN||mFirstTouchTarget!=<span class="keyword">null</span>)&#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">boolean</span> disallowIntercept = (mGroupFlags&amp;FLAG_DISALLOW_INTERCEPT)!=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(!disallowIntercept)&#123;</span><br><span class="line">		intercepted=onInterceptTouchEvent(event);</span><br><span class="line">		event.setAction(action);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		intercepted = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	intercepted = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>ViewGroup在如下两种情况下会判断是否拦截当前事件：事件类型为ACTION_DOWN或者mFirstTouchTarget!=null。当事件由ViewGroup的子元素成功处理时，mFirstTouchTarget会被赋值并指向子元素，即：当ViewGroup不拦截事件并将事件交由子元素处理时，mFirstTouchTarget!=null。反过来，一旦事件由当前ViewGroup拦截时，mFirstTouchTarget！=null就不成立。那么当ACTION_MOVE和ACTION_UP事件到来时，由于(actionMasked==MotionEvent.ACTION_DOWN||mFirstTouchTarget!=null)这个条件为false，将导致ViewGroupr onInterceptTouchEvent不会再被调用，并且同一序列中的其他事件都会默认交给它处理。</p>
<p>还有种特殊情况，那就是FLAG_DISALLOW_INTERCEPT标记位，这个标记位是通过requestDisallowInterceptTouchEvent方法来设置的，一般用于子View中。这个标记一旦设置后，ViewGroup将无法拦截除了ACTION_DOWN以外的其它点击事件。总结起来两点:第一点，onInterceptTouchEvent方法并不是每次事件都被调用，如果想提前处理所有的点击事件，要选择dispatchTouchEvent方法，只有这个方法确保每次会调用，当然前提是事件能够传递到当前的ViewGroup；另外一点，FLAG_DISALLOW_INTERCEPT标记位的作用，可以在滑动冲突时，可以用这种方法去解决问题。</p>
<p>首先遍历ViewGroup的所有子元素，然后判断子元素是否能够接收点击事件。是否能够接收点击事件，主要由两点来衡量：子元素是否在播动画和点击事件的坐标是否落在子元素的区域内。如果子元素满足这两个条件，那么事件就会传递给它来处理。</p>
<p><strong>View的事件处理:</strong></p>
<p>首先判断有没有设置OnTouchListener，如果OnTouchListener中的onTouch方法返回true,那么onTouchEvent就不会被调用，可见OnTouchListener的优先级高于onTouchEvent，这样的好处是方便在外界处理点击事件。</p>
<p>接下来，看onTouchEvent的实现。当View处于不可用状态下时，照样会消耗点击事件。如果View设置有代理，还会执行TouchDelegate的onTouchEvent方法。</p>
<p>通过setClickable和setLongClickable会分别改变View的CLICKABLE和LONG_CLICKABLE属性。setOnClickListener会自动将View的CLICKABLE设为true,setOnLongClickListener会自动将View的LONG_CLICKABLE设为true。</p>
<h2 id="5、View的滑动冲突"><a href="#5、View的滑动冲突" class="headerlink" title="5、View的滑动冲突"></a>5、View的滑动冲突</h2><h3 id="5-1、常见的滑动冲突场景"><a href="#5-1、常见的滑动冲突场景" class="headerlink" title="5.1、常见的滑动冲突场景"></a>5.1、常见的滑动冲突场景</h3><p>常见滑动冲突场景可以简单分为如下三种：</p>
<ul>
<li><p>场景1–外部滑动方向和内部滑动方向不一致</p>
</li>
<li><p>场景2–外部滑动方向和内部滑动方向一致</p>
</li>
<li><p>场景3–上面两种情况的嵌套</p>
</li>
</ul>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="03.滑动冲突的场景.png" class="fancybox"><img alt="03.滑动冲突的场景.png" data-src="https://upload-images.jianshu.io/upload_/images/3381990-7a840c64ca54d99a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" src="/img/loading.gif" class="lazyload" title="03.滑动冲突的场景.png"></a></p>
<h3 id="5-2、滑动冲突的处理规则"><a href="#5-2、滑动冲突的处理规则" class="headerlink" title="5.2、滑动冲突的处理规则"></a>5.2、滑动冲突的处理规则</h3><p>对于场景1，根据滑动是水平滑动还是竖直滑动来判断到底由谁来拦截事件。</p>
<p>对于场景2，根据业务规则来决定由谁拦截事件。</p>
<p>对于场景3，根据业务规则来决定由谁拦截事件。</p>
<h3 id="5-3、滑动冲突的解决方式"><a href="#5-3、滑动冲突的解决方式" class="headerlink" title="5.3、滑动冲突的解决方式"></a>5.3、滑动冲突的解决方式</h3><p><strong>1、外部拦截法</strong></p>
<p>点击事件都先经过父容器的拦截处理，如果父容器需要此事件就拦截，如果不需要此事件就不拦截，这样就可以解决滑动冲突的问题，这种方法比较符合点击事件的分发机制。外部拦截法需要重写父容器的onInterceptTouchEvent方法，在内部做相应的拦截即可。伪代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> intercepted = <span class="keyword">false</span>;</span><br><span class="line">	<span class="keyword">int</span> x = (<span class="keyword">int</span>)event.getX();</span><br><span class="line">	<span class="keyword">int</span> y = (<span class="keyword">int</span>)event.getY();</span><br><span class="line">	<span class="keyword">switch</span>(event.getAction())&#123;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_DOWN:&#123;</span><br><span class="line">			intercepted = <span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_MOVE:&#123;</span><br><span class="line">			<span class="keyword">if</span>(父容器需要当前的点击事件)&#123;</span><br><span class="line">				intercepted = <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				intercepted = <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_UP:&#123;</span><br><span class="line">			intercepted = <span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	mLastXIntercept = x;</span><br><span class="line">	mLastYIntercept = y;</span><br><span class="line">	<span class="keyword">return</span> intercepted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>2、内部拦截法</strong></p>
<p>内部拦截法是指父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件，就直接消耗掉，否则就交由父容器进行处理，这种方法和Android中的事件分发机制不一致，需要配合requestDisallowInterceptTouchEvent方法才能正常工作，作用起来较外部拦截法稍显复杂。我们需要重写子元素的dispathTouchEvent方法，伪代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> intercepted = <span class="keyword">false</span>;</span><br><span class="line">	<span class="keyword">int</span> x = (<span class="keyword">int</span>)event.getX();</span><br><span class="line">	<span class="keyword">int</span> y = (<span class="keyword">int</span>)event.getY();</span><br><span class="line">	<span class="keyword">switch</span>(event.getAction())&#123;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_DOWN:&#123;</span><br><span class="line">			parent.requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_MOVE:&#123;</span><br><span class="line">			<span class="keyword">int</span> deltaX = x - mLastX;</span><br><span class="line">			<span class="keyword">int</span> deltaY = y - mLastY;</span><br><span class="line">			<span class="keyword">if</span>(父容器需要当前的点击事件)&#123;</span><br><span class="line">				parent.requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_UP:&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	mLastX = x;</span><br><span class="line">	mLastY = y;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>除了子元素需要做处理以外，父元素也要默认拦截除了ACTION_DOWN以外的其它事件，这样当子元素调用parent.requestDisallowInterceptTouchEvent(false)方法时，父元素才能继续拦截所需的事件。父元素修改如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> action = event.getAction();</span><br><span class="line">	<span class="keyword">if</span>(action==MotionEvent.ACTION_DOWN)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>View</tag>
        <tag>事件</tag>
      </tags>
  </entry>
  <entry>
    <title>Drawable</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/Drawable/</url>
    <content><![CDATA[<h1 id="Drawable"><a href="#Drawable" class="headerlink" title="Drawable"></a>Drawable</h1><blockquote>
<p>Drawable表示的是一种可以在Canvas上进行绘制的抽象的概念。</p>
</blockquote>
<h2 id="1、Drawable简介"><a href="#1、Drawable简介" class="headerlink" title="1、Drawable简介"></a>1、Drawable简介</h2><p>Drawable是一个抽象类，是所有Drawable对象的基类，每个具体的Drawable都是它的子类，比如ShapeDrawable、BitmapDrawable等。</p>
<p>通过getIntrinsicWidth和getIntrinsicHeight这两个方法可以获取到Drawable的内部宽/高。但并不是所有的Drawable都有内部宽/高，比如一张图片所形成的Drawable，它的内部宽/高就是图片的宽/高，但是一个颜色形成的Drawable，它没有内部宽/高。Drawable内部宽/高不等同于它的大小。Drawable是没有大小概念的。</p>
<h2 id="2、Drawable分类"><a href="#2、Drawable分类" class="headerlink" title="2、Drawable分类"></a>2、Drawable分类</h2><ul>
<li><p>BitmapDrawable</p>
</li>
<li><p>ShapeDrawable</p>
</li>
<li><p>LayerDrawable</p>
</li>
</ul>
<p>对应的XML标签是<layer-list>,表示一种层次化的Drawable集合。</layer-list></p>
<ul>
<li>StateListDrawable</li>
</ul>
<p>对应于<selector>标签，也是表示Drawable集合，每个Drawable都对应View的一种状态。主要用于设置可单击的View的背景。</selector></p>
<p>系统会根据View当前的状态从selector中选择对应的item,每个item对应着一个具体的Drawable，系统按照从上到下的顺序查找，直至查找到第一条匹配的item。一般来说，默认的item都应该放在selector的最后一条并且不带任何状态，这样当上面的item无法匹配View的当前状态，系统会选择默认的item。</p>
<ul>
<li>LevelListDrawable</li>
</ul>
<p>对应于<level-list>标签，表示一个Drawable集合，集合中的每个Drawable都有一个等级level的概念。根据不同的等级，LevelListDrawable会切换为对应的Drawable。Drawable等级是有范围的，即0-10000，最小等级为0，这也是默认值，最大等级为10000。</level-list></p>
<ul>
<li>TransitionDrawable</li>
</ul>
<p>对应于<transition>标签，用于实现两个Drawable之间的淡入淡出效果。</transition></p>
<ul>
<li>InsetDrawable</li>
</ul>
<p>对应于<inset>标签，它可以将其它Drawable内嵌到自己当中，并可以在四周留出一定的间距。当一个View希望自己的背景比自己的实际区域小的时候，可以采用InsetDrawable来实现。通过LayerDrawable也可以实现这种效果。</inset></p>
<ul>
<li>ScaleDrawable</li>
</ul>
<p>ScaleDrawable对应于<scale>标签，可以根据自己的等级将指定的Drawable缩放到一定比例。等级为0表示ScaleDrawable不可见，这是默认值，要想ScaleDrawable可见，需要等级不为0。</scale></p>
<ul>
<li>ClipDrawable</li>
</ul>
<p>对应于<clip>标签,可以根据自己当前的等级来裁剪另一个Drawable，裁剪方向可以通过android:clipOrientation和android:gravity这两个属性来共同控制。</clip></p>
<h2 id="3、自定义Drawable"><a href="#3、自定义Drawable" class="headerlink" title="3、自定义Drawable"></a>3、自定义Drawable</h2>]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>Drawable</tag>
      </tags>
  </entry>
  <entry>
    <title>Android动画</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/Android%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h1 id="Android动画"><a href="#Android动画" class="headerlink" title="Android动画"></a>Android动画</h1><p>Android的动画可以分为三种:View动画、帧动画和属性动画，帧动画也属于View动画的一种，只不过它和平移、旋转等常见的View动画在表现形式上略有不同而已。</p>
<h2 id="1、View动画"><a href="#1、View动画" class="headerlink" title="1、View动画"></a>1、View动画</h2><ul>
<li><p>平移动画：TranslateAnimation</p>
</li>
<li><p>缩放动画：ScaleAnimation</p>
</li>
<li><p>旋转动画：RotateAnimation</p>
</li>
<li><p>透明度动画：AlphaAnimation</p>
</li>
</ul>
<p>用XML来定义属性动画需要定义在res/anim目录下。</p>
<h2 id="2、View动画的特殊使用场景"><a href="#2、View动画的特殊使用场景" class="headerlink" title="2、View动画的特殊使用场景"></a>2、View动画的特殊使用场景</h2><h3 id="2-1、LayoutAnimation"><a href="#2-1、LayoutAnimation" class="headerlink" title="2.1、LayoutAnimation"></a>2.1、LayoutAnimation</h3><p>LayoutAnimation使用于ViewGroup，为ViewGroup指定一个动画，它的子元素出场时都会具有这种动画效果。这种效果常用在ListView上。</p>
<h3 id="2-2、Activity的切换效果"><a href="#2-2、Activity的切换效果" class="headerlink" title="2.2、Activity的切换效果"></a>2.2、Activity的切换效果</h3><p>主要用到overridePendingTransition(int enterAnim,int exitAnim)这个方法，必须在startActivity(intent)或者finish()之后被调用才能生效。</p>
<p>Fragment中添加切换动画，可以通过FragmentTransaction中的setCustomAnimations()方法来添加切换动画，这个切换动画需要的是View动画。</p>
<h2 id="3、属性动画"><a href="#3、属性动画" class="headerlink" title="3、属性动画"></a>3、属性动画</h2><p>属性动画可以对任意对象的属性进行动画而不仅仅是View，动画默认时间间隔是300ms，默认帧是10ms/帧。</p>
<p>用XML来定义属性动画需要定义在res/animator目录下。</p>
<p>对object的属性abc属性做动画，如果要让动画生效，要同时满足两个条件:</p>
<p>1、object必须要提供setAbc方法，如果动画的时候没有传递初始值，还要提供getAbc方法，因为系统要去取abc属性的初始值。如果不满足这条，程序直接Crash。</p>
<p>2、object的setAbc对属性abc所做的改变必须能够通过某种方法反映出来，比如会带来UI的改变等。如果不满足这条，动画无效果但不会Crash。</p>
<p>如果只满足条件1，不满足条件2，可以有3种解决方法：</p>
<ul>
<li><p>给对象加上get和set，如果有权限的话</p>
</li>
<li><p>用一个类来包装原始对象，间接为其提供get和set方法</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performAnimate</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ViewWrapper wrapper = <span class="keyword">new</span> ViewWrapper(mButton);</span><br><span class="line">	ObjectAnimator.ofInt(wrapper,<span class="string">"width"</span>,<span class="number">500</span>).setDuration(<span class="number">5000</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewWrapper</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> View mTarget;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ViewWrapper</span><span class="params">(View target)</span></span>&#123;</span><br><span class="line">		mTarget = target;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mTarget.getLayoutParams().width;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span></span>&#123;</span><br><span class="line">		mTarget.getLayoutParams().width = width;</span><br><span class="line">		mTarget.requestLayout();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>采用ValueAnimator，监听动画过程，自己实现属性的改变</li>
</ul>
<h2 id="4、注意事项"><a href="#4、注意事项" class="headerlink" title="4、注意事项"></a>4、注意事项</h2><p>1、OOM问题</p>
<p>这个问题主要出现在帧动画中，当图片数量较多肯于图片较大时就极易出现OOM。</p>
<p>2、内存泄露</p>
<p>在属性动画中有一类无限循环的动画，这类动画需要在Activity退出时及时停止，否则将导致Activity无法释放从而造成内存泄露，View动画不存在此问题。</p>
<p>3、兼容性问题</p>
<p>动画在3.0以下系统上有兼容性问题。</p>
<p>4、View动画的问题</p>
<p>View动画是对View的影像做动画，并不是真正地改变View的状态，因此有时候会出现动画完成后View无法隐藏的现象，即setVisibility(View.GONE)失效，这时只要调用view.clearAnimation()清除View动画即可解决此问题。</p>
<p>5、不要用px</p>
<p>6、动画元素的交互</p>
<p>7硬件加速</p>
<p>使用动画的过程中，建议开启硬件加速，这样会提高动画的流畅性。</p>
]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title>RemoteViews</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/RemoteViews/</url>
    <content><![CDATA[<h1 id="RemoteViews"><a href="#RemoteViews" class="headerlink" title="RemoteViews"></a>RemoteViews</h1><blockquote>
<p>RemoteViews表示的是一个View结构，它可以在其他进程中显示。RemoteViews在Android中的使用场景有两种：通知栏和桌面小部件。</p>
</blockquote>
<h2 id="1、RemoteViews的应用"><a href="#1、RemoteViews的应用" class="headerlink" title="1、RemoteViews的应用"></a>1、RemoteViews的应用</h2><p>RemoteViews在实际开发中，主要用在通知栏的桌面小部件的开发过程中。通知栏主要是通过NotificationManager的notify方法来实现，除了默认效果，还可以另外定义布局。桌面小部件则是通过AppWidgetProvider来实现，AppWidgetProvider本质上是一个广播。RemoteViews运行在系统的SystemServer进程。</p>
<p>AppWidgetProvider除了最常用的onUpdate方法，还有以下几个方法：</p>
<ul>
<li><strong>onEnable:</strong></li>
</ul>
<p>当该窗口小部件第一次添加到桌面时调用该方法，可添加多次但只在第一次调用。</p>
<ul>
<li><strong>onUpdate:</strong></li>
</ul>
<p>小部件被添加时或者每次小部件更新时都会调用一次该方法，小部件的更新时机由updatePeriodMillis来指定，每个周期小部件都会自动更新一次。</p>
<ul>
<li><strong>onDeleted:</strong></li>
</ul>
<p>每删除一次桌面小部件就调用一次</p>
<ul>
<li><strong>onDisabled:</strong></li>
</ul>
<p>当最后一个该类型的桌面小部件被删除时调用该方法</p>
<ul>
<li><strong>onReceive:</strong></li>
</ul>
<p>这是广播的内置方法，用于分发具体的事件给其它方法。</p>
<p><strong>PendingIntent</strong></p>
<p>PendingIntent表示一种处于pending状态的意图，而pending状态表示的是一种待定、等待、即将发生的意思，就是说接下来有一个Intent将在某个特定的时刻发生。PendingIntent和Intent的区别在于，PendingIntent是在将来的某个不确定的时刻发生，而Intent是立刻发生。PendingIntent典型使用场景是给RemoveViews添加单击事件，通过send和cancel方法来发送和取消特定的待定的Intent。</p>
<p>PendingIntent主要方法：</p>
<p><strong>getActivity(Context context,int requestCode,Intent intent,int flags)</strong></p>
<blockquote>
<p>获得一个PendingIntent，该待定意图发生时，效果相当于Context.startActivity(Intent)</p>
</blockquote>
<p><strong>getService(Context context,int requestCode,Intent intent,int flags)</strong></p>
<blockquote>
<p>获得一个PendingIntent，该待定意图发生时，效果相当于Context.startService(Intent)</p>
</blockquote>
<p><strong>getBroadcast(Context context,int requestCode,Intent intent,int flags)</strong></p>
<blockquote>
<p>获得一个PendingIntent，该待定意图发生时，效果相当于Context.sendBroadcast(Intent)</p>
</blockquote>
<p>PendingIntent匹配规则：如果两个PendingIntent它们内部的Intent相同并且requestCode也相同，那么这两个PendingIntent就是相同的。</p>
<p><strong>flags:</strong></p>
<ul>
<li>FLAG_ONE_SHOT:</li>
</ul>
<p>当前描述的PendingIntent只能被使用一次，然后它就会被自动cancel。</p>
<ul>
<li>FLAG_NO_CREATE:</li>
</ul>
<p>当前描述的PendingIntent不会主动创建。日常开发中没有太多的使用意义。</p>
<ul>
<li>FLAG_CANCEL_CURRENT:</li>
</ul>
<p>当前描述的PendingIntent如果已经存在，那么它们都会被cancel，然后系统创建一个新的PendingIntent。对于通知栏消息，那些被cancel的消息单击后将无法打开。</p>
<ul>
<li>FLAG_UPDATE_CURRENT:</li>
</ul>
<p>当前描述的PendingIntent如果已经存在，那么它们都会被更新，即Intent中的Extras会被替换成最新的。</p>
<h2 id="2、RemoteViews的内部机制"><a href="#2、RemoteViews的内部机制" class="headerlink" title="2、RemoteViews的内部机制"></a>2、RemoteViews的内部机制</h2><p>RemoteView并不能支持所有的View类型，它所支持的类型如下：</p>
<p><strong>Layout</strong></p>
<p>FrameLayout、LinearLayout、RelativeLayout、GridLayout。</p>
<p><strong>View</strong></p>
<p>AnalogClock、Buttom、Chronometer、ImageButton、ImageView、ProgressBar、TextView、ViewFlipper、ListView、GridView、StackView、AdapterViewFlipper、ViewStub。</p>
<p>上面所描述的是RemoteViews所支持的所有View类型，RemoteViews不支持它们的子类以及其他View类型。</p>
<p>通知栏和桌面小部件分别由NotificationManager和AppWidgetManager管理，而NotificationManager和AppWidgetManager通过Binder分别和SystemServer进程中的NotificationManagerService以及AppWidgetService进行通信。由此可见，通知栏和桌面小部件中的布局实际是在NotificationManagerService以及AppWidgetService中被加载的,而它们运行在系统的SystemServer中。</p>
<p>setOnClickPendingIntent、setPendingIntentTemplate以及setOnClickFillInIntent它们之间的区别和联系：</p>
<p>首先setOnClickPendingIntent用于给普通View设置单击事件，但不能给集合(ListView和StackView)中的View设置单击事件，比如我们不能给ListView中的item通过setOnClickPendingIntent这种方式添加单击事件，因为开销比较大，所以系统禁止了这种方式；其次，如果要给ListView和StackView中的item添加单击事件，则必须将setPendingIntentTemplate和setOnClickFillInIntent组合使用才可以。</p>
]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>RemoteViews</tag>
      </tags>
  </entry>
  <entry>
    <title>View的工作原理</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="View的工作原理"><a href="#View的工作原理" class="headerlink" title="View的工作原理"></a>View的工作原理</h1><h2 id="1、ViewRoot和DecorView"><a href="#1、ViewRoot和DecorView" class="headerlink" title="1、ViewRoot和DecorView"></a>1、ViewRoot和DecorView</h2><p>ViewRoot对应于ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均是通过ViewRoot来完成的。在ActivityThread中，当Activity对象被创建完毕后，会将DecorView添加到Window中,同时会创建ViewRootImpl对象，并将ViewRootImpl对象和DecorView建立关联。</p>
<p>View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才最终将一个View绘制出来。</p>
<p>measure过程决定了View的宽/高，Measure完成以后，可以通过getMeasuredWidth和getMeasuredHeight方法来获取View测量后的宽/高，在几乎所有的情况下，它等同于View的最终的宽/高，但是特殊情况除外。Layout过程决定了View的四个顶点的坐标和实际的宽/高，完成以后，可以通过getTop、getBottom、getLeft和getRight来拿到View的四个顶点的位置，可以通过getWidth和getHeight方法拿到View的最终宽/高。Draw过程决定了View的显示，只有draw方法完成后View的内容才能呈现在屏幕上。</p>
<p>DecorView作为顶级View，一般情况下，它内部会包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分，上面是标题栏，下面是内容栏。在Activity中，我们通过setContentView所设置的布局文件其实就是被加到内容栏中的，而内容栏id为content。可以通过下面方法得到content:ViewGroup content = findViewById(R.android.id.content)。通过content.getChildAt(0)可以得到设置的view。DecorView其实是一个FrameLayout,View层的事件都先经过DecorView，然后才传递给我们的View。</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="DecorView的结构" class="fancybox"><img alt="DecorView的结构" data-src="/images/DecorView%E7%9A%84%E7%BB%93%E6%9E%84.png" src="/img/loading.gif" class="lazyload" title="DecorView的结构"></a></p>
<h2 id="2、MeasureSpec"><a href="#2、MeasureSpec" class="headerlink" title="2、MeasureSpec"></a>2、MeasureSpec</h2><p>MeasureSpec代表一个32位的int值，高2位代表SpecMode,低30位代表SpecSize,SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。</p>
<p>SpecMode有三类，如下所示：</p>
<p><strong>UNSPECIFIED</strong></p>
<blockquote>
<p>父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部。</p>
</blockquote>
<p><strong>EXACTLY</strong></p>
<blockquote>
<p>父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值，对应于LayoutParams中的match_parent和具体的数值这两种模式。</p>
</blockquote>
<p><strong>AT_MOST</strong></p>
<blockquote>
<p>父容器指定一个可用大小即SpecSize，View的大小不能大于这个值，对应于LayoutParams中的wrap_content。</p>
</blockquote>
<p>LayoutParams需要和父容器一起才能决定View的MeasureSpec，从而进一步决定View的宽/高。对于顶级View，即DecorView和普通View来说，MeasureSpec的转换过程略有不同。对于DecorView，其MeasureSpec由窗口的尺寸和其自身的LayoutParams共同确定；对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的Layoutparams共同决定，MeasureSpec一旦确定，onMeasure就可以确定View的测量宽/高。</p>
<p>当View采用固定宽/高时，不管父容器的MeasureSpec是什么，View的MeasureSpec都是精确模式并且大小遵循LayoutParams中的大小。当View的宽/高是match_parent时，如果父容器的模式是精准模式，那么View也是精准模式并且其大小是父容器的剩余空间；如果父容器是最大模式，那么View也是最大模式并且大小不会超过父容器的剩余空间。当View的宽/高是wrap_content时，不管父容器的模式是精准还是最大化，View的模式总是最大化并且大小不超过父容器的剩余空间。</p>
<h2 id="3、View的工作流程"><a href="#3、View的工作流程" class="headerlink" title="3、View的工作流程"></a>3、View的工作流程</h2><p>View的工作流程主要是指measure、layout、draw三大流程，即测量、布局、绘制。</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="performTraversals流程" class="fancybox"><img alt="performTraversals流程" data-src="/images/performTraversals%E6%B5%81%E7%A8%8B.png" src="/img/loading.gif" class="lazyload" title="performTraversals流程"></a></p>
<h3 id="3-1、measure过程"><a href="#3-1、measure过程" class="headerlink" title="3.1、measure过程"></a>3.1、measure过程</h3><p>measure过程要分情况，如果只是一个原始的view，则通过measure方法就完成了其测量过程，如果是一个ViewGroup，除了完成自己的测量过程外，还会遍历调用所有子元素的measure方法，各个子元素再递归去执行这个流程。</p>
<p><strong>View的measure过程</strong></p>
<p>直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content就相当于使用match_parent。</p>
<p><strong>ViewGroup的measure过程</strong></p>
<p>ViewGroup并没有定义其测量的具体过程，因为ViewGroup是一个抽象类，其测量过程的onMeasure方法需要各个子类去具体实现。</p>
<p>View的measure是三大流程中最复杂的一个，measure完成后，通过getMeasuredWidth/Height方法就可以正确获取到View的测量宽/高，但在某些极端情况下，系统可能会多次measure才能确实最终端的测量宽/高，建议在onLayout方法去获取View的测量宽/高或者最终宽/高。</p>
<p>在Activity已启动的时候获取View的宽/高：</p>
<p><strong>1、Activity/View#onWindowFocusChanged</strong></p>
<p>View已经初始化完毕，宽/高已经准备好了。onWindowFocusChanged会被调用多次，当Activity的窗口得到焦点和失去焦点均会被调用一次。</p>
<p><strong>2、view.post(runnable)</strong></p>
<p>通过post可以将一个runnable投递到消息队列的尾部，然后等Looper调用此消息的时候，View也已经初始化好了。</p>
<p><strong>3、ViewTreeObserver</strong></p>
<p>使用OnGlobalLayoutListener接口，当View树的状态发生改变或者View树内部的View的可见性发生改变时，onGlobalLayout方法会回调。onGlobalLayout会调用多次。</p>
<p><strong>4、view.measure(int widthMeasureSpec,int heightMeasureSpec)</strong></p>
<h3 id="3-2、layout过程"><a href="#3-2、layout过程" class="headerlink" title="3.2、layout过程"></a>3.2、layout过程</h3><p>Layout的作用是ViewGroup用来确定子元素的位置，当ViewGroup的位置被确定后，它在onLayout中会遍历所有子元素并调用其layout方法，在layout方法中onLayout方法又会被调用。</p>
<h3 id="3-3、draw过程"><a href="#3-3、draw过程" class="headerlink" title="3.3、draw过程"></a>3.3、draw过程</h3><p>View的绘制过程遵循如下几步:</p>
<ul>
<li><p>1、绘制背景-background.draw(canvas)</p>
</li>
<li><p>2、绘制自己-onDraw</p>
</li>
<li><p>3、绘制children-dispatchDraw</p>
</li>
<li><p>4、绘制装饰-onDrawScrollBars</p>
</li>
</ul>
<h2 id="4、自定义View"><a href="#4、自定义View" class="headerlink" title="4、自定义View"></a>4、自定义View</h2><h3 id="4-1、自定义View的分类"><a href="#4-1、自定义View的分类" class="headerlink" title="4.1、自定义View的分类"></a>4.1、自定义View的分类</h3><ul>
<li><strong>继承View重写onDraw方法</strong></li>
</ul>
<p>用于实现一些不规则的图形。采用这种方式需要自己支持wrap_content,并且padding也需要自己处理。</p>
<ul>
<li><strong>继承ViewGroup派生特殊的Layout</strong></li>
</ul>
<p>主要用于实现自定义的布局，需要合理处理ViewGroup的测量、布局这两个过程，并同时处理子元素的测量和布局过程。</p>
<ul>
<li>继承特定的View(如TextView)</li>
</ul>
<p>一般用于扩展某种已有的View的功能，比如TextView，这种方法比较容易实现。不需要自己支持wrap_content和padding等。</p>
<ul>
<li>继承特定的ViewGroup(如LinearLayout)</li>
</ul>
<p>这种方法不用自己处理ViewGroup的测量和布局这两个过程。</p>
]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>View</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Gradle 高级自定义</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC9%E7%AB%A0-Android_Gradle%E9%AB%98%E7%BA%A7%E8%87%AA%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<h1 id="Android-Gradle-高级自定义"><a href="#Android-Gradle-高级自定义" class="headerlink" title="Android Gradle 高级自定义"></a>Android Gradle 高级自定义</h1><h2 id="使用共享库"><a href="#使用共享库" class="headerlink" title="使用共享库"></a>使用共享库</h2><p>Android的包,如android.app,android.content,android.view,android.widget等，是默认包含在Android SDK库里的，所有应用都可以直接使用它们。还有一些库，如com.google.android.maps,android.test.runner等，这些库是独立的，并不会被系统自动链接，所以如果要使用的话，就需要单独进行生成使用，这类库我们称为共享库。</p>
<p>在AndroidManifest.xml中，我们可以指定要使用的库:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">&lt;uses-library </span><br><span class="line">android:name=<span class="string">"com.google.android.maps"</span></span><br><span class="line">android:required=<span class="string">"true"</span></span><br><span class="line"><span class="regexp">/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这样我们就声明了需要使用maps这个共享库。声明之后，在安装生成的apk包的时候，系统会根据我们的定义，帮助检测手机系统是否有我们需要的共享库。因为我们设置的android:required=”true”,如果手机系统不满足，将不能安装该应用。</p>
<p>在Android中，除了标准的SDK，还存在两种库：一种是add-ons库，它们位于add-ons目录下，这些库大部分是第三方厂商或者公司开发的，一般是为了开发者使用，但又不想暴露具体标准实现；第二类是optional可选库，它们位于platforms/androi-xx/optional目录下，一般是为了兼容旧版本的API，比如org.apache.http.legacy。</p>
<p>对于第一类add-ons附件库来说，Android Gradle会自动解析，帮我们添加到classpath里。第二类optional可选库就不会，需要自己将这个可选库添加到classpath中。Android Gradle提供了useLibrary方法，让我们把一个库添加到classpath中。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    useLibrary <span class="string">'org.apache.http.legacy'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以上的配置已经可以生成APK，并能安装运行。但最好也要在AndroidManifest文件中配置一下uses-library标签，以防出现问题。</p>
<h2 id="批量修改生成的apk文件名"><a href="#批量修改生成的apk文件名" class="headerlink" title="批量修改生成的apk文件名"></a>批量修改生成的apk文件名</h2><p>Android对象为我们提供了3个属性：applicationVariants（仅仅适用于Android应用Gradle插件），libraryVariants（仅仅适用于Android库Grdle插件），testVariants（以上两种Gradle插件都适用）。</p>
<p>以上3个属性返回的都是DomainObjectSet对象集合，访问它们都会触发创建所有的任务。</p>
<p>以下为批量修改apk名称的示例:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.gradle"</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">        flavorDimensions <span class="string">"default"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        baidu &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        huawei &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    applicationVariants.all &#123;</span><br><span class="line">        variant -&gt;</span><br><span class="line">            variant.outputs.all &#123;</span><br><span class="line">                output -&gt;</span><br><span class="line">                    <span class="keyword">if</span> (output.outputFile != <span class="keyword">null</span> &amp;&amp; output.outputFile.name.endsWith(<span class="string">'.apk'</span>) &amp;&amp; <span class="string">'release'</span>.equals(variant.buildType.name)) &#123;</span><br><span class="line">                        <span class="keyword">def</span> flavorName = variant.flavorName.startsWith(<span class="string">"_"</span>) ? variant.flavorName.substring(<span class="number">1</span>) : variant.flavorName</span><br><span class="line">                        <span class="keyword">def</span> fileName = <span class="string">"channel_$&#123;flavorName&#125;_$&#123;variant.versionName&#125;.apk"</span></span><br><span class="line">                        outputFileName = fileName</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="动态生成版本信息"><a href="#动态生成版本信息" class="headerlink" title="动态生成版本信息"></a>动态生成版本信息</h2><p>一般的版本由3部分组成：major.minor.patch，第一个是主版本号，第二个是副版本号，第三个是补丁号。</p>
<h3 id="最原始的方式"><a href="#最原始的方式" class="headerlink" title="最原始的方式"></a>最原始的方式</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.channel"</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="分模块的方式"><a href="#分模块的方式" class="headerlink" title="分模块的方式"></a>分模块的方式</h3><p>可以把版本号的配置单独抽取出来，放在单独的文件里，供build引用。</p>
<p>新建一个vesion.gradle文件：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">ext&#123;</span><br><span class="line">    appVersionCode = <span class="number">1</span></span><br><span class="line">    appVersionName = <span class="string">"1.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在build.gradle中引用它：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">apply <span class="keyword">from</span>:<span class="string">'version.gradle'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.channel"</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode appVersionCode</span><br><span class="line">        versionName appVersionName</span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>先使用apply from加载version.gradle脚本文件，这样它里面定义的扩展属性就可以使用了。</p>
<h3 id="从git的tag中读取"><a href="#从git的tag中读取" class="headerlink" title="从git的tag中读取"></a>从git的tag中读取</h3><p>想获取当前的tag名称，在git下非常简单，使用以下命令即可：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">git describe --abbrev=<span class="number">0</span> --tags</span><br></pre></td></tr></table></figure></div>

<p>知道了命令，那么如何在Gradle中动态获取呢？这就需要exec。Gradle提供了执行shell命令非常简便的方法，即exec。它是一个Task任务。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> getAppVersionName()&#123;</span><br><span class="line">    <span class="keyword">def</span> stdout = <span class="keyword">new</span> ByteArrayOutputStream()</span><br><span class="line">    exec&#123;</span><br><span class="line">        commandLine <span class="string">'git'</span>,<span class="string">'describe'</span>,<span class="string">'--abbrev=0'</span>,<span class="string">'--tags'</span></span><br><span class="line">        standardOutput = stdout</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stdout.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以上定义了一个获取版本名称的方法，通过该方法获取了git tag的名称后，就可以把它作为应用的版本名称，只要把versionName配置成这个方法就好了。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.channel"</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName getAppVersionName()</span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="从属性文件中动态获取和递增"><a href="#从属性文件中动态获取和递增" class="headerlink" title="从属性文件中动态获取和递增"></a>从属性文件中动态获取和递增</h3><p>1、在项目目录下新建一个version.properties的属性文件</p>
<p>2、把版本名称分为3部分major.minor.patch，版本号分为一部分number，然后在properties新增4个KV键值对</p>
<p>3、在build.gradle新建一个方法用于读取该属性文件</p>
<h2 id="隐藏签名文件信息"><a href="#隐藏签名文件信息" class="headerlink" title="隐藏签名文件信息"></a>隐藏签名文件信息</h2><p>定义一个文件，用来保存签名的相关信息，如sign.properties,这个文件加入.gitignore，不上传到git中。通过读取这个文件来获取配置信息。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            <span class="keyword">def</span> signPropertiesFile = <span class="string">'sign.properties'</span></span><br><span class="line">            storeFile <span class="keyword">file</span>(readSignProperties(signPropertiesFile,<span class="string">'storeFile'</span>))</span><br><span class="line">            storePassword readSignProperties(signPropertiesFile,<span class="string">'storePassword'</span>)</span><br><span class="line">            keyAlias readSignProperties(signPropertiesFile,<span class="string">'keyAlias'</span>)</span><br><span class="line">            keyPassword readSignProperties(signPropertiesFile,<span class="string">'keyPassword'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buildTypes&#123;</span><br><span class="line">    release&#123;</span><br><span class="line">        signingConfig signingConfigs.release</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> readSignProperties(String filePath,String key)&#123;</span><br><span class="line">    <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">file</span>(filePath)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">file</span>.exists())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">def</span> Properties properties = <span class="keyword">new</span> Properties()</span><br><span class="line">        properties.load(<span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>))</span><br><span class="line">        <span class="keyword">return</span> properties[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"file not exist!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>sign.properties内容如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">storeFile=android.keystore</span><br><span class="line">storePassword=android</span><br><span class="line">keyAlias=android</span><br><span class="line">keyPassword=android</span><br></pre></td></tr></table></figure></div>

<h2 id="动态配置AndroidManifest文件"><a href="#动态配置AndroidManifest文件" class="headerlink" title="动态配置AndroidManifest文件"></a>动态配置AndroidManifest文件</h2><p>Android Gradle 提供了非常便捷的方法让我们来替换AndroidManifest文件中的内容，它就是manifestPlaceholder，Manifest占位符。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line">            manifestPlaceholders = [APP_CHANNEL:<span class="string">"google"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        baidu&#123;</span><br><span class="line">            manifestPlaceholders = [APP_CHANNEL:<span class="string">"baidu"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在AndroidManifest文件中使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">&lt;application&gt;</span><br><span class="line">&lt;meta-data </span><br><span class="line">android:name=<span class="string">"APP_CHANNEL"</span></span><br><span class="line">android:value=<span class="string">"$&#123;APP_CHANNEL&#125;"</span></span><br><span class="line"><span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>application&gt;</span><br></pre></td></tr></table></figure></div>

<p>如果需要批量修改(假设需要将名称改为和渠道名一样)，可以通过productFlavors迭代方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        baidu&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    productFlavors.all&#123;</span><br><span class="line">        flavor-&gt;</span><br><span class="line">        manifestPlaceholder = [APP_CHANNEL:name]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="自定义BuildConfig"><a href="#自定义BuildConfig" class="headerlink" title="自定义BuildConfig"></a>自定义BuildConfig</h2><p>Android Gradle 提供了buildConfigField(String type,String name,String value)让我们添加自己的常量到BuildConfig中。使用示例:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line">            buildConfigField <span class="string">'String'</span>,<span class="string">'URL'</span>,<span class="string">'"http://www.google.com"'</span></span><br><span class="line">        &#125;</span><br><span class="line">        baidu&#123;</span><br><span class="line">            buildConfigField <span class="string">'String'</span>,<span class="string">'URL'</span>,<span class="string">'"http://www.baidu.com"'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>需要注意，value这个参数，是单引号中间的部分，尤其对于String类型的值，里面的双引号不能省略。value是什么就写什么，原封不动地放在单引号里。</p>
<p>上面是渠道，productFlavor,其实不光渠道可以配置自定义字段，构建类型BuildType也可以配置。如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    buildTypes&#123;</span><br><span class="line">        debug&#123;</span><br><span class="line">            buildConfigField <span class="string">'String'</span>,<span class="string">'NAME'</span>,<span class="string">'"zhangsan"'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="动态添加自定义的资源"><a href="#动态添加自定义的资源" class="headerlink" title="动态添加自定义的资源"></a>动态添加自定义的资源</h2><p>实现这一功能的方法是resValue方法。它在BuildType和ProductFlavor这两个对象中存在。它会生成一个资源，效果和在res/values文件中定义一个资源是等价的。</p>
<p>resValue方法有三个参数，第一个是type，也就是你要定义资源的类型，比如有string,id,bool等；第二个是name,也就是定义资源的名称，以便在工程中引用；第三个是value,就是定义资源的值。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line">            resValue <span class="string">'string'</span>,<span class="string">'tip'</span>,<span class="string">'hello'</span></span><br><span class="line">        &#125;</span><br><span class="line">        baidu&#123;</span><br><span class="line">            resValue <span class="string">'string'</span>,<span class="string">'tip'</span>,<span class="string">'hi'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Java编译选项"><a href="#Java编译选项" class="headerlink" title="Java编译选项"></a>Java编译选项</h2><p>Android对象提供了一个compileOptions方法，接受一个CompileOptions类型的闭包作为参数，来对Java编译选项进行配置:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    compileOptions&#123;</span><br><span class="line">        encoding <span class="string">'utf-8'</span></span><br><span class="line">        <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_6</span><br><span class="line">        <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_6</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>CompileOptions是编译配置，它提供三个属性，分别是encoding,sourceCompatibility,targetCompatibility,通过对它们进行设置来配置Java相关的编译选项。</p>
<p>sourceCompatibility是配置Java源代码的编译级别</p>
<p>targetCompatibility是配置生成的Java字节码的版本</p>
<h2 id="adb操作选项配置"><a href="#adb操作选项配置" class="headerlink" title="adb操作选项配置"></a>adb操作选项配置</h2><p>在Android Gradle 中，为我们预留了对adb的一些选项的控制配置，它就是adbOptions{}闭包。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    adbOptions&#123;</span><br><span class="line">        timeOutInMs <span class="number">5</span>*<span class="number">1000</span></span><br><span class="line">        installOptions <span class="string">'-r'</span>,<span class="string">'-s'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="DEX选项配置"><a href="#DEX选项配置" class="headerlink" title="DEX选项配置"></a>DEX选项配置</h2><p>Android Gradle 提供了dexOptions{}闭包，让我们可以对dx操作进行一些配置。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    dexOptions&#123;</span><br><span class="line">        incremental <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="突破65535方法限制"><a href="#突破65535方法限制" class="headerlink" title="突破65535方法限制"></a>突破65535方法限制</h2><p>Java源文件被打包成一个DEX文件，这个文件就是优化过的、Dalvik虚拟机可执行的文件，Dalvik虚拟机在执行DEX文件时，使用了short类型来索引DEX文件中的方法，这就意味着单个DEX文件可以被定义的方法最多只有是65535，当定义的方法数量超过时，就会出错。</p>
<p>Android官方给出的解决方案：Multidex。对于Android5.0以后的版本，使用了ART的运行方式，可以天然支持App有多个DEX文件，ART在安装App的时候执行预编译，把多个DEX文件合并成一个oat文件执行。对于Android5.0之前的版本，Dalvik虚拟机限制每个App只能有一个class.dex，要使用它们，就得使用Android提供的Multidex库。</p>
<p>要在项目中使用Multidex,首先要修改Gradle build配置文件，启用Multidex，并同时配置Multidex需要的jar依赖。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        multiDexEnabled <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    implementation <span class="string">'com.android.support:multidex:1.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>配置好之后，开启了Multidex，会让我们的方法多于65535个的时候生成多个DEX文件，名字为classes.dex,classes(…n)这样的形式。但是对于Android5.0以前的系统虚拟机，它只认识一个DEX，名字还是classes.dex,所以想达到程序可以正常运行的目的，也要让虚拟机把其它几个生成的classes加载进来。要做到这步，就必须在App程序启动的入口控制，这个入口就是Application。</p>
<p>Multidex提供现成的Application，名字是MultiDexApplication，如果我们没有自定义Applicaiton的话，直接使用MultiDexApplication即可，在Manifest清单文件中配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> </span></span><br><span class="line"><span class="tag"><span class="attr">...</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:name</span>=<span class="string">"android.support.multidex.MultiDexApplication"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>如果有自定义的Application，并且是直接继承自Application，那么只需要把继承改为我们的MultiDexApplication即可。</p>
<p>如果自定义的Application是继承自第三方提供的Application,就不能改继承了，这个时候可以重写attachBaseContext方法来实现：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">    MultiDex.install(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>虽然有了解决65535问题的方法，但还是要尽量避免我们工程中的方法超过65535.首先不能滥用第三方库，如果引用，最好也要自己精简。精简后，还要使用ProGuard减小DEX的大小。还有因为Dalvik linearAlloc的限制，尤其在2.2和2.3版本上，只有5MB，到Android 4.0的时候升级到8MB，所以低于4.0的系统上dexopt的时候可能会崩溃。</p>
<h2 id="自动清理未使用的资源"><a href="#自动清理未使用的资源" class="headerlink" title="自动清理未使用的资源"></a>自动清理未使用的资源</h2><p>Android Gradle 为我们提供了在构建打包时自动清理未使用的资源的方法，这个就是Resource Shrinking。</p>
<p>Resource Shringking要结合Code Shringking一起使用，即我们开发中经常使用的ProGuard，也就是我们要启用minifyEnabled，是为了减缩代码。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    buildTypes&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            minifyEnabled <span class="keyword">true</span></span><br><span class="line">            shringkResources <span class="keyword">true</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>自动清理未使用的资源这个功能虽然好用，但是有时候会误删有用的程序，因为我们在代码编写的时候，可能会使用反射去引用资源，尤其很多的第三方库会这么做，这个时候Android Gradle就区分不出来，可能会误认为这些资源不有被使用。针对这种情况，Android Gradle提供了keep方法来让我们配置哪些资源不被清理。</p>
<p>keep方法使用非常简单，我们要新建一个xml文件来配置，这个文件是res/raw/keep.xml，然后通过tools:keep属性来设置。这个tools:keep接受一个以逗号分隔的配置资源列表，并且支持星号*通配符。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"&gt;</span></span><br><span class="line"><span class="meta">&lt;resources xmlns:tools="http://schemas.android.com/tools" tools:keep="@layout/layout_a,@layout/layout_b" /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>keep.xml还有一个属性是tools:shrinkMode，用于配置自动清理资源的模式，默认是false，是安全的。</p>
<p>除了shrinkResources之外，Android Gradle 还提供了一个resConfigs,它属于ProductFlavor的一个方法，可以让我们配置哪些类型的资源才会被打包进APK中。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        resConfigs <span class="string">'zh'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面代码表示，只保留zh资源。</p>
]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Gradle 多渠道构建</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC11%E7%AB%A0-Android_Gradle%E5%A4%9A%E6%B8%A0%E9%81%93%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Android-Gradle-多渠道构建"><a href="#Android-Gradle-多渠道构建" class="headerlink" title="Android Gradle 多渠道构建"></a>Android Gradle 多渠道构建</h1><h2 id="多渠道构建的基本原理"><a href="#多渠道构建的基本原理" class="headerlink" title="多渠道构建的基本原理"></a>多渠道构建的基本原理</h2><p>在Android Gradle中，定义了一个叫Build Variant的概念，一个Build Variant=Build TYpe+Product Flavor，Build Type就是我们构建的类型，比如release和debug;Product Flavor就是我们构建的渠道，比如Baidu,Google等，它们加起来就是baiduRelease,baiduDebug,googleRelease,googleDebug，共有这几种组合的构件产出。Product Flavor也就是我们多渠道构建的基础。以下是新增一个ProductFlavor:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;&#125;</span><br><span class="line">        baidu&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以上的发布渠道配置后，Android Gradle就会生成很多Task。其中，assemble开头的负责生成构件产物(apk)。除此之外，还有compile系列，install系列等。除了生成的Task外，每个ProductFlavor还可以有自己的SourceSet，还可以有自己的dependencies依赖。</p>
<h2 id="Flurry多渠道和友盟多渠道构建"><a href="#Flurry多渠道和友盟多渠道构建" class="headerlink" title="Flurry多渠道和友盟多渠道构建"></a>Flurry多渠道和友盟多渠道构建</h2><p>Flurry本身没有渠道的概念，它有Application，所以可以把一个Application当成一个渠道。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line">            buildConfigField <span class="string">'String'</span>,<span class="string">'FLURRY_KEY'</span>,<span class="string">'"ABADFASSDFAS"'</span></span><br><span class="line">        &#125;</span><br><span class="line">        baidu&#123;</span><br><span class="line">            buildConfigField <span class="string">'String'</span>,<span class="string">'FLURRY_KEY'</span>,<span class="string">'"JKKJKHKJHIHIUY"'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样每个渠道的BuildConfig类中都会有名字为FLURRY_KEY的常量定义，它的值是我们在渠道中使用buildConfigField指定的值，每个渠道不一样，我们只需要在代码中指定使用这个常量即可，这样每个渠道的统计分析就可以做到了。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flurry.init(<span class="keyword">this</span>,FLURRY_KEY);</span><br></pre></td></tr></table></figure></div>

<p>友盟本身有渠道的概念。不过它不是在代码中指定的，而是在AndroidManifest.xml中配置的，通过配置meta-data标签来设置:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"UMENG_CHANNEL"</span> <span class="attr">android:value</span>=<span class="string">"Channel ID"</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="多渠道构建定制"><a href="#多渠道构建定制" class="headerlink" title="多渠道构建定制"></a>多渠道构建定制</h2><p>多渠道的定制，其实就是对Android Gradle插件的ProductFlavor的配置，通过配置ProductFlavor达到灵活控制每一个渠道的目的。</p>
<h3 id="applicaitonId"><a href="#applicaitonId" class="headerlink" title="applicaitonId"></a>applicaitonId</h3><p>用于设置渠道的包名</p>
<h3 id="consumerProguardFiles"><a href="#consumerProguardFiles" class="headerlink" title="consumerProguardFiles"></a>consumerProguardFiles</h3><p>只对Android库项目有用。当我们发布库项目生成一个aar包的时候，使用consumerProguardFiles配置的混淆文件列表也会被打包到aar里一起发布，这样当应用引用这个aar包，并且启用混淆的时候，会自动使用aar包里的混淆文件对aar包里的代码进行混淆，这样我们就不用对该aar包进行混淆配置了。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line">            consumeProguardFiles <span class="string">'proguard-rules.pro'</span>,<span class="string">'proguard-android.txt'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>除了这种方法，还有一种属性设置的方法，区别在于：consumerProguardFiles方法是一直添加，不会清空以前的混淆文件，而consumerProguardFiles属性配置的方式是每次都是新的混淆文件列表，以前配置的会先被清空。</p>
<h3 id="manifestPlaceholders"><a href="#manifestPlaceholders" class="headerlink" title="manifestPlaceholders"></a>manifestPlaceholders</h3><h3 id="multiDexEnabled"><a href="#multiDexEnabled" class="headerlink" title="multiDexEnabled"></a>multiDexEnabled</h3><p>用来启用多个dex的配置，主要用来突破65535方法的问题</p>
<h3 id="proguardFiles"><a href="#proguardFiles" class="headerlink" title="proguardFiles"></a>proguardFiles</h3><p>混淆使用的文件列表</p>
<h3 id="signingConfig"><a href="#signingConfig" class="headerlink" title="signingConfig"></a>signingConfig</h3><p>签名配置</p>
<h3 id="testApplicationId"><a href="#testApplicationId" class="headerlink" title="testApplicationId"></a>testApplicationId</h3><p>用来适配测试包的包名</p>
<h3 id="testFunctionalTest和testHandleProfiling"><a href="#testFunctionalTest和testHandleProfiling" class="headerlink" title="testFunctionalTest和testHandleProfiling"></a>testFunctionalTest和testHandleProfiling</h3><p>testFunctionalTest表示是否为功能测试，testHandleProfiling表示是否启用分析功能</p>
<h3 id="testInstrumentationRunner"><a href="#testInstrumentationRunner" class="headerlink" title="testInstrumentationRunner"></a>testInstrumentationRunner</h3><p>用来配置运行测试使用的Instrumentation Runner的类名，是一个全路径的类名，而且必须是android.app.Instrumentation的子类，一般情况下，我们使用android.test.InstrumentationTestRunner，当然也可以自定义。</p>
<h3 id="testInstrumentationRunnerArguments"><a href="#testInstrumentationRunnerArguments" class="headerlink" title="testInstrumentationRunnerArguments"></a>testInstrumentationRunnerArguments</h3><p>配合上一个属性用的，用来配置Instrumentation Runner使用的参数，它们最终都是使用adb shell am instrument这个命令。</p>
<h3 id="versionCode和versionName"><a href="#versionCode和versionName" class="headerlink" title="versionCode和versionName"></a>versionCode和versionName</h3><p>配置渠道的版本号和版本名称。</p>
<h3 id="useJack"><a href="#useJack" class="headerlink" title="useJack"></a>useJack</h3><p>用于标记是否启用Jack和Jill这个全新的，高性能的编译器。</p>
<h3 id="dimension"><a href="#dimension" class="headerlink" title="dimension"></a>dimension</h3><p>dimension是ProductFlavor的一个属性，接受一个字符串，作为该ProdoctFlavor的维度。可以简单理解为对ProductFlavor进行分组，dimension接受的参数就是我们分组的组名，也就是维度名称。维度名称不能随便指定，在使用前，必须先声明。</p>
<p>flavorDimension是我们使用的android{}里面的方法，它和productFlavors{}是平级的，一定要先使用flavorDimension声明维度，才能在ProductFlavor中使用。</p>
<p>我们同时指定多个维度，但是一定要，这些维度是有顺序的，有优先级的，第一个参数的优先级最大，其实是第二个，以此类推。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    flavorDimensions <span class="string">"abi"</span>,<span class="string">"version"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>声明维度后，就可以使用了:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    flavorDimensions <span class="string">"abi"</span>,<span class="string">"version"</span></span><br><span class="line"></span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        free&#123;</span><br><span class="line">            dimension <span class="string">'version'</span></span><br><span class="line">        &#125;</span><br><span class="line">        paid&#123;</span><br><span class="line">            dimension <span class="string">'version'</span></span><br><span class="line">        &#125;</span><br><span class="line">        x86&#123;</span><br><span class="line">            dimension <span class="string">'abi'</span></span><br><span class="line">        &#125;</span><br><span class="line">        arm&#123;</span><br><span class="line">            dimension <span class="string">'abi'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="提高多渠道构建的效率"><a href="#提高多渠道构建的效率" class="headerlink" title="提高多渠道构建的效率"></a>提高多渠道构建的效率</h2><p>参考美团方案</p>
<p>利用在apk的META-INF目录下添加空文件不用重新签名的原理</p>
<p>1、利用Android Gradle打一个基本包(母包)</p>
<p>2、基于该包复制一个，文件名要能区分出产品、打包时间 、版本、渠道等 </p>
<p>3、对复制出来的apk进行修改，在其META-INF目录下新增空文件，但空文件的文件名要有意义，必须包含能区分渠道的名字</p>
<p>4、重复步骤2、3生成我们所需的所有渠道包apk</p>
]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>构建</tag>
        <tag>多渠道</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle入门</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC1%E7%AB%A0-Gradle%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Gradle入门"><a href="#Gradle入门" class="headerlink" title="Gradle入门"></a>Gradle入门</h1><h2 id="配置Gradle环境"><a href="#配置Gradle环境" class="headerlink" title="配置Gradle环境"></a>配置Gradle环境</h2><p>安装之前确保已经安装配置好Java环境，要求JDK6以上，并且在环境变量里配置了JAVA_HOME，查看Java版本可以在终端输入如下命令：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></div>

<p>显示结果如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java version <span class="string">"1.8.0_221"</span></span><br><span class="line">Java(TM) <span class="function">SE Runtime <span class="title">Environment</span> <span class="params">(build <span class="number">1.8</span><span class="number">.0</span>_221-b11)</span></span></span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server <span class="title">VM</span> <span class="params">(build <span class="number">25.221</span>-b11, mixed mode)</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="Linux下搭建Gradle构建环境"><a href="#Linux下搭建Gradle构建环境" class="headerlink" title="Linux下搭建Gradle构建环境"></a>Linux下搭建Gradle构建环境</h3><p>先到Gradle官网<a href="https://gradle.org下载好Gradle" target="_blank" rel="noopener">https://gradle.org下载好Gradle</a> SDK。建议下载all版本，包含了Gradle SDK所有相关内容，包括源代码，文档，示例等。下载后解压。</p>
<p>要运行Gradle，必须把Gradle_HOME/bin目录添加到环境变量PATH中。在Linux下，如果只想为当前登录的用户配置可以运行Gradle，那么可以编辑~/.bashrc文件，添加以下内容:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#这里是我的Gradle目录，换成你自己的</span><br><span class="line">GRADLE_HOME=/home/wangyz/gradle</span><br><span class="line">PATH=$&#123;PATH&#125;:$&#123;GRADLE_HOME&#125;/bin</span><br><span class="line">Export GRADLE_HOME PATH</span><br></pre></td></tr></table></figure></div>

<p>上面GRADLE_HOME是我的Gradle解压后的目录，这里需要换成你自己的。添加保存后，在终端输入source ~/.bashrc，回车执行让刚才的配置生效。</p>
<p>如果想让所有用户都可以使用Gradle，那么你需要在/etc/profile中添加以上内容，并执行source /etc/profile使配置生效。</p>
<p>现在已经配置好了，要验证我们的配置是否正确，是否可以运行Gradle，只需要打开终端，输入gradle -v命令查看即可，如果能正确显示Gradle版本号，Groovy版本号，JVM等相关信息，那么说明已经配置成功。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle <span class="number">5.6</span></span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build time:   <span class="number">2019</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">21</span>:<span class="number">05</span>:<span class="number">25</span> UTC</span><br><span class="line">Revision:     f0b9d60906c7b8c42cd6c61a39ae7b74767bb012</span><br><span class="line"></span><br><span class="line">Kotlin:       <span class="number">1.3</span><span class="number">.41</span></span><br><span class="line">Groovy:       <span class="number">2.5</span><span class="number">.4</span></span><br><span class="line">Ant:          <span class="function">Apache <span class="title">Ant</span><span class="params">(TM)</span> version 1.9.14 compiled on March 12 2019</span></span><br><span class="line"><span class="function">JVM:          1.8.0<span class="title">_221</span> <span class="params">(Oracle Corporation <span class="number">25.221</span>-b11)</span></span></span><br><span class="line"><span class="function">OS:           Linux 4.18.0-15-generic amd64</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Windows下搭建Gradle构建环境"><a href="#Windows下搭建Gradle构建环境" class="headerlink" title="Windows下搭建Gradle构建环境"></a>Windows下搭建Gradle构建环境</h3><p>通过右击我的电脑，打开属性面板，然后找到环境变量配置项，添加GRADLE_HOME环境变量，然后把GRADLE_HOME/bin添加到PATH系统变量里保存即可。完成后打开CMD，运行gradle -v来进行验证。</p>
<h2 id="Gradle版Hello-World"><a href="#Gradle版Hello-World" class="headerlink" title="Gradle版Hello World"></a>Gradle版Hello World</h2><p>新建一个目录，我这里是Gradle,然后在该目录下创建一个名为build.gradle的文件。打开编辑该文件，输入以下内容:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> hello&#123;</span><br><span class="line">	<span class="keyword">doLast</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'hello,world!'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>打开终端，然后移动到gradle下，使用gradle -q hello命令来执行构建脚本：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">gradle -q hello</span><br><span class="line">hello,world!</span><br></pre></td></tr></table></figure></div>

<p>build.gradle是Gradle默认的构建脚本文件，执行Gradle命令的时候，会默认加载当前目录下的build.gradle脚本文件。也可以通过-b参数来指定想要加载执行的文件。</p>
<p>gradle -q hello,这段命令，意思是想执行build.gradle脚本中定义的名为hello的Task，-q参数用于控制gradle输出的日志级别，以及哪些日志可以输出被看到。</p>
<p>在Gradle中，单引号和双引号所包含的内容都是字符串。</p>
<h2 id="Gradle-Wrapper"><a href="#Gradle-Wrapper" class="headerlink" title="Gradle Wrapper"></a>Gradle Wrapper</h2><p>Wrapper就是对Gradle的一层包装，便于在团队开发过程中统一Gradle构建的脚本，避免因为Gradle版本不统一带来的不必要问题。</p>
<h3 id="生成Wrapper"><a href="#生成Wrapper" class="headerlink" title="生成Wrapper"></a>生成Wrapper</h3><p>Gradle提供了内置的Wrapper task帮助我们自动生成Wrapper所需的目录文件，在一个项目的根目录下输入gradle wrapper即可生成。</p>
<p>gradlew和gradle.bat分别是Linux和Windows下的可执行脚本，它们的用法和Gradle原生命令是一样的。</p>
<h3 id="Wrapper配置"><a href="#Wrapper配置" class="headerlink" title="Wrapper配置"></a>Wrapper配置</h3><p>当我们在终端执行gradle wrapper生成相关文件的时候，可以为其指定一些参数，来控制Wrapper的生成。</p>
<p>–gradle-version:用于指定使用的Gradle版本</p>
<p>–gradle-distribution-url:用于指定下载Gradle发行版的url地址</p>
<p>如果在调用gradle wrapper的时候，不添加任何参数，那么就会使用当前Gradle版本作为生成的Wrapper的gradle version。</p>
<h3 id="gralde-wrapper-properties"><a href="#gralde-wrapper-properties" class="headerlink" title="gralde-wrapper.properties"></a>gralde-wrapper.properties</h3><p>该配置文件是gradle wrapper的相关配置文件，我们上面执行该任务的任何配置都会被写进该文件。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper<span class="regexp">/dists</span></span><br><span class="line"><span class="regexp">distributionUrl=https\:/</span><span class="regexp">/services.gradle.org/</span>distributions<span class="regexp">/gradle-5.6-bin.zip</span></span><br><span class="line"><span class="regexp">zipStoreBase=GRADLE_USER_HOME</span></span><br><span class="line"><span class="regexp">zipStorePath=wrapper/</span>dists</span><br></pre></td></tr></table></figure></div>

<h3 id="自定义Wrapper-Task"><a href="#自定义Wrapper-Task" class="headerlink" title="自定义Wrapper Task"></a>自定义Wrapper Task</h3><p>在build.gradle构建文件中加入以下脚本：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> mywrapper(type:Wrapper)&#123;</span><br><span class="line">	gradleVersion=<span class="string">'5.6'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里指定了gradle版本。</p>
<h2 id="Gradle日志"><a href="#Gradle日志" class="headerlink" title="Gradle日志"></a>Gradle日志</h2><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p>Gradle的日志级别和我们使用的大部分语言差不多。除了这些通用的之外，Gradle又增加了QUIET和LIFECYCLE两个级别，用于标记重要以及进度级别的日志信息。</p>
<table>
<thead>
<tr>
<th>级别</th>
<th>用于</th>
</tr>
</thead>
<tbody><tr>
<td>ERROR</td>
<td>错误消息</td>
</tr>
<tr>
<td>QUIET</td>
<td>重要消息</td>
</tr>
<tr>
<td>WARNING</td>
<td>警告消息</td>
</tr>
<tr>
<td>LIFECYCLE</td>
<td>进度消息</td>
</tr>
<tr>
<td>INFO</td>
<td>信息消息</td>
</tr>
<tr>
<td>DEBUG</td>
<td>调试消息</td>
</tr>
</tbody></table>
<p>具体用法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">#输出QUIET级别及以上的日志信息</span><br><span class="line">gradle -q <span class="keyword">task</span></span><br></pre></td></tr></table></figure></div>

<h3 id="输出错误堆栈信息"><a href="#输出错误堆栈信息" class="headerlink" title="输出错误堆栈信息"></a>输出错误堆栈信息</h3><p>默认情况下，堆栈信息的输出是关闭的。</p>
<table>
<thead>
<tr>
<th>命令行选项</th>
<th>用于</th>
</tr>
</thead>
<tbody><tr>
<td>无选项</td>
<td>没有堆栈信息输出</td>
</tr>
<tr>
<td>-s或者-stacktrace</td>
<td>输出关键性的堆栈信息</td>
</tr>
<tr>
<td>-S或者–full-stacktrace</td>
<td>输出全部堆栈信息</td>
</tr>
</tbody></table>
<p>一般推荐使用-s而不是-S，因为-S输出的堆栈太多太长。不好看。而-s比较精简，可以定位解决我们大部分的问题。</p>
<h3 id="自己使用日志信息调试"><a href="#自己使用日志信息调试" class="headerlink" title="自己使用日志信息调试"></a>自己使用日志信息调试</h3><p>通常情况下我们一般都是使用print系统方法，把日志信息输出到标准的控制台输出流。</p>
<p>除了print系统方法之外，也可以使用内置的logger更灵活地控制输出不同级别的日志。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">logger.quiet(<span class="string">'quiet日志信息'</span>)</span><br><span class="line">logger.error(<span class="string">'error日志信息'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn日志信息'</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="Gradle命令行"><a href="#Gradle命令行" class="headerlink" title="Gradle命令行"></a>Gradle命令行</h2><h3 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h3><p>查看帮助的方式很简单，基本都是在命令后跟-h或者–help。有的时候会有-?.如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">.<span class="regexp">/gradlew -?</span></span><br><span class="line"><span class="regexp">./g</span>radle -h</span><br><span class="line">.<span class="regexp">/gradle -help</span></span><br></pre></td></tr></table></figure></div>

<h3 id="查看所有可执行的Tasks"><a href="#查看所有可执行的Tasks" class="headerlink" title="查看所有可执行的Tasks"></a>查看所有可执行的Tasks</h3><p>通过运行./gradlew tasks命令。</p>
<h3 id="Gradle-Help任务"><a href="#Gradle-Help任务" class="headerlink" title="Gradle Help任务"></a>Gradle Help任务</h3><p>Gradle还内置了一个help task,这个help可以让我们了解每一个task的使用帮助，用法是./gradlew help –task.</p>
<h3 id="强制刷新依赖"><a href="#强制刷新依赖" class="headerlink" title="强制刷新依赖"></a>强制刷新依赖</h3><p>强制刷新很简单，只要在命令行运行的时候加上–refresh-dependencies参数就可以。</p>
<h3 id="多任务调用"><a href="#多任务调用" class="headerlink" title="多任务调用"></a>多任务调用</h3><p>通过命令行执行多个任务非常简单，只需要按顺序以空格分开就可以了。如./gradlew clean jar。</p>
<h3 id="通过任务名字缩写执行"><a href="#通过任务名字缩写执行" class="headerlink" title="通过任务名字缩写执行"></a>通过任务名字缩写执行</h3><p>Gradle提供了基于驼峰命名法的缩写调用。比如connectCheck，执行的时候可以使用./gradlew connectTask,也可以使用./gradlew cC的方法来执行。</p>
]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Groovy基础</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC2%E7%AB%A0-Groovy%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Groovy基础"><a href="#Groovy基础" class="headerlink" title="Groovy基础"></a>Groovy基础</h1><p>Groovy是基于JVM虚拟机的一种动态语言。每个Gradle的build脚本文件都是一个Groovy脚本文件。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>在Groovy中，分号不是必需的。在Groovy中，单引号和双引号都可以定义一个字符串变量 ，单引号标记的是纯粹的字符串变量，而不是对字符串里的表达式做运行，但是双引号可以。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> printString &#123;</span><br><span class="line">	<span class="keyword">def</span> str1 = <span class="string">'单引号'</span></span><br><span class="line">	<span class="keyword">def</span> str2 = <span class="string">"双引号"</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">println</span> <span class="string">"单引号定义的字符串类型:"</span>+str1.getClass().name</span><br><span class="line">	<span class="keyword">println</span> <span class="string">"双引号定义的字符串类型:"</span>+str2.getClass().name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">单引号定义的字符串类型:java.lang.String</span><br><span class="line">双引号定义的字符串类型:java.lang.String</span><br></pre></td></tr></table></figure></div>

<p>而双引号可以做运算:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span>  printStringVar&#123;</span><br><span class="line">	<span class="keyword">def</span> name = <span class="string">'张三'</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">println</span> <span class="string">'单引号的变量计算:$&#123;name&#125;'</span></span><br><span class="line">	<span class="keyword">println</span> <span class="string">"双引号的变量计算:$&#123;name&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">单引号的变量计算:$&#123;name&#125;</span><br><span class="line">双引号的变量计算:张三</span><br></pre></td></tr></table></figure></div>

<p>一个$符号紧跟着一对花括号，花括号里放表达式，如${name}、${1+1}等，只有一个变量的时候，可以省略花括号，如$name。</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> printList &#123;</span><br><span class="line">	<span class="keyword">def</span> numList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">	<span class="keyword">println</span> numList.getClass().name</span><br><span class="line"></span><br><span class="line">	<span class="keyword">println</span> numList[<span class="number">1</span>]<span class="comment">//访问第二个元素</span></span><br><span class="line">	<span class="keyword">println</span> numList[-<span class="number">1</span>]<span class="comment">//访问最后一个元素</span></span><br><span class="line">	<span class="keyword">println</span> numList[-<span class="number">2</span>]<span class="comment">//访问倒数第二个元素</span></span><br><span class="line">	<span class="keyword">println</span> numList[<span class="number">1</span>..<span class="number">3</span>]<span class="comment">//访问第二个到第四个元素</span></span><br><span class="line"></span><br><span class="line">	numList.<span class="keyword">each</span> &#123;</span><br><span class="line">		<span class="keyword">println</span> it</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Groovy还为List提供了非常方便的迭代操作，这就是each方法。</p>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map用法和List想像，只不过它的值是一个K:V键值对。访问也非常灵活，采用map[key]或者map.key都可以。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> printMap&#123;</span><br><span class="line">	<span class="keyword">def</span> map1 = [<span class="string">'name'</span>:<span class="string">'张三'</span>,<span class="string">'age'</span>:<span class="number">18</span>]</span><br><span class="line">	<span class="keyword">println</span> map1.getClass().name</span><br><span class="line"></span><br><span class="line">	<span class="keyword">println</span> map1[<span class="string">'name'</span>]</span><br><span class="line">	<span class="keyword">println</span> map1.age</span><br><span class="line"></span><br><span class="line">	map1.<span class="keyword">each</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">"key:$&#123;it.key&#125;,Value:$&#123;it.value&#125;"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="括号可以省略"><a href="#括号可以省略" class="headerlink" title="括号可以省略"></a>括号可以省略</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> invokeMethod&#123;</span><br><span class="line">	method1(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">	method1 <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> method1(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line">	<span class="keyword">println</span> a+b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="return可以不写"><a href="#return可以不写" class="headerlink" title="return可以不写"></a>return可以不写</h3><p>在Groovy中，定义有返回值的方法时，return语句不是必需的。当没有return时，Groovy会把方法执行过程中的最后一句代码作为返回值。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> printMethodReturn&#123;</span><br><span class="line">	<span class="keyword">def</span> max1 = method2 <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">	<span class="keyword">def</span> max2 = method2 <span class="number">3</span>,<span class="number">5</span></span><br><span class="line">	<span class="keyword">println</span> <span class="string">"max1:$&#123;max1&#125;,max2:$&#123;max2&#125;"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> method2(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">		a	</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		b</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="代码块可以作为参数传递"><a href="#代码块可以作为参数传递" class="headerlink" title="代码块可以作为参数传递"></a>代码块可以作为参数传递</h3><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> helloJavaBean&#123;</span><br><span class="line">	Person p = <span class="keyword">new</span> Person()</span><br><span class="line">	<span class="keyword">println</span> <span class="string">"名字是:$&#123;p.name&#125;"</span></span><br><span class="line">	p.name=<span class="string">"张三"</span></span><br><span class="line">	<span class="keyword">println</span> <span class="string">"名字是:$&#123;p.name&#125;"</span></span><br><span class="line">	<span class="keyword">println</span> <span class="string">"年龄是:$&#123;p.age&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person&#123;</span><br><span class="line">	<span class="keyword">private</span> String name</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> getAge()&#123;</span><br><span class="line">		<span class="number">18</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在Groovy中，并不是一定要定义成员变量才能作为类的属性访问。我们直接用getter/setter方法，也一样可以当作属性访问。</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是Groovy的一个非常重要的特性，是DSL的基础。</p>
<h3 id="初识闭包"><a href="#初识闭包" class="headerlink" title="初识闭包"></a>初识闭包</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> helloClosure&#123;</span><br><span class="line">	customEach&#123;</span><br><span class="line">		<span class="keyword">println</span> it</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	eachMap&#123;k,v-&gt;<span class="keyword">println</span> <span class="string">"$&#123;k&#125; is $&#123;v&#125;"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> customEach(closure)&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i in <span class="number">1</span>..<span class="number">10</span>)&#123;</span><br><span class="line">		closure(i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="向闭包传递参数"><a href="#向闭包传递参数" class="headerlink" title="向闭包传递参数"></a>向闭包传递参数</h3><p>当闭包有一个参数时，默认就是it，当有多个参数时，it就不能表达了，我们需要把参数一一列出。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> eachMap(closure)&#123;</span><br><span class="line">	<span class="keyword">def</span> map1 = [<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="number">18</span>]</span><br><span class="line">	map1.<span class="keyword">each</span>&#123;</span><br><span class="line">		closure(it.key,it.value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="闭包委托"><a href="#闭包委托" class="headerlink" title="闭包委托"></a>闭包委托</h3><p>Groovy的闭包有thisObject,owener,delegate三个属性。默认情况下，delegate和owner是相等的，但是delegate是可以被修改的。</p>
<p>thisObject的优先级最高，thisObject其实就是这个构建脚本的上下文，它和脚本中的this对象是相等的。优先级从高到低依次是：thisObject&gt;owner&gt;delegate。</p>
<p>在DSL中，比如Gradle，我们一般会指定delegate为当前的it，这样我们在闭包内就可以对该it进行配置，如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> configClosure&#123;</span><br><span class="line">	person&#123;</span><br><span class="line">		name=<span class="string">"张三"</span></span><br><span class="line">		age = <span class="number">18</span></span><br><span class="line">		dumpPerson()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person&#123;</span><br><span class="line">	String name</span><br><span class="line">	<span class="keyword">int</span> age</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> dumpPerson()&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">"name:$&#123;name&#125;,age:$&#123;age&#125;"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> person(Closure&lt;Person&gt; closure)&#123;</span><br><span class="line">	Person p = <span class="keyword">new</span> Person()</span><br><span class="line">	closure.delegate = p</span><br><span class="line">	closure.setResolveStrategy(Closure.DELEGATE_FIRST)</span><br><span class="line">	closure(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="DSL"><a href="#DSL" class="headerlink" title="DSL"></a>DSL</h2><p>DSL,即Domain Specific Language，领域特定语言，就是专门关注某一领域的语言，在于专，而不是全。</p>
<p>Gradle就是一门DSL,它是基于Groovy，专门解决自动化构建的DSL。</p>
]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Groovy</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle构建脚本基础</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC3%E7%AB%A0-Gradle%E6%9E%84%E5%BB%BA%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Gradle构建脚本基础"><a href="#Gradle构建脚本基础" class="headerlink" title="Gradle构建脚本基础"></a>Gradle构建脚本基础</h1><h2 id="Settings文件"><a href="#Settings文件" class="headerlink" title="Settings文件"></a>Settings文件</h2><p>在Gradle中，定义了一个设置文件，用于初始化以及工程树的配置。设置文件的默认名为settings.gradle,放在根工程目录下。</p>
<p>设置文件大多数的作用都是为了配置子工程。根工程相当于Android Studio中的Project，一个根工程可以有很多子工程。</p>
<p>一个子工程只有在Settings文件里配置了Gradle才会识别，才会在构建的时候被包含进去。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">rootProject.name = <span class="string">'android-gradle'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">':Chapter1'</span></span><br><span class="line"><span class="keyword">project</span>(<span class="string">':Chapter1'</span>).projectDir = <span class="keyword">new</span> <span class="keyword">File</span>(rootDir,<span class="string">'Chapter1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">':Chapter2'</span></span><br><span class="line"><span class="keyword">project</span>(<span class="string">':Chapter2'</span>).projectDir = <span class="keyword">new</span> <span class="keyword">File</span>(rootDir,<span class="string">'Chapter2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">':Chapter3'</span></span><br><span class="line"><span class="keyword">project</span>(<span class="string">':Chapter3'</span>).projectDir = <span class="keyword">new</span> <span class="keyword">File</span>(rootDir,<span class="string">'Chapter3'</span>)</span><br></pre></td></tr></table></figure></div>

<p>上面的配置，定义了一些子项目，并且为它们指定了相应的目录。如果不指定，则默认为同级目录。利用这个特性，我们可以把我们的工程放到任何目录下，可以非常灵活地对我们的工程进行分级，分类等。只要在Settings文件里指定好路径就可以了。</p>
<h2 id="Build文件"><a href="#Build文件" class="headerlink" title="Build文件"></a>Build文件</h2><p>每个Project都会有一个Build文件，该文件是该Project构建的入口，可以在这里对Project进行配置，比如配置版本，需要哪些插件，依赖哪些库等。</p>
<p>Root Project也有自己的Build文件。Root Project 可以取到所有的Child Project，所以在Root Project的Build文件里可以对Child Project统一配置，如应用的插件，依赖的Maven中心库等。比如配置所有的Child Project的仓库为jcenter：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">subprojects</span>&#123;</span><br><span class="line">    <span class="keyword">repositories</span>&#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>又比如，开发一个大型的Java工程，该工程被分为很多小模块，每个模块都是一个Child Project，这些模块也是Java工程，这种情况下可以统一配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">subprojects</span>&#123;</span><br><span class="line">    apply plugin:<span class="string">"java"</span></span><br><span class="line">    <span class="keyword">repositories</span>&#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>除了subprojects外，还有allprojects,用于对所有工程进行配置。</p>
<h2 id="Projects以及Tasks"><a href="#Projects以及Tasks" class="headerlink" title="Projects以及Tasks"></a>Projects以及Tasks</h2><p>一个Project包含很多个Task，也就是说每个Project是由多个Task组成的。</p>
<h2 id="创建一个任务"><a href="#创建一个任务" class="headerlink" title="创建一个任务"></a>创建一个任务</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> customTask1&#123;</span><br><span class="line">	<span class="keyword">doFirst</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'customTask1:doFirst'</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">doLast</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'customTaks1:doLast'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建任务的另一种方式:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">tasks.create(<span class="string">"customTask2"</span>)&#123;</span><br><span class="line">	<span class="keyword">doFirst</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'customTask2:doFirst'</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">doLast</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'customTask2:doLast'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="任务依赖"><a href="#任务依赖" class="headerlink" title="任务依赖"></a>任务依赖</h2><p>任务之间是可以有依赖关系的，这样我们就能控制哪些任务优先于哪些任务执行。</p>
<p>创建任务的时候，通过dependsOn可以指定依赖的任务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> customTask3(dependsOn:customTask2)&#123;</span><br><span class="line">	<span class="keyword">doLast</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'customTask3:doLast'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>另外，一个任务可以依赖多个任务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> customTask4&#123;</span><br><span class="line">	dependsOn customTask3,customTask1</span><br><span class="line">	<span class="keyword">doLast</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'customTask4:doLast'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="任务间通过API控制、交互"><a href="#任务间通过API控制、交互" class="headerlink" title="任务间通过API控制、交互"></a>任务间通过API控制、交互</h2><p>要使用任务名操作任务，必须先定义声明，因为脚本是顺序执行的。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> customTask5&#123;</span><br><span class="line">	<span class="keyword">println</span> <span class="string">'customTask5'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customTask5.<span class="keyword">doFirst</span>&#123;</span><br><span class="line">	<span class="keyword">println</span> <span class="string">'customTask5:doFirst'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customTask5.<span class="keyword">doLast</span>&#123;</span><br><span class="line">	<span class="keyword">println</span> <span class="string">'customTask5:doLast'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p>Project和Task都允许用户添加额外的自定义属性，要添加自定义属性，通过应用所属对应的ext即可实现。添加之后，通过ext属性可以读取和设置，如果要同时添加多个自定义属性，可以通过ext代码块来实现。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">ext.name=<span class="string">'张三'</span></span><br><span class="line"></span><br><span class="line">ext&#123;</span><br><span class="line">	age = <span class="number">18</span></span><br><span class="line">	address = <span class="string">'中国'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> customTask6&#123;</span><br><span class="line">	<span class="keyword">println</span> <span class="string">"姓名是:$&#123;name&#125;,年龄是:$&#123;age&#125;,地址是：$&#123;address&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>相比局部变量，自定义属性有更为广泛的作用范围。可以跨Project，跨Task访问这些自定义的属性。只要能访问到这些属性所属的对象，这些属性就可以被访问到。</p>
<p>自定义属性不仅仅局限在Project和Task上，还可以应用在SourceSet中。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:<span class="string">"java"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceSets</span>.all&#123;</span><br><span class="line">	ext.resourcesDir = <span class="keyword">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceSets</span>&#123;</span><br><span class="line">	main&#123;</span><br><span class="line">		resourcesDir= <span class="string">'main/res'</span></span><br><span class="line">	&#125;</span><br><span class="line">	test&#123;</span><br><span class="line">		resourcesDir = <span class="string">'test/res'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> customTask7&#123;</span><br><span class="line">	<span class="keyword">sourceSets</span>.<span class="keyword">each</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">"$&#123;it.name&#125;的resourcesDir是:$&#123;it.resourcesDir&#125;"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在项目中，一般使用它来自定义版本和版本名称，把版本号和版本名称单独放在一个Gradle文件中。</p>
<h2 id="脚本即代码，代码即脚本"><a href="#脚本即代码，代码即脚本" class="headerlink" title="脚本即代码，代码即脚本"></a>脚本即代码，代码即脚本</h2>]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle插件</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC5%E7%AB%A0-Gradle%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Gradle插件"><a href="#Gradle插件" class="headerlink" title="Gradle插件"></a>Gradle插件</h1><h2 id="插件的作用"><a href="#插件的作用" class="headerlink" title="插件的作用"></a>插件的作用</h2><p>把插件应用到项目中，插件会扩展项目的功能，帮助在项目构建过程中做很多事情。</p>
<p>1、可以添加任务到项目中，帮助完成测试、编译、打包等。</p>
<p>2、可以添加依赖配置到项目中，可以通过它们配置项目在构建过程中需要的依赖，如编译时依赖的第三方库等。</p>
<p>3、可以向项目中现有的对象类型添加新的扩展属性、方法等。</p>
<p>4、可以对项目进行一些约定，如应用Java插件后，约定src/main/java目录是我们的源代码存在位置，在编译的时候也是编译这个目录下的Java源代码文件。</p>
<h2 id="如何应用一个插件"><a href="#如何应用一个插件" class="headerlink" title="如何应用一个插件"></a>如何应用一个插件</h2><p>插件的应用都是通过Project.apply()方法完成的。</p>
<h3 id="应用二进制插件"><a href="#应用二进制插件" class="headerlink" title="应用二进制插件"></a>应用二进制插件</h3><p>二进制插件就是实现了org.gradle.api.Plugin接口的插件，它们可以有Plugin id。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:<span class="string">'java'</span></span><br></pre></td></tr></table></figure></div>

<p>上面的语句，其中’java’就是Java插件的plugin id,它是唯一的。其实它对应的类型是org.gradle.api.plugins.JavaPlugin,所以通过该类型，我们也可以应用这个插件：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:org.gradle.api.plugins.JavaPlugin</span><br></pre></td></tr></table></figure></div>

<p>又因为包org.gradle.api.plugins是默认导入的，所以可以去掉包名直接写成:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:JavaPlugin</span><br></pre></td></tr></table></figure></div>

<h3 id="应用脚本插件"><a href="#应用脚本插件" class="headerlink" title="应用脚本插件"></a>应用脚本插件</h3><p>build.gradle</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply <span class="keyword">from</span>:<span class="string">'version.gradle'</span></span><br><span class="line"><span class="keyword">task</span> task1&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">"版本是:$&#123;versionName&#125;,版本号是:$&#123;versionCode&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>version.gradle</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">ext&#123;</span><br><span class="line">    versionName = <span class="string">'1.0'</span></span><br><span class="line">    versionCode = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="apply方法的其他用法"><a href="#apply方法的其他用法" class="headerlink" title="apply方法的其他用法"></a>apply方法的其他用法</h3><p>Project.apply()方法有三种使用方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> apply(Map&lt;String,?&gt; <span class="keyword">options</span>);</span><br><span class="line"><span class="keyword">void</span> apply(Closure closure);</span><br><span class="line"><span class="keyword">void</span> apply(Action&lt;? <span class="keyword">super</span> ObjectConfigurationAction&gt; action);</span><br></pre></td></tr></table></figure></div>

<p>闭包的方式如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply&#123;</span><br><span class="line">    plugin <span class="string">'java'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Action方式:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply (<span class="keyword">new</span> Action&lt;ObjectConfigurationAction&gt;)&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">void</span> execute(ObjectConfigurationAction objectConfigurationAction)&#123;</span><br><span class="line">        objectConfigurationAction.plugin(<span class="string">'java'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="应用第三方发布的插件"><a href="#应用第三方发布的插件" class="headerlink" title="应用第三方发布的插件"></a>应用第三方发布的插件</h3><p>第三方发布的jar的二进制插件，我们在应用的时候，必须要先在buildscript{}里配置其classpath才能使用。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span>&#123;</span><br><span class="line">    <span class="keyword">repositories</span>&#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span>&#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.5.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>buildscript{}是一个构建项目前，为项目进行前期准备和初始化相关配置依赖的地方，配置好所需的依赖，就可以应用插件了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:<span class="string">'com.android.application'</span></span><br></pre></td></tr></table></figure></div>


<h3 id="使用plugins-DSL应用插件"><a href="#使用plugins-DSL应用插件" class="headerlink" title="使用plugins DSL应用插件"></a>使用plugins DSL应用插件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">plugins&#123;</span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="更多好用的插件"><a href="#更多好用的插件" class="headerlink" title="更多好用的插件"></a>更多好用的插件</h3><p>可以在<a href="https://plugins.gradle.org/" target="_blank" rel="noopener">https://plugins.gradle.org/</a> 上找到，也可以在github上找。</p>
<h2 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h2><p>自定义插件必须实现Plugin接口，这个接口只有一个apply方法，该方法在插件被应用的时候执行。</p>
<p>定义在build脚本文件里：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:CustomPlugin</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CustomPlugin <span class="keyword">implements</span> Plugin&lt;<span class="keyword">Project</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">void</span> apply(<span class="keyword">Project</span> <span class="keyword">project</span>)&#123;</span><br><span class="line">        <span class="keyword">project</span>.<span class="keyword">task</span>(<span class="string">'customTask'</span>).<span class="keyword">doLast</span>&#123;</span><br><span class="line">            <span class="keyword">println</span> <span class="string">'这是一个通过自定义插件方式创建的任务。'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这种只能在自己项目里用，如果想开发一个独立的插件给所有想用的人，则需要创建单独工程来开发自定义插件了。</p>
<p>新建一个Android Module</p>
<p>清空Module的build.gradle内容，添加以下内容,配置开发所需的依赖:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'groovy'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation gradleApi()</span><br><span class="line">    implementation localGroovy()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后实现依赖类:</p>
<p>删除src/main目录下的所有文件，新建一个groovy文件夹,在这个文件夹新建包，如com.wangyz.plugins,然后在这个文件夹下，新建一个类，如:CustomPlugin.groovy,内容如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wangyz.plugins</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Plugin</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Project</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        project.task(<span class="string">'CustomTask'</span>).doLast &#123;</span><br><span class="line">            println(<span class="string">"这是一个通过自定义插件方式创建的任务"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在src/main文件夹下新建resources文件夹,然后在这个文件夹中新建META-INF文件夹，然后在这个文件夹下新建gradle-plugins文件夹,然后新建com.wangyz.plugins.customplugin.properties文件，文件名就是其它应用依赖的名。内容如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation-<span class="keyword">class</span>=com.wangyz.plugins.CustomPlugin</span><br></pre></td></tr></table></figure></div>

<p>写好后，我们配置发布：</p>
<p>在Module的build.gradle文件中，添加以下内容:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'maven-publish'</span></span><br><span class="line"></span><br><span class="line">publishing &#123;</span><br><span class="line">    publications &#123;</span><br><span class="line">        mavenJava(MavenPublication) &#123;</span><br><span class="line"></span><br><span class="line">            groupId <span class="string">'com.wangyz.plugins'</span></span><br><span class="line">            artifactId <span class="string">'customplugin'</span></span><br><span class="line">            version <span class="string">'1.0.0'</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">from</span> components.java</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publishing &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            <span class="comment">// change to point to your repo, e.g. http://my.org/repo</span></span><br><span class="line">            url uri(<span class="string">'/home/wangyz/repos'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后在控制台，输入以下指令:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">.<span class="regexp">/gradlew publish</span></span><br></pre></td></tr></table></figure></div>

<p>发布成功后，配置引用：</p>
<p>在需要引入依赖的工程根目录下的build.gradle添加以下内容:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            <span class="comment">//local maven repo path</span></span><br><span class="line">            url uri(<span class="string">'/home/wangyz/repos'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="comment">//这里配置为发布时填写的:groupId:artifactId:version</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.wangyz.plugins:customplugin:1.0.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在App的build.gradle下添加以下内容：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;这里的配置为:</span><br><span class="line">apply plugin: &#39;com.wangyz.plugins.customplugin&#39;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle任务</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC4%E7%AB%A0-Gradle%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="Gradle任务"><a href="#Gradle任务" class="headerlink" title="Gradle任务"></a>Gradle任务</h1><h2 id="多种方式创建任务"><a href="#多种方式创建任务" class="headerlink" title="多种方式创建任务"></a>多种方式创建任务</h2><p>1、直接以一个任务名字创建一个任务的方式:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="keyword">Task</span> task1 = <span class="keyword">task</span>(task1)</span><br><span class="line">task1.<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'task1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这种方式的创建其实是调用Project对象中的task(String name)方法。该方法的完整定义:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Task</span> <span class="keyword">task</span>(String name) <span class="keyword">throws</span> InvalidUserDataException</span><br></pre></td></tr></table></figure></div>

<p>2、以一个任务名字+一个对该任务配置的Map对象来创建任务:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="keyword">Task</span> task2 = <span class="keyword">task</span>(task2,<span class="keyword">group</span>:BasePlugin.BUILD_GROUP)</span><br><span class="line"></span><br><span class="line">task2.<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'task2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Task参数Map可用配置</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>基于一个存在的Task来创建，和我们类继承差不多</td>
<td>DefaultTask</td>
</tr>
<tr>
<td>overwrite</td>
<td>是否替换存在的Task，这个和type配合起来用</td>
<td>false</td>
</tr>
<tr>
<td>dependsOn</td>
<td>用于配置任务的依赖</td>
<td>[]</td>
</tr>
<tr>
<td>action</td>
<td>添加到任务中的一个Action或者闭包</td>
<td>null</td>
</tr>
<tr>
<td>description</td>
<td>用于配置任务的描述</td>
<td>null</td>
</tr>
<tr>
<td>group</td>
<td>用于配置任务的分组</td>
<td>null</td>
</tr>
</tbody></table>
<p>3、任务名字+闭包配置的方式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task3&#123;</span><br><span class="line">    <span class="keyword">description</span> <span class="string">'task3'</span></span><br><span class="line">    <span class="keyword">doLast</span>&#123;</span><br><span class="line">        <span class="keyword">println</span> <span class="string">'task3'</span></span><br><span class="line">        <span class="keyword">println</span> <span class="string">"任务描述:$&#123;description&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Map配置的项有限，所以可以通过闭包的方式进行更加灵活的配置。闭包里的委托对象就是Task，所以你可以使用Task对象的任何方法，属性等信息。</p>
<p>TaskContainer创建任务的方式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">tasks.create(<span class="string">"task4"</span>)&#123;</span><br><span class="line">    <span class="keyword">description</span> <span class="string">'task4'</span></span><br><span class="line">    <span class="keyword">doLast</span>&#123;</span><br><span class="line">        <span class="keyword">println</span> <span class="string">'task4'</span></span><br><span class="line">        <span class="keyword">println</span> <span class="string">"任务描述:$&#123;description&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>tasks是Project对象的属性，其类型是TaskContainer，可以用它来直接创建任务。</p>
<h2 id="多种方式访问任务"><a href="#多种方式访问任务" class="headerlink" title="多种方式访问任务"></a>多种方式访问任务</h2><p>创建的任务都会作为项目的一个属性，属性名就是任务名，所以可以直接通过任务名称来访问和操作任务:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task5</span><br><span class="line"></span><br><span class="line">task5.<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'task5:doLast'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>任务都是通过TaskContainer创建的，其实TaskContainer就是我们创建的集合。在Project中可以通过tasks属性访问TaskContainer，所以可以通过访问集合的方式来访问创建的任务：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task6</span><br><span class="line"></span><br><span class="line">tasks[<span class="string">'task6'</span>].<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'task6:doLast'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过路径来访问。访问方式有两种，一种是get,一种是find，区别在于get如果找不到任务会抛出UnKnownTaskException异常，而find在找不到任务时返回null。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task7</span><br><span class="line"></span><br><span class="line">tasks[<span class="string">'task7'</span>].<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> tasks.findByPath(<span class="string">':Chapter4:task7'</span>)</span><br><span class="line">    <span class="keyword">println</span> tasks.getByPath(<span class="string">':Chapter4:task7'</span>)</span><br><span class="line">    <span class="keyword">println</span> tasks.findByPath(<span class="string">'abc'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过名称访问。方式也有两种：get和find，区别和路径方式相同:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task8</span><br><span class="line"></span><br><span class="line">tasks[<span class="string">'task8'</span>].<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> tasks.findByName(<span class="string">'task8'</span>)</span><br><span class="line">    <span class="keyword">println</span> tasks.findByName(<span class="string">'task8'</span>)</span><br><span class="line">    <span class="keyword">println</span> tasks.findByName(<span class="string">'abc'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过路径访问的时候，参数值可以是任务路径，也可以是任务名字。而通过名称访问，参数只能是任务名称,不能是路径。</p>
<h2 id="任务分组和描述"><a href="#任务分组和描述" class="headerlink" title="任务分组和描述"></a>任务分组和描述</h2><p>任务是可以分组和添加描述的。任务分组其实就是对任务分类，便于对任务归类整理。任务的描述就是说明任务有什么用，是任务的大概说明。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task9&#123;</span><br><span class="line">    <span class="keyword">group</span> BasePlugin.BUILD_GROUP</span><br><span class="line">    <span class="keyword">description</span> <span class="string">'构建任务'</span></span><br><span class="line">    <span class="keyword">doLast</span>&#123;</span><br><span class="line">        <span class="keyword">println</span> <span class="string">'task9:doLast'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="lt-lt-操作符"><a href="#lt-lt-操作符" class="headerlink" title="&lt;&lt;操作符"></a>&lt;&lt;操作符</h2><p>在Gradle 5.1后已经废弃。</p>
<h2 id="任务的执行分析"><a href="#任务的执行分析" class="headerlink" title="任务的执行分析"></a>任务的执行分析</h2><p>当我们执行一个任务的时候，其实就是执行其拥有的actions列表。这个列表保存在Task的对象实例中的actions成员变量中，其类型是List。</p>
<h2 id="任务排序"><a href="#任务排序" class="headerlink" title="任务排序"></a>任务排序</h2><p>通过任务的shouldRunAfter和mustRunAfter这两个方法，可以控制一个任务应该或者一定要在某个任务之后执行。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task12&#123;</span><br><span class="line">    <span class="keyword">doLast</span>&#123;</span><br><span class="line">        <span class="keyword">println</span> <span class="string">'task12'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> task13&#123;</span><br><span class="line">    <span class="keyword">doLast</span>&#123;</span><br><span class="line">        <span class="keyword">println</span> <span class="string">'task13'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task12.mustRunAfter task13</span><br></pre></td></tr></table></figure></div>

<h2 id="任务的启用和禁用"><a href="#任务的启用和禁用" class="headerlink" title="任务的启用和禁用"></a>任务的启用和禁用</h2><p>Task中有个enabled属性，用于启用和禁用任务，默认为true,表示启用，设置为false，则禁止任务执行，输出会提示该任务被跳过。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task14 &#123;</span><br><span class="line">    <span class="keyword">doLast</span>&#123;</span><br><span class="line">        <span class="keyword">println</span> <span class="string">'task14'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task14.enabled = <span class="keyword">false</span></span><br></pre></td></tr></table></figure></div>

<h2 id="任务的onlyIf断言"><a href="#任务的onlyIf断言" class="headerlink" title="任务的onlyIf断言"></a>任务的onlyIf断言</h2><p>Task有一个onlyIf方法，它接受一个闭包作为参数，如果该闭包返回true,则该任务执行，否则跳过。</p>
<p>以打渠道包为例。首发应用宝和百度，直接编译会打出所有包，执行时间长，不符合需求，可以采用onlyIf来控制：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String BUILD_APP = <span class="string">"build_app"</span></span><br><span class="line"><span class="keyword">final</span> String BUILD_APPS_ALL = <span class="string">"all"</span></span><br><span class="line"><span class="keyword">final</span> String BUILD_APPS_SHOUFA = <span class="string">"shoufa"</span></span><br><span class="line"><span class="keyword">final</span> String BUILD_APPS_EXCLUDE_SHOUFA = <span class="string">"exclude_shoufa"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span>(QQRelease).<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'打应用宝的包'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span>(BaiduRelease).<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'打百度的包'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span>(HuaWeiRelease).<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'打华为的包'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span>(MIUIRelease).<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'打MIUI的包'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> build&#123;</span><br><span class="line">    <span class="keyword">group</span> BasePlugin.BUILD_GROUP</span><br><span class="line">    <span class="keyword">description</span> <span class="string">"打渠道包"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build.dependsOn QQRelease,BaiduRelease,HuaWeiRelease,MIUIRelease</span><br><span class="line"></span><br><span class="line">QQRelease.onlyIf&#123;</span><br><span class="line">    <span class="keyword">def</span> execute = <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">project</span>.hasProperty(BUILD_APP))</span><br><span class="line">    &#123;</span><br><span class="line">        Object buildApp = <span class="keyword">project</span>.property(BUILD_APP)</span><br><span class="line">        <span class="keyword">if</span>(BUILD_APPS_SHOUFA.equals(buildApp)||BUILD_APPS_ALL.equals(buildApp))</span><br><span class="line">        &#123;</span><br><span class="line">            execute = <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            execute = <span class="keyword">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        execute = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    execute</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BaiduRelease.onlyIf&#123;</span><br><span class="line">    <span class="keyword">def</span> execute = <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">project</span>.hasProperty(BUILD_APP))</span><br><span class="line">    &#123;</span><br><span class="line">        Object buildApp = <span class="keyword">project</span>.property(BUILD_APP)</span><br><span class="line">        <span class="keyword">if</span>(BUILD_APPS_SHOUFA.equals(buildApp)||BUILD_APPS_ALL.equals(buildApp))</span><br><span class="line">        &#123;</span><br><span class="line">            execute = <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            execute = <span class="keyword">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        execute = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    execute</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HuaWeiRelease.onlyIf&#123;</span><br><span class="line">    <span class="keyword">def</span> execute = <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">project</span>.hasProperty(BUILD_APP))</span><br><span class="line">    &#123;</span><br><span class="line">        Object buildApp = <span class="keyword">project</span>.property(BUILD_APP)</span><br><span class="line">        <span class="keyword">if</span>(BUILD_APPS_EXCLUDE_SHOUFA.equals(buildApp)||BUILD_APPS_ALL.equals(buildApp))</span><br><span class="line">        &#123;</span><br><span class="line">            execute = <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            execute = <span class="keyword">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        execute = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    execute</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MIUIRelease.onlyIf&#123;</span><br><span class="line">    <span class="keyword">def</span> execute = <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">project</span>.hasProperty(BUILD_APP))</span><br><span class="line">    &#123;</span><br><span class="line">        Object buildApp = <span class="keyword">project</span>.property(BUILD_APP)</span><br><span class="line">        <span class="keyword">if</span>(BUILD_APPS_EXCLUDE_SHOUFA.equals(buildApp)||BUILD_APPS_ALL.equals(buildApp))</span><br><span class="line">        &#123;</span><br><span class="line">            execute = <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            execute = <span class="keyword">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        execute = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    execute</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行方式如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">#打所有渠道包</span><br><span class="line">gradle build</span><br><span class="line">gradle -Pbuild_app=all build</span><br><span class="line">#打首发包</span><br><span class="line">gradle -Pbuild_app=shoufa build</span><br><span class="line">#打非首发包</span><br><span class="line">gradle -Pbuild_app=exclude_shoufa build</span><br></pre></td></tr></table></figure></div>

<p>命令行中-P意思是为Project指定K-V格式的属性键值对，格式为-PK=V。</p>
<h2 id="任务规则"><a href="#任务规则" class="headerlink" title="任务规则"></a>任务规则</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">tasks.addRule(<span class="string">"对规则的描述"</span>)&#123;</span><br><span class="line">    String taskName-&gt;</span><br><span class="line">        <span class="keyword">task</span>(taskName) &#123;</span><br><span class="line">            <span class="keyword">println</span> <span class="string">"$&#123;taskName&#125;任务不存在"</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> task15&#123;</span><br><span class="line">    dependsOn missTask</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Gradle 插件</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC6%E7%AB%A0-Java_Gradle%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Java-Gradle-插件"><a href="#Java-Gradle-插件" class="headerlink" title="Java Gradle 插件"></a>Java Gradle 插件</h1><h2 id="如何应用"><a href="#如何应用" class="headerlink" title="如何应用"></a>如何应用</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:<span class="string">'java'</span></span><br></pre></td></tr></table></figure></div>

<h2 id="Java插件约定的项目结构"><a href="#Java插件约定的项目结构" class="headerlink" title="Java插件约定的项目结构"></a>Java插件约定的项目结构</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Project</span></span><br><span class="line">|--build.gradle</span><br><span class="line">|--src</span><br><span class="line">    |--main</span><br><span class="line">            |--java</span><br><span class="line">            |--resources</span><br><span class="line">    |--test</span><br><span class="line">        |--java</span><br><span class="line">        |--resources</span><br></pre></td></tr></table></figure></div>

<p>main和test是Java插件为我们内置的两个源代码集合，如果想添加自定义的集合，如vip，则可以这样修改：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:<span class="string">'java'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceSets</span>&#123;</span><br><span class="line">    vip&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>添加一个vip源代码集合，然后我们在src目录下添加vip/java,vip/resources目录，就可以分别存放vip相关的源代码和资源文件了。</p>
<p>特殊情况下，我们需要修改java的文件目录，只需要在build.gradle配置对应的目录即可:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sourceSets</span>&#123;</span><br><span class="line">    main&#123;</span><br><span class="line">        java&#123;</span><br><span class="line">            srcDir <span class="string">'src/java'</span></span><br><span class="line">        &#125;</span><br><span class="line">        resources&#123;</span><br><span class="line">            srcDic <span class="string">'src/resources'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="如何配置很三方依赖"><a href="#如何配置很三方依赖" class="headerlink" title="如何配置很三方依赖"></a>如何配置很三方依赖</h2><p>要想使用第三方依赖，需要告诉Gradle如何找到这些依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">repositories</span>&#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以上脚本我们配置了一个Maven中心库，告诉Gradle可以在Maven中心库中搜寻我们依赖的第三方库。我们也可以从jcenter库、ivy库、本地Maven库、自己搭建的Maven私服库等 ，甚至我们本地配置的文件夹也可以作为一个仓库。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">repositories</span>&#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven&#123;</span><br><span class="line">        url <span class="string">'http://www.mavenurl.com'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>有了仓库后，通过配置来告诉Gradle需要依赖什么：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    implementation <span class="keyword">group</span>:<span class="string">'com.squareup.okhttp3'</span>,name:<span class="string">'okhttp'</span>,version:<span class="string">'3.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以上的简写方式，直接把group,name,version去掉，以:分隔：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    implementation <span class="string">'com.squareup.okhttp3:okhttp:3.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>除了以上这种编译时依赖，Gradle还提供了编译测试用例时的依赖:testImplementation</p>
<p>Java插件可以为不同的源集在编译和运行时指定不同的依赖：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    mainImplementation <span class="string">'com.squareup.okhttp3:okhttp:3.0.1'</span></span><br><span class="line">    vipImplementation <span class="string">'com.squareup.okhttp3:okhttp:2.5.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>项目依赖:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    implementation <span class="keyword">project</span>(<span class="string">':demo'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>文件依赖:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    implementation files(<span class="string">'libs/demo.jar'</span>,<span class="string">'libs/demo2.jar'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>简写方式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir:<span class="string">'libs'</span>,<span class="keyword">include</span>:<span class="string">'*.jar'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="如何构建一个Java项目"><a href="#如何构建一个Java项目" class="headerlink" title="如何构建一个Java项目"></a>如何构建一个Java项目</h2><p>常见的任务：</p>
<p>build任务：构建整个项目。</p>
<p>clean任务：删除build目录以及其它构建生成的文件。</p>
<p>assemble任务：不会执行单元测试，只编译和打包。</p>
<p>check任务：只会执行单元测试。</p>
<p>javadoc任务：生成Java格式的doc api文档。</p>
<h2 id="源码集合-SourceSet-概念"><a href="#源码集合-SourceSet-概念" class="headerlink" title="源码集合[SourceSet]概念"></a>源码集合[SourceSet]概念</h2><p>SourceSet是Java插件用来描述和管理源代码及其资源的一个概念，是一个Java源代码文件和资源文件的集合。</p>
<h2 id="Java插件添加的任务"><a href="#Java插件添加的任务" class="headerlink" title="Java插件添加的任务"></a>Java插件添加的任务</h2><p>详见p65</p>
<h2 id="Java插件添加的属性"><a href="#Java插件添加的属性" class="headerlink" title="Java插件添加的属性"></a>Java插件添加的属性</h2><p>详见p66</p>
<h2 id="多项目构建"><a href="#多项目构建" class="headerlink" title="多项目构建"></a>多项目构建</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Project</span></span><br><span class="line">|--app</span><br><span class="line">    |--app.iml</span><br><span class="line">    |--build.gradle</span><br><span class="line">    |--src</span><br><span class="line">|--base</span><br><span class="line">    |--base.iml</span><br><span class="line">    |--build.gradle</span><br><span class="line">    |--src</span><br></pre></td></tr></table></figure></div>
<p>以上是目录结构，app是主项目，base是我们的基础依赖项目。下面在settings.gradle中配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">':app'</span></span><br><span class="line"><span class="keyword">project</span>(<span class="string">':app'</span>).projectDir=<span class="keyword">new</span> <span class="keyword">File</span>(rootDir,<span class="string">'chapter6/demo/app'</span>)</span><br><span class="line"><span class="keyword">include</span> <span class="string">':base'</span></span><br><span class="line"><span class="keyword">project</span>(<span class="string">':base'</span>).projectDir=<span class="keyword">new</span> <span class="keyword">File</span>(rootDir,<span class="string">'chapter6/demo/base'</span>)</span><br></pre></td></tr></table></figure></div>

<p>Gradle为我们提供了基于根项目对其所有子项目的通用配置的方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">subprojects</span>&#123;</span><br><span class="line">    apply plugin:<span class="string">'java'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">repositories</span>&#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="如何发布构件"><a href="#如何发布构件" class="headerlink" title="如何发布构件"></a>如何发布构件</h2><p>详见p69</p>
<h2 id="生成Idea和Eclipse配置"><a href="#生成Idea和Eclipse配置" class="headerlink" title="生成Idea和Eclipse配置"></a>生成Idea和Eclipse配置</h2><p>详见p71</p>
]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Gradle 插件</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC7%E7%AB%A0-Android_Gradle%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Android-Gradle-插件"><a href="#Android-Gradle-插件" class="headerlink" title="Android Gradle 插件"></a>Android Gradle 插件</h1><h2 id="Android-Gradle-插件简介"><a href="#Android-Gradle-插件简介" class="headerlink" title="Android Gradle 插件简介"></a>Android Gradle 插件简介</h2><p>从Gradle角度来看，Android其实是Gradle的一个第三方插件，它是由Google的Android团队开发的。但从Android角度 来看，Android插件是基于Gradle构建的，和Android Studio完美搭配的新一代构建系统。</p>
<h2 id="Android-Gradle-插件分类"><a href="#Android-Gradle-插件分类" class="headerlink" title="Android Gradle 插件分类"></a>Android Gradle 插件分类</h2><p>在Android中有三类工程，一类是App应用工程，它可以生成一个可运行的apk应用。一类是Library库工程，它可以生成AAR包给其它工程使用。一类是Test测试工程，用于对App工程或者Library库工程进行单元测试。</p>
<p>App插件id: com.android.application</p>
<p>Library插件id: com.android.library</p>
<p>Test插件id: com.android.test</p>
<h2 id="应用Android-Gradle插件"><a href="#应用Android-Gradle插件" class="headerlink" title="应用Android Gradle插件"></a>应用Android Gradle插件</h2><p>要应用一个插件，必须知道它们的插件id,如果是第三方插件，还需要配置它们的依赖classpath。Android Gradle插件就是第三方插件，它托管在Jcenter上，所在在应用前，需要配置依赖classpath，这样应用插件的时候，Gradle才能找到它们。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span>&#123;</span><br><span class="line">    <span class="keyword">repositories</span>&#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span>&#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.5.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>配置好后，就可以应用插件了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:<span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android&#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Android-Gradle-工程示例"><a href="#Android-Gradle-工程示例" class="headerlink" title="Android Gradle 工程示例"></a>Android Gradle 工程示例</h2><p>详见p75</p>
<p>Android Gradle工程的配置，都是在android{}中，这是唯一的入口 。</p>
<h3 id="compileSdkVersion"><a href="#compileSdkVersion" class="headerlink" title="compileSdkVersion"></a>compileSdkVersion</h3><h3 id="buildToolsVersion"><a href="#buildToolsVersion" class="headerlink" title="buildToolsVersion"></a>buildToolsVersion</h3><h3 id="defaultConfig"><a href="#defaultConfig" class="headerlink" title="defaultConfig"></a>defaultConfig</h3><p>defaultConfig是默认的配置。它是一个ProductFlavor，ProductFlavor允许我们根据不同情况同时生成多个不同的APK包。</p>
<h3 id="buildTypes"><a href="#buildTypes" class="headerlink" title="buildTypes"></a>buildTypes</h3><h2 id="Android-Gradle-任务"><a href="#Android-Gradle-任务" class="headerlink" title="Android Gradle 任务"></a>Android Gradle 任务</h2><h2 id="从Eclipse迁移到Android-Gradle工程"><a href="#从Eclipse迁移到Android-Gradle工程" class="headerlink" title="从Eclipse迁移到Android Gradle工程"></a>从Eclipse迁移到Android Gradle工程</h2><h3 id="使用Android-Studio导入"><a href="#使用Android-Studio导入" class="headerlink" title="使用Android Studio导入"></a>使用Android Studio导入</h3><h3 id="从Eclipse-ADT导出"><a href="#从Eclipse-ADT导出" class="headerlink" title="从Eclipse+ADT导出"></a>从Eclipse+ADT导出</h3>]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Android组件化开发的简单应用</title>
    <url>/2019/12/31/Android/Android%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="组件化开发的主要步骤："><a href="#组件化开发的主要步骤：" class="headerlink" title="组件化开发的主要步骤："></a>组件化开发的主要步骤：</h1><h2 id="一、新建Modules"><a href="#一、新建Modules" class="headerlink" title="一、新建Modules"></a>一、新建Modules</h2><p>1、新建Project,作为应用的主Module。</p>
<p>2、新建Module:”Common”，类型选择”Android Library”,作为所有其它Module的基础依赖库。</p>
<p>3、新建Module:”Home”，类型选择”Android Library”,依赖”Common”。</p>
<p>4、新建Module:”Project”，类型选择”Android Library”,依赖”Common”。</p>
<p>5、新建Module:”User”，类型选择”Android Library”,依赖”Common”。</p>
<a id="more"></a>

<p><strong>具体新建怎样的Module，可以根据实际业务来调整。这里选择新建”Home”、”Project”、”User”来模拟业务。</strong></p>
<h2 id="二、增加Flag以便在release和debug模式下切换"><a href="#二、增加Flag以便在release和debug模式下切换" class="headerlink" title="二、增加Flag以便在release和debug模式下切换"></a>二、增加Flag以便在release和debug模式下切换</h2><p><strong>1、在gradle.properties文件中增加一个变量</strong></p>
<pre><code>isDebug = false</code></pre><p><a href="/img/loading.gif" data-fancybox="group" data-caption="flag" class="fancybox"><img alt="flag" data-src="/images/flag.png" src="/img/loading.gif" class="lazyload" title="flag"></a></p>
<p><strong>当isDebug为true时，为Debug模式，其它的Module可以作为单独的App运行。当isDebug为false时，为Release模式，其它的Module为Library模式，不能单独运行,此时只有主App可以运行。</strong></p>
<p><strong>2、修改app的build.gradle文件</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation <span class="keyword">project</span>(<span class="string">':common'</span>)</span><br><span class="line"><span class="keyword">if</span> (!isDebug.toBoolean()) &#123;</span><br><span class="line">    implementation <span class="keyword">project</span>(<span class="string">':home'</span>)</span><br><span class="line">    implementation <span class="keyword">project</span>(<span class="string">':project'</span>)</span><br><span class="line">    implementation <span class="keyword">project</span>(<span class="string">':user'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="/img/loading.gif" data-fancybox="group" data-caption="app_flag" class="fancybox"><img alt="app_flag" data-src="/images/app_flag.png" src="/img/loading.gif" class="lazyload" title="app_flag"></a></p>
<p><strong>3、修改home的build.gradle文件</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">if</span> (isDebug.toBoolean()) &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.library'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="/img/loading.gif" data-fancybox="group" data-caption="home_flag" class="fancybox"><img alt="home_flag" data-src="/images/home_flag.png" src="/img/loading.gif" class="lazyload" title="home_flag"></a></p>
<p><strong>4、修改project的build.gradle文件</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">if</span> (isDebug.toBoolean()) &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.library'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="/img/loading.gif" data-fancybox="group" data-caption="project_flag" class="fancybox"><img alt="project_flag" data-src="/images/project_flag.png" src="/img/loading.gif" class="lazyload" title="project_flag"></a></p>
<p><strong>5、修改user的build.gradle文件</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">if</span> (isDebug.toBoolean()) &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.library'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="/img/loading.gif" data-fancybox="group" data-caption="user_flag" class="fancybox"><img alt="user_flag" data-src="/images/user_flag.png" src="/img/loading.gif" class="lazyload" title="user_flag"></a></p>
<p>为便于各Module单独调试开发，可以在各Module下根据isDebug的变量区分模式。</p>
<p>切换工程到Project模式下，将原来的AndroidManifest.xml文件移除，在Module的src/main目录下新建debug和release目录，在新建的两个目录下，分别新建AndroidManifest.xml文件。以Home模块为例：</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="home_manifest" class="fancybox"><img alt="home_manifest" data-src="/images/home_manifest.png" src="/img/loading.gif" class="lazyload" title="home_manifest"></a></p>
<p><strong>Debug模式下的AndroidManifest.xml</strong></p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="home_debug_manifest" class="fancybox"><img alt="home_debug_manifest" data-src="/images/home_debug_manifest.png" src="/img/loading.gif" class="lazyload" title="home_debug_manifest"></a></p>
<p><strong>Release模式下的AndroidManifest.mxl</strong></p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="home_release_manifest" class="fancybox"><img alt="home_release_manifest" data-src="/images/home_release_manifest.png" src="/img/loading.gif" class="lazyload" title="home_release_manifest"></a></p>
<p>在Home下的build.gradle文件中配置AndroidManifest.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        if (isDebug.toBoolean()) &#123;</span><br><span class="line">            manifest.srcFile 'src/main/debug/AndroidManifest.xml'</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            manifest.srcFile 'src/main/release/AndroidManifest.xml'</span><br><span class="line">            java &#123; exclude 'debug/**' &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<p><a href="/img/loading.gif" data-fancybox="group" data-caption="home_gradle_source" class="fancybox"><img alt="home_gradle_source" data-src="/images/home_gradle_source.png" src="/img/loading.gif" class="lazyload" title="home_gradle_source"></a></p>
<p>其它Module也是相似的处理。</p>
<h2 id="三、统一管理Module版本号"><a href="#三、统一管理Module版本号" class="headerlink" title="三、统一管理Module版本号"></a>三、统一管理Module版本号</h2><p>1、为便于统一管理版本号，在项目的根目录下的build.gradle文件中增加统一的版本号:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   ext &#123;</span><br><span class="line">    compileSdkVersion = <span class="number">28</span></span><br><span class="line"></span><br><span class="line">    minSdkVersion = <span class="number">21</span></span><br><span class="line">    targetSdkVersion = <span class="number">28</span></span><br><span class="line">    versionCode = <span class="number">1</span></span><br><span class="line">    versionName = <span class="string">"1.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="/img/loading.gif" data-fancybox="group" data-caption="version" class="fancybox"><img alt="version" data-src="/images/version.png" src="/img/loading.gif" class="lazyload" title="version"></a></p>
<p>2、在其它Module下相应修改</p>
<p><strong>App模块:</strong></p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="app_version" class="fancybox"><img alt="app_version" data-src="/images/app_version.png" src="/img/loading.gif" class="lazyload" title="app_version"></a></p>
<p><strong>Common模块:</strong></p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="common_version" class="fancybox"><img alt="common_version" data-src="/images/common_version.png" src="/img/loading.gif" class="lazyload" title="common_version"></a></p>
<p><strong>Home模块:</strong></p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="home_version" class="fancybox"><img alt="home_version" data-src="/images/home_version.png" src="/img/loading.gif" class="lazyload" title="home_version"></a></p>
<p><strong>Project模块:</strong></p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="project_version" class="fancybox"><img alt="project_version" data-src="/images/project_version.png" src="/img/loading.gif" class="lazyload" title="project_version"></a></p>
<p><strong>User模块:</strong></p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="user_version" class="fancybox"><img alt="user_version" data-src="/images/user_version.png" src="/img/loading.gif" class="lazyload" title="user_version"></a></p>
<h2 id="四、各Module间通信"><a href="#四、各Module间通信" class="headerlink" title="四、各Module间通信"></a>四、各Module间通信</h2><p>为解决各Module间通信的问题，引入ARouter框架。GitHub地址：<a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener" title="ARouter">ARouter</a></p>
<p>为避免各Module重复引用，在Common中引用一次，其它Module复用即可。</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="common_arouter" class="fancybox"><img alt="common_arouter" data-src="/images/common_arouter.png" src="/img/loading.gif" class="lazyload" title="common_arouter"></a></p>
<p><strong>注意：由于其它依赖Common的Module也需要使用Arouter，因此在引入时，需要把implementation改为api。如果使用implementation,其它Module会无法使用Arouter。</strong></p>
<p>其它Module中使用:</p>
<p>不需要再次implementation,但是还是需要在dependencies增加</p>
<pre><code>annotationProcessor &apos;com.alibaba:arouter-compiler:1.2.2&apos;</code></pre><p>以及在android-defaultConfig中增加：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">javaCompileOptions &#123;</span><br><span class="line">           annotationProcessorOptions &#123;</span><br><span class="line">               arguments = [AROUTER_MODULE_NAME: <span class="keyword">project</span>.getName()]</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></div>

<p>注意：”AROUTER_MODULE_NAME”这个名称，不可以改为其它字符串，否则会编译报错。</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="home_arouter" class="fancybox"><img alt="home_arouter" data-src="/images/home_arouter.png" src="/img/loading.gif" class="lazyload" title="home_arouter"></a></p>
<p>在Common模块下增加BaseApplication,对ARouter进行初始化。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isDebugARouter = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDebugARouter) &#123;</span><br><span class="line">            ARouter.openLog();</span><br><span class="line">            ARouter.openDebug();</span><br><span class="line">        &#125;</span><br><span class="line">        ARouter.init(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在主Module:App中增加App,继承自BaseApplication,然后在AndroidManifefst.xml中引用。</p>
<blockquote>
<p>   <code>public class App extends BaseApplication {}</code></p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.wangyz.modules"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".App"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:appComponentFactory</span>=<span class="string">"whateverString"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:replace</span>=<span class="string">"android:appComponentFactory"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>对于需要被调用的Activity或者Fragment增加注解：</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="home_route" class="fancybox"><img alt="home_route" data-src="/images/home_route.png" src="/img/loading.gif" class="lazyload" title="home_route"></a></p>
<p><strong>可以新建一个常量类，用来保存这些路由地址。这里出于简化，没有再定义这个常量类。</strong></p>
<h3 id="调用方使用ARouter："><a href="#调用方使用ARouter：" class="headerlink" title="调用方使用ARouter："></a>调用方使用ARouter：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Fragment fragment = (Fragment) ARouter.getInstance().build(<span class="string">"/home/fragment"</span>).navigation();</span><br><span class="line">mFragmentManager.beginTransaction().replace(R.id.container, fragment).commit();</span><br></pre></td></tr></table></figure></div>

<p><a href="/img/loading.gif" data-fancybox="group" data-caption="app_arouter" class="fancybox"><img alt="app_arouter" data-src="/images/app_arouter.png" src="/img/loading.gif" class="lazyload" title="app_arouter"></a></p>
<h2 id="五、ButterKnife的引入"><a href="#五、ButterKnife的引入" class="headerlink" title="五、ButterKnife的引入"></a>五、ButterKnife的引入</h2><p>ButterKnife在单Module中使用时，比较简单，当在多Module下使用时，还是有些需要注意的事项。具体引用步骤如下:</p>
<p><strong>1、在项目根目录的build.gradle中引入依赖:</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.1.4'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.jakewharton:butterknife-gradle-plugin:9.0.0'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="/img/loading.gif" data-fancybox="group" data-caption="root_gradle" class="fancybox"><img alt="root_gradle" data-src="/images/root_gradle.png" src="/img/loading.gif" class="lazyload" title="root_gradle"></a></p>
<p>在common中引入依赖:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">api <span class="string">'com.jakewharton:butterknife:9.0.0'</span></span><br><span class="line">annotationProcessor <span class="string">'com.jakewharton:butterknife-compiler:9.0.0'</span></span><br></pre></td></tr></table></figure></div>

<p><a href="/img/loading.gif" data-fancybox="group" data-caption="common_butterknife" class="fancybox"><img alt="common_butterknife" data-src="/images/common_butterknife.png" src="/img/loading.gif" class="lazyload" title="common_butterknife"></a></p>
<p>在具体使用ButterKnife的Module中引入依赖:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   apply plugin: <span class="string">'com.jakewharton.butterknife'</span></span><br><span class="line"></span><br><span class="line">annotationProcessor <span class="string">'com.jakewharton:butterknife-compiler:9.0.0'</span></span><br></pre></td></tr></table></figure></div>

<p><a href="/img/loading.gif" data-fancybox="group" data-caption="home_butterknife_1" class="fancybox"><img alt="home_butterknife_1" data-src="/images/home_butterknife_1.png" src="/img/loading.gif" class="lazyload" title="home_butterknife_1"></a></p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="home_butterknife_2" class="fancybox"><img alt="home_butterknife_2" data-src="/images/home_butterknife_2.png" src="/img/loading.gif" class="lazyload" title="home_butterknife_2"></a></p>
<p>和ARouter一样，使用ButterKnife的Module虽然不用重复引用butterknife本身这个库，但是注解相关的库还是需要引用。</p>
<p>具体使用：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BindView</span>(R2.id.click)</span><br><span class="line">TextView mText;</span><br></pre></td></tr></table></figure></div>

<p><strong>BindView的时候，需要使用R2.id.xx</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OnClick</span>(R2.id.click)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Toast.makeText(getActivity().getApplicationContext(), <span class="string">"click"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>对应的点击事件等，如果是单个使用，也是使用R2.id.xx。如果是多个id一起使用，内部通过id来判断，则需要使用if…else if…，不能使用switch…case，并且if判断的id需要使用R.id.xx</strong></p>
<p><strong>默认是会报错，找不到R2相关的class，需要手动build一次才会生成。</strong></p>
<p><strong>注意：ButterKnife.9.0以后，需要jdk版本1.8以上，否则编译会报错。</strong></p>
<p>源码地址：<a href="https://github.com/milovetingting/Samples/tree/master/Modules" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/Modules</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>HandlerThread原理分析</title>
    <url>/2019/12/31/Android/HandlerThread%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="HandlerThread原理分析"><a href="#HandlerThread原理分析" class="headerlink" title="HandlerThread原理分析"></a>HandlerThread原理分析</h1><p>HandlerThread是一个内部拥有Handler和Looper的特殊Thread，可以方便地在子线程中处理消息。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>HandlerThread的使用比较简单。</p>
<a id="more"></a>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mHandlerThread = <span class="keyword">new</span> HandlerThread(THREAD_NAME);</span><br><span class="line">mHandlerThread.start();</span><br></pre></td></tr></table></figure></div>

<p>首先,实例化一个HandlerThread，然后调用start()方法。在start()方法中，会调用run()方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      mTid = Process.myTid();</span><br><span class="line"><span class="comment">//实例化looper对象</span></span><br><span class="line">      Looper.prepare();</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">	<span class="comment">//获取looper对象</span></span><br><span class="line">          mLooper = Looper.myLooper();</span><br><span class="line">	<span class="comment">//通知其它线程</span></span><br><span class="line">          notifyAll();</span><br><span class="line">      &#125;</span><br><span class="line">      Process.setThreadPriority(mPriority);</span><br><span class="line">      onLooperPrepared();</span><br><span class="line"><span class="comment">//开启循环</span></span><br><span class="line">      Looper.loop();</span><br><span class="line">      mTid = -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>然后，定义处理子线程消息的Handler:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   mThreadLooper = mHandlerThread.getLooper();</span><br><span class="line"></span><br><span class="line">mThreadHandler = <span class="keyword">new</span> Handler(mThreadLooper, <span class="keyword">new</span> Handler.Callback() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                   <span class="keyword">case</span> MSG_THREAD_UPDATE:</span><br><span class="line">                       <span class="comment">//在子线程中执行耗时任务</span></span><br><span class="line">                       SystemClock.sleep(<span class="number">3000</span>);</span><br><span class="line">                       mMainHandler.sendEmptyMessage(MSG_MAIN_UPDATE);</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   <span class="keyword">default</span>:</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></div>

<p>在HandlerThread.getLooper()方法中:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Looper <span class="title">getLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isAlive()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// If the thread has been started, wait until the looper has been created.</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive() &amp;&amp; mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mLooper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在getLooper()方法中，由于子线程可能还没有准备好looper,因此，会调用wait()方法等待，如果子线程looper已经准备好了，则会通过notifyAll()来唤醒。</p>
<p>在子线程中可以执行耗时的操作，执行完成后，可以通过在UI线程的Handler发送消息去通知UI变更。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mMainHandler.sendEmptyMessage(MSG_MAIN_UPDATE);</span><br></pre></td></tr></table></figure></div>

<p>UI线程的Handler:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为防止内存泄漏，引入WeakReference</span></span><br><span class="line">      <span class="keyword">private</span> WeakReference&lt;Activity&gt; mWeakReference;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">MainHandler</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">          mWeakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">          MainActivity activity = (MainActivity) mWeakReference.get();</span><br><span class="line">          <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                  <span class="keyword">case</span> MSG_MAIN_UPDATE:</span><br><span class="line">                      activity.updateInfo();</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  <span class="keyword">default</span>:</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>为防止内存泄漏，引入WeakReference。在onDestory()方法中，移除所有消息:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   mMainHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">mThreadLooper.quit();</span><br></pre></td></tr></table></figure></div>

<p>源码地址:<a href="https://github.com/milovetingting/Samples/tree/master/HandlerThread" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/HandlerThread</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>HandlerThread</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中的线程池</title>
    <url>/2019/12/31/Android/Android%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h1 id="Android中的线程池"><a href="#Android中的线程池" class="headerlink" title="Android中的线程池"></a>Android中的线程池</h1><p>在Android中，主线程不能执行耗时的操作，否则可能会导致ANR。那么，耗时操作应该在其它线程中执行。线程的创建和销毁都会有性能开销，创建过多的线程也会由于互相抢占系统资源而导致阻塞的现象。这个时候，就需要使用线程池。</p>
<a id="more"></a>

<p>线程池的优点可以概括为以下几点:</p>
<ul>
<li><p>1、重用线程池中的线程，避免线程创建、销毁带来的性能开销；</p>
</li>
<li><p>2、能有效地控制线程池的最大并发数，避免大量的线程之间因互相抢占系统资源导致的阻塞现象；</p>
</li>
<li><p>3、能够对线程进行简单的管理。</p>
</li>
</ul>
<blockquote>
<p>以上线程池的优点引用自《Android开发艺术探索》</p>
</blockquote>
<p>线程池的具体实现类为ThreadPoolExecutor，ThreadPoolExecutor继承自AbstractExecutorService,AbstractExecutorService又实现了ExecutorService接口，ExecutorService继承自Executor。</p>
<p>ThreadPoolExecutor有四个重载的构造方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">            Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">            threadFactory, defaultHandler);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">            Executors.defaultThreadFactory(), handler);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                             RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">           maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">           maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">           keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">       <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">       <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">       <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">       <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">       <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">       <span class="keyword">this</span>.handler = handler;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>最终都调用到了:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment"> * parameters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment"> *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment"> *        pool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment"> *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment"> *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment"> *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment"> *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> threadFactory the factory to use when the executor</span></span><br><span class="line"><span class="comment"> *        creates a new thread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler the handler to use when execution is blocked</span></span><br><span class="line"><span class="comment"> *        because the thread bounds and queue capacities are reached</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment"> *         or &#123;<span class="doctag">@code</span> threadFactory&#125; or &#123;<span class="doctag">@code</span> handler&#125; is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>对应这个方法中的参数:</p>
<ul>
<li><p><strong>corePoolSize</strong>:核心线程数。如果没有设置<strong>allowCoreThreadTimeOut</strong>为true，则核心线程空闲时也不会销毁。如果设置<strong>allowCoreThreadTimeOut</strong>为true,则受keepAliveTime控制，空闲时间超过keepAliveTime，会被回收。</p>
</li>
<li><p><strong>maximumPoolSize</strong>:最大线程数。</p>
</li>
<li><p><strong>keepAliveTime</strong>:非核心线程的空闲超时时长。超过这个时间，非核心线程会被回收。核心线程如果<strong>allowCoreThreadTimeOut</strong>为true,则在空闲超过这个时间也会被回收。</p>
</li>
<li><p><strong>unit</strong>:超时的单位。</p>
</li>
<li><p><strong>workQueue</strong>:线程池中的任务队列。通过线程池的execute()方法提交的Runnable任务会被放入任务队列中。</p>
</li>
<li><p><strong>threadFactory</strong>:线程工厂。</p>
</li>
<li><p><strong>handler</strong>:饱和策略。当任务队列和线程池都满后，对新提交的任务的处理策略。</p>
</li>
</ul>
<p>ThreadPoolExecutor执行任务的规则:</p>
<ul>
<li><p>1、<strong>如果线程池中的线程数量未达到核心线程数量，则开启一个新的核心线程来执行任务</strong>；</p>
</li>
<li><p>2、<strong>如果线程池中的线程数量已经大于等于核心线程数量，则会把新的任务放入任务队列中</strong>；</p>
</li>
<li><p>3、<strong>如果任务队列已满，并且线程池中的线程未满，则开启非核心线程来处理新的任务</strong>；</p>
</li>
<li><p>4、<strong>如果任务队列和线程池都已满，则会交给handler饱和策略来处理</strong>。</p>
</li>
</ul>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="线程池策略" class="fancybox"><img alt="线程池策略" data-src="/images/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%AD%96%E7%95%A5.png" src="/img/loading.gif" class="lazyload" title="线程池策略"></a></p>
<p>下面通过一个简单的案例来验证以上规则：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WorkThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">			System.out.println(<span class="string">"Thread: "</span> + name + <span class="string">" work finish"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Executor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">100</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">5</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">		WorkThread thread = <span class="keyword">new</span> WorkThread(<span class="string">""</span> + i);</span><br><span class="line">		executor.execute(thread);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义了一个线程池，核心线程池数量为5，线程数量为100，超时时间为60秒，任务队列为5。在子线程中，sleep 5秒来模拟耗时的操作。然后开启了20个线程，并放入线程池中执行。执行的结果如下：</p>
<pre><code>Thread: 0 work finish
Thread: 1 work finish
Thread: 13 work finish
Thread: 10 work finish
Thread: 3 work finish
Thread: 11 work finish
Thread: 4 work finish
Thread: 2 work finish
Thread: 19 work finish
Thread: 18 work finish
Thread: 17 work finish
Thread: 15 work finish
Thread: 16 work finish
Thread: 14 work finish
Thread: 12 work finish
Thread: 5 work finish
Thread: 9 work finish
Thread: 8 work finish
Thread: 7 work finish
Thread: 6 work finish</code></pre><p>前五个线程在核心线程中执行，第6-10个线程由于核心线程已满，因此在任务队列中等待执行，第11-20个线程，由于核心线程和队列都已满，而线程池中还可以开启线程，因此在非核心线程中执行。从结果来看，线程0-4，10-19会先执行完，然后任务队列中的线程5-9才执行，验证了以上的线程池任务执行规则。</p>
<p>为便于使用线程池，线程池还有几种简便的定义方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                     <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                     <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                     <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                     <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">           (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                   <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                   <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> corePoolSize, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize, threadFactory);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">             <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>通过Executors的static方法来创建。其中:</p>
<ul>
<li><p><strong>FixedThreadPool</strong>:线程数量固定的线程池。从方法的定义来看，这种线程池里的线程全都是核心线程，并且没有超时时间,任务队列也是没有限制的。</p>
</li>
<li><p><strong>CachedThreadPool</strong>:这种线程池没有核心线程，全是非核心线程，并且超时时间为60秒，任务队列没有限制。这种线程适合执行大量的耗时较短的任务。</p>
</li>
<li><p><strong>SingleThreadExecutor</strong>:只有一个核心线程，没有超时时间，任务队列没有限制。可以确保任务按顺序执行。</p>
</li>
<li><p><strong>ScheduledThreadPool</strong>:核心线程数量固定。非核心线程没有限制。非核心线程闲置时会被立即回收。这类线程池适合执行定时任务和具有固定周期的重复任务。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Android的模拟点击探索</title>
    <url>/2019/12/31/Android/%E5%9F%BA%E4%BA%8EAndroid%E7%9A%84%E6%A8%A1%E6%8B%9F%E7%82%B9%E5%87%BB%E6%8E%A2%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="基于Android的模拟点击探索"><a href="#基于Android的模拟点击探索" class="headerlink" title="基于Android的模拟点击探索"></a>基于Android的模拟点击探索</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>压力测试中，一般会用到自动化测试。准备写一个APP，可以记录屏幕上的点击事件，然后通过shell命令来模拟自动执行。shell指令，比较容易实现。那么，关键的一步是获取点击的坐标。对于Android来说，为便于开发者调试，Android系统中的”开发者选项”中，有一个”指针位置”的选项。打开这个选项，点击屏幕，就会显示当前点击的位置坐标。接下来，来看一下打开选项的过程。</p>
<a id="more"></a>

<h2 id="开发者选项页面"><a href="#开发者选项页面" class="headerlink" title="开发者选项页面"></a>开发者选项页面</h2><p><strong>“开发者选项”的源码位于packages/apps/settings/src/com/android/settings/DevelopmentSettings.java文件中。</strong></p>
<pre><code>private SwitchPreference mPointerLocation;</code></pre><p><strong>在onCreate()方法中初始化:</strong></p>
<pre><code>mPointerLocation = findAndInitSwitchPref(POINTER_LOCATION_KEY);</code></pre><p><strong>findAndInitSwitchPref()方法:</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SwitchPreference <span class="title">findAndInitSwitchPref</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    SwitchPreference pref = (SwitchPreference) findPreference(key);</span><br><span class="line">    <span class="keyword">if</span> (pref == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot find preference with key = "</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line">    mAllPrefs.add(pref);</span><br><span class="line">    mResetSwitchPrefs.add(pref);</span><br><span class="line">    <span class="keyword">return</span> pref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>当点击选项开关切换后，会把当前的开关状态存入Settings数据库。</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writePointerLocationOptions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Settings.System.putInt(getActivity().getContentResolver(),</span><br><span class="line">            Settings.System.POINTER_LOCATION, mPointerLocation.isChecked() ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="PhoneWindowManager"><a href="#PhoneWindowManager" class="headerlink" title="PhoneWindowManager"></a>PhoneWindowManager</h2><p><strong>PhoneWindowManager的源码位于framework/base/services/core/java/com/android/server/policy/PhoneWindowManager.java文件中。</strong></p>
<p><strong>PhoneWindowManager会监听Settings.System.POINTER_LOCATION字段的变化。</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SettingsObserver</span> <span class="keyword">extends</span> <span class="title">ContentObserver</span> </span>&#123;</span><br><span class="line">    SettingsObserver(Handler handler) &#123;</span><br><span class="line">        <span class="keyword">super</span>(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">observe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Observe all users' changes</span></span><br><span class="line">        ContentResolver resolver = mContext.getContentResolver();</span><br><span class="line">        ...</span><br><span class="line">        resolver.registerContentObserver(Settings.System.getUriFor(</span><br><span class="line">                Settings.System.POINTER_LOCATION), <span class="keyword">false</span>, <span class="keyword">this</span>,</span><br><span class="line">                UserHandle.USER_ALL);</span><br><span class="line">        ...</span><br><span class="line">        updateSettings();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange)</span> </span>&#123;</span><br><span class="line">        updateSettings();</span><br><span class="line">        updateRotation(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>当这个值发生变化时，在updateSettings()方法中调用：</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateSettings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ContentResolver resolver = mContext.getContentResolver();</span><br><span class="line">    <span class="keyword">boolean</span> updateRotation = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mSystemReady) &#123;</span><br><span class="line">            <span class="keyword">int</span> pointerLocation = Settings.System.getIntForUser(resolver,</span><br><span class="line">                    Settings.System.POINTER_LOCATION, <span class="number">0</span>, UserHandle.USER_CURRENT);</span><br><span class="line">            <span class="keyword">if</span> (mPointerLocationMode != pointerLocation) &#123;</span><br><span class="line">                mPointerLocationMode = pointerLocation;</span><br><span class="line">                mHandler.sendEmptyMessage(pointerLocation != <span class="number">0</span> ?</span><br><span class="line">                        MSG_ENABLE_POINTER_LOCATION : MSG_DISABLE_POINTER_LOCATION);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (mWindowManagerFuncs.getWindowManagerLock()) &#123;</span><br><span class="line">        PolicyControl.reloadFromSetting(mContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (updateRotation) &#123;</span><br><span class="line">        updateRotation(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>在这个方法中，会通过Handler能送一个Message去处理。</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PolicyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MSG_ENABLE_POINTER_LOCATION:</span><br><span class="line">                enablePointerLocation();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MSG_DISABLE_POINTER_LOCATION:</span><br><span class="line">                disablePointerLocation();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>如果打开了”指针位置”的选项开关，那么会调用enablePointerLocation()方法</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enablePointerLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mPointerLocationView == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mPointerLocationView = <span class="keyword">new</span> PointerLocationView(mContext);</span><br><span class="line">        mPointerLocationView.setPrintCoords(<span class="keyword">false</span>);</span><br><span class="line">        WindowManager.LayoutParams lp = <span class="keyword">new</span> WindowManager.LayoutParams(</span><br><span class="line">                WindowManager.LayoutParams.MATCH_PARENT,</span><br><span class="line">                WindowManager.LayoutParams.MATCH_PARENT);</span><br><span class="line">        lp.type = WindowManager.LayoutParams.TYPE_SECURE_SYSTEM_OVERLAY;</span><br><span class="line">        lp.flags = WindowManager.LayoutParams.FLAG_FULLSCREEN</span><br><span class="line">                | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE</span><br><span class="line">                | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</span><br><span class="line">                | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;</span><br><span class="line">        <span class="keyword">if</span> (ActivityManager.isHighEndGfx()) &#123;</span><br><span class="line">            lp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;</span><br><span class="line">            lp.privateFlags |=</span><br><span class="line">                    WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED;</span><br><span class="line">        &#125;</span><br><span class="line">        lp.format = PixelFormat.TRANSLUCENT;</span><br><span class="line">        lp.setTitle(<span class="string">"PointerLocation"</span>);</span><br><span class="line">        WindowManager wm = (WindowManager) mContext.getSystemService(WINDOW_SERVICE);</span><br><span class="line">        lp.inputFeatures |= WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL;</span><br><span class="line">        wm.addView(mPointerLocationView, lp);</span><br><span class="line">        mWindowManagerFuncs.registerPointerEventListener(mPointerLocationView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>在这个方法中，首先初始化一个PointerLocationView对象，然后设置WindowManager.LayoutParams，然后将PointerLocationView实例添加到window中。再通过WindowManagerFuncs注册监听。</strong></p>
<p><strong>当屏幕上有点击时，会回调PointerLocationView的onPointerEvent()方法：</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPointerEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过反射可以获取到PointerLocationView的实例，但是无法获取到WindowManagerFuncs实例。WindowManagerFuncs是在PhoneWindowManager的init()方法中初始化的。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, IWindowManager windowManager,</span></span></span><br><span class="line"><span class="function"><span class="params">        WindowManagerFuncs windowManagerFuncs)</span> </span>&#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">    mWindowManager = windowManager;</span><br><span class="line">    mWindowManagerFuncs = windowManagerFuncs;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>对于WindowManager的流程不了解。这种方法看来是行不通了。。。</p>
<p>在网上查了相关的资料，还有种方法是通过adb的getevent命令来获取/dev/input/路径下的event事件数据，然后解析相关数据。不过对于这块也不熟悉，就没有再深入研究。</p>
<p>总的来说，开发基于Android的模拟点击的应用是以失败告终。后面有时间再研究下是否有其它方法可以实现。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>模拟点击</tag>
      </tags>
  </entry>
  <entry>
    <title>AsyncTask机制</title>
    <url>/2019/12/31/Android/AsyncTask%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="AsyncTask机制"><a href="#AsyncTask机制" class="headerlink" title="AsyncTask机制"></a>AsyncTask机制</h1><p>AsyncTask可以让我们更容易地使用UI线程。它允许执行后台操作，并把结果发布到UI线程上，而不需要操作线程或Handler。AsyncTask被设计成一个和Thread、Handler相关的一个帮助类。AsyncTask用于短时(最多是几秒)的操作。</p>
<a id="more"></a>

<p>AsyncTask使用需要注意以下几点:</p>
<blockquote>
<ul>
<li><p>AsyncTask类必须在UI线程上加载。AsyncTask必须在UI线程实例化。execute()方法也必须在UI线程调用。</p>
</li>
<li><p>不要手动调用onPreExecute()、onPostExecute()、doInBackground()、onProgressUpdate()方法。</p>
</li>
<li><p>每个AsyncTask实例只能调用一次execute，如果再次调用，则会抛出异常。</p>
</li>
</ul>
</blockquote>
<p><strong>AsyncTask首次引入时，AsyncTask中的任务是串行的。从Android1.6之后，AsyncTask被设计成并行的。从Android3.0后，AsyncTask被重新设计成串行。如果在3.0后的版本需要并行，则可以调用AsyncTask的executeOnExecutor(java.util.concurrent.Executor, Object[])方法，手动传入Executor。</strong></p>
<p>在AsyncTask类加载时，会初始化ThreadPoolExecutor:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">            CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</span><br><span class="line">            sPoolWorkQueue, sThreadFactory);</span><br><span class="line">    threadPoolExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">    THREAD_POOL_EXECUTOR = threadPoolExecutor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中，核心线程数,最小为2个，最大为4个:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = Math.max(<span class="number">2</span>, Math.min(CPU_COUNT - <span class="number">1</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure></div>

<p>最大线程数CPU数量*2+1:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>

<p>KeepAlive时间为30s:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_SECONDS = <span class="number">30</span>;</span><br></pre></td></tr></table></figure></div>

<p>任务队列最大是128：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>);</span><br></pre></td></tr></table></figure></div>


<p>AsyncTask的基本使用:</p>
<p>1、定义一个类，继承自AsyncTask，根据需要重写doInBackground()、onProgressUpdate()、onPostExecute()方法，一般doInBackground()、onPostExecute()方法是需要重写的，在这里实现自己的业务。doInBackground()方法运行在子线程中。onProgressUpdate()和onPostExecute()运行在UI线程。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadFilesTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">URL</span>, <span class="title">Integer</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> Long <span class="title">doInBackground</span><span class="params">(URL... urls)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">int</span> count = urls.length;</span><br><span class="line">          <span class="keyword">long</span> totalSize = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">              totalSize += Downloader.downloadFile(urls[i]);</span><br><span class="line">              publishProgress((<span class="keyword">int</span>) ((i / (<span class="keyword">float</span>) count) * <span class="number">100</span>));</span><br><span class="line">              <span class="comment">// Escape early if cancel() is called</span></span><br><span class="line">              <span class="keyword">if</span> (isCancelled()) <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> totalSize;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... progress)</span> </span>&#123;</span><br><span class="line">          setProgressPercent(progress[<span class="number">0</span>]);</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Long result)</span> </span>&#123;</span><br><span class="line">          showDialog(<span class="string">"Downloaded "</span> + result + <span class="string">" bytes"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>2、创建DownloadFilesTask的实例，并执行execute()方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> DownloadFilesTask().execute(url1, url2, url3);</span><br></pre></td></tr></table></figure></div>

<p>下面，从源码角度来分析下AsyncTask的原理。</p>
<p>AsyncTask的执行入口是execute方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>execute()方法必须在UI线程调用。在方法内部调用了executeOnExecutor()方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@MainThread</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></span><br><span class="line"><span class="function"><span class="params">          Params... params)</span> </span>&#123;</span><br><span class="line"><span class="comment">//检查AsyncTask状态，不是未执行状态(如任务正在运行或已完成)，则会抛出相应异常</span></span><br><span class="line">      <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">          <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">              <span class="keyword">case</span> RUNNING:</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                          + <span class="string">" the task is already running."</span>);</span><br><span class="line">              <span class="keyword">case</span> FINISHED:</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                          + <span class="string">" the task has already been executed "</span></span><br><span class="line">                          + <span class="string">"(a task can be executed only once)"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将状态置为RUNNING</span></span><br><span class="line">      mStatus = Status.RUNNING;</span><br><span class="line"></span><br><span class="line">      onPreExecute();</span><br><span class="line"></span><br><span class="line">      mWorker.mParams = params;</span><br><span class="line">      exec.execute(mFuture);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>executeOnExecutor()方法也必须在UI线程调用。在方法开始时，会检查AsyncTask状态，不是未执行状态(如任务正在运行或已完成)，则会抛出相应异常。然后，将任务状态置为RUNNING状态,调用onPreExecute()方法，这个方法需要自己重写，可以做一些UI提示。然后，将参数设置为mWorker，调用Executor的execute()方法。</p>
<p>如果使用默认的Executor，则为串行。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">    sDefaultExecutor.execute(runnable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接下来，看看sDefaultExecutor的定义:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</span><br></pre></td></tr></table></figure></div>

<p>而SERIAL_EXECUTOR的具体实现如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">       Runnable mActive;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">           mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       r.run();</span><br><span class="line">                   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                       scheduleNext();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">               scheduleNext();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>mWorker的定义:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            mTaskInvoked.set(<span class="keyword">true</span>);</span><br><span class="line">            Result result = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="comment">//将线程设置为后台线程</span></span><br><span class="line">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">                <span class="comment">//noinspection unchecked</span></span><br><span class="line">	<span class="comment">//调用doInBackground方法</span></span><br><span class="line">                result = doInBackground(mParams);</span><br><span class="line">                Binder.flushPendingCommands();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</span><br><span class="line">                mCancelled.set(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">throw</span> tr;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	<span class="comment">//发送结果</span></span><br><span class="line">                postResult(result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></div>

<p>当执行execute()方法，会调用mWorker的call()方法，在此方法中，会将线程设置为后台线程，然后调用doInBackground()方法，并在执行完成后调用postResult()方法。在doInBackground()方法中，可以调用publishProgress()方法，将进度信息发送到UI线程中。</p>
<p>postResult()方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class="line">            <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">    message.sendToTarget();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>发送一个Message到Handler中.</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</span><br><span class="line">                <span class="comment">// There is only one result</span></span><br><span class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</span><br><span class="line">                result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在Handler的handleMessage()方法中处理消息。如果已经执行完成，则会调用AsyncTask的finish()方法,如果是更新进度，则会调用AsyncTask的onProgressUpdate()方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isCancelled()) &#123;</span><br><span class="line">			<span class="comment">//如果是取消任务，则回调onCancelled()方法。</span></span><br><span class="line">            onCancelled(result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//回调onPostExecute()方法</span></span><br><span class="line">            onPostExecute(result);</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//设置状态为FINISHED</span></span><br><span class="line">        mStatus = Status.FINISHED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">publishProgress()方法:</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WorkerThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isCancelled()) &#123;</span><br><span class="line">            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</span><br><span class="line">                    <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>AsyncTask</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualAPK的简单使用</title>
    <url>/2019/12/31/Android/VirtualAPK%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="VirtualAPK的简单使用"><a href="#VirtualAPK的简单使用" class="headerlink" title="VirtualAPK的简单使用"></a>VirtualAPK的简单使用</h1><p><strong>VirtualApk引入步骤：</strong></p>
<h2 id="一、宿主应用引入VirtualApk"><a href="#一、宿主应用引入VirtualApk" class="headerlink" title="一、宿主应用引入VirtualApk"></a>一、宿主应用引入VirtualApk</h2><h3 id="1、在项目的build-gradle文件中加入依赖"><a href="#1、在项目的build-gradle文件中加入依赖" class="headerlink" title="1、在项目的build.gradle文件中加入依赖"></a>1、在项目的build.gradle文件中加入依赖</h3><a id="more"></a>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">classpath</span> <span class="string">'com.didi.virtualapk:gradle:0.9.8.6'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>完整的gradle文件如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.1.4'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.didi.virtualapk:gradle:0.9.8.6'</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2、在app的build-gradle文件中加入依赖"><a href="#2、在app的build-gradle文件中加入依赖" class="headerlink" title="2、在app的build.gradle文件中加入依赖"></a>2、在app的build.gradle文件中加入依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   apply plugin: <span class="string">'com.didi.virtualapk.host'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">   	implementation <span class="string">'com.didi.virtualapk:core:0.9.8'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>完整的gradle文件如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">apply plugin: <span class="string">'com.didi.virtualapk.host'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.virtualapk.host"</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:28.+'</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.0.2'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.1'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.1'</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'com.didi.virtualapk:core:0.9.8'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3、新建项目的Application，继承自Application-并在attachBaseContext方法中初始化"><a href="#3、新建项目的Application，继承自Application-并在attachBaseContext方法中初始化" class="headerlink" title="3、新建项目的Application，继承自Application,并在attachBaseContext方法中初始化"></a>3、新建项目的Application，继承自Application,并在attachBaseContext方法中初始化</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">        PluginManager.getInstance(base).init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4、在AndroidManifest-xml中引入自定义的Application"><a href="#4、在AndroidManifest-xml中引入自定义的Application" class="headerlink" title="4、在AndroidManifest.xml中引入自定义的Application"></a>4、在AndroidManifest.xml中引入自定义的Application</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".App"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="5、申明权限"><a href="#5、申明权限" class="headerlink" title="5、申明权限"></a>5、申明权限</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="二、Plugin中引入VirtualApk"><a href="#二、Plugin中引入VirtualApk" class="headerlink" title="二、Plugin中引入VirtualApk"></a>二、Plugin中引入VirtualApk</h2><h3 id="1、在项目的build-gradle文件中加入依赖-1"><a href="#1、在项目的build-gradle文件中加入依赖-1" class="headerlink" title="1、在项目的build.gradle文件中加入依赖"></a>1、在项目的build.gradle文件中加入依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">classpath</span> <span class="string">'com.didi.virtualapk:gradle:0.9.8.6'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>完整的gradle文件如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.1.4'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.didi.virtualapk:gradle:0.9.8.6'</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2、在app的build-gradle文件中加入依赖-1"><a href="#2、在app的build-gradle文件中加入依赖-1" class="headerlink" title="2、在app的build.gradle文件中加入依赖"></a>2、在app的build.gradle文件中加入依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   apply plugin: <span class="string">'com.didi.virtualapk.plugin'</span></span><br><span class="line"></span><br><span class="line">virtualApk&#123;</span><br><span class="line">    packageId = <span class="number">0</span>x6f</span><br><span class="line">    targetHost = <span class="string">'../../VirtualAPKHost/app'</span><span class="comment">//宿主应用的app模块路径</span></span><br><span class="line">    applyHostMapping = <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3、在app的build-gradle文件中加入签名配置"><a href="#3、在app的build-gradle文件中加入签名配置" class="headerlink" title="3、在app的build.gradle文件中加入签名配置"></a>3、在app的build.gradle文件中加入签名配置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">'../../android.keystore'</span>)</span><br><span class="line">            storePassword <span class="string">"android"</span></span><br><span class="line">            keyAlias <span class="string">"android"</span></span><br><span class="line">            keyPassword <span class="string">"android"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	buildTypes &#123;</span><br><span class="line">       release &#123;</span><br><span class="line">           minifyEnabled <span class="keyword">false</span></span><br><span class="line">           signingConfig signingConfigs.release</span><br><span class="line">           proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>完整的gradle文件如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">apply plugin: <span class="string">'com.didi.virtualapk.plugin'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.virtualapk.plugin"</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">'../../android.keystore'</span>)</span><br><span class="line">            storePassword <span class="string">"android"</span></span><br><span class="line">            keyAlias <span class="string">"android"</span></span><br><span class="line">            keyPassword <span class="string">"android"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:28.+'</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.0.2'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.1'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.1'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtualApk&#123;</span><br><span class="line">    packageId = <span class="number">0</span>x6f</span><br><span class="line">    targetHost = <span class="string">'../../VirtualAPKHost/app'</span></span><br><span class="line">    applyHostMapping = <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>注意：Plugin应用的资源文件不能和宿主的资源文件重名，否则在生成插件APK时会报错:</strong></p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="error" class="fancybox"><img alt="error" data-src="/images/error.png" src="/img/loading.gif" class="lazyload" title="error"></a></p>
<p><strong>建议各模块资源命名以模块名开头。</strong></p>
<h3 id="4、生成插件APK"><a href="#4、生成插件APK" class="headerlink" title="4、生成插件APK"></a>4、生成插件APK</h3><p>打开gradle窗口，双击assemblePlugin，生成APK</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="build" class="fancybox"><img alt="build" data-src="/images/build.png" src="/img/loading.gif" class="lazyload" title="build"></a></p>
<p>文件生成目录：app/build/outputs/plugin/release/</p>
<h2 id="三、在宿主应用中加载插件APK"><a href="#三、在宿主应用中加载插件APK" class="headerlink" title="三、在宿主应用中加载插件APK"></a>三、在宿主应用中加载插件APK</h2><h3 id="1、将生成的插件APK推送-通过网络或者adb等-到手机指定路径，如-sdcard-Plugin-apk。"><a href="#1、将生成的插件APK推送-通过网络或者adb等-到手机指定路径，如-sdcard-Plugin-apk。" class="headerlink" title="1、将生成的插件APK推送(通过网络或者adb等)到手机指定路径，如/sdcard/Plugin.apk。"></a>1、将生成的插件APK推送(通过网络或者adb等)到手机指定路径，如/sdcard/Plugin.apk。</h3><h3 id="2、在宿主应用中加载APK"><a href="#2、在宿主应用中加载APK" class="headerlink" title="2、在宿主应用中加载APK"></a>2、在宿主应用中加载APK</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PLUGIN_PACKAGE_NAME = <span class="string">"com.wangyz.virtualapk.plugin"</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PLUGIN_NAME = <span class="string">"com.wangyz.virtualapk.plugin.MainActivity"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadPlugin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           String pluginPath = Environment.getExternalStorageDirectory().getAbsolutePath().concat(<span class="string">"/Plugin.apk"</span>);</span><br><span class="line">           File plugin = <span class="keyword">new</span> File(pluginPath);</span><br><span class="line">           PluginManager.getInstance(<span class="keyword">this</span>).loadPlugin(plugin);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3、调用APK中的Activity"><a href="#3、调用APK中的Activity" class="headerlink" title="3、调用APK中的Activity"></a>3、调用APK中的Activity</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPlugin</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (PluginManager.getInstance(<span class="keyword">this</span>).getLoadedPlugin(PLUGIN_PACKAGE_NAME) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Toast.makeText(getApplicationContext(), <span class="string">"未加载插件"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.setComponent(<span class="keyword">new</span> ComponentName(PLUGIN_PACKAGE_NAME, PLUGIN_NAME));</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>源码地址:<a href="https://github.com/milovetingting/Samples/tree/master/VirtualAPK" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/VirtualAPK</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>VirtualAPK</tag>
      </tags>
  </entry>
  <entry>
    <title>动态更新Icon</title>
    <url>/2019/12/31/Android/%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0Icon/</url>
    <content><![CDATA[<h1 id="动态更新Icon"><a href="#动态更新Icon" class="headerlink" title="动态更新Icon"></a>动态更新Icon</h1><p>动态更改图标主要用到<strong>activity-alias</strong>和<strong>PackageManager的setComponentEnabledSetting方法</strong>。具体步骤如下：</p>
<a id="more"></a>

<h2 id="1、在AndroidManifest-xml中增加以下声明"><a href="#1、在AndroidManifest-xml中增加以下声明" class="headerlink" title="1、在AndroidManifest.xml中增加以下声明:"></a>1、在AndroidManifest.xml中增加以下声明:</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity-alias</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".alias"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:enabled</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/icon"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"Alias"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:targetActivity</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>完整文件如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.wangyz.dynamicicon"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity-alias</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".alias"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/icon"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"Alias"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetActivity</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2、切换图标"><a href="#2、切换图标" class="headerlink" title="2、切换图标"></a>2、切换图标</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getPackageManager().setComponentEnabledSetting(getComponentName(),</span><br><span class="line">            PackageManager.COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class="line">            PackageManager.DONT_KILL_APP);</span><br><span class="line">getPackageManager().setComponentEnabledSetting(<span class="keyword">new</span> ComponentName(<span class="keyword">this</span>,</span><br><span class="line">                    getPackageName() + <span class="string">".alias"</span>),</span><br><span class="line">            PackageManager.COMPONENT_ENABLED_STATE_ENABLED,</span><br><span class="line">            <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div>

<p>setComponentEnabledSetting方法的最后一个参数，PackageManager.DONT_KILL_APP表示不关闭App，0表示关闭App刷新图标。</p>
<p>完整文件如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">package</span> com.wangyz.dynamicicon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.ComponentName;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeIcon</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        getPackageManager().setComponentEnabledSetting(getComponentName(),</span><br><span class="line">                PackageManager.COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class="line">                PackageManager.DONT_KILL_APP);</span><br><span class="line">        getPackageManager().setComponentEnabledSetting(<span class="keyword">new</span> ComponentName(<span class="keyword">this</span>,</span><br><span class="line">                        getPackageName() + <span class="string">".MainActivity"</span>),</span><br><span class="line">                PackageManager.COMPONENT_ENABLED_STATE_ENABLED,</span><br><span class="line">                <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeIconAlias</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        getPackageManager().setComponentEnabledSetting(getComponentName(),</span><br><span class="line">                PackageManager.COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class="line">                PackageManager.DONT_KILL_APP);</span><br><span class="line">        getPackageManager().setComponentEnabledSetting(<span class="keyword">new</span> ComponentName(<span class="keyword">this</span>,</span><br><span class="line">                        getPackageName() + <span class="string">".alias"</span>),</span><br><span class="line">                PackageManager.COMPONENT_ENABLED_STATE_ENABLED,</span><br><span class="line">                <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>源码地址:<a href="https://github.com/milovetingting/Samples/tree/master/DynamicIcon" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/DynamicIcon</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>动态更新</tag>
      </tags>
  </entry>
  <entry>
    <title>IntentService原理分析</title>
    <url>/2019/12/31/Android/IntentService%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="IntentService原理分析"><a href="#IntentService原理分析" class="headerlink" title="IntentService原理分析"></a>IntentService原理分析</h1><p>IntentService是一个异步处理请求的服务，通过Context#startService(Intent)可以将请求发送给IntentService,IntentService在工作线程中依次串行处理每一个Intent，当处理完所有请求后，IntentService会自动停止。</p>
<p>在IntentService内部是通过HandlerThread来切换线程和处理消息的。</p>
<a id="more"></a>

<p>当IntentService首次启动时,会调用onCreate()方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onCreate();</span><br><span class="line"><span class="comment">//创建HandlerThread</span></span><br><span class="line">      HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"IntentService["</span> + mName + <span class="string">"]"</span>);</span><br><span class="line">      <span class="comment">//启动线程</span></span><br><span class="line">thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//从HandlerThread中获取looper</span></span><br><span class="line">      mServiceLooper = thread.getLooper();</span><br><span class="line"><span class="comment">//实例化Handler</span></span><br><span class="line">      mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>在onCreate()方法中，首先创建了HandlerThread，然后启动它。然后从创建的thread中获取looper，并实例化Handler。</p>
<p>onStartCommand()方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * You should not override this method for your IntentService. Instead,</span></span><br><span class="line"><span class="comment"> * override &#123;<span class="doctag">@link</span> #onHandleIntent&#125;, which the system calls when the IntentService</span></span><br><span class="line"><span class="comment"> * receives a start request.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> android.app.Service#onStartCommand</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">    onStart(intent, startId);</span><br><span class="line">    <span class="keyword">return</span> mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>onStartCommand()方法，在自定义类继承自IntentService时，不要去重写，而应该重写onHandleIntent()方法。在onStartCommand()方法中，调用了onStart()方法，将intent传入Message，并发送出去。</p>
<p>onStart()方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">    Message msg = mServiceHandler.obtainMessage();</span><br><span class="line">    msg.arg1 = startId;</span><br><span class="line">    msg.obj = intent;</span><br><span class="line">    mServiceHandler.sendMessage(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在onStart()方法中，将intent信息打包到Message中，并发送到消息队列。</p>
<p>Message消息的处理:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        onHandleIntent((Intent)msg.obj);</span><br><span class="line">        stopSelf(msg.arg1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>onStart()方法将intent传入了Message,最终在ServiceHandler的handleMessage()方法处理，在handleMessage()方法中，回调了onHandleIntent()方法，这个方法是需要我们重写的,由于ServiceHandler是运行在子线程中，所以onHandleIntent()的执行也会在子线程中。当依次执行完任务后，调用了stopSelf(startId)方法停止Service。</p>
<p>stopSelf(startId)方法，只有当startId和最后启动Service时的startId一致时，才会停止服务,所以如果还有任务没有执行完成，则不会成功停止服务。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mServiceLooper.quit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在onDestory()方法中，调用Looper的quit()方法，退出消息循环。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>IntentService</tag>
      </tags>
  </entry>
  <entry>
    <title>Android多渠道打包--Gradle打包</title>
    <url>/2019/12/31/Android/Android%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h1 id="Android多渠道打包–Gradle打包"><a href="#Android多渠道打包–Gradle打包" class="headerlink" title="Android多渠道打包–Gradle打包"></a>Android多渠道打包–Gradle打包</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于App一般都会在多个应用市场上架，为了分析App在每个不同渠道的具体的数据，一般都会对不同渠道打包不同的App。多渠道打包有多种方式，这里只介绍利用Gradle进行多渠道打包。</p>
<a id="more"></a>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1、在AndroidManifest-xml中增加配置"><a href="#1、在AndroidManifest-xml中增加配置" class="headerlink" title="1、在AndroidManifest.xml中增加配置"></a>1、在AndroidManifest.xml中增加配置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"APP_CHANNEL"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"$&#123;APP_CHANNEL_VALUE&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>其中,APP_CHANNEL为配置的属性名。APP_CHANNEL_VALUE为在build.gradle中配置的变量。</p>
<h3 id="2、在build-gradle中增加productFlavors配置"><a href="#2、在build-gradle中增加productFlavors配置" class="headerlink" title="2、在build.gradle中增加productFlavors配置"></a>2、在build.gradle中增加productFlavors配置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">        baidu &#123;</span><br><span class="line">            manifestPlaceholders = [APP_CHANNEL_VALUE: "baidu"]</span><br><span class="line">        &#125;</span><br><span class="line">        qq &#123;</span><br><span class="line">            manifestPlaceholders = [APP_CHANNEL_VALUE: "qq"]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里，增加了两个渠道配置信息：baidu和qq。在manifestPlaceholders的配置中，APP_CHANNEL_VALUE即为在AndroidManifest用到的变量。</p>
<p>注意:Gradle3.0以上版本，需要在defaultConfig节点中增加以下配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">flavorDimensions "default"</span><br></pre></td></tr></table></figure></div>

<h3 id="3、渠道名称获取"><a href="#3、渠道名称获取" class="headerlink" title="3、渠道名称获取"></a>3、渠道名称获取</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getMetaData</span><span class="params">(Context context, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PackageManager packageManager = context.getPackageManager();</span><br><span class="line">            ApplicationInfo applicationInfo = packageManager.getApplicationInfo(context</span><br><span class="line">                    .getPackageName(), PackageManager.GET_META_DATA);</span><br><span class="line">            <span class="keyword">return</span> applicationInfo.metaData.getString(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4、修改应用名称"><a href="#4、修改应用名称" class="headerlink" title="4、修改应用名称"></a>4、修改应用名称</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">        baidu &#123;</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_baidu", APP_CHANNEL_VALUE: "baidu"]</span><br><span class="line">        &#125;</span><br><span class="line">        qq &#123;</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_qq",APP_CHANNEL_VALUE: "qq"]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在manifestPlaceholders中增加app_name的配置，在AndroidManifest.xml中引用:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"$&#123;app_icon&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"$&#123;app_name&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"$&#123;app_icon&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"APP_CHANNEL"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"$&#123;APP_CHANNEL_VALUE&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        //省略其它内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="5、修改应用图标"><a href="#5、修改应用图标" class="headerlink" title="5、修改应用图标"></a>5、修改应用图标</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">        baidu &#123;</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_baidu",app_icon:"@mipmap/icon_baidu", APP_CHANNEL_VALUE: "baidu"]</span><br><span class="line">        &#125;</span><br><span class="line">        qq &#123;</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_qq", app_icon:"@mipmap/icon_qq",APP_CHANNEL_VALUE: "qq"]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在manifestPlaceholders中增加app_icon的配置，在AndroidManifest.xml中引用:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"$&#123;app_icon&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"$&#123;app_name&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"$&#123;app_icon&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"APP_CHANNEL"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"$&#123;APP_CHANNEL_VALUE&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        //省略其它内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6、修改应用包名"><a href="#6、修改应用包名" class="headerlink" title="6、修改应用包名"></a>6、修改应用包名</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">        baidu &#123;</span><br><span class="line">            applicationIdSuffix ".baidu"</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_baidu",app_icon:"@mipmap/icon_baidu", APP_CHANNEL_VALUE: "baidu"]</span><br><span class="line">        &#125;</span><br><span class="line">        qq &#123;</span><br><span class="line">            applicationIdSuffix ".qq"</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_qq", app_icon:"@mipmap/icon_qq",APP_CHANNEL_VALUE: "qq"]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>增加applicationIdSuffix属性。</p>
<h3 id="7、Java中调用gradle中的变量"><a href="#7、Java中调用gradle中的变量" class="headerlink" title="7、Java中调用gradle中的变量"></a>7、Java中调用gradle中的变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span><br><span class="line">            buildConfigField "String","FIELD_TEST","\"FIELD_TEST\""</span><br><span class="line">        &#125;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span><br><span class="line">            buildConfigField "String","FIELD_TEST","\"FIELD_TEST\""</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>增加buildConfigField。同步后，通过BuildConfig.FIELD_TEST能获取到新增的变量值。</p>
<h3 id="8、完整的gradle"><a href="#8、完整的gradle" class="headerlink" title="8、完整的gradle"></a>8、完整的gradle</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">apply plugin: 'com.android.application'</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 28</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId "com.wangyz.multichannel"</span><br><span class="line">        minSdkVersion 21</span><br><span class="line">        targetSdkVersion 28</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName "1.0"</span><br><span class="line">        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"</span><br><span class="line">        flavorDimensions "default"</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span><br><span class="line">            buildConfigField "String","FIELD_TEST","\"FIELD_TEST\""</span><br><span class="line">        &#125;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span><br><span class="line">            buildConfigField "String","FIELD_TEST","\"FIELD_TEST\""</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        baidu &#123;</span><br><span class="line">            applicationIdSuffix ".baidu"</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_baidu",app_icon:"@mipmap/icon_baidu", APP_CHANNEL_VALUE: "baidu"]</span><br><span class="line">        &#125;</span><br><span class="line">        qq &#123;</span><br><span class="line">            applicationIdSuffix ".qq"</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_qq", app_icon:"@mipmap/icon_qq",APP_CHANNEL_VALUE: "qq"]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(dir: 'libs', include: ['*.jar'])</span><br><span class="line">    implementation 'com.android.support:appcompat-v7:28.+'</span><br><span class="line">    implementation 'com.android.support.constraint:constraint-layout:1.0.2'</span><br><span class="line">    testImplementation 'junit:junit:4.12'</span><br><span class="line">    androidTestImplementation 'com.android.support.test:runner:1.0.1'</span><br><span class="line">    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="9、完整的AndroidManifest-xml"><a href="#9、完整的AndroidManifest-xml" class="headerlink" title="9、完整的AndroidManifest.xml"></a>9、完整的AndroidManifest.xml</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.wangyz.multichannel"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"$&#123;app_icon&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"$&#123;app_name&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"$&#123;app_icon&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"APP_CHANNEL"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"$&#123;APP_CHANNEL_VALUE&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android Studio</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Handler消息机制</title>
    <url>/2019/12/31/Android/Handler%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Handler消息机制"><a href="#Handler消息机制" class="headerlink" title="Handler消息机制"></a>Handler消息机制</h1><p>Handler消息机制主要涉及Looper、Handler、MessageQueue、Message。其中，Looper主要负责获取消息，Handler负责发送消息及处理消息，MessageQueue是消息队列，Message是消息类。</p>
<a id="more"></a>

<h2 id="Looper循环获取消息"><a href="#Looper循环获取消息" class="headerlink" title="Looper循环获取消息"></a>Looper循环获取消息</h2><blockquote>
<p>1、ActivityThread的main()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备looper</span></span><br><span class="line">      Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入无限循环</span></span><br><span class="line">      Looper.loop();</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果loop()循环退出，则抛出异常，整个应用退出</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>2、prepareMainLooper()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Initialize the current thread as a looper, marking it as an</span></span><br><span class="line"><span class="comment">   * application's main looper. The main looper for your application</span></span><br><span class="line"><span class="comment">   * is created by the Android environment, so you should never need</span></span><br><span class="line"><span class="comment">   * to call this function yourself.  See also: &#123;<span class="doctag">@link</span> #prepare()&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化looper</span></span><br><span class="line">      prepare(<span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">synchronized</span> (Looper<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//如果已经设置过sMainLooper，则抛出异常。每个线程中只允许存在一个looper。</span></span><br><span class="line">          <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">          &#125;</span><br><span class="line">	<span class="comment">//设置sMainLooper</span></span><br><span class="line">          sMainLooper = myLooper();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>3、在prepareMainLooper()方法中，首先调用prepare(false)方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果ThreadLocal中已经存在looper,则抛出异常</span></span><br><span class="line">      <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//如果没有初始化looper，则将looper保存到ThradLocal中。</span></span><br><span class="line">      sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>4、在prepare()方法中调用Looper的构造方法初始化MessageQueue:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化MessageQueue</span></span><br><span class="line">      mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line"><span class="comment">//设置当前线程给mThread变量</span></span><br><span class="line">      mThread = Thread.currentThread();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>5、在prepareMainLooper()方法调用prepare(false)方法后，会调用myLooper()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Return the Looper object associated with the current thread.  Returns</span></span><br><span class="line"><span class="comment">   * null if the calling thread is not associated with a Looper.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//将保存在ThreadLocal中的looper返回</span></span><br><span class="line">      <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>5、到这里，prepareMainLooper()方法执行完毕。然后执行Looper.loop()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Run the message queue in this thread. Be sure to call</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取looper</span></span><br><span class="line">       <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">	<span class="comment">//如果looper为null,则抛出异常</span></span><br><span class="line">       <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">       &#125;</span><br><span class="line">	<span class="comment">//获取MessageQueue</span></span><br><span class="line">       <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">//开启无限循环</span></span><br><span class="line">       <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">		<span class="comment">//从消息队列中取消息，如果没有消息，则会阻塞</span></span><br><span class="line">           Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">		<span class="comment">//如果消息为null，则表示退出循环</span></span><br><span class="line">           <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">		</span><br><span class="line">		...</span><br><span class="line">         </span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//回调target，即Handler的dispatchMessage方法</span></span><br><span class="line">               msg.target.dispatchMessage(msg);</span><br><span class="line">               ...</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">                   Trace.traceEnd(traceTag);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">		...</span><br><span class="line"></span><br><span class="line">           msg.recycleUnchecked();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>首先，获取looper,如果没有设置过looper，则抛出异常。然后，开启无限循环，通过looper的MessageQueue，不停获取消息，如果没有消息，则阻塞。如果获取到了消息，则会回调Handler的dispatchMessage方法，方法执行会切换到Handler的线程。</p>
</blockquote>
<blockquote>
<p>6、MessageQueue的next()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Return here if the message loop has already quit and been disposed.</span></span><br><span class="line">    <span class="comment">// This can happen if the application tries to restart a looper after quit</span></span><br><span class="line">    <span class="comment">// which is not supported.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">    <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">            Binder.flushPendingCommands();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// Try to retrieve the next message.  Return if found.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">            Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">            Message msg = mMessages;</span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    prevMsg = msg;</span><br><span class="line">                    msg = msg.next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                    <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></span><br><span class="line">                    nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Got a message.</span></span><br><span class="line">                    mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        prevMsg.next = msg.next;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mMessages = msg.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    msg.next = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Returning message: "</span> + msg);</span><br><span class="line">                    msg.markInUse();</span><br><span class="line">                    <span class="keyword">return</span> msg;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// No more messages.</span></span><br><span class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process the quit message now that all pending messages have been handled.</span></span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                dispose();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If first time idle, then get the number of idlers to run.</span></span><br><span class="line">            <span class="comment">// Idle handles only run if the queue is empty or if the first message</span></span><br><span class="line">            <span class="comment">// in the queue (possibly a barrier) is due to be handled in the future.</span></span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                    &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class="line">                mBlocked = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Run the idle handlers.</span></span><br><span class="line">        <span class="comment">// We only ever reach this code block during the first iteration.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class="line">            mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">// release the reference to the handler</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                keep = idler.queueIdle();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                Log.wtf(TAG, <span class="string">"IdleHandler threw exception"</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    mIdleHandlers.remove(idler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset the idle handler count to 0 so we do not run them again.</span></span><br><span class="line">        pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// While calling an idle handler, a new message could have been delivered</span></span><br><span class="line">        <span class="comment">// so go back and look again for a pending message without waiting.</span></span><br><span class="line">        nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>在next()方法中，通过for(;;)开启无限循环去获取消息，如果获取到消息则返回。</p>
</blockquote>
<h2 id="Handler发送消息"><a href="#Handler发送消息" class="headerlink" title="Handler发送消息"></a>Handler发送消息</h2><blockquote>
<p>1、sendMessage()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pushes a message onto the end of the message queue after all pending messages</span></span><br><span class="line"><span class="comment"> * before the current time. It will be received in &#123;<span class="doctag">@link</span> #handleMessage&#125;,</span></span><br><span class="line"><span class="comment"> * in the thread attached to this handler.</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the </span></span><br><span class="line"><span class="comment"> *         message queue.  Returns false on failure, usually because the</span></span><br><span class="line"><span class="comment"> *         looper processing the message queue is exiting.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>2、sendMessage()方法会调用sendMessageDelayed()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enqueue a message into the message queue after all pending messages</span></span><br><span class="line"><span class="comment"> * before (current time + delayMillis). You will receive it in</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #handleMessage&#125;, in the thread attached to this handler.</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the </span></span><br><span class="line"><span class="comment"> *         message queue.  Returns false on failure, usually because the</span></span><br><span class="line"><span class="comment"> *         looper processing the message queue is exiting.  Note that a</span></span><br><span class="line"><span class="comment"> *         result of true does not mean the message will be processed -- if</span></span><br><span class="line"><span class="comment"> *         the looper is quit before the delivery time of the message</span></span><br><span class="line"><span class="comment"> *         occurs then the message will be dropped.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        delayMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>3、sendMessageDelayed()方法会调用sendMessageAtTime():</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enqueue a message into the message queue after all pending messages</span></span><br><span class="line"><span class="comment"> * before the absolute time (in milliseconds) &lt;var&gt;uptimeMillis&lt;/var&gt;.</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;The time-base is &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125;.&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * Time spent in deep sleep will add an additional delay to execution.</span></span><br><span class="line"><span class="comment"> * You will receive it in &#123;<span class="doctag">@link</span> #handleMessage&#125;, in the thread attached</span></span><br><span class="line"><span class="comment"> * to this handler.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uptimeMillis The absolute time at which the message should be</span></span><br><span class="line"><span class="comment"> *         delivered, using the</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125; time-base.</span></span><br><span class="line"><span class="comment"> *         </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the </span></span><br><span class="line"><span class="comment"> *         message queue.  Returns false on failure, usually because the</span></span><br><span class="line"><span class="comment"> *         looper processing the message queue is exiting.  Note that a</span></span><br><span class="line"><span class="comment"> *         result of true does not mean the message will be processed -- if</span></span><br><span class="line"><span class="comment"> *         the looper is quit before the delivery time of the message</span></span><br><span class="line"><span class="comment"> *         occurs then the message will be dropped.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    MessageQueue queue = mQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</span><br><span class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>4、在这个方法中，会通过MessageQueue的enqueueMessage()方法，将消息发送到消息队列中。</p>
</blockquote>
<blockquote>
<p>5、enqueueMessage()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line"><span class="comment">//设置Message的target为当前的Handler，以便获取到消息后能回调dispatchMessage方法。</span></span><br><span class="line">      msg.target = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">          msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>6、MessageQueue的enqueueMessage()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">            IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</span><br><span class="line">            Log.w(TAG, e.getMessage(), e);</span><br><span class="line">            msg.recycle();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg.markInUse();</span><br><span class="line">        msg.when = when;</span><br><span class="line">        Message p = mMessages;</span><br><span class="line">        <span class="keyword">boolean</span> needWake;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">            msg.next = p;</span><br><span class="line">            mMessages = msg;</span><br><span class="line">            needWake = mBlocked;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">            <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">            <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">            Message prev;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                    needWake = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">            prev.next = msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">        <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">            nativeWake(mPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>sendMessageAtTime()方法中的mQueue是在Handler的构造方法中赋值的:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</span><br><span class="line">	<span class="comment">//检测是否会有泄漏</span></span><br><span class="line">          <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</span><br><span class="line">          <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</span><br><span class="line">                  (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">              Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</span><br><span class="line">                  klass.getCanonicalName());</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取looper</span></span><br><span class="line">      mLooper = Looper.myLooper();</span><br><span class="line"><span class="comment">//如果looper为null,则抛出异常</span></span><br><span class="line">      <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">              <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//设置mQueue</span></span><br><span class="line">      mQueue = mLooper.mQueue;</span><br><span class="line">      mCallback = callback;</span><br><span class="line">      mAsynchronous = async;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果没有传入looper，则会通过Looper.myLooper()获取looper,如果没有在线程中设置过looper，则会抛出异常</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">    mLooper = looper;</span><br><span class="line">    mQueue = looper.mQueue;</span><br><span class="line">    mCallback = callback;</span><br><span class="line">    mAsynchronous = async;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果传入了looper，则直接设置mQueue。</p>
</blockquote>
<h2 id="Handler处理消息"><a href="#Handler处理消息" class="headerlink" title="Handler处理消息"></a>Handler处理消息</h2><blockquote>
<p>dispatchMessage()方法,如果Message设置了callBack,则会回调callBack的run()方法；如果Message没有设置callBack,在这种情况下，如果Handler的callBack不为null，则会回调handleMessage()方法;如果Handler没有设置callBack或者Handler的callBack处理了消息，并没有返回true,则会回调Handler的handleMessage()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果callBack不为null,则传给callBack处理。</span></span><br><span class="line">      <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">          handleCallback(msg);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">//如果Handler的callBack不为空，则传给callBack处理</span></span><br><span class="line">          <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          handleMessage(msg);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>handleCallback()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line"><span class="comment">//回调Runnable的run()方法</span></span><br><span class="line">      message.callback.run();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Handler</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio NDK 开发</title>
    <url>/2019/12/31/Android/Android%20Studio%20NDK%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Android-Studio-NDK-开发"><a href="#Android-Studio-NDK-开发" class="headerlink" title="Android Studio NDK 开发"></a>Android Studio NDK 开发</h1><p>记录在Android Studio中NDK简单开发的步骤</p>
<p>用到的Android Studio版本为3.5。</p>
<h2 id="配置NDK"><a href="#配置NDK" class="headerlink" title="配置NDK"></a>配置NDK</h2><h3 id="下载NDK"><a href="#下载NDK" class="headerlink" title="下载NDK"></a>下载NDK</h3><p>一般在SDK下已经有自带的ndk文件夹，如sdk目录下的ndk-bundle文件夹。</p>
<a id="more"></a>

<p><a href="/img/loading.gif" data-fancybox="group" data-caption="ndk" class="fancybox"><img alt="ndk" data-src="/images/ndk.png" src="/img/loading.gif" class="lazyload" title="ndk"></a></p>
<p>如果没有，可以在SDK Manager中下载</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="ndk" class="fancybox"><img alt="ndk" data-src="/images/ndk2.png" src="/img/loading.gif" class="lazyload" title="ndk"></a></p>
<p>下载LLDB、NDK两项</p>
<p>下载完成后，可以在sdk目录下看到ndk的文件夹</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="ndk" class="fancybox"><img alt="ndk" data-src="/images/ndk3.png" src="/img/loading.gif" class="lazyload" title="ndk"></a></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>我的电脑-属性-高级系统设置-环境变量</p>
<p>新建一个ANDROID_NDK变量，配置上ndk文件夹的位置(在这个文件夹下可以看ndk-build.cmd等文件)</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="ndk" class="fancybox"><img alt="ndk" data-src="/images/ndk4.png" src="/img/loading.gif" class="lazyload" title="ndk"></a></p>
<p>然后将这个变量加入到path变量中</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="ndk" class="fancybox"><img alt="ndk" data-src="/images/ndk5.png" src="/img/loading.gif" class="lazyload" title="ndk"></a></p>
<h2 id="生成SO库"><a href="#生成SO库" class="headerlink" title="生成SO库"></a>生成SO库</h2><p>新建一个Hello.java文件，里面增加一个本地方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">hi</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></div>

<p>执行Build-Make Project，在app\build\intermediates\javac\debug\classes目录下执行以下cmd命令生成头文件:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cmd</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">javah -jni com.wangyz.ndk.Hello</span><br></pre></td></tr></table></figure></div>

<p>在该目录下，可以看到生成的com_wangyz_ndk_Hello.h文件。</p>
<p>在app/src/main/目录下新建jni目录，将生成的头文件复制到jni目录下。</p>
<p>在jni目录下新建com_wangyz_ndk_Hello.c文件，编写C语言实现代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_wangyz_ndk_Hello.h"</span></span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_wangyz_ndk_Hello_hi</span><br><span class="line">  (JNIEnv *env, jclass clazz)&#123;</span><br><span class="line">  <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env,<span class="string">"Hello"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>在jni目录下新建Android.mk文件，内容如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">mk</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight mk"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := Hello</span><br><span class="line">LOCAL_SRC_FILES := com_wangyz_ndk_Hello.c</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure></div>

<p>在jni目录下新建Application.mk文件，内容如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">mk</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight mk"><table><tr><td class="code"><pre><span class="line">APP_ABI := all</span><br></pre></td></tr></table></figure></div>

<p>在该目录下执行cmd命令:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cmd</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ndk-build</span><br></pre></td></tr></table></figure></div>

<p>执行后生成所需的so文件。</p>
<h2 id="引用SO库"><a href="#引用SO库" class="headerlink" title="引用SO库"></a>引用SO库</h2><p>在app/src/main目录下新建目录jniLibs,将对应的so复制到该目录下:</p>
<p><a href="/img/loading.gif" data-fancybox="group" data-caption="ndk" class="fancybox"><img alt="ndk" data-src="/images/ndk6.png" src="/img/loading.gif" class="lazyload" title="ndk"></a></p>
<p>在Activity中引入：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>使用SO库中的方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hi = Hello.hi();</span><br><span class="line">Toast.makeText(getApplicationContext(), hi, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure></div>

<p>Android Studio中NDK的简单开发到此结束。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>Android Studio</tag>
      </tags>
  </entry>
</search>
