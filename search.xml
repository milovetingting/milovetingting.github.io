<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IntelliJ IDEA插件开发的简单流程</title>
    <url>/2020/05/08/Android/IntelliJ%20IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E7%AE%80%E5%8D%95%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="IntelliJ-IDEA插件开发的简单流程"><a href="#IntelliJ-IDEA插件开发的简单流程" class="headerlink" title="IntelliJ IDEA插件开发的简单流程"></a>IntelliJ IDEA插件开发的简单流程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时用<code>Android Studio</code>开发项目时，我们都会或多或少接触到一些插件，这些插件能帮助我们提高开发效率。如果我们有一些特定的需求，但还没有插件可以满足这些需求，那么可以通过自定义插件来实现。</p>
<h2 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h2><h3 id="创建插件工程"><a href="#创建插件工程" class="headerlink" title="创建插件工程"></a>创建插件工程</h3><ol>
<li><code>File-New-Project</code>,在创建工程的界面，选择<code>IntelliJ Platform Plugin</code>,右侧选择<code>SDK</code>，这里需要选择<code>IntelliJ IDEA</code>安装目录下的SDK，这个SDK包含后面插件开发所需要的jar。</li>
</ol>
<p><a href="/images/%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B.png" data-fancybox="group" data-caption="创建工程" class="fancybox"><img alt="创建工程" title="创建工程" data-src="/images/%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="2">
<li>点击<code>Next</code>后，在弹出的界面配置工程信息，包括工程名称，保存地址。</li>
</ol>
<p><a href="/images/%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B2.png" data-fancybox="group" data-caption="创建工程2" class="fancybox"><img alt="创建工程2" title="创建工程2" data-src="/images/%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B2.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="配置SDK"><a href="#配置SDK" class="headerlink" title="配置SDK"></a>配置SDK</h3><p>如果前面创建工程时，没有IntelliJ IDEA的SDK可选，可以在这里配置</p>
<ol>
<li>File-Project Structure-Platform Settings-SDKs.</li>
</ol>
<p><a href="/images/%E9%85%8D%E7%BD%AESDK.png" data-fancybox="group" data-caption="配置SDK" class="fancybox"><img alt="配置SDK" title="配置SDK" data-src="/images/%E9%85%8D%E7%BD%AESDK.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="2">
<li>如果右侧没有任何可选的SDK，那么需要先配置<code>JDK</code>。点<code>+</code>号-<code>Add JDK</code></li>
</ol>
<p><a href="/images/%E9%85%8D%E7%BD%AESDK2.png" data-fancybox="group" data-caption="配置SDK2" class="fancybox"><img alt="配置SDK2" title="配置SDK2" data-src="/images/%E9%85%8D%E7%BD%AESDK2.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="3">
<li>选择JDK的位置</li>
</ol>
<p><a href="/images/%E9%85%8D%E7%BD%AESDK3.png" data-fancybox="group" data-caption="配置SDK3" class="fancybox"><img alt="配置SDK3" title="配置SDK3" data-src="/images/%E9%85%8D%E7%BD%AESDK3.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="4">
<li>添加JDK后</li>
</ol>
<p><a href="/images/%E9%85%8D%E7%BD%AESDK4.png" data-fancybox="group" data-caption="配置SDK4" class="fancybox"><img alt="配置SDK4" title="配置SDK4" data-src="/images/%E9%85%8D%E7%BD%AESDK4.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="5">
<li>添加IntelliJ IDEA SDK</li>
</ol>
<p><a href="/images/%E9%85%8D%E7%BD%AESDK5.png" data-fancybox="group" data-caption="配置SDK5" class="fancybox"><img alt="配置SDK5" title="配置SDK5" data-src="/images/%E9%85%8D%E7%BD%AESDK5.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="6">
<li>选择IntelliJ IDEA的安装位置</li>
</ol>
<p><a href="/images/%E9%85%8D%E7%BD%AESDK6.png" data-fancybox="group" data-caption="配置SDK6" class="fancybox"><img alt="配置SDK6" title="配置SDK6" data-src="/images/%E9%85%8D%E7%BD%AESDK6.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="7">
<li>然后选择JDK</li>
</ol>
<p><a href="/images/%E9%85%8D%E7%BD%AESDK7.png" data-fancybox="group" data-caption="配置SDK7" class="fancybox"><img alt="配置SDK7" title="配置SDK7" data-src="/images/%E9%85%8D%E7%BD%AESDK7.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="8">
<li>配置好后</li>
</ol>
<p><a href="/images/%E9%85%8D%E7%BD%AESDK8.png" data-fancybox="group" data-caption="配置SDK8" class="fancybox"><img alt="配置SDK8" title="配置SDK8" data-src="/images/%E9%85%8D%E7%BD%AESDK8.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="9">
<li>点击Project Settings-Project,在右侧的Project SDK中选择刚才配置的SDK</li>
</ol>
<p><a href="/images/%E9%85%8D%E7%BD%AESDK9.png" data-fancybox="group" data-caption="配置SDK9" class="fancybox"><img alt="配置SDK9" title="配置SDK9" data-src="/images/%E9%85%8D%E7%BD%AESDK9.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="配置插件信息"><a href="#配置插件信息" class="headerlink" title="配置插件信息"></a>配置插件信息</h3><p>主要配置插件id,插件名称,插件描述，更新日志等。</p>
<p><a href="/images/plugin%E9%85%8D%E7%BD%AE.png" data-fancybox="group" data-caption="plugin配置" class="fancybox"><img alt="plugin配置" title="plugin配置" data-src="/images/plugin%E9%85%8D%E7%BD%AE.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="创建Action"><a href="#创建Action" class="headerlink" title="创建Action"></a>创建Action</h3><ol>
<li>在src目录上，右键-New-Plugin DevKit-Action</li>
</ol>
<p><a href="/images/%E5%88%9B%E5%BB%BAaction.png" data-fancybox="group" data-caption="创建action" class="fancybox"><img alt="创建action" title="创建action" data-src="/images/%E5%88%9B%E5%BB%BAaction.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="2">
<li>配置action的id,name等，在下方的Groups面板中，根据实际情况，选择action需要加入的group</li>
</ol>
<p><a href="/images/%E5%88%9B%E5%BB%BAaction2.png" data-fancybox="group" data-caption="创建action2" class="fancybox"><img alt="创建action2" title="创建action2" data-src="/images/%E5%88%9B%E5%BB%BAaction2.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="3">
<li>创建完成后，在Action的回调方法中实际具体的逻辑。这里作为演示，只弹出一个对话框。</li>
</ol>
<p><a href="/images/%E5%88%9B%E5%BB%BAaction3.png" data-fancybox="group" data-caption="创建action3" class="fancybox"><img alt="创建action3" title="创建action3" data-src="/images/%E5%88%9B%E5%BB%BAaction3.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="发布插件"><a href="#发布插件" class="headerlink" title="发布插件"></a>发布插件</h3><ol>
<li>Build-Prepare Plugin Module</li>
</ol>
<p><a href="/images/%E5%8F%91%E5%B8%83%E6%8F%92%E4%BB%B60.png" data-fancybox="group" data-caption="发布插件" class="fancybox"><img alt="发布插件" title="发布插件" data-src="/images/%E5%8F%91%E5%B8%83%E6%8F%92%E4%BB%B60.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="2">
<li>Build完成后，会生成插件包</li>
</ol>
<p><a href="/images/%E5%8F%91%E5%B8%83%E6%8F%92%E4%BB%B62.png" data-fancybox="group" data-caption="发布插件2" class="fancybox"><img alt="发布插件2" title="发布插件2" data-src="/images/%E5%8F%91%E5%B8%83%E6%8F%92%E4%BB%B62.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="应用插件"><a href="#应用插件" class="headerlink" title="应用插件"></a>应用插件</h2><ol>
<li>File-Setting-Plugins,选择从Disk安装</li>
</ol>
<p><a href="/images/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6.png" data-fancybox="group" data-caption="安装插件" class="fancybox"><img alt="安装插件" title="安装插件" data-src="/images/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="2">
<li>在弹出的窗口中，选择刚才生成的插件包，确定后，需要重启IDE</li>
</ol>
<p><a href="/images/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B62.png" data-fancybox="group" data-caption="安装插件2" class="fancybox"><img alt="安装插件2" title="安装插件2" data-src="/images/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B62.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="3">
<li>由于之前的插件，是在Generate的group中，我们可以文件编辑界面右键-Generate或者按Alt+Insert快捷键</li>
</ol>
<p><a href="/images/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B63.png" data-fancybox="group" data-caption="安装插件3" class="fancybox"><img alt="安装插件3" title="安装插件3" data-src="/images/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B63.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="4">
<li>在弹出的界面中，选择第一项，这个就是我们定义的插件</li>
</ol>
<p><a href="/images/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B64.png" data-fancybox="group" data-caption="安装插件4" class="fancybox"><img alt="安装插件4" title="安装插件4" data-src="/images/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B64.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol start="5">
<li>可以跳过步骤3,4，我们可以直接通过前面定义的快捷键来调用插件</li>
</ol>
<p><a href="/images/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B65.png" data-fancybox="group" data-caption="安装插件5" class="fancybox"><img alt="安装插件5" title="安装插件5" data-src="/images/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B65.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本文介绍了基于IntelliJ IDEA开发插件的最简单的流程。当然，实际插件开发，要比这个复杂得多，涉及的API更多，具体的使用可以查阅官方文档。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>插件</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IOC之运行时注入-实现Activity的布局注入+控件注入+事件绑定</title>
    <url>/2020/05/08/Android/IOC%E4%B9%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%B3%A8%E5%85%A5-%E5%AE%9E%E7%8E%B0Activity%E7%9A%84%E5%B8%83%E5%B1%80%E6%B3%A8%E5%85%A5+%E6%8E%A7%E4%BB%B6%E6%B3%A8%E5%85%A5+%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="IOC之运行时注入-实现Activity的布局注入-控件注入-事件绑定"><a href="#IOC之运行时注入-实现Activity的布局注入-控件注入-事件绑定" class="headerlink" title="IOC之运行时注入-实现Activity的布局注入+控件注入+事件绑定"></a>IOC之运行时注入-实现Activity的布局注入+控件注入+事件绑定</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍基于<code>IOC</code>的设计原则，实现以下功能：</p>
<ul>
<li><p>布局注入</p>
</li>
<li><p>控件注入</p>
</li>
<li><p>事件注入</p>
</li>
</ul>
<p>其实这些功能，在之前也有零散地介绍过，这里再做一个统一的整理。</p>
<p>这里暂时不考虑运行时反射的效率问题，只是展示一种实现方案。</p>
<h2 id="IOC的定义"><a href="#IOC的定义" class="headerlink" title="IOC的定义"></a>IOC的定义</h2><p>IOC,即<code>Inversion of Control</code>,意为<code>控制反转</code>,是面向对象编程中的一种设计原则，可以用来降低代码间的耦合。最常见的方式是<code>依赖注入</code>(<code>Dependence Injection</code>,简称<code>DI</code>)。通过IOC，对象在创建时，由外界来控制，而不是内部直接控制。</p>
<h2 id="布局注入"><a href="#布局注入" class="headerlink" title="布局注入"></a>布局注入</h2><p>平时，我们在Activity中，可能会通过在<code>onCreate</code>方法中调用<code>setContentView</code>的方法，给Activity绑定布局。而基于IOC，则可以通过<code>注解</code>来实现：</p>
<h3 id="注解的定义"><a href="#注解的定义" class="headerlink" title="注解的定义"></a>注解的定义</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LayoutInject &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 布局id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@LayoutRes</span> <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@LayoutInject</span>(R.layout.activity_main)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        InjectUtil.inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在MainActivity上加上前面定义的LayoutInject注解,然后在onCreate中调用注入的方法<code>InjectUtil.inject(this)</code></p>
<h3 id="Inject方法"><a href="#Inject方法" class="headerlink" title="Inject方法"></a>Inject方法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        injectLayout(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 布局注入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 需要注入的组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectLayout</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = target.getClass();</span><br><span class="line">        <span class="keyword">boolean</span> annotationPresent = clazz.isAnnotationPresent(LayoutInject<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (!annotationPresent) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LayoutInject annotation = clazz.getAnnotation(LayoutInject<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">int</span> layoutId = annotation.value();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method method = clazz.getMethod(<span class="string">"setContentView"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            method.invoke(target, layoutId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="控件注入"><a href="#控件注入" class="headerlink" title="控件注入"></a>控件注入</h2><h3 id="注解的定义-1"><a href="#注解的定义-1" class="headerlink" title="注解的定义"></a>注解的定义</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ViewInject &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控件id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@IdRes</span> <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="注解的使用-1"><a href="#注解的使用-1" class="headerlink" title="注解的使用"></a>注解的使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewInject</span>(R.id.btn1)</span><br><span class="line">   Button btn1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ViewInject</span>(R.id.btn2)</span><br><span class="line">   Button btn2;</span><br></pre></td></tr></table></figure></div>

<h3 id="Inject方法-1"><a href="#Inject方法-1" class="headerlink" title="Inject方法"></a>Inject方法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        injectView(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控件注入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 需要注入的组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectView</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = target.getClass();</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> annotationPresent = field.isAnnotationPresent(ViewInject<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (!annotationPresent) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ViewInject annotation = field.getAnnotation(ViewInject<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">int</span> viewId = annotation.value();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method method = clazz.getMethod(<span class="string">"findViewById"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                View view = (View) method.invoke(target, viewId);</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                field.set(target, view);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="事件注入"><a href="#事件注入" class="headerlink" title="事件注入"></a>事件注入</h2><h3 id="注解的定义-2"><a href="#注解的定义-2" class="headerlink" title="注解的定义"></a>注解的定义</h3><h4 id="事件类型的注解"><a href="#事件类型的注解" class="headerlink" title="事件类型的注解"></a>事件类型的注解</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Event &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置listener的方法，如:setOnClickListener</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">listenerSetter</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事件，如:new View.OnClickListener()</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt; listenerType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="点击事件的注解"><a href="#点击事件的注解" class="headerlink" title="点击事件的注解"></a>点击事件的注解</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Event</span>(listenerSetter = <span class="string">"setOnClickListener"</span>, listenerType = View.OnClickListener<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Target</span>(<span class="title">ElementType</span>.<span class="title">METHOD</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Retention</span>(<span class="title">RetentionPolicy</span>.<span class="title">RUNTIME</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">OnClick</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控件id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@IdRes</span> <span class="keyword">int</span>[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="长按事件的注解"><a href="#长按事件的注解" class="headerlink" title="长按事件的注解"></a>长按事件的注解</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Event</span>(listenerSetter = <span class="string">"setOnLongClickListener"</span>, listenerType = View.OnLongClickListener<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Target</span>(<span class="title">ElementType</span>.<span class="title">METHOD</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Retention</span>(<span class="title">RetentionPolicy</span>.<span class="title">RUNTIME</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">OnLongClick</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控件id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@IdRes</span> <span class="keyword">int</span>[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="注解的使用-2"><a href="#注解的使用-2" class="headerlink" title="注解的使用"></a>注解的使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OnClick</span>(&#123;R.id.btn1, R.id.btn2&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = view.getId();</span><br><span class="line">        <span class="keyword">switch</span> (id) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn1:</span><br><span class="line">                Toast.makeText(getApplicationContext(), <span class="string">"按钮1点击了"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn2:</span><br><span class="line">                Toast.makeText(getApplicationContext(), <span class="string">"按钮2点击了"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLongClick</span>(&#123;R.id.btn1, R.id.btn2&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">longClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = view.getId();</span><br><span class="line">        <span class="keyword">switch</span> (id) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn1:</span><br><span class="line">                Toast.makeText(getApplicationContext(), <span class="string">"按钮1长按了"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn2:</span><br><span class="line">                Toast.makeText(getApplicationContext(), <span class="string">"按钮2长按了"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Inject方法-2"><a href="#Inject方法-2" class="headerlink" title="Inject方法"></a>Inject方法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        injectEvent(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事件注入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 需要注入的组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectEvent</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = target.getClass();</span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            Annotation[] annotations = method.getAnnotations();</span><br><span class="line">            <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">                Class&lt;? extends Annotation&gt; annotationType = annotation.annotationType();</span><br><span class="line">                <span class="keyword">boolean</span> annotationPresent = annotationType.isAnnotationPresent(Event<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="keyword">if</span> (!annotationPresent) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Event event = annotationType.getAnnotation(Event<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                String listenerSetter = event.listenerSetter();</span><br><span class="line">                Class&lt;?&gt; listenerType = event.listenerType();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Method valueMethod = annotationType.getDeclaredMethod(<span class="string">"value"</span>);</span><br><span class="line">                    valueMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">int</span>[] viewIds = (<span class="keyword">int</span>[]) valueMethod.invoke(annotation);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> viewId : viewIds) &#123;</span><br><span class="line">                        Method findViewByIdMethod = clazz.getMethod(<span class="string">"findViewById"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                        View view = (View) findViewByIdMethod.invoke(target, viewId);</span><br><span class="line">                        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        ListenerInvocationHandler listenerInvocationHandler = <span class="keyword">new</span> ListenerInvocationHandler(target, method);</span><br><span class="line">                        Object proxyInstance = Proxy.newProxyInstance(InjectUtil.class.getClassLoader(), new Class[]&#123;listenerType&#125;, listenerInvocationHandler);</span><br><span class="line">                        Method listenerSetterMethod = view.getClass().getMethod(listenerSetter, listenerType);</span><br><span class="line">                        listenerSetterMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        listenerSetterMethod.invoke(view, proxyInstance);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ListenerInvocationHandler</span><span class="params">(Object target, Method method)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.target = target;</span><br><span class="line">            <span class="keyword">this</span>.method = method;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.method.invoke(target, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>IOC</tag>
        <tag>注入</tag>
        <tag>运行时</tag>
      </tags>
  </entry>
  <entry>
    <title>动态代理+注解+反射实现View的点击事件绑定</title>
    <url>/2020/04/29/Android/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86+%E6%B3%A8%E8%A7%A3+%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0View%E7%9A%84%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="动态代理-注解-反射实现View的点击事件绑定"><a href="#动态代理-注解-反射实现View的点击事件绑定" class="headerlink" title="动态代理+注解+反射实现View的点击事件绑定"></a>动态代理+注解+反射实现View的点击事件绑定</h1><p>代理模式是给对象提供一个代理对象，由代理对象来控制原对象的引用。代理模式分为静态代理和动态代理。</p>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>定义接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义具体的实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerImpl</span> <span class="keyword">implements</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"PlayerImpl play..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义代理类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyImpl</span> <span class="keyword">implements</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Player player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyImpl</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        player.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，具体的实现类和代理类都会实现相同的接口类，在代理类的实现中，会引用具体的实现类。</p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>静态代理，在运行前就已经定义。动态代理是在运行时动态创建代理和实例。JDK提供了<code>Proxy</code>类来创建动态代理</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span><span class="keyword">throws</span> IllegalArgumentException</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>先看下具体的使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Proxy.newProxyInstance(getClass().getClassLoader(), <span class="keyword">new</span> Class[]&#123;Player<span class="class">.<span class="keyword">class</span>&#125;, <span class="title">new</span> <span class="title">InvocationHandler</span>() </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> method.invoke(player, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>

<p>newProxyInstance对应的三个参数：</p>
<ul>
<li><p>类加载器</p>
</li>
<li><p>接口的class，Proxy会根据这个class来生成Proxy类</p>
</li>
<li><p>InvocationHandler,方法的回调,被代理类的方法调用时都会回调到这里</p>
</li>
</ul>
<p>动态代理类的完整代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Player player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPlayer</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Player <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Player) Proxy.newProxyInstance(getClass().getClassLoader(), <span class="keyword">new</span> Class[]&#123;Player<span class="class">.<span class="keyword">class</span>&#125;, <span class="title">new</span> <span class="title">InvocationHandler</span>() </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> method.invoke(player, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>Proxy.newProxyInstance</code>方法最终是调用<code>ProxyGenerator</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateProxyClass(<span class="keyword">final</span> String var0, Class&lt;?&gt;[] var1, <span class="keyword">int</span> var2) &#123;</span><br><span class="line">        ProxyGenerator var3 = <span class="keyword">new</span> ProxyGenerator(var0, var1, var2);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] var4 = var3.generateClassFile();</span><br><span class="line">        <span class="keyword">if</span> (saveGeneratedFiles) &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> var1 = var0.lastIndexOf(<span class="number">46</span>);</span><br><span class="line">                        Path var2;</span><br><span class="line">                        <span class="keyword">if</span> (var1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            Path var3 = Paths.get(var0.substring(<span class="number">0</span>, var1).replace(<span class="string">'.'</span>, File.separatorChar));</span><br><span class="line">                            Files.createDirectories(var3);</span><br><span class="line">                            var2 = var3.resolve(var0.substring(var1 + <span class="number">1</span>, var0.length()) + <span class="string">".class"</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            var2 = Paths.get(var0 + <span class="string">".class"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        Files.write(var2, var4, <span class="keyword">new</span> OpenOption[<span class="number">0</span>]);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException var4x) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"I/O exception saving generated file: "</span> + var4x);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var4;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p><b>动态代理生成的代理类存在于内存中。</b></p>
<h2 id="实现点击事件的绑定"><a href="#实现点击事件的绑定" class="headerlink" title="实现点击事件的绑定"></a>实现点击事件的绑定</h2><p>下面基于动态代理+注解+反射，实现控件的点击事件绑定。</p>
<p>首先定义事件类型的注解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EventType &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Class <span class="title">listenerType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">listenerSetter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后分别定义点击事件和长按事件的注解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventType</span>(listenerType = View.OnClickListener<span class="class">.<span class="keyword">class</span>,<span class="title">listenerSetter</span> </span>= <span class="string">"setOnClickListener"</span>)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OnClick &#123;</span><br><span class="line">    <span class="meta">@IdRes</span> <span class="keyword">int</span>[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventType</span>(listenerType = View.OnLongClickListener<span class="class">.<span class="keyword">class</span>, <span class="title">listenerSetter</span> </span>= <span class="string">"setOnLongClickListener"</span>)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OnLongClick &#123;</span><br><span class="line">    <span class="meta">@IdRes</span> <span class="keyword">int</span>[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后在Activity中定义点击事件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OnClick</span>(&#123;R.id.btn1, R.id.btn2&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(Button view)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(getApplicationContext(), view.getText(), Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLongClick</span>(&#123;R.id.btn1, R.id.btn2&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">longClick</span><span class="params">(Button view)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(getApplicationContext(), view.getText() + <span class="string">"-LongClick"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在Activity中绑定</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        InjectHelper.inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>InjectHelper的实现</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(<span class="keyword">final</span> Activity target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;? extends Activity&gt; clz = target.getClass();</span><br><span class="line">        Method[] declaredMethods = clz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : declaredMethods) &#123;</span><br><span class="line">            Annotation[] annotations = method.getAnnotations();</span><br><span class="line">            <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">                Class&lt;? extends Annotation&gt; annotationType = annotation.annotationType();</span><br><span class="line">                <span class="keyword">if</span> (annotationType.isAnnotationPresent(EventType<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    EventType eventType = annotationType.getAnnotation(EventType<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                    Class listenerType = eventType.listenerType();</span><br><span class="line">                    String listenerSetter = eventType.listenerSetter();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Method valueMethod = annotationType.getDeclaredMethod(<span class="string">"value"</span>);</span><br><span class="line">                        <span class="keyword">int</span>[] ids = (<span class="keyword">int</span>[]) valueMethod.invoke(annotation);</span><br><span class="line">                        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        ListenerInvocationHandler invocationHandler = <span class="keyword">new</span> ListenerInvocationHandler(method, target);</span><br><span class="line">                        Object proxyInstance = Proxy.newProxyInstance(target.getClassLoader(), <span class="keyword">new</span> Class[]&#123;listenerType&#125;, invocationHandler);</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> id : ids) &#123;</span><br><span class="line">                            View view = target.findViewById(id);</span><br><span class="line">                            Method setter = view.getClass().getMethod(listenerSetter, listenerType);</span><br><span class="line">                            setter.invoke(view, proxyInstance);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerInvocationHandler</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> T target;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ListenerInvocationHandler</span><span class="params">(Method method, T target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.method = method;</span><br><span class="line">            <span class="keyword">this</span>.target = target;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.method.invoke(target, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>动态代理</tag>
        <tag>注解</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的注解和反射</title>
    <url>/2020/04/27/Java/annotation/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Java中的注解和反射"><a href="#Java中的注解和反射" class="headerlink" title="Java中的注解和反射"></a>Java中的注解和反射</h1><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Java注解(Annotation)又称Java标注，是JDK5.0引入的一种注释机制。</p>
<h3 id="注解定义"><a href="#注解定义" class="headerlink" title="注解定义"></a>注解定义</h3><p>通过<code>@interface</code>来声明一个注解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Anno &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>对注解进行注解的类就是元注解(meta-annotation)，在自定义时，一般需要指定两个元注解</p>
<h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><p>限制可以应用注解的Java元素类型，包括以下几种：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>TYPE:作用于类、接口或者枚举</p>
</li>
<li><p>FIELD:作用于字段</p>
</li>
<li><p>METHOD:作用于方法</p>
</li>
<li><p>PARAMETER:作用于方法参数</p>
</li>
<li><p>CONSTRUCTOR:作用于构造方法</p>
</li>
<li><p>LOCAL_VARIABLE:作用于局部变量</p>
</li>
<li><p>ANNOTATION_TYPE:作用于注解</p>
</li>
</ul>
<h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p>指定注解的保留阶段,有以下几种</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be discarded by the compiler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SOURCE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler</span></span><br><span class="line"><span class="comment">     * but need not be retained by the VM at run time.  This is the default</span></span><br><span class="line"><span class="comment">     * behavior.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLASS,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler and</span></span><br><span class="line"><span class="comment">     * retained by the VM at run time, so they may be read reflectively.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>SOURCE：注解只保留在源码中，编译时会被忽略。</p>
</li>
<li><p>CLASS：注解在编译时会保留，但JVM会忽略。</p>
</li>
<li><p>RUNTIME: 注解会被JVM保留，因此运行环境可以使用。</p>
</li>
</ul>
<h3 id="注解类型元素"><a href="#注解类型元素" class="headerlink" title="注解类型元素"></a>注解类型元素</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Anno &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无默认值,在应用注解时必须设置</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有默认值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="注解应用场景"><a href="#注解应用场景" class="headerlink" title="注解应用场景"></a>注解应用场景</h3><p>根据<code>Retention</code>的类型，注解的应用场景有以下三种：</p>
<h4 id="SOURCE"><a href="#SOURCE" class="headerlink" title="SOURCE"></a>SOURCE</h4><p>作用于源码级别的注解，可提供给IDE语法检查、APT等场景使用。</p>
<h5 id="IDE语法检查"><a href="#IDE语法检查" class="headerlink" title="IDE语法检查"></a>IDE语法检查</h5><p>Android中提供了@IntDef注解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(SOURCE)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IntDef &#123;</span><br><span class="line">    <span class="comment">/** Defines the allowed constants for this element */</span></span><br><span class="line">    <span class="keyword">int</span>[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Defines whether the constants can be used as a flag, or just as an enum (the default) */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">flag</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个注解的意义在于能够取代枚举，实现如方法入参限制。</p>
<p>如我们要限制参数只能在<code>MONDAY</code>和<code>TUESDAY</code>中的一个，可以先定义常量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeekDay</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MONDAY = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TUESDAY = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后定义注解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@IntDef</span>(value = &#123;WeekDay.MONDAY, WeekDay.TUESDAY&#125;)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Week &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用注解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(@Week <span class="keyword">int</span> week)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    test(WeekDay.MONDAY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="APT注解处理器"><a href="#APT注解处理器" class="headerlink" title="APT注解处理器"></a>APT注解处理器</h5><p>APT全称为：”Anotation Processor Tools”，意为注解处理器。编写好的Java源文<br>件，需要经过 javac 的编译，翻译为虚拟机能够加载解析的字节码Class文件。注解处理器是 javac 自带的一个工<br>具，用来在编译时期扫描处理注解信息。</p>
<p>注解处理器是对注解应用最为广泛的场景。在Glide、EventBus、ButterKnife、ARouter等常用框架中都有注解处理器的身影。</p>
<h4 id="CLASS"><a href="#CLASS" class="headerlink" title="CLASS"></a>CLASS</h4><p>定义为CLASS的注解，会保留在class文件中，但是会被JVM忽略。应用场景为：字节码增强，通过修改字节码文件来达到修改代码执行逻辑的目的。常用的框架有：AspectJ、热修复Roubust。</p>
<h4 id="RUNTIME"><a href="#RUNTIME" class="headerlink" title="RUNTIME"></a>RUNTIME</h4><p>注解保留至运行期，我们可以通过反射获取注解中的所有信息。</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射就是在运行状态中,对于任意一个类,都能够知道这个类的所有属性和方法;对于任意一个对象,都能够调用它的任意方法和属性;并且能改变它的属性。</p>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>Class是一个类，封装了当前对象所对应的类的信息。</p>
<h3 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h3><p>获取Class对象的三种方法</p>
<ul>
<li><p>通过类名获取:类名.class</p>
</li>
<li><p>通过对象获取:对象名.getClass()</p>
</li>
<li><p>通过全类名获取:Class.forName(全类名) classLoader.loadClass(全类名)</p>
</li>
</ul>
<h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><ul>
<li>使用Class对象的newInstance()方法来创建Class对象对应类的实例。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; c = String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Object str = c.newInstance();</span><br></pre></td></tr></table></figure></div>

<ul>
<li>先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建实例。这<br>种方法可以用指定的构造器构造类的实例</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取String所对应的Class对象</span></span><br><span class="line">Class&lt;?&gt; c = String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//获取String类带一个String参数的构造器</span></span><br><span class="line">Constructor constructor = c.getConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//根据构造器创建实例</span></span><br><span class="line">Object obj = constructor.newInstance(<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></figure></div>

<h3 id="获取构造器信息"><a href="#获取构造器信息" class="headerlink" title="获取构造器信息"></a>获取构造器信息</h3><p>得到构造器的方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Constructor <span class="title">getConstructor</span><span class="params">(Class[] params)</span> -- 获得使用特殊的参数类型的<span class="keyword">public</span>构造函数<span class="params">(包括父类）</span></span></span><br><span class="line"><span class="function"><span class="params">Constructor[] getConstructors()</span> -- 获得类的所有公共构造函数</span></span><br><span class="line"><span class="function">Constructor <span class="title">getDeclaredConstructor</span><span class="params">(Class[] params)</span> -- 获得使用特定参数类型的构造函数<span class="params">(包括私有)</span></span></span><br><span class="line"><span class="function">Constructor[] <span class="title">getDeclaredConstructors</span><span class="params">()</span> -- 获得类的所有构造函数<span class="params">(与接入级别无关)</span></span></span><br></pre></td></tr></table></figure></div>

<p>获取类构造器的用法与上述获取方法的用法类似。主要是通过Class类的getConstructor方法得到Constructor类的<br>一个实例，而Constructor类有一个newInstance方法可以创建一个对象实例:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(Object ... initargs)</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="获取类的成员变量信息"><a href="#获取类的成员变量信息" class="headerlink" title="获取类的成员变量信息"></a>获取类的成员变量信息</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Field <span class="title">getField</span><span class="params">(String name)</span> -- 获得命名的公共字段</span></span><br><span class="line"><span class="function">Field[] <span class="title">getFields</span><span class="params">()</span> -- 获得类的所有公共字段</span></span><br><span class="line"><span class="function">Field <span class="title">getDeclaredField</span><span class="params">(String name)</span> -- 获得类声明的命名的字段</span></span><br><span class="line"><span class="function">Field[] <span class="title">getDeclaredFields</span><span class="params">()</span> -- 获得类声明的所有字段</span></span><br></pre></td></tr></table></figure></div>

<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p>获得方法信息的方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Method <span class="title">getMethod</span><span class="params">(String name, Class[] params)</span> -- 使用特定的参数类型，获得命名的公共方法</span></span><br><span class="line"><span class="function">Method[] <span class="title">getMethods</span><span class="params">()</span> -- 获得类的所有公共方法</span></span><br><span class="line"><span class="function">Method <span class="title">getDeclaredMethod</span><span class="params">(String name, Class[] params)</span> -- 使用特写的参数类型，获得类声明的命名的方法</span></span><br><span class="line"><span class="function">Method[] <span class="title">getDeclaredMethods</span><span class="params">()</span> -- 获得类声明的所有方法</span></span><br></pre></td></tr></table></figure></div>

<p>当我们从类中获取了一个方法后，我们就可以用 invoke() 方法来调用这个方法。 invoke 方法的原型为:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="利用反射创建数组"><a href="#利用反射创建数组" class="headerlink" title="利用反射创建数组"></a>利用反射创建数组</h3><p>数组在Java里是比较特殊的一种类型，它可以赋值给一个Object Reference 其中的Array类为<br>java.lang.reflect.Array类。我们通过Array.newInstance()创建数组对象，它的原型是:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newInstance</span><span class="params">(Class&lt;?&gt; componentType, <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="反射获取泛型真实类型"><a href="#反射获取泛型真实类型" class="headerlink" title="反射获取泛型真实类型"></a>反射获取泛型真实类型</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Type genType = object.getClass().getGenericSuperclass();</span><br><span class="line">Type[] params = ((ParameterizedType) genType).getActualTypeArguments();</span><br><span class="line"><span class="keyword">return</span> (Class&lt;?&gt;) params[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></div>

<h2 id="基于注解和反射的简单应用"><a href="#基于注解和反射的简单应用" class="headerlink" title="基于注解和反射的简单应用"></a>基于注解和反射的简单应用</h2><p>通常我们获取Intent传过来的extra，是通过这样的形式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getIntent().getStringExtra(<span class="string">"name"</span>);</span><br><span class="line">getIntent().getIntExtra(<span class="string">"age"</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure></div>

<p>现在，我们通过注解和反射实现自动获取Extra，类似这样:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@InjectExtra</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@InjectExtra</span>(<span class="string">"age"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="meta">@InjectExtra</span>(<span class="string">"gender"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> gender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    InjectHelper.inject(<span class="keyword">this</span>);</span><br><span class="line">    Log.i(TAG, <span class="string">"name:"</span> + name + <span class="string">",age:"</span> + age + <span class="string">",gender:"</span> + gender);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>实现步骤</p>
<ol>
<li>定义注解</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> InjectExtra &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>定义InjectHelper</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入Extra</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;? extends Activity&gt; clz = activity.getClass();</span><br><span class="line">            Field[] declaredFields = clz.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> annotationPresent = field.isAnnotationPresent(InjectExtra<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="keyword">if</span> (annotationPresent) &#123;</span><br><span class="line">                    InjectExtra annotation = field.getAnnotation(InjectExtra<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                    String name = annotation.value();</span><br><span class="line">                    <span class="keyword">if</span> (TextUtils.isEmpty(name)) &#123;</span><br><span class="line">                        <span class="comment">//如果注解没有指定value，就用字段名</span></span><br><span class="line">                        name = field.getName();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Object object = activity.getIntent().getExtras().get(name);</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    field.set(activity, object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>使用</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, TargetActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        intent.putExtra(<span class="string">"name"</span>, <span class="string">"zs"</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"age"</span>, <span class="number">18</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"gender"</span>, <span class="keyword">true</span>);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = InjectHelper<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectExtra</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectExtra</span>(<span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectExtra</span>(<span class="string">"gender"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> gender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        InjectHelper.inject(<span class="keyword">this</span>);</span><br><span class="line">        Log.i(TAG, <span class="string">"name:"</span> + name + <span class="string">",age:"</span> + age + <span class="string">",gender:"</span> + gender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>输出结果</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-04-27 10:38:22.495 19687-19687&#x2F;com.wangyz.annotation I&#x2F;InjectHelper: name:zs,age:18,gender:true</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>这里为了演示注解与反射，指定Retentaion为RUNTIME，实际上可以指定为SOURCE级别，通过APT来生成辅助类，来减少手动获取Extra的工作量。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>注解</tag>
        <tag>反射</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack学习-WorkManager</title>
    <url>/2020/04/20/Android/Jetpack%E5%AD%A6%E4%B9%A0-WorkManager/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Jetpack学习-WorkManager"><a href="#Jetpack学习-WorkManager" class="headerlink" title="Jetpack学习-WorkManager"></a>Jetpack学习-WorkManager</h1><h2 id="WorkManager是什么"><a href="#WorkManager是什么" class="headerlink" title="WorkManager是什么"></a>WorkManager是什么</h2><p><code>WorkManager</code>可以轻松调度即使在应用退出或设备重启时仍应运行的可延迟异步任务，不适用于应用进程结束时能够安全终止的运行中的后台工作，也不适用于需要立即执行的任务。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="引入WorkManager"><a href="#引入WorkManager" class="headerlink" title="引入WorkManager"></a>引入WorkManager</h3><p>在需要引入<code>WorkManager</code>的模块的<code>build.gradle</code>中，增加以下配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> work_version = <span class="string">"2.3.1"</span></span><br><span class="line">    implementation <span class="string">"androidx.work:work-runtime:$work_version"</span></span><br></pre></td></tr></table></figure></div>

<h3 id="定义Worker"><a href="#定义Worker" class="headerlink" title="定义Worker"></a>定义Worker</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadWorker</span> <span class="keyword">extends</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UploadWorker</span><span class="params">(@NonNull Context context, @NonNull WorkerParameters workerParams)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, workerParams);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(MainActivity.TAG, <span class="string">"doWork"</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>继承自<code>Worker</code>，并重写<code>doWork</code>方法</p>
<h3 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OneTimeWorkRequest request = <span class="keyword">new</span> OneTimeWorkRequest.Builder(UploadWorker<span class="class">.<span class="keyword">class</span>).<span class="title">build</span>()</span>;</span><br><span class="line">WorkManager.getInstance(getApplicationContext()).enqueue(request);</span><br></pre></td></tr></table></figure></div>

<p>简单使用就到这里，具体的用法可以在官方文档上查看。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>下面来看下WorkManager的原理。</p>
<p>首先通过<code>WorkManager.getInstance</code>获取到WorkManager的实例</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@NonNull</span> <span class="function">WorkManager <span class="title">getInstance</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> WorkManagerImpl.getInstance(context);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，内部是调用<code>WorkManagerImpl.getInstance</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@NonNull</span> <span class="function">WorkManagerImpl <span class="title">getInstance</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (sLock) &#123;</span><br><span class="line">            WorkManagerImpl instance = getInstance();</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Context appContext = context.getApplicationContext();</span><br><span class="line">                <span class="keyword">if</span> (appContext <span class="keyword">instanceof</span> Configuration.Provider) &#123;</span><br><span class="line">                    initialize(</span><br><span class="line">                            appContext,</span><br><span class="line">                            ((Configuration.Provider) appContext).getWorkManagerConfiguration());</span><br><span class="line">                    instance = getInstance(appContext);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"WorkManager is not initialized properly.  You "</span></span><br><span class="line">                            + <span class="string">"have explicitly disabled WorkManagerInitializer in your manifest, "</span></span><br><span class="line">                            + <span class="string">"have not manually called WorkManager#initialize at this point, and "</span></span><br><span class="line">                            + <span class="string">"your Application does not implement Configuration.Provider."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里实例化。</p>
<p>再来看下执行过程<code>enqueue</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Operation <span class="title">enqueue</span><span class="params">(@NonNull WorkRequest workRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enqueue(Collections.singletonList(workRequest));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>WorkManagerImpl</code>的<code>enqueue</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Operation <span class="title">enqueue</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull List&lt;? extends WorkRequest&gt; workRequests)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This error is not being propagated as part of the Operation, as we want the</span></span><br><span class="line">        <span class="comment">// app to crash during development. Having no workRequests is always a developer error.</span></span><br><span class="line">        <span class="keyword">if</span> (workRequests.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"enqueue needs at least one WorkRequest."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WorkContinuationImpl(<span class="keyword">this</span>, workRequests).enqueue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>enqueue</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@NonNull</span> <span class="function">Operation <span class="title">enqueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Only enqueue if not already enqueued.</span></span><br><span class="line">        <span class="keyword">if</span> (!mEnqueued) &#123;</span><br><span class="line">            <span class="comment">// The runnable walks the hierarchy of the continuations</span></span><br><span class="line">            <span class="comment">// and marks them enqueued using the markEnqueued() method, parent first.</span></span><br><span class="line">            EnqueueRunnable runnable = <span class="keyword">new</span> EnqueueRunnable(<span class="keyword">this</span>);</span><br><span class="line">            mWorkManagerImpl.getWorkTaskExecutor().executeOnBackgroundThread(runnable);</span><br><span class="line">            mOperation = runnable.getOperation();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logger.get().warning(TAG,</span><br><span class="line">                    String.format(<span class="string">"Already enqueued work ids (%s)"</span>, TextUtils.join(<span class="string">", "</span>, mIds)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mOperation;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p><code>enqueue</code>方法会通过<code>TaskExecutor</code>的<code>executeOnBackgroundThread</code>方法来执行到<code>EnqueueRunnable</code>的<code>run</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mWorkContinuation.hasCycles()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        String.format(<span class="string">"WorkContinuation has cycles (%s)"</span>, mWorkContinuation));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> needsScheduling = addToDatabase();</span><br><span class="line">            <span class="keyword">if</span> (needsScheduling) &#123;</span><br><span class="line">                <span class="comment">// Enable RescheduleReceiver, only when there are Worker's that need scheduling.</span></span><br><span class="line">                <span class="keyword">final</span> Context context =</span><br><span class="line">                        mWorkContinuation.getWorkManagerImpl().getApplicationContext();</span><br><span class="line">                PackageManagerHelper.setComponentEnabled(context, RescheduleReceiver<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>)</span>;</span><br><span class="line">                scheduleWorkInBackground();</span><br><span class="line">            &#125;</span><br><span class="line">            mOperation.setState(Operation.SUCCESS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable exception) &#123;</span><br><span class="line">            mOperation.setState(<span class="keyword">new</span> Operation.State.FAILURE(exception));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>执行<code>scheduleWorkInBackground</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleWorkInBackground</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WorkManagerImpl workManager = mWorkContinuation.getWorkManagerImpl();</span><br><span class="line">        Schedulers.schedule(</span><br><span class="line">                workManager.getConfiguration(),</span><br><span class="line">                workManager.getWorkDatabase(),</span><br><span class="line">                workManager.getSchedulers());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>执行<code>schedule</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull Configuration configuration,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull WorkDatabase workDatabase,</span></span></span><br><span class="line"><span class="function"><span class="params">            List&lt;Scheduler&gt; schedulers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (schedulers == <span class="keyword">null</span> || schedulers.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        WorkSpecDao workSpecDao = workDatabase.workSpecDao();</span><br><span class="line">        List&lt;WorkSpec&gt; eligibleWorkSpecs;</span><br><span class="line"></span><br><span class="line">        workDatabase.beginTransaction();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            eligibleWorkSpecs = workSpecDao.getEligibleWorkForScheduling(</span><br><span class="line">                    configuration.getMaxSchedulerLimit());</span><br><span class="line">            <span class="keyword">if</span> (eligibleWorkSpecs != <span class="keyword">null</span> &amp;&amp; eligibleWorkSpecs.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Mark all the WorkSpecs as scheduled.</span></span><br><span class="line">                <span class="comment">// Calls to Scheduler#schedule() could potentially result in more schedules</span></span><br><span class="line">                <span class="comment">// on a separate thread. Therefore, this needs to be done first.</span></span><br><span class="line">                <span class="keyword">for</span> (WorkSpec workSpec : eligibleWorkSpecs) &#123;</span><br><span class="line">                    workSpecDao.markWorkSpecScheduled(workSpec.id, now);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            workDatabase.setTransactionSuccessful();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workDatabase.endTransaction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (eligibleWorkSpecs != <span class="keyword">null</span> &amp;&amp; eligibleWorkSpecs.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            WorkSpec[] eligibleWorkSpecsArray = eligibleWorkSpecs.toArray(<span class="keyword">new</span> WorkSpec[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">// Delegate to the underlying scheduler.</span></span><br><span class="line">            <span class="keyword">for</span> (Scheduler scheduler : schedulers) &#123;</span><br><span class="line">                scheduler.schedule(eligibleWorkSpecsArray);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法里，将任务信息保存到了数据库。然后执行<code>scheduler.schedule</code>方法。它的实现在<code>GreedyScheduler</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(@NonNull WorkSpec... workSpecs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsMainProcess == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// The default process name is the package name.</span></span><br><span class="line">            mIsMainProcess = TextUtils.equals(mContext.getPackageName(), getProcessName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mIsMainProcess) &#123;</span><br><span class="line">            Logger.get().info(TAG, <span class="string">"Ignoring schedule request in non-main process"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        registerExecutionListenerIfNeeded();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep track of the list of new WorkSpecs whose constraints need to be tracked.</span></span><br><span class="line">        <span class="comment">// Add them to the known list of constrained WorkSpecs and call replace() on</span></span><br><span class="line">        <span class="comment">// WorkConstraintsTracker. That way we only need to synchronize on the part where we</span></span><br><span class="line">        <span class="comment">// are updating mConstrainedWorkSpecs.</span></span><br><span class="line">        List&lt;WorkSpec&gt; constrainedWorkSpecs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; constrainedWorkSpecIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (WorkSpec workSpec : workSpecs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (workSpec.state == WorkInfo.State.ENQUEUED</span><br><span class="line">                    &amp;&amp; !workSpec.isPeriodic()</span><br><span class="line">                    &amp;&amp; workSpec.initialDelay == <span class="number">0L</span></span><br><span class="line">                    &amp;&amp; !workSpec.isBackedOff()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (workSpec.hasConstraints()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (SDK_INT &gt;= <span class="number">23</span> &amp;&amp; workSpec.constraints.requiresDeviceIdle()) &#123;</span><br><span class="line">                        <span class="comment">// Ignore requests that have an idle mode constraint.</span></span><br><span class="line">                        Logger.get().debug(TAG,</span><br><span class="line">                                String.format(<span class="string">"Ignoring WorkSpec %s, Requires device idle."</span>,</span><br><span class="line">                                        workSpec));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDK_INT &gt;= <span class="number">24</span> &amp;&amp; workSpec.constraints.hasContentUriTriggers()) &#123;</span><br><span class="line">                        <span class="comment">// Ignore requests that have content uri triggers.</span></span><br><span class="line">                        Logger.get().debug(TAG,</span><br><span class="line">                                String.format(<span class="string">"Ignoring WorkSpec %s, Requires ContentUri triggers."</span>,</span><br><span class="line">                                        workSpec));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        constrainedWorkSpecs.add(workSpec);</span><br><span class="line">                        constrainedWorkSpecIds.add(workSpec.id);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Logger.get().debug(TAG, String.format(<span class="string">"Starting work for %s"</span>, workSpec.id));</span><br><span class="line">                    mWorkManagerImpl.startWork(workSpec.id);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// onExecuted() which is called on the main thread also modifies the list of mConstrained</span></span><br><span class="line">        <span class="comment">// WorkSpecs. Therefore we need to lock here.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!constrainedWorkSpecs.isEmpty()) &#123;</span><br><span class="line">                Logger.get().debug(TAG, String.format(<span class="string">"Starting tracking for [%s]"</span>,</span><br><span class="line">                        TextUtils.join(<span class="string">","</span>, constrainedWorkSpecIds)));</span><br><span class="line">                mConstrainedWorkSpecs.addAll(constrainedWorkSpecs);</span><br><span class="line">                mWorkConstraintsTracker.replace(mConstrainedWorkSpecs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法内部调用<code>mWorkManagerImpl.startWork</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWork</span><span class="params">(@NonNull String workSpecId)</span> </span>&#123;</span><br><span class="line">        startWork(workSpecId, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>继续调用<code>startWork</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWork</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull String workSpecId,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable WorkerParameters.RuntimeExtras runtimeExtras)</span> </span>&#123;</span><br><span class="line">        mWorkTaskExecutor</span><br><span class="line">                .executeOnBackgroundThread(</span><br><span class="line">                        <span class="keyword">new</span> StartWorkRunnable(<span class="keyword">this</span>, workSpecId, runtimeExtras));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>然后执行<code>StartWorkRunnable</code>的<code>run</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mWorkManagerImpl.getProcessor().startWork(mWorkSpecId, mRuntimeExtras);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>Processor</code>的startWork方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startWork</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull String id,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable WorkerParameters.RuntimeExtras runtimeExtras)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        WorkerWrapper workWrapper;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="comment">// Work may get triggered multiple times if they have passing constraints</span></span><br><span class="line">            <span class="comment">// and new work with those constraints are added.</span></span><br><span class="line">            <span class="keyword">if</span> (mEnqueuedWorkMap.containsKey(id)) &#123;</span><br><span class="line">                Logger.get().debug(</span><br><span class="line">                        TAG,</span><br><span class="line">                        String.format(<span class="string">"Work %s is already enqueued for processing"</span>, id));</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            workWrapper =</span><br><span class="line">                    <span class="keyword">new</span> WorkerWrapper.Builder(</span><br><span class="line">                            mAppContext,</span><br><span class="line">                            mConfiguration,</span><br><span class="line">                            mWorkTaskExecutor,</span><br><span class="line">                            <span class="keyword">this</span>,</span><br><span class="line">                            mWorkDatabase,</span><br><span class="line">                            id)</span><br><span class="line">                            .withSchedulers(mSchedulers)</span><br><span class="line">                            .withRuntimeExtras(runtimeExtras)</span><br><span class="line">                            .build();</span><br><span class="line">            ListenableFuture&lt;Boolean&gt; future = workWrapper.getFuture();</span><br><span class="line">            future.addListener(</span><br><span class="line">                    <span class="keyword">new</span> FutureListener(<span class="keyword">this</span>, id, future),</span><br><span class="line">                    mWorkTaskExecutor.getMainThreadExecutor());</span><br><span class="line">            mEnqueuedWorkMap.put(id, workWrapper);</span><br><span class="line">        &#125;</span><br><span class="line">        mWorkTaskExecutor.getBackgroundExecutor().execute(workWrapper);</span><br><span class="line">        Logger.get().debug(TAG, String.format(<span class="string">"%s: processing %s"</span>, getClass().getSimpleName(), id));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法里会调用<code>WorkerWrapper</code>的<code>run</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mTags = mWorkTagDao.getTagsForWorkSpecId(mWorkSpecId);</span><br><span class="line">        mWorkDescription = createWorkDescription(mTags);</span><br><span class="line">        runWorker();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>runWorker</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mWorkTaskExecutor.getMainThreadExecutor()</span><br><span class="line">                    .execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                Logger.get().debug(TAG, String.format(<span class="string">"Starting work for %s"</span>,</span><br><span class="line">                                        mWorkSpec.workerClassName));</span><br><span class="line">                                mInnerFuture = mWorker.startWork();</span><br><span class="line">                                future.setFuture(mInnerFuture);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                                future.setException(e);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>执行<code>mWorker.startWork()</code>方法,它的实现在Worker中</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="meta">@NonNull</span> <span class="function">ListenableFuture&lt;Result&gt; <span class="title">startWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mFuture = SettableFuture.create();</span><br><span class="line">        getBackgroundExecutor().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Result result = doWork();</span><br><span class="line">                    mFuture.set(result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                    mFuture.setException(throwable);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> mFuture;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>doWork()</code>方法,然后调用到我们自定义的类中重写的doWork方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(MainActivity.TAG, <span class="string">"doWork"</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>附一张简单的时序图</p>
<p><a href="/images/WorkManager%E6%97%B6%E5%BA%8F%E5%9B%BE.png" data-fancybox="group" data-caption="WorkManager时序图" class="fancybox"><img alt="WorkManager时序图" title="WorkManager时序图" data-src="/images/WorkManager%E6%97%B6%E5%BA%8F%E5%9B%BE.png" src="/img/loading.gif" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Jetpack</tag>
        <tag>WorkManager</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack学习-Paging</title>
    <url>/2020/04/18/Android/Jetpack%E5%AD%A6%E4%B9%A0-Paging/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Jetpack学习-Paging"><a href="#Jetpack学习-Paging" class="headerlink" title="Jetpack学习-Paging"></a>Jetpack学习-Paging</h1><h2 id="Paging是什么"><a href="#Paging是什么" class="headerlink" title="Paging是什么"></a>Paging是什么</h2><p>分页库可一次加载和显示一小块数据。按需载入部分数据会减少网络带宽和系统资源的使用量。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="引入Paging"><a href="#引入Paging" class="headerlink" title="引入Paging"></a>引入Paging</h3><p>在需要引入Paging模块的build.gradle中配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> paging_version = <span class="string">"2.1.0"</span></span><br><span class="line">implementation <span class="string">"androidx.paging:paging-runtime:$paging_version"</span></span><br></pre></td></tr></table></figure></div>

<h3 id="定义Bean"><a href="#定义Bean" class="headerlink" title="定义Bean"></a>定义Bean</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> id.equals(student.id) &amp;&amp;</span><br><span class="line">                name.equals(student.name) &amp;&amp;</span><br><span class="line">                gender.equals(student.gender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.KITKAT)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name, gender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>需要重写<code>equals</code>和<code>hashCode</code>方法，后面比较数据时会用到</p>
<h3 id="定义DataSource"><a href="#定义DataSource" class="headerlink" title="定义DataSource"></a>定义DataSource</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDataSource</span> <span class="keyword">extends</span> <span class="title">PositionalDataSource</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInitial</span><span class="params">(@NonNull LoadInitialParams params, @NonNull LoadInitialCallback&lt;Student&gt; callback)</span> </span>&#123;</span><br><span class="line">        callback.onResult(getStudents(<span class="number">0</span>, Config.SIZE), <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadRange</span><span class="params">(@NonNull LoadRangeParams params, @NonNull LoadRangeCallback&lt;Student&gt; callback)</span> </span>&#123;</span><br><span class="line">        callback.onResult(getStudents(params.startPosition, params.loadSize));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Student&gt; <span class="title">getStudents</span><span class="params">(<span class="keyword">int</span> startPosition, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = startPosition; i &lt; startPosition + pageSize; i++) &#123;</span><br><span class="line">            Student student = <span class="keyword">new</span> Student();</span><br><span class="line">            student.setId(<span class="string">"ID:"</span> + i);</span><br><span class="line">            student.setName(<span class="string">"名称:"</span> + i);</span><br><span class="line">            student.setGender(<span class="string">"性别:"</span> + i);</span><br><span class="line">            list.add(student);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义一个类继承自<code>PositionalDataSource</code>,这是一个固定大小的数据源。这里只作演示，具体业务可以根据实际情况修改。</p>
<p>在这个类中定义获取数据的方法<code>getStudents</code>,然后重写<code>loadInitial</code>,<code>loadRange</code>方法</p>
<h3 id="定义DataSourceFactory"><a href="#定义DataSourceFactory" class="headerlink" title="定义DataSourceFactory"></a>定义DataSourceFactory</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDataSourceFactory</span> <span class="keyword">extends</span> <span class="title">DataSource</span>.<span class="title">Factory</span>&lt;<span class="title">Integer</span>, <span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource&lt;Integer, Student&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StudentDataSource dataSource = <span class="keyword">new</span> StudentDataSource();</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="定义ViewModel"><a href="#定义ViewModel" class="headerlink" title="定义ViewModel"></a>定义ViewModel</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LiveData&lt;PagedList&lt;Student&gt;&gt; listLiveData;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentViewModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StudentDataSourceFactory factory = <span class="keyword">new</span> StudentDataSourceFactory();</span><br><span class="line">        <span class="keyword">this</span>.listLiveData = <span class="keyword">new</span> LivePagedListBuilder&lt;Integer, Student&gt;(factory, Config.SIZE).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LiveData&lt;PagedList&lt;Student&gt;&gt; getListLiveData() &#123;</span><br><span class="line">        <span class="keyword">return</span> listLiveData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="定义Adapter"><a href="#定义Adapter" class="headerlink" title="定义Adapter"></a>定义Adapter</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerPagingAdapter</span> <span class="keyword">extends</span> <span class="title">PagedListAdapter</span>&lt;<span class="title">Student</span>, <span class="title">RecyclerPagingAdapter</span>.<span class="title">RecyclerViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DiffUtil.ItemCallback&lt;Student&gt; DIFF_STUDENT = <span class="keyword">new</span> DiffUtil.ItemCallback&lt;Student&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areItemsTheSame</span><span class="params">(@NonNull Student oldItem, @NonNull Student newItem)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> oldItem.getId() == newItem.getId();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areContentsTheSame</span><span class="params">(@NonNull Student oldItem, @NonNull Student newItem)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> oldItem.equals(newItem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyclerPagingAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(DIFF_STUDENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RecyclerViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//LayoutInflater.from(parent.getContext()).inflate(R.layout.item_paging, null);不能在宽度上满屏</span></span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_paging, parent,<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RecyclerViewHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull RecyclerViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Student student = getItem(position);</span><br><span class="line">        <span class="keyword">if</span> (student == <span class="keyword">null</span>) &#123;</span><br><span class="line">            holder.tvId.setText(<span class="string">"加载中"</span>);</span><br><span class="line">            holder.tvName.setText(<span class="string">"加载中"</span>);</span><br><span class="line">            holder.tvGender.setText(<span class="string">"加载中"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            holder.tvId.setText(student.getId());</span><br><span class="line">            holder.tvName.setText(student.getName());</span><br><span class="line">            holder.tvGender.setText(student.getGender());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TextView tvId;</span><br><span class="line">        TextView tvName;</span><br><span class="line">        TextView tvGender;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RecyclerViewHolder</span><span class="params">(@NonNull View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            tvId = itemView.findViewById(R.id.id);</span><br><span class="line">            tvName = itemView.findViewById(R.id.name);</span><br><span class="line">            tvGender = itemView.findViewById(R.id.gender);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PagingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RecyclerView recyclerView;</span><br><span class="line">    RecyclerPagingAdapter adapter;</span><br><span class="line">    StudentViewModel viewModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_paging);</span><br><span class="line"></span><br><span class="line">        recyclerView = findViewById(R.id.rv);</span><br><span class="line">        adapter = <span class="keyword">new</span> RecyclerPagingAdapter();</span><br><span class="line">        viewModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>, <span class="keyword">new</span> ViewModelProvider.NewInstanceFactory()).get(StudentViewModel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        viewModel.getListLiveData().observe(<span class="keyword">this</span>, <span class="keyword">new</span> Observer&lt;PagedList&lt;Student&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(PagedList&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">                adapter.submitList(students);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>分析Paging，首先从获取数据开始: <code>viewModel.getListLiveData()</code>。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> LiveData&lt;PagedList&lt;Student&gt;&gt; getListLiveData() &#123;</span><br><span class="line">        <span class="keyword">return</span> listLiveData;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>listLiveData在构造方法中赋值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StudentViewModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StudentDataSourceFactory factory = <span class="keyword">new</span> StudentDataSourceFactory();</span><br><span class="line">        <span class="keyword">this</span>.listLiveData = <span class="keyword">new</span> LivePagedListBuilder&lt;Integer, Student&gt;(factory, Config.SIZE).build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>通过<code>LivePagedListBuilder的build</code>方法赋值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> LiveData&lt;PagedList&lt;Value&gt;&gt; build() &#123;</span><br><span class="line">        <span class="keyword">return</span> create(<span class="keyword">this</span>.mInitialLoadKey, <span class="keyword">this</span>.mConfig, <span class="keyword">this</span>.mBoundaryCallback, <span class="keyword">this</span>.mDataSourceFactory, ArchTaskExecutor.getMainThreadExecutor(), <span class="keyword">this</span>.mFetchExecutor);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>create</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;Key, Value&gt; LiveData&lt;PagedList&lt;Value&gt;&gt; create(<span class="meta">@Nullable</span> <span class="keyword">final</span> Key initialLoadKey, <span class="meta">@NonNull</span> <span class="keyword">final</span> Config config, <span class="meta">@Nullable</span> <span class="keyword">final</span> BoundaryCallback boundaryCallback, <span class="meta">@NonNull</span> <span class="keyword">final</span> Factory&lt;Key, Value&gt; dataSourceFactory, <span class="meta">@NonNull</span> <span class="keyword">final</span> Executor notifyExecutor, <span class="meta">@NonNull</span> <span class="keyword">final</span> Executor fetchExecutor) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> ComputableLiveData&lt;PagedList&lt;Value&gt;&gt;(fetchExecutor) &#123;</span><br><span class="line">            <span class="meta">@Nullable</span></span><br><span class="line">            <span class="keyword">private</span> PagedList&lt;Value&gt; mList;</span><br><span class="line">            <span class="meta">@Nullable</span></span><br><span class="line">            <span class="keyword">private</span> DataSource&lt;Key, Value&gt; mDataSource;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> InvalidatedCallback mCallback = <span class="keyword">new</span> InvalidatedCallback() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInvalidated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    invalidate();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> PagedList&lt;Value&gt; <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Key initializeKey = initialLoadKey;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.mList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    initializeKey = <span class="keyword">this</span>.mList.getLastKey();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.mDataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.mDataSource.removeInvalidatedCallback(<span class="keyword">this</span>.mCallback);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.mDataSource = dataSourceFactory.create();</span><br><span class="line">                    <span class="keyword">this</span>.mDataSource.addInvalidatedCallback(<span class="keyword">this</span>.mCallback);</span><br><span class="line">                    <span class="keyword">this</span>.mList = (<span class="keyword">new</span> androidx.paging.PagedList.Builder(<span class="keyword">this</span>.mDataSource, config)).setNotifyExecutor(notifyExecutor).setFetchExecutor(fetchExecutor).setBoundaryCallback(boundaryCallback).setInitialKey(initializeKey).build();</span><br><span class="line">                &#125; <span class="keyword">while</span>(<span class="keyword">this</span>.mList.isDetached());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.mList;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).getLiveData();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>实例化了一个ComputableLiveData对象</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ComputableLiveData</span><span class="params">(@NonNull Executor executor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mInvalid = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.mComputing = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.mRefreshRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@WorkerThread</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">boolean</span> computed;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    computed = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (ComputableLiveData.<span class="keyword">this</span>.mComputing.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Object value;</span><br><span class="line">                            <span class="keyword">for</span>(value = <span class="keyword">null</span>; ComputableLiveData.<span class="keyword">this</span>.mInvalid.compareAndSet(<span class="keyword">true</span>, <span class="keyword">false</span>); value = ComputableLiveData.<span class="keyword">this</span>.compute()) &#123;</span><br><span class="line">                                computed = <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (computed) &#123;</span><br><span class="line">                                ComputableLiveData.<span class="keyword">this</span>.mLiveData.postValue(value);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            ComputableLiveData.<span class="keyword">this</span>.mComputing.set(<span class="keyword">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">while</span>(computed &amp;&amp; ComputableLiveData.<span class="keyword">this</span>.mInvalid.get());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.mInvalidationRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@MainThread</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">boolean</span> isActive = ComputableLiveData.<span class="keyword">this</span>.mLiveData.hasActiveObservers();</span><br><span class="line">                <span class="keyword">if</span> (ComputableLiveData.<span class="keyword">this</span>.mInvalid.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>) &amp;&amp; isActive) &#123;</span><br><span class="line">                    ComputableLiveData.<span class="keyword">this</span>.mExecutor.execute(ComputableLiveData.<span class="keyword">this</span>.mRefreshRunnable);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.mExecutor = executor;</span><br><span class="line">        <span class="keyword">this</span>.mLiveData = <span class="keyword">new</span> LiveData&lt;T&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                ComputableLiveData.<span class="keyword">this</span>.mExecutor.execute(ComputableLiveData.<span class="keyword">this</span>.mRefreshRunnable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在<code>ComputableLiveData</code>的构造方法中，定义了一个<code>mRefreshRunnable</code>，当<code>LiveData</code>的<code>onActive</code>方法回调时，就会执行m<code>RefreshRunnable</code></p>
<p><code>RefreshRunnable</code>的<code>run</code>方法，先执行<code>compute</code>然后会通过<code>ComputableLiveData.this.mLiveData.postValue(value)</code>刷新</p>
<p>先来看<code>compute</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> PagedList&lt;Value&gt; <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Key initializeKey = initialLoadKey;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.mList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    initializeKey = <span class="keyword">this</span>.mList.getLastKey();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.mDataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.mDataSource.removeInvalidatedCallback(<span class="keyword">this</span>.mCallback);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.mDataSource = dataSourceFactory.create();</span><br><span class="line">                    <span class="keyword">this</span>.mDataSource.addInvalidatedCallback(<span class="keyword">this</span>.mCallback);</span><br><span class="line">                    <span class="keyword">this</span>.mList = (<span class="keyword">new</span> androidx.paging.PagedList.Builder(<span class="keyword">this</span>.mDataSource, config)).setNotifyExecutor(notifyExecutor).setFetchExecutor(fetchExecutor).setBoundaryCallback(boundaryCallback).setInitialKey(initializeKey).build();</span><br><span class="line">                &#125; <span class="keyword">while</span>(<span class="keyword">this</span>.mList.isDetached());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.mList;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个方法里面调用<code>dataSourceFactory.create()</code></p>
<p>这个实现在我们定义的类中</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> DataSource&lt;Integer, Student&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StudentDataSource dataSource = <span class="keyword">new</span> StudentDataSource();</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>然后通过PagedList.Builder.build()对mList进行赋值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PagedList&lt;Value&gt; <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> define defaults, once they can be used in module without android dependency</span></span><br><span class="line">            <span class="keyword">if</span> (mNotifyExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"MainThreadExecutor required"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mFetchExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"BackgroundThreadExecutor required"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//noinspection unchecked</span></span><br><span class="line">            <span class="keyword">return</span> PagedList.create(</span><br><span class="line">                    mDataSource,</span><br><span class="line">                    mNotifyExecutor,</span><br><span class="line">                    mFetchExecutor,</span><br><span class="line">                    mBoundaryCallback,</span><br><span class="line">                    mConfig,</span><br><span class="line">                    mInitialKey);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>PagedList.create</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K, T&gt; <span class="function">PagedList&lt;T&gt; <span class="title">create</span><span class="params">(@NonNull DataSource&lt;K, T&gt; dataSource,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull Executor notifyExecutor,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull Executor fetchExecutor,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable BoundaryCallback&lt;T&gt; boundaryCallback,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull Config config,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSource.isContiguous() || !config.enablePlaceholders) &#123;</span><br><span class="line">            <span class="keyword">int</span> lastLoad = ContiguousPagedList.LAST_LOAD_UNSPECIFIED;</span><br><span class="line">            <span class="keyword">if</span> (!dataSource.isContiguous()) &#123;</span><br><span class="line">                <span class="comment">//noinspection unchecked</span></span><br><span class="line">                dataSource = (DataSource&lt;K, T&gt;) ((PositionalDataSource&lt;T&gt;) dataSource)</span><br><span class="line">                        .wrapAsContiguousWithoutPlaceholders();</span><br><span class="line">                <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    lastLoad = (Integer) key;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ContiguousDataSource&lt;K, T&gt; contigDataSource = (ContiguousDataSource&lt;K, T&gt;) dataSource;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ContiguousPagedList&lt;&gt;(contigDataSource,</span><br><span class="line">                    notifyExecutor,</span><br><span class="line">                    fetchExecutor,</span><br><span class="line">                    boundaryCallback,</span><br><span class="line">                    config,</span><br><span class="line">                    key,</span><br><span class="line">                    lastLoad);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TiledPagedList&lt;&gt;((PositionalDataSource&lt;T&gt;) dataSource,</span><br><span class="line">                    notifyExecutor,</span><br><span class="line">                    fetchExecutor,</span><br><span class="line">                    boundaryCallback,</span><br><span class="line">                    config,</span><br><span class="line">                    (key != <span class="keyword">null</span>) ? (Integer) key : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>看下<code>ContiguousPagedList</code>的构造函数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ContiguousPagedList(</span><br><span class="line">            <span class="meta">@NonNull</span> ContiguousDataSource&lt;K, V&gt; dataSource,</span><br><span class="line">            <span class="meta">@NonNull</span> Executor mainThreadExecutor,</span><br><span class="line">            <span class="meta">@NonNull</span> Executor backgroundThreadExecutor,</span><br><span class="line">            <span class="meta">@Nullable</span> BoundaryCallback&lt;V&gt; boundaryCallback,</span><br><span class="line">            <span class="meta">@NonNull</span> Config config,</span><br><span class="line">            <span class="keyword">final</span> <span class="meta">@Nullable</span> K key,</span><br><span class="line">            <span class="keyword">int</span> lastLoad) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> PagedStorage&lt;V&gt;(), mainThreadExecutor, backgroundThreadExecutor,</span><br><span class="line">                boundaryCallback, config);</span><br><span class="line">        mDataSource = dataSource;</span><br><span class="line">        mLastLoad = lastLoad;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mDataSource.isInvalid()) &#123;</span><br><span class="line">            detach();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mDataSource.dispatchLoadInitial(key,</span><br><span class="line">                    mConfig.initialLoadSizeHint,</span><br><span class="line">                    mConfig.pageSize,</span><br><span class="line">                    mConfig.enablePlaceholders,</span><br><span class="line">                    mMainThreadExecutor,</span><br><span class="line">                    mReceiver);</span><br><span class="line">        &#125;</span><br><span class="line">        mShouldTrim = mDataSource.supportsPageDropping()</span><br><span class="line">                &amp;&amp; mConfig.maxSize != Config.MAX_SIZE_UNBOUNDED;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>dispatchLoadInitial</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchLoadInitial</span><span class="params">(@Nullable Integer position, <span class="keyword">int</span> initialLoadSize, <span class="keyword">int</span> pageSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> enablePlaceholders, @NonNull Executor mainThreadExecutor,</span></span></span><br><span class="line"><span class="function"><span class="params">                @NonNull PageResult.Receiver&lt;Value&gt; receiver)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> convertPosition = position == <span class="keyword">null</span> ? <span class="number">0</span> : position;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Note enablePlaceholders will be false here, but we don't have a way to communicate</span></span><br><span class="line">            <span class="comment">// this to PositionalDataSource. This is fine, because only the list and its position</span></span><br><span class="line">            <span class="comment">// offset will be consumed by the LoadInitialCallback.</span></span><br><span class="line">            mSource.dispatchLoadInitial(<span class="keyword">false</span>, convertPosition, initialLoadSize,</span><br><span class="line">                    pageSize, mainThreadExecutor, receiver);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>dispatchLoadInitial</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">dispatchLoadInitial</span><span class="params">(<span class="keyword">boolean</span> acceptCount,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> requestedStartPosition, <span class="keyword">int</span> requestedLoadSize, <span class="keyword">int</span> pageSize,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull Executor mainThreadExecutor, @NonNull PageResult.Receiver&lt;T&gt; receiver)</span> </span>&#123;</span><br><span class="line">        LoadInitialCallbackImpl&lt;T&gt; callback =</span><br><span class="line">                <span class="keyword">new</span> LoadInitialCallbackImpl&lt;&gt;(<span class="keyword">this</span>, acceptCount, pageSize, receiver);</span><br><span class="line"></span><br><span class="line">        LoadInitialParams params = <span class="keyword">new</span> LoadInitialParams(</span><br><span class="line">                requestedStartPosition, requestedLoadSize, pageSize, acceptCount);</span><br><span class="line">        loadInitial(params, callback);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If initialLoad's callback is not called within the body, we force any following calls</span></span><br><span class="line">        <span class="comment">// to post to the UI thread. This constructor may be run on a background thread, but</span></span><br><span class="line">        <span class="comment">// after constructor, mutation must happen on UI thread.</span></span><br><span class="line">        callback.mCallbackHelper.setPostExecutor(mainThreadExecutor);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>loadInitial</code>，这里调用到了我们定义的StudentDataSource</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInitial</span><span class="params">(@NonNull LoadInitialParams params, @NonNull LoadInitialCallback&lt;Student&gt; callback)</span> </span>&#123;</span><br><span class="line">        callback.onResult(getStudents(<span class="number">0</span>, Config.SIZE), <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>onResult</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(@NonNull List&lt;T&gt; data, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!mCallbackHelper.dispatchInvalidResultIfInvalid()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Position must be non-negative"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (data.isEmpty() &amp;&amp; position != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"Initial result cannot be empty if items are present in data set."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mCountingEnabled) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Placeholders requested, but totalCount not"</span></span><br><span class="line">                            + <span class="string">" provided. Please call the three-parameter onResult method, or"</span></span><br><span class="line">                            + <span class="string">" disable placeholders in the PagedList.Config"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                mCallbackHelper.dispatchResultToReceiver(<span class="keyword">new</span> PageResult&lt;&gt;(data, position));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>dispatchResultToReceiver</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchResultToReceiver</span><span class="params">(<span class="keyword">final</span> @NonNull PageResult&lt;T&gt; result)</span> </span>&#123;</span><br><span class="line">            Executor executor;</span><br><span class="line">            <span class="keyword">synchronized</span> (mSignalLock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mHasSignalled) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                            <span class="string">"callback.onResult already called, cannot call again."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                mHasSignalled = <span class="keyword">true</span>;</span><br><span class="line">                executor = mPostExecutor;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        mReceiver.onPageResult(mResultType, result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mReceiver.onPageResult(mResultType, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p><code>compute</code>暂时分析到这里，后面先不作过多深入</p>
<p><code>compute</code>执行后，会执行<code>postValue</code>，这样在Activity中的回调就会执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(PagedList&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">                adapter.submitList(students);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<p>会调用<code>submitList</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitList</span><span class="params">(@Nullable PagedList&lt;T&gt; pagedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDiffer.submitList(pagedList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>submitList</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitList</span><span class="params">(@Nullable PagedList&lt;T&gt; pagedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.submitList(pagedList, (Runnable)<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>submitList</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitList</span><span class="params">(@Nullable <span class="keyword">final</span> PagedList&lt;T&gt; pagedList, @Nullable <span class="keyword">final</span> Runnable commitCallback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pagedList != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.mPagedList == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.mSnapshot == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.mIsContiguous = pagedList.isContiguous();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pagedList.isContiguous() != <span class="keyword">this</span>.mIsContiguous) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"AsyncPagedListDiffer cannot handle both contiguous and non-contiguous lists."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> runGeneration = ++<span class="keyword">this</span>.mMaxScheduledGeneration;</span><br><span class="line">        <span class="keyword">if</span> (pagedList == <span class="keyword">this</span>.mPagedList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (commitCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                commitCallback.run();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            PagedList&lt;T&gt; previous = <span class="keyword">this</span>.mSnapshot != <span class="keyword">null</span> ? <span class="keyword">this</span>.mSnapshot : <span class="keyword">this</span>.mPagedList;</span><br><span class="line">            <span class="keyword">if</span> (pagedList == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> removedCount = <span class="keyword">this</span>.getItemCount();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.mPagedList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.mPagedList.removeWeakCallback(<span class="keyword">this</span>.mPagedListCallback);</span><br><span class="line">                    <span class="keyword">this</span>.mPagedList = <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.mSnapshot != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.mSnapshot = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.mUpdateCallback.onRemoved(<span class="number">0</span>, removedCount);</span><br><span class="line">                <span class="keyword">this</span>.onCurrentListChanged(previous, (PagedList)<span class="keyword">null</span>, commitCallback);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.mPagedList == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.mSnapshot == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.mPagedList = pagedList;</span><br><span class="line">                pagedList.addWeakCallback((List)<span class="keyword">null</span>, <span class="keyword">this</span>.mPagedListCallback);</span><br><span class="line">                <span class="keyword">this</span>.mUpdateCallback.onInserted(<span class="number">0</span>, pagedList.size());</span><br><span class="line">                <span class="keyword">this</span>.onCurrentListChanged((PagedList)<span class="keyword">null</span>, pagedList, commitCallback);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.mPagedList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.mPagedList.removeWeakCallback(<span class="keyword">this</span>.mPagedListCallback);</span><br><span class="line">                    <span class="keyword">this</span>.mSnapshot = (PagedList)<span class="keyword">this</span>.mPagedList.snapshot();</span><br><span class="line">                    <span class="keyword">this</span>.mPagedList = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.mSnapshot != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.mPagedList == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> PagedList&lt;T&gt; oldSnapshot = <span class="keyword">this</span>.mSnapshot;</span><br><span class="line">                    <span class="keyword">final</span> PagedList&lt;T&gt; newSnapshot = (PagedList)pagedList.snapshot();</span><br><span class="line">                    <span class="keyword">this</span>.mConfig.getBackgroundThreadExecutor().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">final</span> DiffResult result = PagedStorageDiffHelper.computeDiff(oldSnapshot.mStorage, newSnapshot.mStorage, AsyncPagedListDiffer.<span class="keyword">this</span>.mConfig.getDiffCallback());</span><br><span class="line">                            AsyncPagedListDiffer.<span class="keyword">this</span>.mMainThreadExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span> (AsyncPagedListDiffer.<span class="keyword">this</span>.mMaxScheduledGeneration == runGeneration) &#123;</span><br><span class="line">                                        AsyncPagedListDiffer.<span class="keyword">this</span>.latchPagedList(pagedList, newSnapshot, result, oldSnapshot.mLastLoad, commitCallback);</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"must be in snapshot state to diff"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法里会执行<code>onCurrentListChanged</code>进行通知更新。</p>
<p>Paging的原理先分析到这里。什么?这也太简单了吧，根本没有讲清楚具体的流程啊！你是不是不会原理啊！！！嗯<del>~</del>说对了,目前还只是理解到这里，后续再补充(手动尴尬)！</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Jetpack</tag>
        <tag>Paging</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack学习-Navigation</title>
    <url>/2020/04/17/Android/Jetpack%E5%AD%A6%E4%B9%A0-Navigation/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Jetpack学习-Navigation"><a href="#Jetpack学习-Navigation" class="headerlink" title="Jetpack学习-Navigation"></a>Jetpack学习-Navigation</h1><h2 id="Navigation是什么"><a href="#Navigation是什么" class="headerlink" title="Navigation是什么"></a>Navigation是什么</h2><p>Navigation翻译过来就是导航。</p>
<p>导航是指支持用户导航、进入和退出应用中不同内容片段的交互。Android Jetpack 的导航组件可帮助您实现导航，无论是简单的按钮点击，还是应用栏和抽屉式导航栏等更为复杂的模式，该组件均可应对。导航组件还通过遵循一套既定原则来确保一致且可预测的用户体验。</p>
<p>导航组件由以下三个关键部分组成：</p>
<ul>
<li><p>导航图：在一个集中位置包含所有导航相关信息的 XML 资源。这包括应用内所有单个内容区域（称为目标）以及用户可以通过应用获取的可能路径。</p>
</li>
<li><p>NavHost：显示导航图中目标的空白容器。导航组件包含一个默认 NavHost 实现 (NavHostFragment)，可显示 Fragment 目标。</p>
</li>
<li><p>NavController：在 NavHost 中管理应用导航的对象。当用户在整个应用中移动时，NavController 会安排 NavHost 中目标内容的交换。</p>
</li>
</ul>
<p>在应用中导航时，您告诉 NavController，您想沿导航图中的特定路径导航至特定目标，或直接导航至特定目标。NavController 便会在 NavHost 中显示相应目标。</p>
<p>导航组件提供各种其他优势，包括以下内容：</p>
<ul>
<li><p>处理 Fragment 事务。</p>
</li>
<li><p>默认情况下，正确处理往返操作。</p>
</li>
<li><p>为动画和转换提供标准化资源。</p>
</li>
<li><p>实现和处理深层链接。</p>
</li>
<li><p>包括导航界面模式（例如抽屉式导航栏和底部导航），用户只需完成极少的额外工作。</p>
</li>
<li><p>Safe Args - 可在目标之间导航和传递数据时提供类型安全的 Gradle 插件。</p>
</li>
<li><p>ViewModel 支持 - 您可以将 ViewModel 的范围限定为导航图，以在图表的目标之间共享与界面相关的数据。</p>
</li>
<li><p>此外，您还可以使用 Android Studio 的 Navigation Editor 来查看和编辑导航图。</p>
</li>
</ul>
<p><code>以上内容来自官方文档(我只是一个搬运工\(^o^)/)</code></p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="引入Navigation"><a href="#引入Navigation" class="headerlink" title="引入Navigation"></a>引入Navigation</h3><p>在需要使用Navigation的模块的build.gradle中引入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> nav_version = <span class="string">"2.3.0-alpha01"</span></span><br><span class="line">implementation <span class="string">"androidx.navigation:navigation-fragment:$nav_version"</span></span><br><span class="line">implementation <span class="string">"androidx.navigation:navigation-ui:$nav_version"</span></span><br></pre></td></tr></table></figure></div>

<h3 id="建立导航图"><a href="#建立导航图" class="headerlink" title="建立导航图"></a>建立导航图</h3><p>在res目录右键-New-Android Resource File</p>
<p><a href="/images/nav-graph.png" data-fancybox="group" data-caption="nav-graph" class="fancybox"><img alt="nav-graph" title="nav-graph" data-src="/images/nav-graph.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在弹出的界面中，File name可随意输入，Resource type选择Navigation,点击确定</p>
<p><a href="/images/nav-graph2.png" data-fancybox="group" data-caption="nav-graph2" class="fancybox"><img alt="nav-graph2" title="nav-graph2" data-src="/images/nav-graph2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>点击确定后，会在res目录下创建navigation目录，以及刚才定义的导航文件</p>
<p><a href="/images/nav-graph3.png" data-fancybox="group" data-caption="nav-graph3" class="fancybox"><img alt="nav-graph3" title="nav-graph3" data-src="/images/nav-graph3.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>双击打开刚才创建的导航文件，在Design界面可以看到目前还没有内容，可以点击上方的+号图标添加fragment，也可以自己手动在xml中添加</p>
<p><a href="/images/nav-graph4.png" data-fancybox="group" data-caption="nav-graph4" class="fancybox"><img alt="nav-graph4" title="nav-graph4" data-src="/images/nav-graph4.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>我们需要为这个文件指定startDestination，即起始的界面</p>
<p><a href="/images/nav-graph5.png" data-fancybox="group" data-caption="nav-graph5" class="fancybox"><img alt="nav-graph5" title="nav-graph5" data-src="/images/nav-graph5.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>startDestination指定为mainFragment，mainFragment对应的布局为fragment_main</p>
<p>Navigation首先会加载一个默认的Fragment，这个需要在Activity中指定</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_host_fragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"androidx.navigation.fragment.NavHostFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:defaultNavHost</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:navGraph</span>=<span class="string">"@navigation/nav_graph"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>配置defaultNavHost为true,即指定这个fragment为默认的NavHost，每个Activity只能指定一个默认的NavHost。这里的<code>name</code>配置为<code>androidx.navigation.fragment.NavHostFragment</code>,<code>navGraph</code>配置为nav_graph，即指定nav_graph为导航图。这样当Activity启动时，会首先通过activity布局里的fragment去加载导航图中的startDestination配置的fragment。</p>
<h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><p>通过一个Fragment导航到另一个Fragment，可以通过</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View view = inflater.inflate(R.layout.fragment_main, container, <span class="keyword">false</span>);</span><br><span class="line">        loginBtn = view.findViewById(R.id.fragment_main_login);</span><br><span class="line">        loginBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">                bundle.putString(<span class="string">"name"</span>, <span class="string">"zs"</span>);</span><br><span class="line">                Navigation.findNavController(v).navigate(R.id.action_mainFragment_to_loginFragment, bundle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这里通过点击一个按钮进行跳转，通过<code>Navigation.findNavController(v).navigate()</code>方法导航。这里还可以通过Bundle进行传值。</p>
<p>在目的Fragment,可以通过<code>getArguments()</code>来获取到传递过来的数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        String name = getArguments().getString(<span class="string">"name"</span>, <span class="string">"null"</span>);</span><br><span class="line">        Toast.makeText(getContext(), name, Toast.LENGTH_SHORT).show();</span><br><span class="line">        View view = inflater.inflate(R.layout.fragment_login, container, <span class="keyword">false</span>);</span><br><span class="line">        backBtn = view.findViewById(R.id.fragment_login_back);</span><br><span class="line">        backBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Navigation.findNavController(v).popBackStack();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在目的Fragment，还可以通过一个按钮返回上一个Fragment：<code>Navigation.findNavController(v).popBackStack()</code></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Navigation的简单使用流程就介绍到这，可以在官方文档上看更多相关的使用方法。下面来分析下Navigation的流程</p>
<h3 id="显示起始Fragment"><a href="#显示起始Fragment" class="headerlink" title="显示起始Fragment"></a>显示起始Fragment</h3><p>在Activity启动时，会先实例化<code>NavHostFragment</code>,这个是我们前面在布局中指定的。</p>
<p>首先会执行<code>onInflate</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInflate</span><span class="params">(@NonNull Context context, @NonNull AttributeSet attrs,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onInflate(context, attrs, savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> TypedArray navHost = context.obtainStyledAttributes(attrs,</span><br><span class="line">                androidx.navigation.R.styleable.NavHost);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> graphId = navHost.getResourceId(</span><br><span class="line">                androidx.navigation.R.styleable.NavHost_navGraph, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (graphId != <span class="number">0</span>) &#123;</span><br><span class="line">            mGraphId = graphId;</span><br><span class="line">        &#125;</span><br><span class="line">        navHost.recycle();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.NavHostFragment);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> defaultHost = a.getBoolean(R.styleable.NavHostFragment_defaultNavHost, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (defaultHost) &#123;</span><br><span class="line">            mDefaultNavHost = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a.recycle();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法，其实就是解析出来我们要使用哪个导航图，获取到了graphId。还获取了是否为默认的Host：defaultHost</p>
<p>然后会执行<code>onAttach</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">        <span class="comment">// TODO This feature should probably be a first-class feature of the Fragment system,</span></span><br><span class="line">        <span class="comment">// but it can stay here until we can add the necessary attr resources to</span></span><br><span class="line">        <span class="comment">// the fragment lib.</span></span><br><span class="line">        <span class="keyword">if</span> (mDefaultNavHost) &#123;</span><br><span class="line">            getParentFragmentManager().beginTransaction()</span><br><span class="line">                    .setPrimaryNavigationFragment(<span class="keyword">this</span>)</span><br><span class="line">                    .commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>由于在onInflate已经获取到mDefaultNavHost为true,因此这里会将当前Fragment通过commit加入到FragmentManager()中</p>
<p>然后执行<code>onCreate</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">final</span> Context context = requireContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置NavHostController,NavHostController里初始化了NavigatorProvider</span></span><br><span class="line">        mNavController = <span class="keyword">new</span> NavHostController(context);</span><br><span class="line">        mNavController.setLifecycleOwner(<span class="keyword">this</span>);</span><br><span class="line">        mNavController.setOnBackPressedDispatcher(requireActivity().getOnBackPressedDispatcher());</span><br><span class="line">        <span class="comment">// Set the default state - this will be updated whenever</span></span><br><span class="line">        <span class="comment">// onPrimaryNavigationFragmentChanged() is called</span></span><br><span class="line">        mNavController.enableOnBackPressed(</span><br><span class="line">                mIsPrimaryBeforeOnCreate != <span class="keyword">null</span> &amp;&amp; mIsPrimaryBeforeOnCreate);</span><br><span class="line">        mIsPrimaryBeforeOnCreate = <span class="keyword">null</span>;</span><br><span class="line">        mNavController.setViewModelStore(getViewModelStore());</span><br><span class="line">        onCreateNavController(mNavController);</span><br><span class="line"></span><br><span class="line">        Bundle navState = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</span><br><span class="line">            navState = savedInstanceState.getBundle(KEY_NAV_CONTROLLER_STATE);</span><br><span class="line">            <span class="keyword">if</span> (savedInstanceState.getBoolean(KEY_DEFAULT_NAV_HOST, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                mDefaultNavHost = <span class="keyword">true</span>;</span><br><span class="line">                getParentFragmentManager().beginTransaction()</span><br><span class="line">                        .setPrimaryNavigationFragment(<span class="keyword">this</span>)</span><br><span class="line">                        .commit();</span><br><span class="line">            &#125;</span><br><span class="line">            mGraphId = savedInstanceState.getInt(KEY_GRAPH_ID);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (navState != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Navigation controller state overrides arguments</span></span><br><span class="line">            mNavController.restoreState(navState);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mGraphId != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Set from onInflate()</span></span><br><span class="line">            <span class="comment">//前面执行onInflate后，已经获取到mGraphId，因此会执行下面的setGraph代码</span></span><br><span class="line">            mNavController.setGraph(mGraphId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// See if it was set by NavHostFragment.create()</span></span><br><span class="line">            <span class="keyword">final</span> Bundle args = getArguments();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> graphId = args != <span class="keyword">null</span> ? args.getInt(KEY_GRAPH_ID) : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">final</span> Bundle startDestinationArgs = args != <span class="keyword">null</span></span><br><span class="line">                    ? args.getBundle(KEY_START_DESTINATION_ARGS)</span><br><span class="line">                    : <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (graphId != <span class="number">0</span>) &#123;</span><br><span class="line">                mNavController.setGraph(graphId, startDestinationArgs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个方法里，设置了NavHostController及NavigatorProvider，然后执行<code>NavController.setGraph</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGraph</span><span class="params">(@NavigationRes <span class="keyword">int</span> graphResId)</span> </span>&#123;</span><br><span class="line">        setGraph(graphResId, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>继续调用<code>setGraph</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGraph</span><span class="params">(@NavigationRes <span class="keyword">int</span> graphResId, @Nullable Bundle startDestinationArgs)</span> </span>&#123;</span><br><span class="line">        setGraph(getNavInflater().inflate(graphResId), startDestinationArgs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>继续调用<code>setGraph</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGraph</span><span class="params">(@NonNull NavGraph graph, @Nullable Bundle startDestinationArgs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGraph != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Pop everything from the old graph off the back stack</span></span><br><span class="line">            popBackStackInternal(mGraph.getId(), <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mGraph = graph;</span><br><span class="line">        onGraphCreated(startDestinationArgs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>onGraphCreated</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onGraphCreated</span><span class="params">(@Nullable Bundle startDestinationArgs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mNavigatorStateToRestore != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ArrayList&lt;String&gt; navigatorNames = mNavigatorStateToRestore.getStringArrayList(</span><br><span class="line">                    KEY_NAVIGATOR_STATE_NAMES);</span><br><span class="line">            <span class="keyword">if</span> (navigatorNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String name : navigatorNames) &#123;</span><br><span class="line">                    Navigator&lt;?&gt; navigator = mNavigatorProvider.getNavigator(name);</span><br><span class="line">                    Bundle bundle = mNavigatorStateToRestore.getBundle(name);</span><br><span class="line">                    <span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        navigator.onRestoreState(bundle);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mBackStackToRestore != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Parcelable parcelable : mBackStackToRestore) &#123;</span><br><span class="line">                NavBackStackEntryState state = (NavBackStackEntryState) parcelable;</span><br><span class="line">                NavDestination node = findDestination(state.getDestinationId());</span><br><span class="line">                <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"unknown destination during restore: "</span></span><br><span class="line">                            + mContext.getResources().getResourceName(state.getDestinationId()));</span><br><span class="line">                &#125;</span><br><span class="line">                Bundle args = state.getArgs();</span><br><span class="line">                <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    args.setClassLoader(mContext.getClassLoader());</span><br><span class="line">                &#125;</span><br><span class="line">                NavBackStackEntry entry = <span class="keyword">new</span> NavBackStackEntry(mContext, node, args,</span><br><span class="line">                        mLifecycleOwner, mViewModel,</span><br><span class="line">                        state.getUUID(), state.getSavedState());</span><br><span class="line">                mBackStack.add(entry);</span><br><span class="line">            &#125;</span><br><span class="line">            updateOnBackPressedCallbackEnabled();</span><br><span class="line">            mBackStackToRestore = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mGraph != <span class="keyword">null</span> &amp;&amp; mBackStack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> deepLinked = !mDeepLinkHandled &amp;&amp; mActivity != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; handleDeepLink(mActivity.getIntent());</span><br><span class="line">            <span class="keyword">if</span> (!deepLinked) &#123;</span><br><span class="line">                <span class="comment">// Navigate to the first destination in the graph</span></span><br><span class="line">                <span class="comment">// if we haven't deep linked to a destination</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//首次进入时，会执行这个代码</span></span><br><span class="line">                navigate(mGraph, startDestinationArgs, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>首次进入Activity，会最终执行<code>navigate(mGraph, startDestinationArgs, null, null)</code>方法来导航到起始的目的Fragment</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">navigate</span><span class="params">(@NonNull NavDestination node, @Nullable Bundle args,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable NavOptions navOptions, @Nullable Navigator.Extras navigatorExtras)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> popped = <span class="keyword">false</span>;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">        Navigator&lt;NavDestination&gt; navigator = mNavigatorProvider.getNavigator(</span><br><span class="line">                node.getNavigatorName());</span><br><span class="line">        Bundle finalArgs = node.addInDefaultArgs(args);</span><br><span class="line">        NavDestination newDest = navigator.navigate(node, finalArgs,</span><br><span class="line">                navOptions, navigatorExtras);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法，会调用<code>navigator.navigate(node, finalArgs,navOptions, navigatorExtras)</code>方法，这个方法的实现在<code>NavGraphNavigator</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> NavDestination <span class="title">navigate</span><span class="params">(@NonNull NavGraph destination, @Nullable Bundle args,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable NavOptions navOptions, @Nullable Extras navigatorExtras)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> startId = destination.getStartDestination();</span><br><span class="line">        <span class="keyword">if</span> (startId == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"no start destination defined via"</span></span><br><span class="line">                    + <span class="string">" app:startDestination for "</span></span><br><span class="line">                    + destination.getDisplayName());</span><br><span class="line">        &#125;</span><br><span class="line">        NavDestination startDestination = destination.findNode(startId, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (startDestination == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> String dest = destination.getStartDestDisplayName();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"navigation destination "</span> + dest</span><br><span class="line">                    + <span class="string">" is not a direct child of this NavGraph"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Navigator&lt;NavDestination&gt; navigator = mNavigatorProvider.getNavigator(</span><br><span class="line">                startDestination.getNavigatorName());</span><br><span class="line">        <span class="keyword">return</span> navigator.navigate(startDestination, startDestination.addInDefaultArgs(args),</span><br><span class="line">                navOptions, navigatorExtras);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个方法里调用navigator.navigate方法，这个方法实现在<code>FragmentNavigator</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> NavDestination <span class="title">navigate</span><span class="params">(@NonNull Destination destination, @Nullable Bundle args,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable NavOptions navOptions, @Nullable Navigator.Extras navigatorExtras)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFragmentManager.isStateSaved()) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"Ignoring navigate() call: FragmentManager has already"</span></span><br><span class="line">                    + <span class="string">" saved its state"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String className = destination.getClassName();</span><br><span class="line">        <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">'.'</span>) &#123;</span><br><span class="line">            className = mContext.getPackageName() + className;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过反射实例化Fragment</span></span><br><span class="line">        <span class="keyword">final</span> Fragment frag = instantiateFragment(mContext, mFragmentManager,</span><br><span class="line">                className, args);</span><br><span class="line">        frag.setArguments(args);</span><br><span class="line">        <span class="keyword">final</span> FragmentTransaction ft = mFragmentManager.beginTransaction();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> enterAnim = navOptions != <span class="keyword">null</span> ? navOptions.getEnterAnim() : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> exitAnim = navOptions != <span class="keyword">null</span> ? navOptions.getExitAnim() : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> popEnterAnim = navOptions != <span class="keyword">null</span> ? navOptions.getPopEnterAnim() : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> popExitAnim = navOptions != <span class="keyword">null</span> ? navOptions.getPopExitAnim() : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (enterAnim != -<span class="number">1</span> || exitAnim != -<span class="number">1</span> || popEnterAnim != -<span class="number">1</span> || popExitAnim != -<span class="number">1</span>) &#123;</span><br><span class="line">            enterAnim = enterAnim != -<span class="number">1</span> ? enterAnim : <span class="number">0</span>;</span><br><span class="line">            exitAnim = exitAnim != -<span class="number">1</span> ? exitAnim : <span class="number">0</span>;</span><br><span class="line">            popEnterAnim = popEnterAnim != -<span class="number">1</span> ? popEnterAnim : <span class="number">0</span>;</span><br><span class="line">            popExitAnim = popExitAnim != -<span class="number">1</span> ? popExitAnim : <span class="number">0</span>;</span><br><span class="line">            ft.setCustomAnimations(enterAnim, exitAnim, popEnterAnim, popExitAnim);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//替换fragment</span></span><br><span class="line">        ft.replace(mContainerId, frag);</span><br><span class="line">        ft.setPrimaryNavigationFragment(frag);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="meta">@IdRes</span> <span class="keyword">int</span> destId = destination.getId();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> initialNavigation = mBackStack.isEmpty();</span><br><span class="line">        <span class="comment">// TODO Build first class singleTop behavior for fragments</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isSingleTopReplacement = navOptions != <span class="keyword">null</span> &amp;&amp; !initialNavigation</span><br><span class="line">                &amp;&amp; navOptions.shouldLaunchSingleTop()</span><br><span class="line">                &amp;&amp; mBackStack.peekLast() == destId;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isAdded;</span><br><span class="line">        <span class="keyword">if</span> (initialNavigation) &#123;</span><br><span class="line">            isAdded = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSingleTopReplacement) &#123;</span><br><span class="line">            <span class="comment">// Single Top means we only want one instance on the back stack</span></span><br><span class="line">            <span class="keyword">if</span> (mBackStack.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// If the Fragment to be replaced is on the FragmentManager's</span></span><br><span class="line">                <span class="comment">// back stack, a simple replace() isn't enough so we</span></span><br><span class="line">                <span class="comment">// remove it from the back stack and put our replacement</span></span><br><span class="line">                <span class="comment">// on the back stack in its place</span></span><br><span class="line">                mFragmentManager.popBackStack(</span><br><span class="line">                        generateBackStackName(mBackStack.size(), mBackStack.peekLast()),</span><br><span class="line">                        FragmentManager.POP_BACK_STACK_INCLUSIVE);</span><br><span class="line">                ft.addToBackStack(generateBackStackName(mBackStack.size(), destId));</span><br><span class="line">            &#125;</span><br><span class="line">            isAdded = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ft.addToBackStack(generateBackStackName(mBackStack.size() + <span class="number">1</span>, destId));</span><br><span class="line">            isAdded = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (navigatorExtras <span class="keyword">instanceof</span> Extras) &#123;</span><br><span class="line">            Extras extras = (Extras) navigatorExtras;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;View, String&gt; sharedElement : extras.getSharedElements().entrySet()) &#123;</span><br><span class="line">                ft.addSharedElement(sharedElement.getKey(), sharedElement.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ft.setReorderingAllowed(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//提交</span></span><br><span class="line">        ft.commit();</span><br><span class="line">        <span class="comment">// The commit succeeded, update our view of the world</span></span><br><span class="line">        <span class="keyword">if</span> (isAdded) &#123;</span><br><span class="line">            mBackStack.add(destId);</span><br><span class="line">            <span class="keyword">return</span> destination;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个方法中，通过反射实例化目的Fragment，然后replace原来的Fragment,并commit，这样目的Fragment就显示出来了。</p>
<h3 id="导航到其它Fragment"><a href="#导航到其它Fragment" class="headerlink" title="导航到其它Fragment"></a>导航到其它Fragment</h3><p>通过<code>Navigation.findNavController(v).navigate(resId)</code>可以导航到指定的Fragment</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NavController <span class="title">findNavController</span><span class="params">(@NonNull View view)</span> </span>&#123;</span><br><span class="line">        NavController navController = findViewNavController(view);</span><br><span class="line">        <span class="keyword">if</span> (navController == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"View "</span> + view + <span class="string">" does not have a NavController set"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> navController;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>然后调用<code>findViewNavController</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> NavController <span class="title">findViewNavController</span><span class="params">(@NonNull View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">            NavController controller = getViewNavController(view);</span><br><span class="line">            <span class="keyword">if</span> (controller != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> controller;</span><br><span class="line">            &#125;</span><br><span class="line">            ViewParent parent = view.getParent();</span><br><span class="line">            view = parent <span class="keyword">instanceof</span> View ? (View) parent : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这里通过子View往父View不停查找NavController，这个NavController在前面onCreate的时候已经附加到了view上。</p>
<p>找到NavController后，调用navigate。这个过程和前面第一次导航到起始Fragment是一样的流程，这里不再分析。</p>
<p>其实这里只是比较粗的一个梳理，涉及很多细节并没有具体去看，暂且先有一个流程的印象吧。</p>
<p>附上一张时序图</p>
<p><a href="/images/Navigation%E6%97%B6%E5%BA%8F%E5%9B%BE.png" data-fancybox="group" data-caption="Navigation时序图" class="fancybox"><img alt="Navigation时序图" title="Navigation时序图" data-src="/images/Navigation%E6%97%B6%E5%BA%8F%E5%9B%BE.png" src="/img/loading.gif" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Jetpack</tag>
        <tag>Navigation</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack学习-Room</title>
    <url>/2020/04/16/Android/Jetpack%E5%AD%A6%E4%B9%A0-Room/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Jetpack学习-Room"><a href="#Jetpack学习-Room" class="headerlink" title="Jetpack学习-Room"></a>Jetpack学习-Room</h1><h2 id="Room是什么"><a href="#Room是什么" class="headerlink" title="Room是什么"></a>Room是什么</h2><blockquote>
<p>Room 持久性库在 SQLite 的基础上提供了一个抽象层，让用户能够在充分利用 SQLite 的强大功能的同时，获享更强健的数据库访问机制</p>
</blockquote>
<p>以上内容来自官方文档。用一句话总结下：Room是基于SQLite封装的一个框架。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="引入Room"><a href="#引入Room" class="headerlink" title="引入Room"></a>引入Room</h3><p>在需要使用的模块的build.gradle中增加以下配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">def</span> room_version = <span class="string">"2.2.3"</span></span><br><span class="line">    implementation <span class="string">"androidx.room:room-runtime:$room_version"</span></span><br><span class="line">    annotationProcessor <span class="string">"androidx.room:room-compiler:$room_version"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>room_version</code>最新可用的版本可以在官方的文档上查看。</p>
<h3 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Entity标识这个类用于建表</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@PrimaryKey:主键,autoGenerate:是否自增长</span></span><br><span class="line">    <span class="meta">@PrimaryKey</span>(autoGenerate = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ColumnInfo:表中的字段,name:表中的字段名</span></span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ColumnInfo:表中的字段,默认用下面的字段名age</span></span><br><span class="line">    <span class="meta">@ColumnInfo</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Student... students)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"select * from student"</span>)</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"select * from student where name = :name"</span>)</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"select * from student where id in (:ids)"</span>)</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">findByIds</span><span class="params">(<span class="keyword">int</span>[] ids)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过<code>@Dao</code>来标识这是一个Dao，在编译时会通过<code>APT</code>生成具体的实现类。<code>@Insert</code>,<code>@Delete</code>,<code>@Update</code>,<code>@Query</code>同理。</p>
<h3 id="DataBase"><a href="#DataBase" class="headerlink" title="DataBase"></a>DataBase</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Database</span>(entities = &#123;Student<span class="class">.<span class="keyword">class</span>&#125;, <span class="title">version</span> </span>= <span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBase</span> <span class="keyword">extends</span> <span class="title">RoomDatabase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> StudentDao <span class="title">studentDao</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataBase dataBase = Room.databaseBuilder(getApplicationContext(), DataBase.class, "room").build();</span><br><span class="line">StudentDao dao = dataBase.studentDao();</span><br><span class="line">List&lt;Student&gt; students = dao.getAll();</span><br></pre></td></tr></table></figure></div>

<p>以上只介绍了最基本的使用步骤，有关<code>数据库升级</code>、<code>多表关联</code>，<code>查询部分字段</code>等，可以在官方文档上查看。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>上面使用的过程中，大量用到了注解，可以推测出，Room是通过注解处理器来辅助生成所需要的类文件，具体原理这里不再展开，还是比较简单的(其实是我不想写^_^)。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Jetpack</tag>
        <tag>Room</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack学习-DataBinding</title>
    <url>/2020/04/15/Android/Jetpack%E5%AD%A6%E4%B9%A0-DataBinding/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Jetpack学习-DataBinding"><a href="#Jetpack学习-DataBinding" class="headerlink" title="Jetpack学习-DataBinding"></a>Jetpack学习-DataBinding</h1><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>在需要使用DataBinding的模块的build.gradle中增加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        dataBinding&#123;</span><br><span class="line">            enabled <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后同步</p>
<p>新建一个继承自<code>BaseObservable</code>的类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bindable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        notifyPropertyChanged(com.wangyz.jetpack.BR.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bindable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        notifyPropertyChanged(com.wangyz.jetpack.BR.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在需要绑定的字段的<code>get</code>方法上增加<code>@Bindable</code>注解,在set方法里增加<code>notifyPropertyChanged(com.wangyz.jetpack.BR.name)</code></p>
<p>build工程</p>
<p>新建布局文件，在布局最外层的节点上按<code>alt+enter</code>，在弹出的选项中选择<code>Convert to data binding layout</code>,布局就会转换成DataBinding格式的布局。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"user"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"com.wangyz.jetpack.databinding.User"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">"update"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"更新"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@&#123;user.name&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@&#123;String.valueOf(user.age)&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>转换后的布局，会将<code>layout</code>作为最外层的节点，还会在里面增加一个<code>data</code>节点。我们需要在这个data节点中增加<code>variable</code>节点，并配置<code>name</code>和<code>type</code>属性。name命名随意，type输入前面定义的<code>User</code>类。</p>
<p>对需要绑定的控件属性，如text赋值为<code>@{user.name}</code>，意思是给text属性赋值为前面绑定的User类的name。这样当User的name发生改变时，控件的text属性就会自动改变。</p>
<p>在Activity中绑定User和布局</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBindingActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    User user;</span><br><span class="line"></span><br><span class="line">    ActivityDatabindingBinding binding;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_databinding);</span><br><span class="line">        user = <span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="number">18</span>);</span><br><span class="line">        binding.setUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        user.setName(user.getName() + <span class="string">"$"</span>);</span><br><span class="line">        user.setAge(user.getAge() + <span class="number">1</span>);</span><br><span class="line">        binding.setVariable(com.wangyz.jetpack.BR.user, user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过<code>DataBindingUtil.setContentView(this, R.layout.activity_databinding)</code>来绑定，并返回<code>Binding</code>，然后通过Binding的<code>setUser</code>方法，就可以给布局设置数据。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h3><p>下面来看下原理。DataBinding相比前面的<code>Lifecycle</code>和<code>LiveData</code>要复杂。</p>
<p>我们将应用运行到手机上，这个在开发者看来是很简单的一件事，但是Android Studio却为我们做了很多事。</p>
<p>首先，布局文件会分为两个xml文件。</p>
<p><a href="/images/databinding-layout.png" data-fancybox="group" data-caption="databinding-layout" class="fancybox"><img alt="databinding-layout" title="databinding-layout" data-src="/images/databinding-layout.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在<code>app/buil/intermediates/data_binding_layout_info_type_merge/debug/mergeDebugResources/out/</code>目录下，可以看到生成了一个<code>activity_databinding-layout.xml</code>文件，这个文件名称是在我们原来的布局名称后加上了-layout。它的内容如上图右侧所示。在最外层的节点里记录了对应的布局文件，然后通过定义<code>Variables</code>节点，记录了对应的数据类。在<code>Targets</code>节点中，记录了原布局的<code>tag</code>,及使用了DataBinding的控件的tag,然后通过<code>Expression</code>节点，记录对应的数据。</p>
<p><a href="/images/databinding-activity.png" data-fancybox="group" data-caption="databinding-activity" class="fancybox"><img alt="databinding-activity" title="databinding-activity" data-src="/images/databinding-activity.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在<code>app/build/intermediates/incremental/mergeDebugResources/stripped.dir/layout/</code>目录下，可以看到<code>activity_databinding.xml</code>文件，这个文件就是我们原来的文件名，不过里面稍作了一些变动，增加了一些<code>tag</code>，这些tag的值和前面的<code>activity_databinding-layout.xml</code>记录的是对应的。</p>
<h3 id="DataBindingUtil-setContentView"><a href="#DataBindingUtil-setContentView" class="headerlink" title="DataBindingUtil.setContentView"></a>DataBindingUtil.setContentView</h3><p>我们从<code>DataBindingUtil.setContentView(this, R.layout.activity_databinding)</code>这个方法看起。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">setContentView</span><span class="params">(@NonNull Activity activity,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> setContentView(activity, layoutId, sDefaultComponent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法里又调用了<code>setContentView</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">setContentView</span><span class="params">(@NonNull Activity activity,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> layoutId, @Nullable DataBindingComponent bindingComponent)</span> </span>&#123;</span><br><span class="line">        activity.setContentView(layoutId);</span><br><span class="line">        View decorView = activity.getWindow().getDecorView();</span><br><span class="line">        ViewGroup contentView = (ViewGroup) decorView.findViewById(android.R.id.content);</span><br><span class="line">        <span class="keyword">return</span> bindToAddedViews(bindingComponent, contentView, <span class="number">0</span>, layoutId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法里调用了<code>bindToAddedViews</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">bindToAddedViews</span><span class="params">(DataBindingComponent component,</span></span></span><br><span class="line"><span class="function"><span class="params">            ViewGroup parent, <span class="keyword">int</span> startChildren, <span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> endChildren = parent.getChildCount();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childrenAdded = endChildren - startChildren;</span><br><span class="line">        <span class="keyword">if</span> (childrenAdded == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> View childView = parent.getChildAt(endChildren - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> bind(component, childView, layoutId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> View[] children = <span class="keyword">new</span> View[childrenAdded];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenAdded; i++) &#123;</span><br><span class="line">                children[i] = parent.getChildAt(i + startChildren);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> bind(component, children, layoutId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>然后调用<code>bind</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">bind</span><span class="params">(DataBindingComponent bindingComponent, View root,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) sMapper.getDataBinder(bindingComponent, root, layoutId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这里调用了<code>sMapper</code>的<code>getDataBinder</code>方法，sMapper其实就是自动生成的<code>DataBinderMapperImpl</code>文件</p>
<p><a href="/images/databinding-databindermapperimpl.png" data-fancybox="group" data-caption="databinding-databindermapperimpl" class="fancybox"><img alt="databinding-databindermapperimpl" title="databinding-databindermapperimpl" data-src="/images/databinding-databindermapperimpl.png" src="/img/loading.gif" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ViewDataBinding <span class="title">getDataBinder</span><span class="params">(DataBindingComponent component, View view, <span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> localizedLayoutId = INTERNAL_LAYOUT_ID_LOOKUP.get(layoutId);</span><br><span class="line">    <span class="keyword">if</span>(localizedLayoutId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> Object tag = view.getTag();</span><br><span class="line">      <span class="keyword">if</span>(tag == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"view must have a tag"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">switch</span>(localizedLayoutId) &#123;</span><br><span class="line">        <span class="keyword">case</span>  LAYOUT_ACTIVITYDATABINDING: &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="string">"layout/activity_databinding_0"</span>.equals(tag)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ActivityDatabindingBindingImpl(component, view);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The tag for activity_databinding is invalid. Received: "</span> + tag);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里调用了<code>ActivityDatabindingBindingImpl</code>的构造方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ActivityDatabindingBindingImpl</span><span class="params">(@Nullable androidx.databinding.DataBindingComponent bindingComponent, @NonNull View root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(bindingComponent, root, mapBindings(bindingComponent, root, <span class="number">3</span>, sIncludes, sViewsWithIds));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这里调用了<code>ViewDataBinding</code>类<code>mapBindings</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Object[] mapBindings(DataBindingComponent bindingComponent, View root, <span class="keyword">int</span> numBindings, ViewDataBinding.IncludedLayouts includes, SparseIntArray viewsWithIds) &#123;</span><br><span class="line">        Object[] bindings = <span class="keyword">new</span> Object[numBindings];</span><br><span class="line">        mapBindings(bindingComponent, root, bindings, includes, viewsWithIds, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> bindings;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这里调用<code>mapBindings</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mapBindings</span><span class="params">(DataBindingComponent bindingComponent, View view, Object[] bindings, ViewDataBinding.IncludedLayouts includes, SparseIntArray viewsWithIds, <span class="keyword">boolean</span> isRoot)</span> </span>&#123;</span><br><span class="line">        ViewDataBinding existingBinding = getBinding(view);</span><br><span class="line">        <span class="keyword">if</span> (existingBinding == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object objTag = view.getTag();</span><br><span class="line">            String tag = objTag <span class="keyword">instanceof</span> String ? (String)objTag : <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">boolean</span> isBound = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> indexInIncludes;</span><br><span class="line">            <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">int</span> count;</span><br><span class="line">            <span class="keyword">if</span> (isRoot &amp;&amp; tag != <span class="keyword">null</span> &amp;&amp; tag.startsWith(<span class="string">"layout"</span>)) &#123;</span><br><span class="line">                id = tag.lastIndexOf(<span class="number">95</span>);</span><br><span class="line">                <span class="keyword">if</span> (id &gt; <span class="number">0</span> &amp;&amp; isNumeric(tag, id + <span class="number">1</span>)) &#123;</span><br><span class="line">                    count = parseTagInt(tag, id + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (bindings[count] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        bindings[count] = view;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    indexInIncludes = includes == <span class="keyword">null</span> ? -<span class="number">1</span> : count;</span><br><span class="line">                    isBound = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    indexInIncludes = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tag != <span class="keyword">null</span> &amp;&amp; tag.startsWith(<span class="string">"binding_"</span>)) &#123;</span><br><span class="line">                id = parseTagInt(tag, BINDING_NUMBER_START);</span><br><span class="line">                <span class="keyword">if</span> (bindings[id] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bindings[id] = view;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                isBound = <span class="keyword">true</span>;</span><br><span class="line">                indexInIncludes = includes == <span class="keyword">null</span> ? -<span class="number">1</span> : id;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                indexInIncludes = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isBound) &#123;</span><br><span class="line">                id = view.getId();</span><br><span class="line">                <span class="keyword">if</span> (id &gt; <span class="number">0</span> &amp;&amp; viewsWithIds != <span class="keyword">null</span> &amp;&amp; (count = viewsWithIds.get(id, -<span class="number">1</span>)) &gt;= <span class="number">0</span> &amp;&amp; bindings[count] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bindings[count] = view;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">                ViewGroup viewGroup = (ViewGroup)view;</span><br><span class="line">                count = viewGroup.getChildCount();</span><br><span class="line">                <span class="keyword">int</span> minInclude = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">                    View child = viewGroup.getChildAt(i);</span><br><span class="line">                    <span class="keyword">boolean</span> isInclude = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (indexInIncludes &gt;= <span class="number">0</span> &amp;&amp; child.getTag() <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                        String childTag = (String)child.getTag();</span><br><span class="line">                        <span class="keyword">if</span> (childTag.endsWith(<span class="string">"_0"</span>) &amp;&amp; childTag.startsWith(<span class="string">"layout"</span>) &amp;&amp; childTag.indexOf(<span class="number">47</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">int</span> includeIndex = findIncludeIndex(childTag, minInclude, includes, indexInIncludes);</span><br><span class="line">                            <span class="keyword">if</span> (includeIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                isInclude = <span class="keyword">true</span>;</span><br><span class="line">                                minInclude = includeIndex + <span class="number">1</span>;</span><br><span class="line">                                <span class="keyword">int</span> index = includes.indexes[indexInIncludes][includeIndex];</span><br><span class="line">                                <span class="keyword">int</span> layoutId = includes.layoutIds[indexInIncludes][includeIndex];</span><br><span class="line">                                <span class="keyword">int</span> lastMatchingIndex = findLastMatching(viewGroup, i);</span><br><span class="line">                                <span class="keyword">if</span> (lastMatchingIndex == i) &#123;</span><br><span class="line">                                    bindings[index] = DataBindingUtil.bind(bindingComponent, child, layoutId);</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="keyword">int</span> includeCount = lastMatchingIndex - i + <span class="number">1</span>;</span><br><span class="line">                                    View[] included = <span class="keyword">new</span> View[includeCount];</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; includeCount; ++j) &#123;</span><br><span class="line">                                        included[j] = viewGroup.getChildAt(i + j);</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    bindings[index] = DataBindingUtil.bind(bindingComponent, included, layoutId);</span><br><span class="line">                                    i += includeCount - <span class="number">1</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!isInclude) &#123;</span><br><span class="line">                        mapBindings(bindingComponent, child, bindings, includes, viewsWithIds, <span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法其实就是解析前面的两个xml文件，将绑定的控件保存起来。</p>
<p><code>DataBindingUtil.setContentView</code>方法执行完成后,就可以获取到对应的DataBinding对象。</p>
<p>来一张简单的时序图</p>
<p><a href="/images/databinding-setcontentview.png" data-fancybox="group" data-caption="databinding-setcontentview" class="fancybox"><img alt="databinding-setcontentview" title="databinding-setcontentview" data-src="/images/databinding-setcontentview.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="binding-setUser"><a href="#binding-setUser" class="headerlink" title="binding.setUser"></a>binding.setUser</h3><p>binding.setUser对应的是ActivityDatabindingBindingImpl的setUser方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(@Nullable com.wangyz.jetpack.databinding.User User)</span> </span>&#123;</span><br><span class="line">        updateRegistration(<span class="number">0</span>, User);</span><br><span class="line">        <span class="keyword">this</span>.mUser = User;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            mDirtyFlags |= <span class="number">0x1L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        notifyPropertyChanged(BR.user);</span><br><span class="line">        <span class="keyword">super</span>.requestRebind();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="updateRegistration"><a href="#updateRegistration" class="headerlink" title="updateRegistration"></a>updateRegistration</h4><p>先来看<code>updateRegistration</code>，这里就是注册过程。调用<code>ViewDataBinding</code>的updateRegistration方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">updateRegistration</span><span class="params">(<span class="keyword">int</span> localFieldId, Observable observable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateRegistration(localFieldId, observable, CREATE_PROPERTY_LISTENER);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>然后调用<code>updateRegistration</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">updateRegistration</span><span class="params">(<span class="keyword">int</span> localFieldId, Object observable,</span></span></span><br><span class="line"><span class="function"><span class="params">            CreateWeakListener listenerCreator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (observable == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> unregisterFrom(localFieldId);</span><br><span class="line">        &#125;</span><br><span class="line">        WeakListener listener = mLocalFieldObservers[localFieldId];</span><br><span class="line">        <span class="keyword">if</span> (listener == <span class="keyword">null</span>) &#123;</span><br><span class="line">            registerTo(localFieldId, observable, listenerCreator);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (listener.getTarget() == observable) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//nothing to do, same object</span></span><br><span class="line">        &#125;</span><br><span class="line">        unregisterFrom(localFieldId);</span><br><span class="line">        registerTo(localFieldId, observable, listenerCreator);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>registerTo</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerTo</span><span class="params">(<span class="keyword">int</span> localFieldId, Object observable,</span></span></span><br><span class="line"><span class="function"><span class="params">            CreateWeakListener listenerCreator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (observable == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        WeakListener listener = mLocalFieldObservers[localFieldId];</span><br><span class="line">        <span class="keyword">if</span> (listener == <span class="keyword">null</span>) &#123;</span><br><span class="line">            listener = listenerCreator.create(<span class="keyword">this</span>, localFieldId);</span><br><span class="line">            mLocalFieldObservers[localFieldId] = listener;</span><br><span class="line">            <span class="keyword">if</span> (mLifecycleOwner != <span class="keyword">null</span>) &#123;</span><br><span class="line">                listener.setLifecycleOwner(mLifecycleOwner);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        listener.setTarget(observable);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法将传进来的数据保存到<code>WeakListener</code>中</p>
<h4 id="notifyPropertyChanged"><a href="#notifyPropertyChanged" class="headerlink" title="notifyPropertyChanged"></a>notifyPropertyChanged</h4><p>执行完成<code>updateRegistration</code>方法后，需要执行notifyPropertyChanged方法，通知更新,这个方法在BaseObservable里</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyPropertyChanged</span><span class="params">(<span class="keyword">int</span> fieldId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallbacks == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mCallbacks.notifyCallbacks(<span class="keyword">this</span>, fieldId, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>然后调用<code>CallbackRegistry</code>的<code>notifyCallbacks</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifyCallbacks</span><span class="params">(T sender, <span class="keyword">int</span> arg, A arg2)</span> </span>&#123;</span><br><span class="line">        mNotificationLevel++;</span><br><span class="line">        notifyRecurse(sender, arg, arg2);</span><br><span class="line">        mNotificationLevel--;</span><br><span class="line">        <span class="keyword">if</span> (mNotificationLevel == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mRemainderRemoved != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = mRemainderRemoved.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">long</span> removedBits = mRemainderRemoved[i];</span><br><span class="line">                    <span class="keyword">if</span> (removedBits != <span class="number">0</span>) &#123;</span><br><span class="line">                        removeRemovedCallbacks((i + <span class="number">1</span>) * Long.SIZE, removedBits);</span><br><span class="line">                        mRemainderRemoved[i] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mFirst64Removed != <span class="number">0</span>) &#123;</span><br><span class="line">                removeRemovedCallbacks(<span class="number">0</span>, mFirst64Removed);</span><br><span class="line">                mFirst64Removed = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这里调用了<code>notifyRecurse</code>方法去递归通知</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyRecurse</span><span class="params">(T sender, <span class="keyword">int</span> arg, A arg2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> callbackCount = mCallbacks.size();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> remainderIndex = mRemainderRemoved == <span class="keyword">null</span> ? -<span class="number">1</span> : mRemainderRemoved.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now we've got all callbakcs that have no mRemainderRemoved value, so notify the</span></span><br><span class="line">        <span class="comment">// others.</span></span><br><span class="line">        notifyRemainder(sender, arg, arg2, remainderIndex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// notifyRemainder notifies all at maxIndex, so we'd normally start at maxIndex + 1</span></span><br><span class="line">        <span class="comment">// However, we must also keep track of those in mFirst64Removed, so we add 2 instead:</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> startCallbackIndex = (remainderIndex + <span class="number">2</span>) * Long.SIZE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The remaining have no bit set</span></span><br><span class="line">        notifyCallbacks(sender, arg, arg2, startCallbackIndex, callbackCount, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法里调用<code>notifyCallbacks</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyCallbacks</span><span class="params">(T sender, <span class="keyword">int</span> arg, A arg2, <span class="keyword">final</span> <span class="keyword">int</span> startIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> <span class="keyword">int</span> endIndex, <span class="keyword">final</span> <span class="keyword">long</span> bits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> bitMask = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = startIndex; i &lt; endIndex; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((bits &amp; bitMask) == <span class="number">0</span>) &#123;</span><br><span class="line">                mNotifier.onNotifyCallback(mCallbacks.get(i), sender, arg, arg2);</span><br><span class="line">            &#125;</span><br><span class="line">            bitMask &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>NotifierCallback</code>的<code>onNotifyCallback</code>方法,它的具体回调在<code>PropertyChangeRegistry</code>里</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> NotifierCallback&lt;OnPropertyChangedCallback, Observable, Void&gt; NOTIFIER_CALLBACK = <span class="keyword">new</span> NotifierCallback&lt;OnPropertyChangedCallback, Observable, Void&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotifyCallback</span><span class="params">(OnPropertyChangedCallback callback, Observable sender, <span class="keyword">int</span> arg, Void notUsed)</span> </span>&#123;</span><br><span class="line">            callback.onPropertyChanged(sender, arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></div>

<p>然后回调<code>Observable</code>的内部类<code>OnPropertyChangedCallback</code>的<code>onPropertyChanged</code>方法，而这个方法的实现是<code>ViewDataBinding</code>的内部类<code>WeakPropertyListener</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPropertyChanged</span><span class="params">(Observable sender, <span class="keyword">int</span> propertyId)</span> </span>&#123;</span><br><span class="line">            ViewDataBinding binder = mListener.getBinder();</span><br><span class="line">            <span class="keyword">if</span> (binder == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Observable obj = mListener.getTarget();</span><br><span class="line">            <span class="keyword">if</span> (obj != sender) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// notification from the wrong object?</span></span><br><span class="line">            &#125;</span><br><span class="line">            binder.handleFieldChange(mListener.mLocalFieldId, sender, propertyId);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>然后调用<code>handleFieldChange</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleFieldChange</span><span class="params">(<span class="keyword">int</span> mLocalFieldId, Object object, <span class="keyword">int</span> fieldId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mInLiveDataRegisterObserver) &#123;</span><br><span class="line">            <span class="comment">// We're in LiveData registration, which always results in a field change</span></span><br><span class="line">            <span class="comment">// that we can ignore. The value will be read immediately after anyway, so</span></span><br><span class="line">            <span class="comment">// there is no need to be dirty.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> result = onFieldChange(mLocalFieldId, object, fieldId);</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            requestRebind();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>onFieldChange</code>方法，它的具体实现是<code>ActivityDatabindingBindingImpl</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onFieldChange</span><span class="params">(<span class="keyword">int</span> localFieldId, Object object, <span class="keyword">int</span> fieldId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (localFieldId) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> :</span><br><span class="line">                <span class="keyword">return</span> onChangeUser((com.wangyz.jetpack.databinding.User) object, fieldId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>onChangeUser</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">onChangeUser</span><span class="params">(com.wangyz.jetpack.databinding.User User, <span class="keyword">int</span> fieldId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fieldId == BR._all) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">                    mDirtyFlags |= <span class="number">0x1L</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (fieldId == BR.name) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">                    mDirtyFlags |= <span class="number">0x2L</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (fieldId == BR.age) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">                    mDirtyFlags |= <span class="number">0x4L</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在执行完<code>onFieldChange</code>方法后，会再执行<code>requestRebind</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">requestRebind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mContainingBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mContainingBinding.requestRebind();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> LifecycleOwner owner = <span class="keyword">this</span>.mLifecycleOwner;</span><br><span class="line">            <span class="keyword">if</span> (owner != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Lifecycle.State state = owner.getLifecycle().getCurrentState();</span><br><span class="line">                <span class="keyword">if</span> (!state.isAtLeast(Lifecycle.State.STARTED)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>; <span class="comment">// wait until lifecycle owner is started</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mPendingRebind) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mPendingRebind = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (USE_CHOREOGRAPHER) &#123;</span><br><span class="line">                mChoreographer.postFrameCallback(mFrameCallback);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mUIThreadHandler.post(mRebindRunnable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里<code>post</code>了一个<code>mRebindRunnable</code>到主线程中,看下mRebindRunnable</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable mRebindRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                mPendingRebind = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            processReferenceQueue();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (VERSION.SDK_INT &gt;= VERSION_CODES.KITKAT) &#123;</span><br><span class="line">                <span class="comment">// Nested so that we don't get a lint warning in IntelliJ</span></span><br><span class="line">                <span class="keyword">if</span> (!mRoot.isAttachedToWindow()) &#123;</span><br><span class="line">                    <span class="comment">// Don't execute the pending bindings until the View</span></span><br><span class="line">                    <span class="comment">// is attached again.</span></span><br><span class="line">                    mRoot.removeOnAttachStateChangeListener(ROOT_REATTACHED_LISTENER);</span><br><span class="line">                    mRoot.addOnAttachStateChangeListener(ROOT_REATTACHED_LISTENER);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            executePendingBindings();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></div>

<p>在这个方法里执行了<code>executePendingBindings</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executePendingBindings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mContainingBinding == <span class="keyword">null</span>) &#123;</span><br><span class="line">            executeBindingsInternal();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mContainingBinding.executePendingBindings();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>然后执行<code>executeBindingsInternal</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeBindingsInternal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsExecutingPendingBindings) &#123;</span><br><span class="line">            requestRebind();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!hasPendingBindings()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mIsExecutingPendingBindings = <span class="keyword">true</span>;</span><br><span class="line">        mRebindHalted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (mRebindCallbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mRebindCallbacks.notifyCallbacks(<span class="keyword">this</span>, REBIND, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The onRebindListeners will change mPendingHalted</span></span><br><span class="line">            <span class="keyword">if</span> (mRebindHalted) &#123;</span><br><span class="line">                mRebindCallbacks.notifyCallbacks(<span class="keyword">this</span>, HALTED, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!mRebindHalted) &#123;</span><br><span class="line">            executeBindings();</span><br><span class="line">            <span class="keyword">if</span> (mRebindCallbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mRebindCallbacks.notifyCallbacks(<span class="keyword">this</span>, REBOUND, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mIsExecutingPendingBindings = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法里执行了<code>executeBindings</code>方法，它在实现是<code>ActivityDatabindingBindingImpl</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeBindings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> dirtyFlags = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            dirtyFlags = mDirtyFlags;</span><br><span class="line">            mDirtyFlags = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        java.lang.String userName = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> userAge = <span class="number">0</span>;</span><br><span class="line">        com.wangyz.jetpack.databinding.User user = mUser;</span><br><span class="line">        java.lang.String stringValueOfUserAge = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((dirtyFlags &amp; <span class="number">0xfL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((dirtyFlags &amp; <span class="number">0xbL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// read user.name</span></span><br><span class="line">                        userName = user.getName();</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((dirtyFlags &amp; <span class="number">0xdL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// read user.age</span></span><br><span class="line">                        userAge = user.getAge();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// read String.valueOf(user.age)</span></span><br><span class="line">                    stringValueOfUserAge = java.lang.String.valueOf(userAge);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// batch finished</span></span><br><span class="line">        <span class="keyword">if</span> ((dirtyFlags &amp; <span class="number">0xbL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// api target 1</span></span><br><span class="line"></span><br><span class="line">            androidx.databinding.adapters.TextViewBindingAdapter.setText(<span class="keyword">this</span>.mboundView1, userName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((dirtyFlags &amp; <span class="number">0xdL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// api target 1</span></span><br><span class="line"></span><br><span class="line">            androidx.databinding.adapters.TextViewBindingAdapter.setText(<span class="keyword">this</span>.mboundView2, stringValueOfUserAge);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，是通过androidx.databinding.adapters.TextViewBindingAdapter.setText来实现的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, CharSequence text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> CharSequence oldText = view.getText();</span><br><span class="line">        <span class="keyword">if</span> (text == oldText || (text == <span class="keyword">null</span> &amp;&amp; oldText.length() == <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (text <span class="keyword">instanceof</span> Spanned) &#123;</span><br><span class="line">            <span class="keyword">if</span> (text.equals(oldText)) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// No change in the spans, so don't set anything.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!haveContentsChanged(text, oldText)) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// No content changes, so don't set anything.</span></span><br><span class="line">        &#125;</span><br><span class="line">        view.setText(text);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这里我们界面就发生了变更。</p>
<p>来一张简单的时序图</p>
<p><a href="/images/databinding-setVariable.png" data-fancybox="group" data-caption="databinding-setVariable" class="fancybox"><img alt="databinding-setVariable" title="databinding-setVariable" data-src="/images/databinding-setVariable.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="setVariable"><a href="#setVariable" class="headerlink" title="setVariable"></a>setVariable</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setVariable</span><span class="params">(<span class="keyword">int</span> variableId, @Nullable Object variable)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> variableSet = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (BR.user == variableId) &#123;</span><br><span class="line">            setUser((com.wangyz.jetpack.databinding.User) variable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            variableSet = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> variableSet;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>最终还是通过setUser来实现的。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Jetpack</tag>
        <tag>DataBinding</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack学习-LiveData</title>
    <url>/2020/04/14/Android/Jetpack%E5%AD%A6%E4%B9%A0-LiveData/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Jetpack学习-LiveData"><a href="#Jetpack学习-LiveData" class="headerlink" title="Jetpack学习-LiveData"></a>Jetpack学习-LiveData</h1><h2 id="LiveData是什么"><a href="#LiveData是什么" class="headerlink" title="LiveData是什么"></a>LiveData是什么</h2><p>LiveData是一种可观察的数据存储器类，具有生命周期的感知能力。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p><code>LiveData</code>一般都是和ViewModel一起使用。定义一个类继承自<code>ViewModel</code>:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiveDataSub</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;String&gt; infos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MutableLiveData&lt;String&gt; <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (infos == <span class="keyword">null</span>) &#123;</span><br><span class="line">            infos = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> infos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">increaseNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        number++;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个类里定义<code>MutableLiveData</code>类型的属性，并提供外界访问的方法<code>getInfo</code></p>
<p>在Activity中使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiveDataActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LiveDataSub viewModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_livedata);</span><br><span class="line">        tv = findViewById(R.id.tv);</span><br><span class="line">        viewModel = ViewModelProviders.of(<span class="keyword">this</span>).get(LiveDataSub<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        viewModel.getInfo().observe(<span class="keyword">this</span>, <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                tv.setText(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        String info = <span class="string">"info:"</span> + viewModel.increaseNumber();</span><br><span class="line">        viewModel.getInfo().setValue(info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过<code>ViewModelProviders.of(this).get(LiveDataSub.class</code>)来实例化刚才定义的<code>ViewModel</code>，然后通过调用<code>LiveData</code>的<code>observe</code>方法添加对当前Activity的观察。</p>
<p>通过LiveData的<code>setValue</code>可以来更新数据，此时界面会自动更新。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>从LiveData的observe方法来看</p>
<h3 id="添加observer"><a href="#添加observer" class="headerlink" title="添加observer"></a>添加observer</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">observe</span><span class="params">(@NonNull LifecycleOwner owner, @NonNull Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">        assertMainThread(<span class="string">"observe"</span>);</span><br><span class="line">        <span class="keyword">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class="line">            <span class="comment">// ignore</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LifecycleBoundObserver wrapper = <span class="keyword">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class="line">        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class="line">        <span class="keyword">if</span> (existing != <span class="keyword">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot add the same observer"</span></span><br><span class="line">                    + <span class="string">" with different lifecycles"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (existing != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        owner.getLifecycle().addObserver(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>observe方法的调用要求是在主线程。如果Activity对应的lifecycle已经处于<code>DESTROYED</code>状态，则会直接返回，不添加observer。最终还是调用了<code>Lifecycle</code>的<code>addObserver</code>方法。</p>
<h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><p>数据更新，是通过<code>LiveData</code>的<code>setValue</code>方法来执行的。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        assertMainThread(<span class="string">"setValue"</span>);</span><br><span class="line">        mVersion++;</span><br><span class="line">        mData = value;</span><br><span class="line">        dispatchingValue(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法要求在主线程上执行。方法内部调用了<code>dispatchingValue</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchingValue</span><span class="params">(@Nullable ObserverWrapper initiator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mDispatchingValue) &#123;</span><br><span class="line">            mDispatchInvalidated = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mDispatchingValue = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            mDispatchInvalidated = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (initiator != <span class="keyword">null</span>) &#123;</span><br><span class="line">                considerNotify(initiator);</span><br><span class="line">                initiator = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class="keyword">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class="line">                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class="line">                    considerNotify(iterator.next().getValue());</span><br><span class="line">                    <span class="keyword">if</span> (mDispatchInvalidated) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (mDispatchInvalidated);</span><br><span class="line">        mDispatchingValue = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>由于之前传入的<code>ObserverWrapper</code>为null,因此会执行下面的迭代里的<code>considerNotify</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">considerNotify</span><span class="params">(ObserverWrapper observer)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!observer.mActive) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.</span></span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">       <span class="comment">// we still first check observer.active to keep it as the entrance for events. So even if</span></span><br><span class="line">       <span class="comment">// the observer moved to an active state, if we've not received that event, we better not</span></span><br><span class="line">       <span class="comment">// notify for a more predictable notification order.</span></span><br><span class="line">       <span class="keyword">if</span> (!observer.shouldBeActive()) &#123;</span><br><span class="line">           observer.activeStateChanged(<span class="keyword">false</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (observer.mLastVersion &gt;= mVersion) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       observer.mLastVersion = mVersion;</span><br><span class="line">       <span class="comment">//noinspection unchecked</span></span><br><span class="line">       observer.mObserver.onChanged((T) mData);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个方法中，最终调用了observer的<code>onChange</code>方法。</p>
<p>时序图：</p>
<p><a href="/images/LiveData%E6%97%B6%E5%BA%8F%E5%9B%BE.png" data-fancybox="group" data-caption="LiveData时序图" class="fancybox"><img alt="LiveData时序图" title="LiveData时序图" data-src="/images/LiveData%E6%97%B6%E5%BA%8F%E5%9B%BE.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="数据异步更新"><a href="#数据异步更新" class="headerlink" title="数据异步更新"></a>数据异步更新</h3><p>上面的数据更新是在UI线程上执行的，如果想要在子线程上执行，那么则需要通过<code>postValue</code>方法。我们也来看一下这个方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> postTask;</span><br><span class="line">        <span class="keyword">synchronized</span> (mDataLock) &#123;</span><br><span class="line">            <span class="comment">//判断mPendingData是否已经赋值</span></span><br><span class="line">            postTask = mPendingData == NOT_SET;</span><br><span class="line">            <span class="comment">//给mPendingData赋值</span></span><br><span class="line">            mPendingData = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果已经赋值，则取消发送</span></span><br><span class="line">        <span class="keyword">if</span> (!postTask) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法是通过ArchTaskExecutor的<code>postToMainThread</code>方法来执行的。</p>
<p>先看<code>ArchTaskExecutor.getInstance()</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArchTaskExecutor <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sInstance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (ArchTaskExecutor<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sInstance = <span class="keyword">new</span> ArchTaskExecutor();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sInstance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>再来看下构造方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ArchTaskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mDefaultTaskExecutor = <span class="keyword">new</span> DefaultTaskExecutor();</span><br><span class="line">        mDelegate = mDefaultTaskExecutor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里实例化了<code>mDefaultTaskExecutor</code>和<code>mDelegate</code></p>
<p>调用<code>postToMainThread</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postToMainThread</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        mDelegate.postToMainThread(runnable);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>执行的是<code>DefaultTaskExecutor</code>的<code>postToMainThread</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postToMainThread</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mMainHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mMainHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mMainHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//noinspection ConstantConditions</span></span><br><span class="line">        mMainHandler.post(runnable);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，其实就是post了一个<code>runnable</code>到主线程中。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable mPostValueRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Object newValue;</span><br><span class="line">            <span class="keyword">synchronized</span> (mDataLock) &#123;</span><br><span class="line">                <span class="comment">//获取要更新的数据</span></span><br><span class="line">                newValue = mPendingData;</span><br><span class="line">                <span class="comment">//mPendingData重置</span></span><br><span class="line">                mPendingData = NOT_SET;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//noinspection unchecked</span></span><br><span class="line">            setValue((T) newValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></div>

<p>最终回调run方法里，还是调用的<code>setValue</code>方法。在run方法中，会获取要更新的数据，然后对mPendingData重置。因此，如果调用了多次postValue,如果前面的更新还没有处理，则并不会往主线程发送更新的消息，只会给mPendingData赋值，在run回调中，就会获取到最后一次的数据。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Jetpack</tag>
        <tag>Lifecycle</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack学习-Lifecycle</title>
    <url>/2020/04/14/Android/Jetpack%E5%AD%A6%E4%B9%A0-Lifecycle/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Jetpack学习-Lifecycle"><a href="#Jetpack学习-Lifecycle" class="headerlink" title="Jetpack学习-Lifecycle"></a>Jetpack学习-Lifecycle</h1><h2 id="Lifecycle是什么"><a href="#Lifecycle是什么" class="headerlink" title="Lifecycle是什么"></a>Lifecycle是什么</h2><p>Lifecycle是Jetpack提供的一个组件，可以感知Activity,Fragment的生命周期变化。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义一个类继承自LifecycleObserver，根据业务需要，在这个类中重写相应的方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleObserverImpl</span> <span class="keyword">implements</span> <span class="title">LifecycleObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_CREATE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(MainActivity.TAG, <span class="string">"onCreate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_START)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(MainActivity.TAG, <span class="string">"onStart"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_RESUME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(MainActivity.TAG, <span class="string">"onResume"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_PAUSE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(MainActivity.TAG, <span class="string">"onPause"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_STOP)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(MainActivity.TAG, <span class="string">"onStop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_DESTROY)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(MainActivity.TAG, <span class="string">"onDestroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在Activity中使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeCycleActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    LifecycleObserverImpl observer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_lifecycle);</span><br><span class="line">        <span class="comment">//实例化</span></span><br><span class="line">        observer = <span class="keyword">new</span> LifecycleObserverImpl();</span><br><span class="line">        <span class="comment">//添加observer</span></span><br><span class="line">        getLifecycle().addObserver(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="comment">//移除observer</span></span><br><span class="line">        getLifecycle().removeObserver(observer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样，当Activity的生命周期变化时，我们自定义的observer就可以获取到变化。</p>
<p>运行应用，输出日志如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-04-14 11:08:06.579 22908-22908&#x2F;com.wangyz.jetpack D&#x2F;Jetpack: onCreate</span><br><span class="line">2020-04-14 11:08:06.580 22908-22908&#x2F;com.wangyz.jetpack D&#x2F;Jetpack: onStart</span><br><span class="line">2020-04-14 11:08:06.584 22908-22908&#x2F;com.wangyz.jetpack D&#x2F;Jetpack: onResume</span><br><span class="line">2020-04-14 11:08:11.350 22908-22908&#x2F;com.wangyz.jetpack D&#x2F;Jetpack: onPause</span><br><span class="line">2020-04-14 11:08:11.711 22908-22908&#x2F;com.wangyz.jetpack D&#x2F;Jetpack: onStop</span><br><span class="line">2020-04-14 11:08:11.713 22908-22908&#x2F;com.wangyz.jetpack D&#x2F;Jetpack: onDestroy</span><br></pre></td></tr></table></figure></div>

<p>一个最简单的Demo就写好了。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Lifecycle为什么可以感知生命周期变化，并通知到observer，我们来看一下。</p>
<h3 id="添加observer"><a href="#添加observer" class="headerlink" title="添加observer"></a>添加observer</h3><p>首先从添加observer这里看起:<code>getLifecycle().addObserver(observer)</code></p>
<p>我们的Activity是继承自<code>AppCompatActivity</code>,调用<code>getLifecycle()</code>后，其实是调用了<code>FragmentActivity</code>的<code>getLifecycle</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getLifecycle();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>而<code>FragmentActivity</code>中的getLifecycle方法又调用了父类的<code>ComponentActivity</code>的getLifecycle方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mLifecycleRegistry;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>最终是返回<code>mLifecycleRegistry</code>。</p>
<p>调用<code>getLifecycle().addObserver(observer)</code>方法,其实就是调用mLifecycleRegistry的addObserver方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置初始状态</span></span><br><span class="line">        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;</span><br><span class="line">        <span class="comment">//1.将observer和state组装成一个ObserverWithState对象</span></span><br><span class="line">        ObserverWithState statefulObserver = <span class="keyword">new</span> ObserverWithState(observer, initialState);</span><br><span class="line">        <span class="comment">//2.以observer为key,ObserverWithState为value，保存到map中</span></span><br><span class="line">        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class="line">        <span class="keyword">if</span> (lifecycleOwner == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// it is null we should be destroyed. Fallback quickly</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isReentrance = mAddingObserverCounter != <span class="number">0</span> || mHandlingEvent;</span><br><span class="line">        State targetState = calculateTargetState(observer);</span><br><span class="line">        mAddingObserverCounter++;</span><br><span class="line">        <span class="keyword">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class="number">0</span></span><br><span class="line">                &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class="line">            pushParentState(statefulObserver.mState);</span><br><span class="line">            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class="line">            popParentState();</span><br><span class="line">            <span class="comment">// mState / subling may have been changed recalculate</span></span><br><span class="line">            targetState = calculateTargetState(observer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isReentrance) &#123;</span><br><span class="line">            <span class="comment">// we do sync only on the top level.</span></span><br><span class="line">            sync();</span><br><span class="line">        &#125;</span><br><span class="line">        mAddingObserverCounter--;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在上面的注释1处，将<code>observer</code>和<code>state</code>组装成一个<code>ObserverWithState</code>对象</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObserverWithState(LifecycleObserver observer, State initialState) &#123;</span><br><span class="line">            mLifecycleObserver = Lifecycling.getCallback(observer);</span><br><span class="line">            mState = initialState;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个构造方法里，调用了 <code>Lifecycling.getCallback(observer)</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> GenericLifecycleObserver <span class="title">getCallback</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> FullLifecycleObserver) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FullLifecycleObserverAdapter((FullLifecycleObserver) object);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> GenericLifecycleObserver) &#123;</span><br><span class="line">            <span class="keyword">return</span> (GenericLifecycleObserver) object;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; klass = object.getClass();</span><br><span class="line">        <span class="keyword">int</span> type = getObserverConstructorType(klass);</span><br><span class="line">        <span class="keyword">if</span> (type == GENERATED_CALLBACK) &#123;</span><br><span class="line">            List&lt;Constructor&lt;? extends GeneratedAdapter&gt;&gt; constructors =</span><br><span class="line">                    sClassToAdapters.get(klass);</span><br><span class="line">            <span class="keyword">if</span> (constructors.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                GeneratedAdapter generatedAdapter = createGeneratedAdapter(</span><br><span class="line">                        constructors.get(<span class="number">0</span>), object);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SingleGeneratedAdapterObserver(generatedAdapter);</span><br><span class="line">            &#125;</span><br><span class="line">            GeneratedAdapter[] adapters = <span class="keyword">new</span> GeneratedAdapter[constructors.size()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; constructors.size(); i++) &#123;</span><br><span class="line">                adapters[i] = createGeneratedAdapter(constructors.get(i), object);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CompositeGeneratedAdaptersObserver(adapters);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReflectiveGenericLifecycleObserver(object);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个方法里，由于我们传入的是继承自<code>LifecycleObserver</code>的observer,最终返回的是<code>ReflectiveGenericLifecycleObserver</code>。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ReflectiveGenericLifecycleObserver(Object wrapped) &#123;</span><br><span class="line">        mWrapped = wrapped;</span><br><span class="line">        mInfo = ClassesInfoCache.sInstance.getInfo(mWrapped.getClass());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在<code>ReflectiveGenericLifecycleObserver</code>的构造方法中，创建了<code>CallbackInfo</code>信息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">CallbackInfo <span class="title">getInfo</span><span class="params">(Class klass)</span> </span>&#123;</span><br><span class="line">        CallbackInfo existing = mCallbackMap.get(klass);</span><br><span class="line">        <span class="keyword">if</span> (existing != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> existing;</span><br><span class="line">        &#125;</span><br><span class="line">        existing = createInfo(klass, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> existing;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>如果没有缓存过，则创建</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> CallbackInfo <span class="title">createInfo</span><span class="params">(Class klass, @Nullable Method[] declaredMethods)</span> </span>&#123;</span><br><span class="line">        Class superclass = klass.getSuperclass();</span><br><span class="line">        Map&lt;MethodReference, Lifecycle.Event&gt; handlerToEvent = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (superclass != <span class="keyword">null</span>) &#123;</span><br><span class="line">            CallbackInfo superInfo = getInfo(superclass);</span><br><span class="line">            <span class="keyword">if</span> (superInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                handlerToEvent.putAll(superInfo.mHandlerToEvent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Class[] interfaces = klass.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class intrfc : interfaces) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;MethodReference, Lifecycle.Event&gt; entry : getInfo(</span><br><span class="line">                    intrfc).mHandlerToEvent.entrySet()) &#123;</span><br><span class="line">                verifyAndPutHandler(handlerToEvent, entry.getKey(), entry.getValue(), klass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method[] methods = declaredMethods != <span class="keyword">null</span> ? declaredMethods : getDeclaredMethods(klass);</span><br><span class="line">        <span class="keyword">boolean</span> hasLifecycleMethods = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            OnLifecycleEvent annotation = method.getAnnotation(OnLifecycleEvent<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (annotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hasLifecycleMethods = <span class="keyword">true</span>;</span><br><span class="line">            Class&lt;?&gt;[] params = method.getParameterTypes();</span><br><span class="line">            <span class="keyword">int</span> callType = CALL_TYPE_NO_ARG;</span><br><span class="line">            <span class="keyword">if</span> (params.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                callType = CALL_TYPE_PROVIDER;</span><br><span class="line">                <span class="keyword">if</span> (!params[<span class="number">0</span>].isAssignableFrom(LifecycleOwner<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"invalid parameter type. Must be one and instanceof LifecycleOwner"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Lifecycle.Event event = annotation.value();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (params.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                callType = CALL_TYPE_PROVIDER_WITH_EVENT;</span><br><span class="line">                <span class="keyword">if</span> (!params[<span class="number">1</span>].isAssignableFrom(Lifecycle.Event<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"invalid parameter type. second arg must be an event"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (event != Lifecycle.Event.ON_ANY) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"Second arg is supported only for ON_ANY value"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (params.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"cannot have more than 2 params"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            MethodReference methodReference = <span class="keyword">new</span> MethodReference(callType, method);</span><br><span class="line">            verifyAndPutHandler(handlerToEvent, methodReference, event, klass);</span><br><span class="line">        &#125;</span><br><span class="line">        CallbackInfo info = <span class="keyword">new</span> CallbackInfo(handlerToEvent);</span><br><span class="line">        mCallbackMap.put(klass, info);</span><br><span class="line">        mHasLifecycleMethods.put(klass, hasLifecycleMethods);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个方法里，通过注解，将方法添加到了map中。</p>
<p>在注释2处，以observer为key,ObserverWithState为value，保存到map中</p>
<p>添加observer先看到这里。</p>
<h3 id="生命周期变化时的通知"><a href="#生命周期变化时的通知" class="headerlink" title="生命周期变化时的通知"></a>生命周期变化时的通知</h3><p>由于我们的Activity继承自<code>AppCompatActivity</code>,而AppCompatActivity最终继承自<code>ComponentActivity</code>,那么在oncreate执行时，会执行ComponentActivity的onCreate方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ReportFragment.injectIfNeededIn(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个方法中，执行了<code>ReportFragment.injectIfNeededIn(this)</code>方法;</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectIfNeededIn</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ProcessLifecycleOwner should always correctly work and some activities may not extend</span></span><br><span class="line">        <span class="comment">// FragmentActivity from support lib, so we use framework fragments for activities</span></span><br><span class="line">        android.app.FragmentManager manager = activity.getFragmentManager();</span><br><span class="line">        <span class="keyword">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            manager.beginTransaction().add(<span class="keyword">new</span> ReportFragment(), REPORT_FRAGMENT_TAG).commit();</span><br><span class="line">            <span class="comment">// Hopefully, we are the first to make a transaction.</span></span><br><span class="line">            manager.executePendingTransactions();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，其实就是创建了一个<code>Fragment</code>，然后关联了Activity，这里Activity生命周期变化时，Fragment也会感知到。</p>
<p>下面以<code>onResume</code>为例，来看下onResume时，我们定义的observer是怎样感知到的。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ReportFragment</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        dispatchResume(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_RESUME);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>我们在observer中注册了Lifecycle.Event.ON_RESUME事件监听，看下dispatch方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">        Activity activity = getActivity();</span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class="line">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleOwner) &#123;</span><br><span class="line">            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();</span><br><span class="line">            <span class="keyword">if</span> (lifecycle <span class="keyword">instanceof</span> LifecycleRegistry) &#123;</span><br><span class="line">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个方法中，都会调用到<code>handleLifecycleEvent</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLifecycleEvent</span><span class="params">(@NonNull Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">        State next = getStateAfter(event);</span><br><span class="line">        moveToState(next);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法调用了<code>moveToState</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToState</span><span class="params">(State next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mState == next) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mState = next;</span><br><span class="line">        <span class="keyword">if</span> (mHandlingEvent || mAddingObserverCounter != <span class="number">0</span>) &#123;</span><br><span class="line">            mNewEventOccurred = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// we will figure out what to do on upper level.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mHandlingEvent = <span class="keyword">true</span>;</span><br><span class="line">        sync();</span><br><span class="line">        mHandlingEvent = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个方法里，调用了<code>sync()</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class="line">        <span class="keyword">if</span> (lifecycleOwner == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.w(LOG_TAG, <span class="string">"LifecycleOwner is garbage collected, you shouldn't try dispatch "</span></span><br><span class="line">                    + <span class="string">"new events from it."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!isSynced()) &#123;</span><br><span class="line">            mNewEventOccurred = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// no need to check eldest for nullability, because isSynced does it for us.</span></span><br><span class="line">            <span class="keyword">if</span> (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                backwardPass(lifecycleOwner);</span><br><span class="line">            &#125;</span><br><span class="line">            Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class="line">            <span class="keyword">if</span> (!mNewEventOccurred &amp;&amp; newest != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                forwardPass(lifecycleOwner);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mNewEventOccurred = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在sync方法中，经过判断，会调用<code>backwardPass</code>或<code>forwardPass</code>方法。我们选择forwardPass方法来看</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">forwardPass</span><span class="params">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class="line">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class="line">                mObserverMap.iteratorWithAdditions();</span><br><span class="line">        <span class="keyword">while</span> (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class="line">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class="line">            ObserverWithState observer = entry.getValue();</span><br><span class="line">            <span class="keyword">while</span> ((observer.mState.compareTo(mState) &lt; <span class="number">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class="line">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class="line">                pushParentState(observer.mState);</span><br><span class="line">                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));</span><br><span class="line">                popParentState();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在forwardPass方法中，会取出之前添加的observer,再依次调用<code>dispatchEvent</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchEvent</span><span class="params">(LifecycleOwner owner, Event event)</span> </span>&#123;</span><br><span class="line">            State newState = getStateAfter(event);</span><br><span class="line">            mState = min(mState, newState);</span><br><span class="line">            mLifecycleObserver.onStateChanged(owner, event);</span><br><span class="line">            mState = newState;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法调用到<code>ReflectiveGenericLifecycleObserver</code>的onStateChanged方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(LifecycleOwner source, Event event)</span> </span>&#123;</span><br><span class="line">        mInfo.invokeCallbacks(source, event, mWrapped);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法调用<code>invokeCallbacks</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">invokeCallbacks</span><span class="params">(LifecycleOwner source, Lifecycle.Event event, Object target)</span> </span>&#123;</span><br><span class="line">            invokeMethodsForEvent(mEventToHandlers.get(event), source, event, target);</span><br><span class="line">            invokeMethodsForEvent(mEventToHandlers.get(Lifecycle.Event.ON_ANY), source, event,</span><br><span class="line">                    target);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里又调用了<code>invokeMethodsForEvent</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeMethodsForEvent</span><span class="params">(List&lt;MethodReference&gt; handlers,</span></span></span><br><span class="line"><span class="function"><span class="params">                LifecycleOwner source, Lifecycle.Event event, Object mWrapped)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (handlers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = handlers.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    handlers.get(i).invokeCallback(source, event, mWrapped);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用<code>invokeCallback</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">invokeCallback</span><span class="params">(LifecycleOwner source, Lifecycle.Event event, Object target)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//noinspection TryWithIdenticalCatches</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (mCallType) &#123;</span><br><span class="line">                    <span class="keyword">case</span> CALL_TYPE_NO_ARG:</span><br><span class="line">                        mMethod.invoke(target);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> CALL_TYPE_PROVIDER:</span><br><span class="line">                        mMethod.invoke(target, source);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> CALL_TYPE_PROVIDER_WITH_EVENT:</span><br><span class="line">                        mMethod.invoke(target, source, event);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failed to call observer method"</span>, e.getCause());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法最终是反射调用。而method在addObserver的时候已经通过解析注解，保存了起来。</p>
<p>最后，附一张简单的时序图:</p>
<p><a href="/images/Lifecycle%E6%97%B6%E5%BA%8F%E5%9B%BE.png" data-fancybox="group" data-caption="Lifecycle时序图" class="fancybox"><img alt="Lifecycle时序图" title="Lifecycle时序图" data-src="/images/Lifecycle%E6%97%B6%E5%BA%8F%E5%9B%BE.png" src="/img/loading.gif" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Jetpack</tag>
        <tag>Lifecycle</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack学习-初识Jetpack</title>
    <url>/2020/04/14/Android/Jetpack%E5%AD%A6%E4%B9%A0-%E5%88%9D%E8%AF%86Jetpack/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Jetpack学习-初识Jetpack"><a href="#Jetpack学习-初识Jetpack" class="headerlink" title="Jetpack学习-初识Jetpack"></a>Jetpack学习-初识Jetpack</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇介绍Jetpack,内容来自官方文档。(我是搬运工#^_^#)</p>
<h2 id="Jetpack是什么"><a href="#Jetpack是什么" class="headerlink" title="Jetpack是什么"></a>Jetpack是什么</h2><blockquote>
<p>Jetpack 是一套库、工具和指南，可帮助开发者更轻松地编写优质应用。这些组件可帮助您遵循最佳做法、让您摆脱编写样板代码的工作并简化复杂任务，以便您将精力集中放在所需的代码上。</p>
<p>Jetpack 包含与平台 API 解除捆绑的 androidx.* 软件包库。这意味着，它可以提供向后兼容性，且比 Android 平台的更新频率更高，以此确保您始终可以获取最新且最好的 Jetpack 组件版本。</p>
</blockquote>
<h2 id="Jetpack能做什么"><a href="#Jetpack能做什么" class="headerlink" title="Jetpack能做什么"></a>Jetpack能做什么</h2><blockquote>
<ul>
<li><p>加速开发</p>
<p>组件可以单独采用（不过这些组件是为协同工作而构建的），同时利用 Kotlin 语言功能帮助您提高工作效率。</p>
</li>
<li><p>消除样板代码</p>
<p>Android Jetpack 可管理繁琐的 Activity（如后台任务、导航和生命周期管理），以便您可以专注于如何让自己的应用出类拔萃。</p>
</li>
<li><p>构建高质量的强大应用</p>
<p>Android Jetpack 组件围绕现代化设计实践构建而成，具有向后兼容性，可以减少崩溃和内存泄漏。</p>
</li>
</ul>
</blockquote>
<h2 id="Jetpack组件"><a href="#Jetpack组件" class="headerlink" title="Jetpack组件"></a>Jetpack组件</h2><p>Android Jetpack 组件是库的集合，这些库是为协同工作而构建的，不过也可以单独采用，同时利用 Kotlin 语言功能帮助您提高工作效率。可全部使用，也可混合搭配！</p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>基础组件可提供横向功能，例如向后兼容性、测试和 Kotlin 语言支持。</p>
<ul>
<li><p>Android KTX</p>
<p>  编写更简洁、惯用的 Kotlin 代码</p>
</li>
<li><p>AppCompat</p>
<p>  在较低版本的 Android 系统上恰当地降级</p>
</li>
<li><p>Auto</p>
<p>  有助于开发 Android Auto 应用的组件</p>
</li>
<li><p>检测</p>
<p>  从 Android Studio 中快速检测基于 Kotlin 或 Java 的代码</p>
</li>
<li><p>多 dex 处理</p>
<p>  为具有多个 DEX 文件的应用提供支持</p>
</li>
<li><p>安全</p>
<p>  按照安全最佳做法读写加密文件和共享偏好设置。</p>
</li>
<li><p>测试</p>
<p>  用于单元和运行时界面测试的 Android 测试框架</p>
</li>
<li><p>TV</p>
<p>  有助于开发 Android TV 应用的组件</p>
</li>
<li><p>Wear OS by Google 谷歌</p>
<p>  有助于开发 Wear 应用的组件</p>
</li>
</ul>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>架构组件可帮助您设计稳健、可测试且易维护的应用。</p>
<ul>
<li><p>数据绑定</p>
<p>  以声明方式将可观察数据绑定到界面元素</p>
</li>
<li><p>Lifecycles</p>
<p>  管理您的 Activity 和 Fragment 生命周期</p>
</li>
<li><p>LiveData</p>
<p>  在底层数据库更改时通知视图</p>
</li>
<li><p>Navigation</p>
<p>  处理应用内导航所需的一切</p>
</li>
<li><p>Paging</p>
<p>  逐步从您的数据源按需加载信息</p>
</li>
<li><p>Room</p>
<p>  流畅地访问 SQLite 数据库</p>
</li>
<li><p>ViewModel</p>
<p>  以注重生命周期的方式管理界面相关的数据</p>
</li>
<li><p>WorkManager</p>
<p>  管理您的 Android 后台作业</p>
</li>
</ul>
<h3 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h3><p>行为组件可帮助您的应用与标准 Android 服务（如通知、权限、分享和 Google 助理）相集成。</p>
<ul>
<li><p>CameraX</p>
<p>  轻松地向应用中添加相机功能</p>
</li>
<li><p>下载管理器</p>
<p>  安排和管理大量下载任务</p>
</li>
<li><p>媒体和播放</p>
<p>  用于媒体播放和路由（包括 Google Cast）的向后兼容 API</p>
</li>
<li><p>通知</p>
<p>  提供向后兼容的通知 API，支持 Wear 和 Auto</p>
</li>
<li><p>权限</p>
<p>  用于检查和请求应用权限的兼容性 API</p>
</li>
<li><p>偏好设置</p>
<p>  创建交互式设置屏幕</p>
</li>
<li><p>共享</p>
<p>  提供适合应用操作栏的共享操作</p>
</li>
<li><p>切片</p>
<p>  创建可在应用外部显示应用数据的灵活界面元素</p>
</li>
</ul>
<h3 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h3><p>界面组件可提供微件和辅助程序，让您的应用不仅简单易用，还能带来愉悦体验。了解有助于简化界面开发的 Jetpack Compose。</p>
<ul>
<li><p>动画和过渡</p>
<p>  移动微件和在屏幕之间过渡</p>
</li>
<li><p>表情符号</p>
<p>  在旧版平台上启用最新的表情符号字体</p>
</li>
<li><p>Fragment</p>
<p>  组件化界面的基本单位</p>
</li>
<li><p>布局</p>
<p>  使用不同的算法布置微件</p>
</li>
<li><p>调色板</p>
<p>  从调色板中提取出有用的信息</p>
</li>
</ul>
<p>来一张图总结下：</p>
<p><a href="/images/Jetpack%E7%BB%84%E4%BB%B6.png" data-fancybox="group" data-caption="Jetpack组件" class="fancybox"><img alt="Jetpack组件" title="Jetpack组件" data-src="/images/Jetpack%E7%BB%84%E4%BB%B6.png" src="/img/loading.gif" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Jetpack</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Netty实现服务端与客户端通信</title>
    <url>/2020/04/12/Android/%E5%9F%BA%E4%BA%8ENetty%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="基于Netty实现服务端与客户端通信"><a href="#基于Netty实现服务端与客户端通信" class="headerlink" title="基于Netty实现服务端与客户端通信"></a>基于Netty实现服务端与客户端通信</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文介绍基于Netty实现的服务端与客户端通信的简单使用方法，并在此基础上实现一个简单的服务端-客户端指令通信的Demo。</p>
<h2 id="Netty是什么"><a href="#Netty是什么" class="headerlink" title="Netty是什么"></a>Netty是什么</h2><blockquote>
<p>Netty是一个NIO客户端-服务器框架，可以快速轻松地开发网络应用程序，例如协议服务器和客户端。它极大地简化了网络编程，例如TCP和UDP套接字服务器的开发。提供一个异步事件驱动的网络应用程序框架和工具，以快速开发可维护的高性能和高可扩展性协议服务器和客户端。</p>
</blockquote>
<p>以上内容摘选自<a href="https://netty.io/wiki/user-guide-for-4.x.html" target="_blank" rel="noopener">https://netty.io/wiki/user-guide-for-4.x.html</a></p>
<p>Netty具有以下特点：</p>
<ul>
<li>适用于各种传输类型的统一API-阻塞和非阻塞套接字</li>
<li>更高的吞吐量，更低的延迟</li>
<li>减少资源消耗</li>
<li>减少不必要的内存复制</li>
<li>完整的SSL / TLS和StartTLS支持</li>
</ul>
<p>以上内容摘选自<a href="https://netty.io/" target="_blank" rel="noopener">https://netty.io/</a></p>
<h2 id="使用入门"><a href="#使用入门" class="headerlink" title="使用入门"></a>使用入门</h2><p>Netty的使用，可以参照Netty的官方文档，这里以4.x为例来演示Netty在服务端和客户端上使用。文档地址：<a href="https://netty.io/wiki/user-guide-for-4.x.html" target="_blank" rel="noopener">https://netty.io/wiki/user-guide-for-4.x.html</a></p>
<p>这里用Eclipse来进行开发,服务端和客户端都放在一个工程里。</p>
<p>新建Java工程</p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>首先需要导入netty的jar包。这里使用netty-all-4.1.48.Final.jar。</p>
<h4 id="NettyServer"><a href="#NettyServer" class="headerlink" title="NettyServer"></a>NettyServer</h4><p>新建NettyServer类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> mPort;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">NettyServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.mPort = port;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">			b.group(bossGroup, workerGroup).channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">					// 指定连接队列大小</span></span><br><span class="line"><span class="class">					.<span class="title">option</span>(<span class="title">ChannelOption</span>.<span class="title">SO_BACKLOG</span>, 128)</span></span><br><span class="line"><span class="class">					//<span class="title">KeepAlive</span></span></span><br><span class="line"><span class="class">					.<span class="title">childOption</span>(<span class="title">ChannelOption</span>.<span class="title">SO_KEEPALIVE</span>, <span class="title">true</span>)</span></span><br><span class="line"><span class="class">					//<span class="title">Handler</span></span></span><br><span class="line"><span class="class">					.<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123;</span><br><span class="line"></span><br><span class="line">						<span class="meta">@Override</span></span><br><span class="line">						<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">							channel.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;);</span><br><span class="line">			ChannelFuture f = b.bind(mPort).sync();</span><br><span class="line">			<span class="keyword">if</span> (f.isSuccess()) &#123;</span><br><span class="line">				LogUtil.log(<span class="string">"Server,启动Netty服务端成功，端口号:"</span> + mPort);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// f.channel().closeFuture().sync();</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">// workerGroup.shutdownGracefully();</span></span><br><span class="line">			<span class="comment">// bossGroup.shutdownGracefully();</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="NettyServerHandler"><a href="#NettyServerHandler" class="headerlink" title="NettyServerHandler"></a>NettyServerHandler</h4><p>在初始化时，需要指定Handle，用来处理Channel相关业务。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Server,channelActive"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Server,接收到客户端发来的消息:"</span> + msg);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Server,exceptionCaught"</span>);</span><br><span class="line">		cause.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Server,channelInactive"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>经过上面这些步骤后，服务端最基本的设置就完成了。</p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>客户端和服务端在初始化时大体是类似的，不过相比服务端要简单一些。</p>
<h4 id="NettyClient"><a href="#NettyClient" class="headerlink" title="NettyClient"></a>NettyClient</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String mHost;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> mPort;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> NettyClientHandler mClientHandler;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ChannelFuture mChannelFuture;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">NettyClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.mHost = host;</span><br><span class="line">		<span class="keyword">this</span>.mPort = port;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">			mClientHandler = <span class="keyword">new</span> NettyClientHandler();</span><br><span class="line">			b.group(workerGroup).channel(NioSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">					// <span class="title">KeepAlive</span></span></span><br><span class="line"><span class="class">					.<span class="title">option</span>(<span class="title">ChannelOption</span>.<span class="title">SO_KEEPALIVE</span>, <span class="title">true</span>)</span></span><br><span class="line"><span class="class">					// <span class="title">Handler</span></span></span><br><span class="line"><span class="class">					.<span class="title">handler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123;</span><br><span class="line"></span><br><span class="line">						<span class="meta">@Override</span></span><br><span class="line">						<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">							channel.pipeline().addLast(mClientHandler);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;);</span><br><span class="line">			mChannelFuture = b.connect(mHost, mPort).sync();</span><br><span class="line">			<span class="keyword">if</span> (mChannelFuture.isSuccess()) &#123;</span><br><span class="line">				LogUtil.log(<span class="string">"Client,连接服务端成功"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			mChannelFuture.channel().closeFuture().sync();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			workerGroup.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="NettyClientHandler"><a href="#NettyClientHandler" class="headerlink" title="NettyClientHandler"></a>NettyClientHandler</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Client,channelActive"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Client,接收到服务端发来的消息:"</span> + msg);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Client,exceptionCaught"</span>);</span><br><span class="line">		cause.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Client,channelInactive"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>到这里，客户端最基本设置就完成了。</p>
<h3 id="连接服务端"><a href="#连接服务端" class="headerlink" title="连接服务端"></a>连接服务端</h3><p>新建一个Main类，用于测试服务端和客户端是否能正常连接。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">			<span class="keyword">int</span> port = <span class="number">12345</span>;</span><br><span class="line">			NettyServer server = <span class="keyword">new</span> NettyServer(port);</span><br><span class="line">			server.run();</span><br><span class="line">			Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			NettyClient client = <span class="keyword">new</span> NettyClient(host, port);</span><br><span class="line">			client.connect();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行main方法，输出日志如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-4-13 0:11:02--Server,启动Netty服务端成功，端口号:12345</span><br><span class="line">2020-4-13 0:11:03--Client,channelActive</span><br><span class="line">2020-4-13 0:11:03--Client,连接服务端成功</span><br><span class="line">2020-4-13 0:11:03--Server,channelActive</span><br></pre></td></tr></table></figure></div>

<p>可以看到，客户端成功连接上了服务端，服务端和客户端里设置的Handler的channelActive方法都会回调。</p>
<h3 id="服务端与客户端通信"><a href="#服务端与客户端通信" class="headerlink" title="服务端与客户端通信"></a>服务端与客户端通信</h3><p>在服务端与客户端连接成功后，我们往往需要在双方间进行通信。这里假定，在连接成功后，服务端给客户端发送一个欢迎信息”你好，客户端”，而客户端在收到服务端的消息后，也给服务端回复一个消息”你好，服务端”。下面来实现具体的功能。</p>
<p>修改服务端NettyServerHandler中的channelActive方法和channelRead方法,在channelActive方法中给客户端发送消息，在channelRead方法中解析客户端发来的消息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Server,channelActive"</span>);</span><br><span class="line">		ByteBuf byteBuf = Unpooled.copiedBuffer(<span class="string">"你好，客户端"</span>, Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">		ctx.writeAndFlush(byteBuf);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">		<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">		buf.readBytes(buffer);</span><br><span class="line">		String message = <span class="keyword">new</span> String(buffer, <span class="string">"utf-8"</span>);</span><br><span class="line">		LogUtil.log(<span class="string">"Server,接收到客户端发来的消息:"</span> + message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>修改客户端NettyClientHandler中的channelRead方法，当收到服务端的消息时，回复服务端</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">		<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">		buf.readBytes(buffer);</span><br><span class="line">		String message = <span class="keyword">new</span> String(buffer,<span class="string">"utf-8"</span>);</span><br><span class="line">		LogUtil.log(<span class="string">"Client,接收到服务端发来的消息:"</span> + message);</span><br><span class="line">		</span><br><span class="line">		ByteBuf byteBuf = Unpooled.copiedBuffer(<span class="string">"你好，服务端"</span>, Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">		ctx.writeAndFlush(byteBuf);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行后，输出日志如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-4-13 0:29:16--Server,启动Netty服务端成功，端口号:12345</span><br><span class="line">2020-4-13 0:29:17--Client,channelActive</span><br><span class="line">2020-4-13 0:29:17--Client,连接服务端成功</span><br><span class="line">2020-4-13 0:29:17--Server,channelActive</span><br><span class="line">2020-4-13 0:29:17--Client,接收到服务端发来的消息:你好，客户端</span><br><span class="line">2020-4-13 0:29:17--Server,接收到客户端发来的消息:你好，服务端</span><br></pre></td></tr></table></figure></div>

<p>可以看到，服务端与客户端已经可以正常通信。</p>
<h3 id="粘包与拆包"><a href="#粘包与拆包" class="headerlink" title="粘包与拆包"></a>粘包与拆包</h3><p>在实际的使用场景中，可能会存在短时间内大量数据发送的问题。我们模拟这个场景。在客户端连接上服务端后，服务端给客户端发送100个消息，而为便于分析，客户端在收到服务端消息后，不作回复。</p>
<p>修改服务端中NettyServerHandler的channelActive方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Server,channelActive"</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">			ByteBuf byteBuf = Unpooled.copiedBuffer(<span class="string">"你好，客户端"</span>, Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">			ctx.writeAndFlush(byteBuf);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>修改客户端中NettyClientHandler的channelRead方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">		<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">		buf.readBytes(buffer);</span><br><span class="line">		String message = <span class="keyword">new</span> String(buffer, <span class="string">"utf-8"</span>);</span><br><span class="line">		LogUtil.log(<span class="string">"Client,接收到服务端发来的消息:"</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ByteBuf byteBuf = Unpooled.copiedBuffer("你好，服务端", Charset.forName("utf-8"));</span></span><br><span class="line">        <span class="comment">//ctx.writeAndFlush(byteBuf);</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行后，输出的部分结果如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-4-13 0:35:28--Server,启动Netty服务端成功，端口号:12345</span><br><span class="line">2020-4-13 0:35:29--Client,channelActive</span><br><span class="line">2020-4-13 0:35:29--Client,连接服务端成功</span><br><span class="line">2020-4-13 0:35:29--Server,channelActive</span><br><span class="line">2020-4-13 0:35:29--Client,接收到服务端发来的消息:你好，客户端</span><br><span class="line">2020-4-13 0:35:29--Client,接收到服务端发来的消息:你好，客户端你好，客户端你好，客户端你好，客户端你好，客户端你好，客户端你好，客户端你好，客户端你好，客户端你好，客户端你好，客户端你好，客户端你好，客户端你好，客户端你好，客户端你好，客户端你好，客户端</span><br><span class="line">2020-4-13 0:35:29--Client,接收到服务端发来的消息:你好，客户端</span><br></pre></td></tr></table></figure></div>

<p>可以看到，出现了多条消息”粘”在一起的情况。</p>
<h4 id="什么是粘包与拆包"><a href="#什么是粘包与拆包" class="headerlink" title="什么是粘包与拆包"></a>什么是粘包与拆包</h4><blockquote>
<p>TCP是个”流”协议，所谓流，就是没有界限的一串数据。TCP底层并不了解上层业务数据的具体含义，它会根据TCP缓冲区的实际情况进行包的划分，所以在业务上认为，一个完整的包可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装成一个大的数据包发送，这就是所谓的TCP粘包和拆包问题。</p>
</blockquote>
<p>以上内容摘选自<a href="https://blog.csdn.net/J080624/article/details/87209637" target="_blank" rel="noopener">TCP粘包/拆包与Netty解决方案</a></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><blockquote>
<p>在没有 Netty 的情况下，用户如果自己需要拆包，基本原理就是不断从 TCP 缓冲区中读取数据，每次读取完都需要判断是否是一个完整的数据包 如果当前读取的数据不足以拼接成一个完整的业务数据包，那就保留该数据，继续从 TCP 缓冲区中读取，直到得到一个完整的数据包。 如果当前读到的数据加上已经读取的数据足够拼接成一个数据包，那就将已经读取的数据拼接上本次读取的数据，构成一个完整的业务数据包传递到业务逻辑，多余的数据仍然保留，以便和下次读到的数据尝试拼接。</p>
</blockquote>
<p>以上内容摘选自<a href="https://juejin.im/post/5bdaf8ea6fb9a0227b02275a" target="_blank" rel="noopener">彻底理解Netty，这一篇文章就够了</a></p>
<p>而使用Netty，则解决这个问题的方法就简单多了。Netty已经提供了四个拆包器:</p>
<ul>
<li>FixedLengthFrameDecoder:固定长度的拆包器,Netty会把固定长度的数据包发送给下一个channelHandler</li>
<li>LineBasedFrameDecoder:行拆包器,每个数据包以换行符分隔发送</li>
<li>DelimiterBasedFrameDecoder:分隔符拆包器，可以自定义分隔符，行拆包器是分隔符拆包器的一种特例</li>
<li>LengthFieldBasedFrameDecoder：基于长度域的拆包器，如果自定义协议中包含长度域的字段，就可以使用这个拆包器</li>
</ul>
<p>在这里，我们选用分隔符拆包器</p>
<p>首先定义分隔符</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATA_PACK_SEPARATOR = <span class="string">"#$&amp;*"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在服务端的channelHandler配置中，需要增加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//这个配置需要在添加Handler前设置</span></span><br><span class="line">	channel.pipeline().addLast(<span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">1024</span>,Unpooled.copiedBuffer(Config.DATA_PACK_SEPARATOR.getBytes())));</span><br><span class="line">	channel.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>在客户端的channelHandler的配置中，同样也需要增加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//这个配置需要在添加Handler前设置</span></span><br><span class="line">	channel.pipeline().addLast(<span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">1024</span>,Unpooled.copiedBuffer(Config.DATA_PACK_SEPARATOR.getBytes())));</span><br><span class="line">	channel.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>发送数据时，在数据的末尾增加分隔符:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Server,channelActive"</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">			ByteBuf byteBuf = Unpooled.copiedBuffer(<span class="string">"你好，客户端"</span>+Config.DATA_PACK_SEPARATOR, Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">			ctx.writeAndFlush(byteBuf);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行后，可以发现，已经解决”粘包”与”拆包”的问题。</p>
<h3 id="心跳"><a href="#心跳" class="headerlink" title="心跳"></a>心跳</h3><p>在网络应用中，为了判断连接是否还存在，一般会通过发送心跳包来检测。在Netty中，配置心跳包的步骤如下</p>
<p>在客户端的channelHandler的配置中，需要增加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">			channel.pipeline().addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">5</span>, <span class="number">5</span>, <span class="number">10</span>));</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">						&#125;</span><br></pre></td></tr></table></figure></div>

<p>在NettyClientHandler中，重写userEventTriggered方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		IdleStateEvent event = (IdleStateEvent) evt;</span><br><span class="line">		LogUtil.log(<span class="string">"Client,Idle:"</span> + event.state());</span><br><span class="line">		<span class="keyword">switch</span> (event.state()) &#123;</span><br><span class="line">		<span class="keyword">case</span> READER_IDLE:</span><br><span class="line"></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> WRITER_IDLE:</span><br><span class="line">			ByteBuf byteBuf = Unpooled.copiedBuffer(<span class="string">"心跳^v^v"</span>, Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> ALL_IDLE:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">super</span>.userEventTriggered(ctx, evt);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>当写空闲达到配置的时间时，往服务端发送一个心跳消息</p>
<p>运行后，日志输出如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-4-13 1:22:50--Server,启动Netty服务端成功，端口号:12345</span><br><span class="line">2020-4-13 1:22:51--Client,channelActive</span><br><span class="line">2020-4-13 1:22:51--Client,连接服务端成功</span><br><span class="line">2020-4-13 1:22:51--Server,channelActive</span><br><span class="line">2020-4-13 1:22:51--Client,接收到服务端发来的消息:你好，客户端</span><br><span class="line">2020-4-13 1:22:56--Client,Idle:WRITER_IDLE</span><br><span class="line">2020-4-13 1:22:56--Server,接收到客户端发来的消息:心跳^v^</span><br><span class="line">2020-4-13 1:22:56--Client,Idle:READER_IDLE</span><br><span class="line">2020-4-13 1:23:01--Client,Idle:WRITER_IDLE</span><br><span class="line">2020-4-13 1:23:01--Server,接收到客户端发来的消息:心跳^v^</span><br><span class="line">2020-4-13 1:23:01--Client,Idle:READER_IDLE</span><br></pre></td></tr></table></figure></div>

<p>可以看到，心跳包按我们配置的时间正常输出了。</p>
<h3 id="配置编码器与解码器"><a href="#配置编码器与解码器" class="headerlink" title="配置编码器与解码器"></a>配置编码器与解码器</h3><p>我们上面在发送数据时，需要通过ByteBuf来转换String，而通过配置编码，解码器，我们就可以直接发送字符串。配置如下：</p>
<p>在服务端与客户端的channelHandler分别增加以下配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">	<span class="comment">//这个配置需要在添加Handler前设置</span></span><br><span class="line">	channel.pipeline().addLast(<span class="string">"encoder"</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line">	channel.pipeline().addLast(<span class="string">"decoder"</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在发送消息时，则可以直接通过<code>ctx.writeAndFlush(&quot;心跳^v^&quot; + Config.DATA_PACK_SEPARATOR)</code>的形式来发送。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>到此，最简单的服务端与客户端通信的Demo已经完成。源码地址：<a href="https://github.com/milovetingting/Samples/tree/master/NettyDemo" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/NettyDemo</a></p>
<h2 id="使用进阶"><a href="#使用进阶" class="headerlink" title="使用进阶"></a>使用进阶</h2><p>在上面的基础上，我们来实现一个下面的需求：</p>
<ul>
<li><p>客户端需要登录到服务端</p>
</li>
<li><p>客户端登录成功后，服务端可以给客户端发送指令消息，客户端在收到消息及处理完消息后，都需要上报给服务端</p>
</li>
</ul>
<h3 id="封装连接"><a href="#封装连接" class="headerlink" title="封装连接"></a>封装连接</h3><p>为便于程序扩展，我们将客户端连接服务端的部分抽取出来。通过一个接口来定义连接的方法，而连接的具体实现由子类来实现。</p>
<p>定义接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 连接服务器</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> host     服务器地址</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> port     端口</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> callback 连接回调</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String host, <span class="keyword">int</span> port, IConnectionCallback callback)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里还需要定义连接的回调接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IConnectionCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 连接成功</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnected</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>具体的连接实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyConnection</span> <span class="keyword">implements</span> <span class="title">IConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> NettyClient mClient;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String host, <span class="keyword">int</span> port, IConnectionCallback callback)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (mClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">			mClient = <span class="keyword">new</span> NettyClient(host, port);</span><br><span class="line">			mClient.setConnectionCallBack(callback);</span><br><span class="line">			mClient.connect();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>为便于管理连接，定义一个连接的管理类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionManager</span> <span class="keyword">implements</span> <span class="title">IConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> IConnection mConnection;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">ConnectionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionManagerInner</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> ConnectionManager INSTANCE = <span class="keyword">new</span> ConnectionManager();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConnectionManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ConnectionManagerInner.INSTANCE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initConnection</span><span class="params">(IConnection connection)</span> </span>&#123;</span><br><span class="line">		mConnection = connection;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (mConnection == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessError(<span class="string">"please invoke initConnection first!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String host, <span class="keyword">int</span> port, IConnectionCallback callback)</span> </span>&#123;</span><br><span class="line">		checkInit();</span><br><span class="line">		mConnection.connect(host, port, callback);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用连接：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">			<span class="keyword">int</span> port = <span class="number">12345</span>;</span><br><span class="line">			NettyServer server = <span class="keyword">new</span> NettyServer(port);</span><br><span class="line">			server.run();</span><br><span class="line">			Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			ConnectionManager.initConnection(<span class="keyword">new</span> NettyConnection());</span><br><span class="line">			ConnectionManager.getInstance().connect(host, port, <span class="keyword">new</span> IConnectionCallback() &#123;</span><br><span class="line"></span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">					LogUtil.log(<span class="string">"Main,onConnected"</span>););</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在调用connect方法前，需要先调用initConnection来指定具体的连接类</p>
<h3 id="消息Bean的定义"><a href="#消息Bean的定义" class="headerlink" title="消息Bean的定义"></a>消息Bean的定义</h3><p>在连接成功后，服务端会给客户端发送一个欢迎的消息。为便于管理，我们定义一个消息Bean</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Msg</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 欢迎</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_WELCOME = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String msg;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="服务端发送欢迎消息"><a href="#服务端发送欢迎消息" class="headerlink" title="服务端发送欢迎消息"></a>服务端发送欢迎消息</h3><p>服务端发送消息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ChannelHandlerContextWrapper mChannelHandlerContextWrapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Server,channelActive"</span>);</span><br><span class="line">		mChannelHandlerContextWrapper = <span class="keyword">new</span> ChannelHandlerContextWrapper(ctx);</span><br><span class="line">		MsgUtil.sendWelcomeMsg(mChannelHandlerContextWrapper);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里，通过定义一个ChannelHandlerContextWrapper类来统一管理消息分隔符</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelHandlerContextWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ChannelHandlerContext mContext;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ChannelHandlerContextWrapper</span><span class="params">(ChannelHandlerContext context)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.mContext = context;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 包装writeAndFlush方法</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeAndFlush</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">		mContext.writeAndFlush(object + Config.DATA_PACK_SEPARATOR);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>再进一步，通过定义MsgUtil类来封装发送欢迎消息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 发送欢迎消息</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> wrapper</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendWelcomeMsg</span><span class="params">(ChannelHandlerContextWrapper wrapper)</span> </span>&#123;</span><br><span class="line">		Msg msg = <span class="keyword">new</span> Msg();</span><br><span class="line">		msg.type = Msg.TYPE_WELCOME;</span><br><span class="line">		msg.msg = <span class="string">"你好，客户端"</span>;</span><br><span class="line">		wrapper.writeAndFlush(Global.sGson.toJson(msg));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="客户端消息接收"><a href="#客户端消息接收" class="headerlink" title="客户端消息接收"></a>客户端消息接收</h3><p>对于客户端而言，为方便处理消息，我们需要定义一个方法来接收消息。通过在IConnection接口中新增一个registerMsgCallback方法来实现</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 连接服务器</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> host     服务器地址</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> port     端口</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> callback 连接回调</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String host, <span class="keyword">int</span> port, IConnectionCallback callback)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 注册消息回调</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> callback</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerMsgCallback</span><span class="params">(IMsgCallback callback)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里，还需要新增IMsgCallback接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMsgCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 接收到消息时的回调</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMsgReceived</span><span class="params">(Msg msg)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>对应到实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyConnection</span> <span class="keyword">implements</span> <span class="title">IConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> NettyClient mClient;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String host, <span class="keyword">int</span> port, IConnectionCallback callback)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (mClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">			mClient = <span class="keyword">new</span> NettyClient(host, port);</span><br><span class="line">			mClient.setConnectionCallBack(callback);</span><br><span class="line">			mClient.connect();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerMsgCallback</span><span class="params">(IMsgCallback callback)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (mClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessError(<span class="string">"please invoke connect first!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		mClient.registerMsgCallback(callback);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="消息的分发"><a href="#消息的分发" class="headerlink" title="消息的分发"></a>消息的分发</h4><p>在客户端，为便于处理消息，我们对消息类型进行划分</p>
<p>修改消息Bean</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Msg</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 欢迎</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_WELCOME = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 心跳</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_HEART_BEAT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 登录</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_LOGIN = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_COMMAND_A = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_COMMAND_B = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_COMMAND_C = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>假定消息是串行的，需要一个一个地处理。为便于管理消息，增加MsgQueue类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> PriorityBlockingQueue&lt;Msg&gt; mQueue;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> using;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">MsgQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mQueue = <span class="keyword">new</span> PriorityBlockingQueue&lt;&gt;(<span class="number">128</span>, <span class="keyword">new</span> Comparator&lt;Msg&gt;() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Msg msg1, Msg msg2)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">int</span> res = msg2.priority - msg1.priority;</span><br><span class="line">				<span class="keyword">if</span> (res == <span class="number">0</span> &amp;&amp; msg1.time != msg2.time) &#123;</span><br><span class="line">					<span class="keyword">return</span> (<span class="keyword">int</span>) (msg2.time - msg1.time);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> res;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MsgQueue <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> MsgQueueInner.INSTANCE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgQueueInner</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MsgQueue INSTANCE = <span class="keyword">new</span> MsgQueue();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将消息加入消息队列</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueueMsg</span><span class="params">(Msg msg)</span> </span>&#123;</span><br><span class="line">		mQueue.add(msg);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 从消息队列获取消息</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Msg <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (using) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Msg msg = mQueue.poll();</span><br><span class="line">		<span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">			makeUse(<span class="keyword">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> msg;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 标记使用状态</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> use</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">makeUse</span><span class="params">(<span class="keyword">boolean</span> use)</span> </span>&#123;</span><br><span class="line">		using = use;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否能够使用</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">canUse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> !using;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>增加消息的分发类MsgDispatcher</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgDispatcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Class&lt;? extends IMsgHandler&gt;&gt; mHandlerMap;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		mHandlerMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		mHandlerMap.put(Msg.TYPE_WELCOME, WelcomeMsgHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		mHandlerMap.put(Msg.TYPE_HEART_BEAT, HeartBeatMsgHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		mHandlerMap.put(Msg.TYPE_LOGIN, HeartBeatMsgHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		mHandlerMap.put(Msg.TYPE_COMMAND_A, CommandAMsgHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		mHandlerMap.put(Msg.TYPE_COMMAND_B, CommandBMsgHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		mHandlerMap.put(Msg.TYPE_COMMAND_C, CommandCMsgHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (MsgQueue.getInstance().canUse()) &#123;</span><br><span class="line">			Msg msg = MsgQueue.getInstance().next();</span><br><span class="line">			<span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			dispatch(msg);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(Msg msg)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			IMsgHandler handler = (IMsgHandler) Class.forName(mHandlerMap.get(msg.type).getName()).newInstance();</span><br><span class="line">			handler.handle(msg);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="消息的处理"><a href="#消息的处理" class="headerlink" title="消息的处理"></a>消息的处理</h4><p>定义IMsgHandler,在这里定义了处理的方法，具体实现由子类实现</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMsgHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 处理消息</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Msg msg)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>为统一管理，定义Base类BaseCommandHandler</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseCommandHandler</span> <span class="keyword">implements</span> <span class="title">IMsgHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Msg msg)</span> </span>&#123;</span><br><span class="line">		execute(msg);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Msg msg)</span> </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Client,received command:"</span> + msg);</span><br><span class="line">		doHandle(msg);</span><br><span class="line">		MsgQueue.getInstance().makeUse(<span class="keyword">false</span>);</span><br><span class="line">		LogUtil.log(<span class="string">"Client,report command:"</span> + msg);</span><br><span class="line">		MsgDispatcher.dispatch();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(Msg msg)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在BaseCommandHandler中，定义execute方法，顺序调用：上报消息已接收成功、处理消息、上报消息已处理完成。这里的消息上报部分，都只是输出一个日志来代替，在实际的业务中，可以抽取出一个抽象方法，让子类来实现。</p>
<p>定义子类，继承自BaseCommandHandler</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginMsgHandler</span> <span class="keyword">extends</span> <span class="title">BaseCommandHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(Msg msg)</span> </span>&#123;</span><br><span class="line">		LogUtil.log(<span class="string">"Client,handle msg:"</span> + msg);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>对应的心跳类型消息、欢迎类型消息等，都可以新增对应的处理类来实现，这里不再展开。</p>
<p>接收到消息时的处理</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">			<span class="keyword">int</span> port = <span class="number">12345</span>;</span><br><span class="line">			NettyServer server = <span class="keyword">new</span> NettyServer(port);</span><br><span class="line">			server.run();</span><br><span class="line">			Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			ConnectionManager.initConnection(<span class="keyword">new</span> NettyConnection());</span><br><span class="line">			ConnectionManager.getInstance().connect(host, port, <span class="keyword">new</span> IConnectionCallback() &#123;</span><br><span class="line"></span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">					LogUtil.log(<span class="string">"Main,onConnected"</span>);</span><br><span class="line"></span><br><span class="line">					ConnectionManager.getInstance().registerMsgCallback(<span class="keyword">new</span> IMsgCallback() &#123;</span><br><span class="line"></span><br><span class="line">						<span class="meta">@Override</span></span><br><span class="line">						<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMsgReceived</span><span class="params">(Msg msg)</span> </span>&#123;</span><br><span class="line">							MsgQueue.getInstance().enqueueMsg(msg);</span><br><span class="line">							MsgDispatcher.dispatch();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="客户端登录"><a href="#客户端登录" class="headerlink" title="客户端登录"></a>客户端登录</h3><p>修改消息Bean，增加登录的请求和响应</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Msg</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 欢迎</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_WELCOME = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 心跳</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_HEART_BEAT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 登录</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_LOGIN = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_COMMAND_A = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_COMMAND_B = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_COMMAND_C = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String msg;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> priority;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 登录请求信息</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginRuquestInfo</span> </span>&#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 用户名</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">public</span> String user;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 密码</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">public</span> String pwd;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"LoginRuquestInfo [user="</span> + user + <span class="string">", pwd="</span> + pwd + <span class="string">"]"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 登录响应信息</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginResponseInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 登录成功</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CODE_SUCCESS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 登录失败</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CODE_FAILED = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 响应码</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">int</span> code;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 响应数据</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">public</span> String data;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseData</span> </span>&#123;</span><br><span class="line">			<span class="keyword">public</span> String token;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"LoginResponseInfo [code="</span> + code + <span class="string">", data="</span> + data + <span class="string">"]"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>发送登录请求</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">			<span class="keyword">int</span> port = <span class="number">12345</span>;</span><br><span class="line">			NettyServer server = <span class="keyword">new</span> NettyServer(port);</span><br><span class="line">			server.run();</span><br><span class="line">			Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			ConnectionManager.initConnection(<span class="keyword">new</span> NettyConnection());</span><br><span class="line">			ConnectionManager.getInstance().connect(host, port, <span class="keyword">new</span> IConnectionCallback() &#123;</span><br><span class="line"></span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">					LogUtil.log(<span class="string">"Main,onConnected"</span>);</span><br><span class="line"></span><br><span class="line">					ConnectionManager.getInstance().registerMsgCallback(<span class="keyword">new</span> IMsgCallback() &#123;</span><br><span class="line"></span><br><span class="line">						<span class="meta">@Override</span></span><br><span class="line">						<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMsgReceived</span><span class="params">(Msg msg)</span> </span>&#123;</span><br><span class="line">							MsgQueue.getInstance().enqueueMsg(msg);</span><br><span class="line">							MsgDispatcher.dispatch();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;);</span><br><span class="line"></span><br><span class="line">					Msg msg = <span class="keyword">new</span> Msg();</span><br><span class="line">					msg.type = Msg.TYPE_LOGIN;</span><br><span class="line"></span><br><span class="line">					Msg.LoginRuquestInfo request = <span class="keyword">new</span> LoginRuquestInfo();</span><br><span class="line">					request.user = <span class="string">"wangyz"</span>;</span><br><span class="line">					request.pwd = <span class="string">"wangyz"</span>;</span><br><span class="line"></span><br><span class="line">					Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">					msg.msg = gson.toJson(request);</span><br><span class="line"></span><br><span class="line">					ConnectionManager.getInstance().sendMsg(msg);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里，引入Gson，将消息Bean转成json字符串后发送。</p>
<p>对应到服务端，为便于解析出消息，也需要对应的修改消息的Bean。服务端对消息的具体分发与处理，和客户端类似，这里不再展开。</p>
<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><p>由于篇幅限制，Demo中指令的优先级处理，模拟服务端指令下发等，这里没有再进一步详细介绍，具体可以参考源码:<a href="https://github.com/milovetingting/Samples/tree/master/Netty" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/Netty</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本文介绍了基于Netty实现服务端与客户端通信的基本用法，以及在此基础上，实现处理服务端指令并上报。Demo中通信的数据格式，用到了json，而优化的做法，可以用protobuf来实现，这里只展示通信的流程及简单的封装，因而未使用protobuf。Demo中只实现大体的流程，可能存在未测试到的Bug，权当一个参考的思路吧。</p>
<p>End~</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Netty</tag>
        <tag>通信</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle自定义插件发布到Maven</title>
    <url>/2020/04/05/Android/Gradle%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E5%8F%91%E5%B8%83%E5%88%B0Maven/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Gradle自定义插件发布到Maven"><a href="#Gradle自定义插件发布到Maven" class="headerlink" title="Gradle自定义插件发布到Maven"></a>Gradle自定义插件发布到Maven</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>日常开发中，我们可能会用到一些别人开发的插件，通常我们是这样引入插件的</p>
<p>在项目根目录下的build.gradle增加配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        maven &#123; url <span class="string">'https://dl.bintray.com/milovetingting/maven'</span> &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.wangyz.plugins:ShellPlugin:1.0.0'</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        maven &#123; url <span class="string">'https://dl.bintray.com/milovetingting/maven'</span> &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在需要应用插件的模块的build.gradle中增加配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.wangyz.plugins.ShellPlugin'</span></span><br></pre></td></tr></table></figure></div>

<p>sync工程后，就可以愉快地应用插件了。</p>
<p>那么，如果我们自己有开发好的插件，也想提供给别人使用，要怎样操作呢？这里就需要把开发的插件上传到公共的仓库中，别人才可以引用到。本文以Maven为例，介绍自定义插件发布到Maven的流程。</p>
<h2 id="注册帐号"><a href="#注册帐号" class="headerlink" title="注册帐号"></a>注册帐号</h2><p>可以通过bintray来发布插件到Maven仓库。首先需要注册帐号，注册地址：<a href="https://bintray.com/signup/oss" target="_blank" rel="noopener">https://bintray.com/signup/oss</a> </p>
<p>可以直接注册或者通过Github帐号注册。</p>
<p>需要注意的一点，邮箱地址不能为QQ邮箱，否则注册无法成功。</p>
<p><a href="/images/%E6%B3%A8%E5%86%8C.png" data-fancybox="group" data-caption="注册" class="fancybox"><img alt="注册" title="注册" data-src="/images/%E6%B3%A8%E5%86%8C.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>注册成功后，登录进去bintray，开始创建仓库</p>
<p><a href="/images/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png" data-fancybox="group" data-caption="新建仓库" class="fancybox"><img alt="新建仓库" title="新建仓库" data-src="/images/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>点击Add New Repository，进入新建仓库配置页面</p>
<p><a href="/images/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%932.png" data-fancybox="group" data-caption="新建仓库2" class="fancybox"><img alt="新建仓库2" title="新建仓库2" data-src="/images/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%932.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>Name项可以输入maven，Type选择Maven。</p>
<h2 id="插件发布"><a href="#插件发布" class="headerlink" title="插件发布"></a>插件发布</h2><p>新建好仓库后，就可以配置Android Studio项目，以便发布插件到远程仓库。</p>
<p>在要发布的library模块下的build.gradle中，增加以下配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.novoda.bintray-release'</span></span><br><span class="line"></span><br><span class="line">publish &#123;</span><br><span class="line">    <span class="comment">//注册bintray时的用户名</span></span><br><span class="line">    userOrg = <span class="string">'milovetingting'</span></span><br><span class="line">    <span class="comment">//要发布的插件的分组名，可以自己定义</span></span><br><span class="line">    groupId = <span class="string">'com.wangyz.plugins'</span></span><br><span class="line">    <span class="comment">//要发布的插件的标识</span></span><br><span class="line">    artifactId = <span class="string">'ShellPlugin'</span></span><br><span class="line">    <span class="comment">//要发布的插件版本</span></span><br><span class="line">    publishVersion = <span class="string">'1.0.0'</span></span><br><span class="line">    <span class="comment">//描述</span></span><br><span class="line">    desc = <span class="string">'a plugin to shell apk'</span></span><br><span class="line">    <span class="comment">//对应的网址，如果项目代码放在github上，可以填写github中的项目地址</span></span><br><span class="line">    website = <span class="string">'https://github.com/milovetingting/Shell'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>配置好后，同步项目。</p>
<p>在Android Studio中的Terminal面板中，输入以下命令开始发布：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gradlew clean build bintrayUpload -PbintrayUser&#x3D;UserName -PbintrayKey&#x3D;Key -PdryRun&#x3D;false</span><br></pre></td></tr></table></figure></div>

<p>其中PbintrayUser为bintray中注册的用户名，PbintrayKey就是bintray为我们分配的key</p>
<p>查看key的方法：</p>
<p>点击Edit Profile</p>
<p><a href="/images/%E6%9F%A5%E7%9C%8Bkey.png" data-fancybox="group" data-caption="查看key" class="fancybox"><img alt="查看key" title="查看key" data-src="/images/%E6%9F%A5%E7%9C%8Bkey.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>点击左侧的API Key，这里输入密码</p>
<p><a href="/images/%E6%9F%A5%E7%9C%8Bkey2.png" data-fancybox="group" data-caption="查看key2" class="fancybox"><img alt="查看key2" title="查看key2" data-src="/images/%E6%9F%A5%E7%9C%8Bkey2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>可以点击show查看key或者直接点击右侧的复制按钮复制</p>
<p><a href="/images/%E6%9F%A5%E7%9C%8Bkey3.png" data-fancybox="group" data-caption="查看key3" class="fancybox"><img alt="查看key3" title="查看key3" data-src="/images/%E6%9F%A5%E7%9C%8Bkey3.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>正确执行上面的命令后，就可以在bintray中看到我们发布的插件</p>
<p><a href="/images/%E6%9F%A5%E7%9C%8B%E6%8F%92%E4%BB%B6.png" data-fancybox="group" data-caption="查看插件" class="fancybox"><img alt="查看插件" title="查看插件" data-src="/images/%E6%9F%A5%E7%9C%8B%E6%8F%92%E4%BB%B6.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>点击刚才创建的仓库maven，可以看到我们自己定义的插件已经发布了</p>
<p><a href="/images/%E6%9F%A5%E7%9C%8B%E6%8F%92%E4%BB%B62.png" data-fancybox="group" data-caption="查看插件2" class="fancybox"><img alt="查看插件2" title="查看插件2" data-src="/images/%E6%9F%A5%E7%9C%8B%E6%8F%92%E4%BB%B62.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>这个时候，就可以像引用其它插件一样来引用我们自己发布的插件，只不过我们还需要指定maven的具体地址，因为我们还没有把自己的插件发布到jcenter</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">//项目根目录下的build.gradle</span></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        maven &#123; url <span class="string">'https://dl.bintray.com/milovetingting/maven'</span> &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.wangyz.plugins:ShellPlugin:1.0.0'</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        maven &#123; url <span class="string">'https://dl.bintray.com/milovetingting/maven'</span> &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中的<a href="https://dl.bintray.com/milovetingting/maven" target="_blank" rel="noopener">https://dl.bintray.com/milovetingting/maven</a><br>格式为：<a href="https://dl.bintray.com/用户名/仓库名" target="_blank" rel="noopener">https://dl.bintray.com/用户名/仓库名</a> ,应用插件时就会从指定的仓库下载</p>
<h2 id="发布到Jcenter"><a href="#发布到Jcenter" class="headerlink" title="发布到Jcenter"></a>发布到Jcenter</h2><p>如果想不使用具体的maven地址，那么就需要发布到jcenter。</p>
<p>进入我们刚才发布的插件的详情页，点击右侧的Add to Jcenter，在弹出的窗口中点击确定后，就会提交发布的申请，在审核通过后，就可以不指定具体的maven地址，直接引用插件了。审核一般几个小时就会通过。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Android</tag>
        <tag>Maven</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Android应用加固的简单实现方案(二)</title>
    <url>/2020/04/04/Android/Android%E5%BA%94%E7%94%A8%E5%8A%A0%E5%9B%BA%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88(%E4%BA%8C)/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android应用加固的简单实现方案-二"><a href="#Android应用加固的简单实现方案-二" class="headerlink" title="Android应用加固的简单实现方案(二)"></a>Android应用加固的简单实现方案(二)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇文章介绍了基于dex加固方案的两种具体实现。相对于手动加固，基于gradle实现的加固方案效率有了进一步提升。但是,还是需要在壳Module中增加util相关工具类的引用，为进一步减少代码侵入性，在前面方案的基础上，进一步完善插件的功能。</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>为了避免在壳Module中引入脱壳相关的工具类，可以在aar生成后，利用ASM生成需要的class文件，然后修改aar中的classes.jar文件，将我们生成的class文件加入到classes.jar中。而壳Module的启动Application也需要在编译后修改attachBaseContext方法，加入脱壳代码的引用。这块都可以通过修改class中的方法来实现。而脱壳后，实质上还是运行apk中的代码，因此，apk中也需要对应修改以上两处。</p>
<p>基于以上思路，实现可以加固的一个简单插件。</p>
<p>源码地址：<a href="https://github.com/milovetingting/Shell" target="_blank" rel="noopener">https://github.com/milovetingting/Shell</a></p>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol>
<li>新建项目，再新建一个Android Library类型的Module作为壳Module，名称随意，以”shell”为例,在壳Module中新建继承自Application的类，以”ShellApplication”为例,在ShellApplication中重写attachBaseContext方法,这个方法需要调用super.attachBaseContext(base)方法：</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li><p>主Module需要依赖刚才新建的壳Module,并指定主Module的启动Application为刚才新建的ShellApplication。</p>
</li>
<li><p>项目根目录下的build.gradle中引入插件:</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.wangyz.plugins:ShellPlugin:1.0.0'</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>app模块下的build.gradle引入插件及配置插件</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.wangyz.plugins.ShellPlugin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主要注意shellModuleName和shellApplication的配置</span></span><br><span class="line">shellConfig &#123;</span><br><span class="line">    <span class="comment">//壳Module的名称</span></span><br><span class="line">    shellModuleName = <span class="string">'shell'</span></span><br><span class="line">    <span class="comment">//壳Module中Application的全类名</span></span><br><span class="line">    shellApplication = <span class="string">'com.wangyz.shell.ShellApplication'</span></span><br><span class="line">    keyStore = <span class="string">'E:\\Code\\Android\\android.keystore'</span></span><br><span class="line">    keyStorePassword = <span class="string">'android'</span></span><br><span class="line">    keyPassword = <span class="string">'android'</span></span><br><span class="line">    alias = <span class="string">'android'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li><p>sync工程</p>
</li>
<li><p>在打包apk前，先执行Build-Clean Project,然后双击gradle面板的app/Tasks/build/assembleRelease，就会在项目根目录/壳Module名称-release/outputs/下生成signed.apk,这个apk就是加固过的apk.</p>
</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><p>这里只是演示加固的思路，对于加密部分，只是用了简单的^操作，具体可以自己换成AES，RSA或者其它加密方式。</p>
</li>
<li><p>插件会用到dx,gralde的命令，因此需要配置这两个的路径</p>
</li>
<li><p>插件会用到ASM，在编译出class后修改class。在生成apk后，没有修改过代码或者没有执行sync的操作后，transform的回调不会走，因此也不会执行修改class的逻辑，因此在每次生成加固apk前，需要执行clean项目的操作。</p>
</li>
<li><p>引入插件后的配置文件一定不能错，重点关注shellModuleName和shellApplication，否则会导致生成的apk无法正常使用。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>加固</tag>
      </tags>
  </entry>
  <entry>
    <title>Android应用加固的简单实现方案</title>
    <url>/2020/04/01/Android/Android%E5%BA%94%E7%94%A8%E5%8A%A0%E5%9B%BA%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android应用加固的简单实现方案"><a href="#Android应用加固的简单实现方案" class="headerlink" title="Android应用加固的简单实现方案"></a>Android应用加固的简单实现方案</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Android应用加固的诸多方案中，其中一种就是基于dex的加固,本文介绍基于dex的加固方案。</p>
<p>原理：在AndroidManifest中指定启动Application为壳Module的Application,生成APK后，将壳Module的AAR文件和加密后的APK中的dex文件合并，然后重新打包签名。安装应用运行后，通过壳Module的Application来解密dex文件，然后再加载dex。</p>
<p>存在的问题：解密过程，会还原出来未加密的原dex文件，通过一些手段，还是可以获得未加密的dex。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="APK和壳AAR的生成"><a href="#APK和壳AAR的生成" class="headerlink" title="APK和壳AAR的生成"></a>APK和壳AAR的生成</h3><p>新建工程，然后新建一个Module，作为壳Module，名字随意，这里命名为shell。</p>
<p><a href="/images/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" data-fancybox="group" data-caption="项目结构" class="fancybox"><img alt="项目结构" title="项目结构" data-src="/images/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在壳Module中新建继承自Application的ShellApplication,重写attachBaseContext方法,在这个方法加载原来的dex</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取应用APK</span></span><br><span class="line">            File apkFile = <span class="keyword">new</span> File(getApplicationInfo().sourceDir);</span><br><span class="line">            <span class="comment">//解压目录</span></span><br><span class="line">            File apkUnzipDir = getDir(<span class="string">"apk"</span>, Context.MODE_PRIVATE);</span><br><span class="line">            apkUnzipDir = <span class="keyword">new</span> File(apkUnzipDir, <span class="string">"unzip"</span>);</span><br><span class="line">            <span class="comment">//如果不存在，则解压</span></span><br><span class="line">            <span class="keyword">if</span> (!apkUnzipDir.exists()) &#123;</span><br><span class="line">                apkUnzipDir.mkdirs();</span><br><span class="line">                <span class="comment">//解压</span></span><br><span class="line">                ZipUtils.unzipFile(apkFile, apkUnzipDir);</span><br><span class="line">                <span class="comment">//过滤所有.dex文件</span></span><br><span class="line">                File[] files = apkUnzipDir.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> name.endsWith(<span class="string">".dex"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">//解密</span></span><br><span class="line">                File decryptDir = <span class="keyword">new</span> File(apkUnzipDir, <span class="string">"decrypt"</span>);</span><br><span class="line">                decryptDir.mkdirs();</span><br><span class="line">                ArrayList&lt;File&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (file.getName().endsWith(<span class="string">"classes.dex"</span>)) &#123;</span><br><span class="line">                        list.add(file);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        File decryptFile = <span class="keyword">new</span> File(decryptDir, file.getName());</span><br><span class="line">                        EncryptUtils.decrypt(file.getAbsolutePath(), decryptFile.getAbsolutePath());</span><br><span class="line">                        <span class="comment">//添加到list中</span></span><br><span class="line">                        list.add(decryptFile);</span><br><span class="line">                        <span class="comment">//删除加密的dex文件</span></span><br><span class="line">                        file.delete();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//加载.dex文件</span></span><br><span class="line">                ClassLoaderUtil.loadDex(<span class="keyword">this</span>, list);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ArrayList&lt;File&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                list.add(<span class="keyword">new</span> File(apkUnzipDir, <span class="string">"classes.dex"</span>));</span><br><span class="line">                File decryptDir = <span class="keyword">new</span> File(apkUnzipDir, <span class="string">"decrypt"</span>);</span><br><span class="line">                File[] files = decryptDir.listFiles();</span><br><span class="line">                <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                    list.add(file);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//加载.dex文件</span></span><br><span class="line">                ClassLoaderUtil.loadDex(<span class="keyword">this</span>, list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>修改app的AndroidManifest中application节点的name为壳Module的Application</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"com.wangyz.shell.ShellApplication"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在Gradle面板，双击app/Tasks/build/目录下的assembleRelease,生成未签名的APK</p>
<p><a href="/images/%E7%94%9F%E6%88%90apk.png" data-fancybox="group" data-caption="生成apk" class="fancybox"><img alt="生成apk" title="生成apk" data-src="/images/%E7%94%9F%E6%88%90apk.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在app/build/outputs/apk/release/目录下，可以找到生成的apk:app-release-unsigned.apk</p>
<p>在Android Studio中，点击Build-Make Module ‘shell’,生成AAR。</p>
<p><a href="/images/%E7%94%9F%E6%88%90aar.png" data-fancybox="group" data-caption="生成aar" class="fancybox"><img alt="生成aar" title="生成aar" data-src="/images/%E7%94%9F%E6%88%90aar.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在shell/build/outputs/aar/目录下，可以找到生成的aar:shell-debug.aar</p>
<h3 id="加壳的过程"><a href="#加壳的过程" class="headerlink" title="加壳的过程"></a>加壳的过程</h3><p>加壳的实现流程如下：</p>
<p><a href="/images/%E5%8A%A0%E5%A3%B3.png" data-fancybox="group" data-caption="加壳" class="fancybox"><img alt="加壳" title="加壳" data-src="/images/%E5%8A%A0%E5%A3%B3.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>这里选择Eclipse新建Java工程来操作。</p>
<p><a href="/images/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%842.png" data-fancybox="group" data-caption="项目结构2" class="fancybox"><img alt="项目结构2" title="项目结构2" data-src="/images/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%842.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>项目结构说明：</p>
<ol>
<li><p>input：存放需要加壳的apk和aar</p>
</li>
<li><p>keystore:存放签名用到的keystore文件</p>
</li>
<li><p>output:打包后输出目录，signed为签名后的apk</p>
</li>
</ol>
<p>需要配置的环境变量：</p>
<ol>
<li><p>由于要用到dx来将jar转换成dex，因此需要配置dx的路径。在SDK/build-tools/下，有对应不同版本的build工具，这里选择28.0.0，进入28.0.0文件夹，可以看到dx.bat文件。在电脑的环境变量中，修改path，增加dx.bat路径：</p>
<p> <a href="/images/dx%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.png" data-fancybox="group" data-caption="dx环境变量配置" class="fancybox"><img alt="dx环境变量配置" title="dx环境变量配置" data-src="/images/dx%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.png" src="/img/loading.gif" class="lazyload"></a></p>
</li>
<li><p>由于要用到jarsigner来签名apk，因此需要配置jarsigner的环境变量。一般Java开发的话，JDK配置好了后，这个就不需要再配置了。</p>
</li>
</ol>
<p>配置好上面的环境变量后，关掉eclipse,然后重新启动eclipse</p>
<p>Main类中的代码逻辑：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// APK</span></span><br><span class="line">			File apkFile = <span class="keyword">new</span> File(<span class="string">"input/app-debug.apk"</span>);</span><br><span class="line">			<span class="comment">// 壳AAR</span></span><br><span class="line">			File shellFile = <span class="keyword">new</span> File(<span class="string">"input/shell-debug.aar"</span>);</span><br><span class="line">			<span class="comment">// 判断文件是否存在</span></span><br><span class="line">			<span class="keyword">if</span> (!apkFile.exists() || !shellFile.exists()) &#123;</span><br><span class="line">				System.out.println(<span class="string">"apkFile or shellFile missing"</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// *************解压APK*************</span></span><br><span class="line">			System.out.println(<span class="string">"解压APK"</span>);</span><br><span class="line">			<span class="comment">// 先删除输出文件夹下的所有文件</span></span><br><span class="line">			File outputDir = <span class="keyword">new</span> File(<span class="string">"output/"</span>);</span><br><span class="line">			<span class="keyword">if</span> (outputDir.exists()) &#123;</span><br><span class="line">				FileUtils.deleteAllInDir(outputDir);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 创建apk的解压目录</span></span><br><span class="line">			File apkUnzipDir = <span class="keyword">new</span> File(<span class="string">"output/unzip/apk/"</span>);</span><br><span class="line">			<span class="keyword">if</span> (!apkUnzipDir.exists()) &#123;</span><br><span class="line">				apkUnzipDir.mkdirs();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 解压APK</span></span><br><span class="line">			ZipUtil.unZip(apkFile, apkUnzipDir);</span><br><span class="line">			<span class="comment">// 删除META-INF/CERT.RSA,META-INF/CERT.SF,META-INF/MANIFEST.MF</span></span><br><span class="line">			File certRSA = <span class="keyword">new</span> File(apkUnzipDir, <span class="string">"/META-INF/CERT.RSA"</span>);</span><br><span class="line">			certRSA.delete();</span><br><span class="line">			File certSF = <span class="keyword">new</span> File(apkUnzipDir, <span class="string">"/META-INF/CERT.SF"</span>);</span><br><span class="line">			certSF.delete();</span><br><span class="line">			File manifestMF = <span class="keyword">new</span> File(apkUnzipDir, <span class="string">"/META-INF/MANIFEST.MF"</span>);</span><br><span class="line">			manifestMF.delete();</span><br><span class="line">			<span class="comment">// 获取dex文件</span></span><br><span class="line">			File[] apkFiles = apkUnzipDir.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line"></span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File file, String s)</span> </span>&#123;</span><br><span class="line">					<span class="keyword">return</span> s.endsWith(<span class="string">".dex"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = apkFiles.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">				File file = apkFiles[i];</span><br><span class="line">				String name = file.getName();</span><br><span class="line">				System.out.println(<span class="string">"dex:"</span> + name);</span><br><span class="line">				String bakName = name.substring(<span class="number">0</span>, name.indexOf(<span class="string">".dex"</span>)) + <span class="string">"_bak.dex"</span>;</span><br><span class="line">				System.out.println(<span class="string">"备份dex:"</span> + bakName);</span><br><span class="line">				bakName = file.getParent() + File.separator + name.substring(<span class="number">0</span>, name.indexOf(<span class="string">".dex"</span>)) + <span class="string">"_bak.dex"</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 加密dex文件</span></span><br><span class="line">				EncryptUtils.encrypt(file.getAbsolutePath(), bakName);</span><br><span class="line">				System.out.println(<span class="string">"加密dex:"</span> + name);</span><br><span class="line">				<span class="comment">// 删除原文件</span></span><br><span class="line">				file.delete();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// *************解压APK*************</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// *************解压壳AAR*************</span></span><br><span class="line">			<span class="comment">// 创建壳AAR的解压目录</span></span><br><span class="line">			System.out.println(<span class="string">"解压壳AAR"</span>);</span><br><span class="line">			File shellUnzipDir = <span class="keyword">new</span> File(<span class="string">"output/unzip/shell/"</span>);</span><br><span class="line">			<span class="keyword">if</span> (!shellUnzipDir.exists()) &#123;</span><br><span class="line">				shellUnzipDir.mkdirs();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 解压AAR</span></span><br><span class="line">			ZipUtil.unZip(shellFile, shellUnzipDir);</span><br><span class="line">			<span class="comment">// 将jar转成dex</span></span><br><span class="line">			System.out.println(<span class="string">"将jar转成dex"</span>);</span><br><span class="line">			File shellJar = <span class="keyword">new</span> File(shellUnzipDir, <span class="string">"classes.jar"</span>);</span><br><span class="line">			File shellDex = <span class="keyword">new</span> File(apkUnzipDir, <span class="string">"classes.dex"</span>);</span><br><span class="line">			DexUtils.dxCommand(shellJar, shellDex);</span><br><span class="line">			<span class="comment">// 打包</span></span><br><span class="line">			System.out.println(<span class="string">"打包APK"</span>);</span><br><span class="line">			File unsignedApk = <span class="keyword">new</span> File(<span class="string">"output/unsigned.apk"</span>);</span><br><span class="line">			ZipUtil.zip(apkUnzipDir, unsignedApk);</span><br><span class="line">			<span class="comment">// 删除解压目录</span></span><br><span class="line"></span><br><span class="line">			FileUtils.delete(<span class="string">"output/unzip/"</span>);</span><br><span class="line">			System.out.println(<span class="string">"签名APK"</span>);</span><br><span class="line">			File signedApk = <span class="keyword">new</span> File(<span class="string">"output/signed.apk"</span>);</span><br><span class="line">			SignUtils.signature(unsignedApk, signedApk, <span class="string">"keystore/android.keystore"</span>);</span><br><span class="line">			System.out.println(<span class="string">"Finished!!!"</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// *************解压壳AAR*************</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure></div>

<p>来看下具体的步骤：</p>
<h4 id="解压APK"><a href="#解压APK" class="headerlink" title="解压APK"></a>解压APK</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File apkUnzipDir = <span class="keyword">new</span> File(root, <span class="string">"/output/unzip/apk/"</span>);</span><br><span class="line"><span class="keyword">if</span> (!apkUnzipDir.exists()) &#123;</span><br><span class="line">    apkUnzipDir.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解压APK</span></span><br><span class="line">ZipUtil.unZip(apkFile, apkUnzipDir);</span><br></pre></td></tr></table></figure></div>

<h4 id="加密解压出来的dex文件、重命名dex文件"><a href="#加密解压出来的dex文件、重命名dex文件" class="headerlink" title="加密解压出来的dex文件、重命名dex文件"></a>加密解压出来的dex文件、重命名dex文件</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取dex文件</span></span><br><span class="line">            File[] apkFiles = apkUnzipDir.listFiles((file, s) -&gt; s.endsWith(<span class="string">".dex"</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = apkFiles.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                File file = apkFiles[i];</span><br><span class="line">                String name = file.getName();</span><br><span class="line">                System.out.println(<span class="string">"dex:"</span> + name);</span><br><span class="line">                String bakName = name.substring(<span class="number">0</span>, name.indexOf(<span class="string">".dex"</span>)) + <span class="string">"_bak.dex"</span>;</span><br><span class="line">                System.out.println(<span class="string">"备份dex:"</span> + bakName);</span><br><span class="line">                bakName = file.getParent() + File.separator + name.substring(<span class="number">0</span>, name.indexOf(<span class="string">".dex"</span>)) + <span class="string">"_bak.dex"</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 加密dex文件</span></span><br><span class="line">                EncryptUtils.encrypt(file.getAbsolutePath(), bakName);</span><br><span class="line">                System.out.println(<span class="string">"加密dex:"</span> + name);</span><br><span class="line">                <span class="comment">// 删除原文件</span></span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="解压壳AAR"><a href="#解压壳AAR" class="headerlink" title="解压壳AAR"></a>解压壳AAR</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File shellUnzipDir = <span class="keyword">new</span> File(root, <span class="string">"/output/unzip/shell/"</span>);</span><br><span class="line"><span class="keyword">if</span> (!shellUnzipDir.exists()) &#123;</span><br><span class="line">    shellUnzipDir.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解压AAR</span></span><br><span class="line">ZipUtil.unZip(shellFile, shellUnzipDir);</span><br></pre></td></tr></table></figure></div>

<h4 id="将jar转成dex"><a href="#将jar转成dex" class="headerlink" title="将jar转成dex"></a>将jar转成dex</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File shellJar = <span class="keyword">new</span> File(shellUnzipDir, <span class="string">"classes.jar"</span>);</span><br><span class="line">File shellDex = <span class="keyword">new</span> File(apkUnzipDir, <span class="string">"classes.dex"</span>);</span><br><span class="line">DexUtils.dxCommand(shellJar, shellDex);</span><br></pre></td></tr></table></figure></div>

<h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File unsignedApk = <span class="keyword">new</span> File(root, <span class="string">"/output/unsigned.apk"</span>);</span><br><span class="line">ZipUtil.zip(apkUnzipDir, unsignedApk);</span><br></pre></td></tr></table></figure></div>

<h4 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileUtils.delete(<span class="keyword">new</span> File(root, <span class="string">"output/unzip/"</span>));</span><br><span class="line">System.out.println(<span class="string">"签名APK"</span>);</span><br><span class="line">File signedApk = <span class="keyword">new</span> File(root, <span class="string">"output/signed.apk"</span>);</span><br><span class="line">SignUtils.signature(unsignedApk, signedApk, keystore, keyStorePassword, keyPassword, alias);</span><br><span class="line">System.out.println(<span class="string">"Finished!!!"</span>);</span><br></pre></td></tr></table></figure></div>

<p>在output目录下，可以看到已经生成signed.apk。将apk安装在手机上，可以正常运行，达到加固的目的。</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p>源码地址:<a href="https://github.com/milovetingting/Samples/tree/master/Shell/%E5%8A%A0%E5%9B%BA-%E6%89%8B%E5%8A%A8%E5%8A%A0%E5%A3%B3" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/Shell/%E5%8A%A0%E5%9B%BA-%E6%89%8B%E5%8A%A8%E5%8A%A0%E5%A3%B3</a></p>
<h2 id="基于gradle的自动加固"><a href="#基于gradle的自动加固" class="headerlink" title="基于gradle的自动加固"></a>基于gradle的自动加固</h2><p>上面的加固方式，需要在生成APK后，再生成壳Module的AAR文件，然后再通过工具来生成加固的APK。这个过程，手动操作还是比较麻烦的。可以借助gradle来生成插件，在生成APK后，自动完成加固。</p>
<h3 id="插件生成"><a href="#插件生成" class="headerlink" title="插件生成"></a>插件生成</h3><p>新建工程Plugins,新建module,名为shell,作为加壳的插件。</p>
<p>清空shell模块下的build文件内容修改如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'groovy'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation gradleApi()</span><br><span class="line">    implementation localGroovy()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>删除shell模块下的src/main/目录下的所有文件，然后新建目录groovy，在groovy中再新建包:com/wangyz/plugins,具体可以根据实际情况修改。</p>
<p>新建ShellConfig.java，作为自定义配置的bean</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 壳Module名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String shellModuleName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * keystore的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String keyStore;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * keystore的密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String keyStorePassword;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key的密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String keyPassword;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 别名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String alias;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>新建ShellPlugin.groovy，主要的逻辑都在这里面</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wangyz.plugins</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wangyz.plugins.util.ShellUtil</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Plugin</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Project</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShellPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> printLog(Object msg) &#123;</span><br><span class="line">        println(<span class="string">"******************************"</span>)</span><br><span class="line">        println(msg)</span><br><span class="line">        println(<span class="string">"******************************\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> createDir(Project project) &#123;</span><br><span class="line">        File shellDir = <span class="keyword">new</span> File(<span class="string">"$&#123;project.rootDir&#125;/ShellAPK"</span>)</span><br><span class="line">        <span class="keyword">if</span> (!shellDir.exists()) &#123;</span><br><span class="line">            printLog(<span class="string">"create dir"</span>)</span><br><span class="line">            shellDir.mkdirs()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> deleteDir(Project project) &#123;</span><br><span class="line">        File shellDir = <span class="keyword">new</span> File(<span class="string">"$&#123;project.rootDir&#125;/ShellAPK"</span>)</span><br><span class="line">        <span class="keyword">if</span> (shellDir.exists()) &#123;</span><br><span class="line">            printLog(<span class="string">"delete dir"</span>)</span><br><span class="line">            shellDir.deleteDir()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line"></span><br><span class="line">        printLog(<span class="string">'ShellPlugin apply'</span>)</span><br><span class="line"></span><br><span class="line">        project.extensions.create(<span class="string">"shellConfig"</span>, ShellConfig)</span><br><span class="line"></span><br><span class="line">        project.afterEvaluate &#123;</span><br><span class="line">            project.tasks.matching &#123;</span><br><span class="line">                it.name == <span class="string">'assembleRelease'</span></span><br><span class="line">            &#125;.each &#123;</span><br><span class="line">                task -&gt;</span><br><span class="line">                    printLog(task.name)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">def</span> shellProject = project.parent.findProject(<span class="string">"$&#123;project.shellConfig.shellModuleName&#125;"</span>)</span><br><span class="line">                    printLog(<span class="string">"shellProject:$shellProject"</span>)</span><br><span class="line"></span><br><span class="line">                    File shellDir = <span class="keyword">new</span> File(<span class="string">"$&#123;project.rootDir&#125;/ShellAPK"</span>)</span><br><span class="line"></span><br><span class="line">                    File apkFile</span><br><span class="line"></span><br><span class="line">                    File aarFile = <span class="keyword">new</span> File(<span class="string">"$&#123;shellProject.buildDir&#125;/outputs/aar/shell-release.aar"</span>)</span><br><span class="line"></span><br><span class="line">                    project.android.applicationVariants.all &#123;</span><br><span class="line">                        variant -&gt;</span><br><span class="line">                            variant.outputs.each &#123;</span><br><span class="line">                                output -&gt;</span><br><span class="line">                                    <span class="keyword">def</span> outputFile = output.outputFile</span><br><span class="line">                                    printLog(<span class="string">"outputFile:$&#123;outputFile.getAbsolutePath()&#125;"</span>)</span><br><span class="line">                                    <span class="keyword">if</span> (outputFile.name.contains(<span class="string">"release"</span>)) &#123;</span><br><span class="line">                                        apkFile = outputFile</span><br><span class="line">                                    &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    task.doFirst &#123;</span><br><span class="line">                        <span class="comment">//删除原来的文件夹</span></span><br><span class="line">                        deleteDir(project)</span><br><span class="line">                        <span class="comment">//生成文件夹</span></span><br><span class="line">                        createDir(project)</span><br><span class="line">                        <span class="comment">//生成aar</span></span><br><span class="line">                        printLog(<span class="string">"begin generate aar"</span>)</span><br><span class="line">                        project.exec &#123;</span><br><span class="line">                            workingDir(<span class="string">"../$&#123;project.shellConfig.shellModuleName&#125;/"</span>)</span><br><span class="line">                            commandLine(<span class="string">'cmd'</span>, <span class="string">'/c'</span>, <span class="string">'gradle'</span>, <span class="string">'assembleRelease'</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                        printLog(<span class="string">"generate aar complete"</span>)</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//复制文件</span></span><br><span class="line">                        printLog(<span class="string">"begin copy aar"</span>)</span><br><span class="line">                        project.copy &#123;</span><br><span class="line">                            from aarFile</span><br><span class="line">                            into shellDir</span><br><span class="line">                        &#125;</span><br><span class="line">                        printLog(<span class="string">"copy aar complete"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    task.doLast &#123;</span><br><span class="line">                        printLog(<span class="string">"begin copy apk"</span>)</span><br><span class="line">                        <span class="comment">//复制文件</span></span><br><span class="line">                        project.copy &#123;</span><br><span class="line">                            from apkFile</span><br><span class="line">                            into shellDir</span><br><span class="line">                        &#125;</span><br><span class="line">                        printLog(<span class="string">"copy $&#123;apkFile.name&#125; complete"</span>)</span><br><span class="line"></span><br><span class="line">                        printLog(<span class="string">"begin shell"</span>)</span><br><span class="line"></span><br><span class="line">                        ShellUtil.shell(apkFile.getAbsolutePath(), aarFile.getAbsolutePath(), shellDir.getAbsolutePath(), project.shellConfig.keyStore, project.shellConfig.keyStorePassword, project.shellConfig.keyPassword, project.shellConfig.alias)</span><br><span class="line"></span><br><span class="line">                        printLog(<span class="string">"end shell"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>ShellPlugin类实现Plugin接口,实现apply方法，当插件被apply时，就会回调这个方法。</p>
<p>首先创建配置,这样引用插件的gradle文件就可以定义shellConfig节点，插件就可以拿到配置节点里的内容</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">project.extensions.create(<span class="string">"shellConfig"</span>, ShellConfig)</span><br></pre></td></tr></table></figure></div>

<p>指定在assembleRelease后执行我们自己的逻辑</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">project.afterEvaluate &#123;</span><br><span class="line">            project.tasks.matching &#123;</span><br><span class="line">                it.name == <span class="string">'assembleRelease'</span></span><br><span class="line">            &#125;.each &#123;</span><br><span class="line">                task -&gt;</span><br><span class="line">                    printLog(task.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>具体的逻辑定义在task的闭包中,在生成apk前，执行task.doFirst里的逻辑，首先生成aar，然后执行生成apk的逻辑，然后在task.doLast中执行加壳的操作。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">printLog(task.name)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">def</span> shellProject = project.parent.findProject(<span class="string">"$&#123;project.shellConfig.shellModuleName&#125;"</span>)</span><br><span class="line">                    printLog(<span class="string">"shellProject:$shellProject"</span>)</span><br><span class="line"></span><br><span class="line">                    File shellDir = <span class="keyword">new</span> File(<span class="string">"$&#123;project.rootDir&#125;/ShellAPK"</span>)</span><br><span class="line"></span><br><span class="line">                    File apkFile</span><br><span class="line"></span><br><span class="line">                    File aarFile = <span class="keyword">new</span> File(<span class="string">"$&#123;shellProject.buildDir&#125;/outputs/aar/shell-release.aar"</span>)</span><br><span class="line"></span><br><span class="line">                    project.android.applicationVariants.all &#123;</span><br><span class="line">                        variant -&gt;</span><br><span class="line">                            variant.outputs.each &#123;</span><br><span class="line">                                output -&gt;</span><br><span class="line">                                    <span class="keyword">def</span> outputFile = output.outputFile</span><br><span class="line">                                    printLog(<span class="string">"outputFile:$&#123;outputFile.getAbsolutePath()&#125;"</span>)</span><br><span class="line">                                    <span class="keyword">if</span> (outputFile.name.contains(<span class="string">"release"</span>)) &#123;</span><br><span class="line">                                        apkFile = outputFile</span><br><span class="line">                                    &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    task.doFirst &#123;</span><br><span class="line">                        <span class="comment">//删除原来的文件夹</span></span><br><span class="line">                        deleteDir(project)</span><br><span class="line">                        <span class="comment">//生成文件夹</span></span><br><span class="line">                        createDir(project)</span><br><span class="line">                        <span class="comment">//生成aar</span></span><br><span class="line">                        printLog(<span class="string">"begin generate aar"</span>)</span><br><span class="line">                        project.exec &#123;</span><br><span class="line">                            workingDir(<span class="string">"../$&#123;project.shellConfig.shellModuleName&#125;/"</span>)</span><br><span class="line">                            commandLine(<span class="string">'cmd'</span>, <span class="string">'/c'</span>, <span class="string">'gradle'</span>, <span class="string">'assembleRelease'</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                        printLog(<span class="string">"generate aar complete"</span>)</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//复制文件</span></span><br><span class="line">                        printLog(<span class="string">"begin copy aar"</span>)</span><br><span class="line">                        project.copy &#123;</span><br><span class="line">                            from aarFile</span><br><span class="line">                            into shellDir</span><br><span class="line">                        &#125;</span><br><span class="line">                        printLog(<span class="string">"copy aar complete"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    task.doLast &#123;</span><br><span class="line">                        printLog(<span class="string">"begin copy apk"</span>)</span><br><span class="line">                        <span class="comment">//复制文件</span></span><br><span class="line">                        project.copy &#123;</span><br><span class="line">                            from apkFile</span><br><span class="line">                            into shellDir</span><br><span class="line">                        &#125;</span><br><span class="line">                        printLog(<span class="string">"copy $&#123;apkFile.name&#125; complete"</span>)</span><br><span class="line"></span><br><span class="line">                        printLog(<span class="string">"begin shell"</span>)</span><br><span class="line"></span><br><span class="line">                        ShellUtil.shell(apkFile.getAbsolutePath(), aarFile.getAbsolutePath(), shellDir.getAbsolutePath(), project.shellConfig.keyStore, project.shellConfig.keyStorePassword, project.shellConfig.keyPassword, project.shellConfig.alias)</span><br><span class="line"></span><br><span class="line">                        printLog(<span class="string">"end shell"</span>)</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在src/main/目录下新建目录：resources/META-INF/gradle-plugins，再创建com.wangyz.plugins.ShellPlugin.properties的文件，这里的文件名就是后面插件被引用时的名字，com.wangyz.plugins.ShellPlugin.properties内容如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation-class&#x3D;com.wangyz.plugins.ShellPlugin</span><br></pre></td></tr></table></figure></div>

<p>key为implementation-class,这个是固定的</p>
<p>value为com.wangyz.plugins.ShellPlugin，就是上面在groovy里创建的类</p>
<p>到这里，定义好了插件，还需要发布到仓库。在shell模块的build.gradle文件中增加以下配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apply plugin: &#39;maven-publish&#39;</span><br><span class="line"></span><br><span class="line">publishing &#123;</span><br><span class="line">    publications &#123;</span><br><span class="line">        mavenJava(MavenPublication) &#123;</span><br><span class="line">            groupId &#39;com.wangyz.plugins&#39;</span><br><span class="line">            artifactId &#39;ShellPlugin&#39;</span><br><span class="line">            version &#39;1.0.0&#39;</span><br><span class="line"></span><br><span class="line">            from components.java</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publishing &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url uri(&#39;E:\\Repository&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>sync项目后，可以在Gradle面板看到新生成的task</p>
<p><a href="/images/%E5%88%9B%E5%BB%BA%E5%8F%91%E5%B8%83task.png" data-fancybox="group" data-caption="创建发布task" class="fancybox"><img alt="创建发布task" title="创建发布task" data-src="/images/%E5%88%9B%E5%BB%BA%E5%8F%91%E5%B8%83task.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>双击publish，会将插件发布到我们指定的仓库</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11:22:39: Executing task &#39;publish&#39;...</span><br><span class="line"></span><br><span class="line">Executing tasks: [publish] in project D:\Project\Plugins\shell</span><br><span class="line"></span><br><span class="line">Parallel execution with configuration on demand is an incubating feature.</span><br><span class="line">:shell:generatePomFileForMavenJavaPublication</span><br><span class="line">:shell:compileJava NO-SOURCE</span><br><span class="line">:shell:compileGroovy UP-TO-DATE</span><br><span class="line">:shell:processResources UP-TO-DATE</span><br><span class="line">:shell:classes UP-TO-DATE</span><br><span class="line">:shell:jar UP-TO-DATE</span><br><span class="line">Could not find metadata com.wangyz.plugins:ShellPlugin&#x2F;maven-metadata.xml in remote (file:&#x2F;E:&#x2F;Repository)</span><br><span class="line">:shell:publishMavenJavaPublicationToMavenRepository</span><br><span class="line">:shell:publish</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br><span class="line">5 actionable tasks: 2 executed, 3 up-to-date</span><br><span class="line">11:22:40: Task execution finished &#39;publish&#39;.</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/%E5%8F%91%E5%B8%83%E6%8F%92%E4%BB%B6.png" data-fancybox="group" data-caption="发布插件" class="fancybox"><img alt="发布插件" title="发布插件" data-src="/images/%E5%8F%91%E5%B8%83%E6%8F%92%E4%BB%B6.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="插件应用"><a href="#插件应用" class="headerlink" title="插件应用"></a>插件应用</h3><p>在需要加壳的工程的根build.gradle中引入插件:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url uri(<span class="string">'E:\\Repository'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.wangyz.plugins:ShellPlugin:1.0.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url uri(<span class="string">'E:\\Repository'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在app的build.gradle中应用插件:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入插件</span></span><br><span class="line">apply plugin: <span class="string">'com.wangyz.plugins.ShellPlugin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置插件</span></span><br><span class="line">shellConfig &#123;</span><br><span class="line">    shellModuleName = <span class="string">'shell'</span></span><br><span class="line">    keyStore = <span class="string">'E:\\Code\\Android\\android.keystore'</span></span><br><span class="line">    keyStorePassword = <span class="string">'android'</span></span><br><span class="line">    keyPassword = <span class="string">'android'</span></span><br><span class="line">    alias = <span class="string">'android'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/%E7%94%9F%E6%88%90apk.png" data-fancybox="group" data-caption="生成apk" class="fancybox"><img alt="生成apk" title="生成apk" data-src="/images/%E7%94%9F%E6%88%90apk.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>由于插件中会用到gradle命令，因此需要先配置gradle的路径到环境变量path中。具体配置，可以找下相关资料，这里不再展开。</p>
<p>双击执行assembleRelease命令,就会在根目录/ShellApk/output/下生成加壳签名后的apk。</p>
<p>安装加壳签名后的apk,可以正常运行。</p>
<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><p>源码地址：<a href="https://github.com/milovetingting/Samples/tree/master/Shell/%E5%8A%A0%E5%9B%BA-gradle%E6%8F%92%E4%BB%B6%E5%8A%A0%E5%A3%B3" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/Shell/%E5%8A%A0%E5%9B%BA-gradle%E6%8F%92%E4%BB%B6%E5%8A%A0%E5%A3%B3</a></p>
<h2 id="插件的实现"><a href="#插件的实现" class="headerlink" title="插件的实现"></a>插件的实现</h2><p>上面的方案，实际操作起来还是比较麻烦。因此，可以定义一个插件，通过引入这个插件，来实现apk的加固，减少编码的工作量。</p>
<p>可以参考下一篇文章：<a href="/2020/04/04/Android/Android应用加固的简单实现方案(二)/">Android应用加固的简单实现方案(二)</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>加固</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中ANR的触发机制-BroadcastReceiver篇</title>
    <url>/2020/03/16/Android/Android%E4%B8%ADANR%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6-BroadcastReceiver%E7%AF%87/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android中ANR的触发机制-BroadcastReceiver篇"><a href="#Android中ANR的触发机制-BroadcastReceiver篇" class="headerlink" title="Android中ANR的触发机制-BroadcastReceiver篇"></a>Android中ANR的触发机制-BroadcastReceiver篇</h1><p>上一篇分析了Service中的ANR触发机制，这一篇来分析BroadcastReceiver的ANR触发机制。</p>
<h2 id="触发机制分析"><a href="#触发机制分析" class="headerlink" title="触发机制分析"></a>触发机制分析</h2><p>附上时序图</p>
<p><a href="/images/BroadcastReceiver%E7%9A%84ANR%E6%9C%BA%E5%88%B6.png" data-fancybox="group" data-caption="BroadcastReceiver的ANR机制" class="fancybox"><img alt="BroadcastReceiver的ANR机制" title="BroadcastReceiver的ANR机制" data-src="/images/BroadcastReceiver%E7%9A%84ANR%E6%9C%BA%E5%88%B6.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="注册过程"><a href="#注册过程" class="headerlink" title="注册过程"></a>注册过程</h3><p>要分析BroadcastReceiver的ANR机制，先来看BroadcastReceiver的register过程，静态注册这里不作分析。</p>
<p>不管Activity还是Service中的registerReceiver，最终都是调用ContextWrapper中的registerReceiver方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Intent <span class="title">registerReceiver</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        BroadcastReceiver receiver, IntentFilter filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBase.registerReceiver(receiver, filter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>看下ContextImpl的registerReceiver方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ContextImpl</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Intent <span class="title">registerReceiver</span><span class="params">(BroadcastReceiver receiver, IntentFilter filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registerReceiver(receiver, filter, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法调用另一个重载方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ContextImpl</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Intent <span class="title">registerReceiver</span><span class="params">(BroadcastReceiver receiver, IntentFilter filter,</span></span></span><br><span class="line"><span class="function"><span class="params">            String broadcastPermission, Handler scheduler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registerReceiverInternal(receiver, getUserId(),</span><br><span class="line">                filter, broadcastPermission, scheduler, getOuterContext(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法调用registerReceiverInternal方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ContextImpl</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Intent <span class="title">registerReceiverInternal</span><span class="params">(BroadcastReceiver receiver, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">            IntentFilter filter, String broadcastPermission,</span></span></span><br><span class="line"><span class="function"><span class="params">            Handler scheduler, Context context, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        IIntentReceiver rd = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (receiver != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mPackageInfo != <span class="keyword">null</span> &amp;&amp; context != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (scheduler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    scheduler = mMainThread.getHandler();</span><br><span class="line">                &#125;</span><br><span class="line">                rd = mPackageInfo.getReceiverDispatcher(</span><br><span class="line">                    receiver, context, scheduler,</span><br><span class="line">                    mMainThread.getInstrumentation(), <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (scheduler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    scheduler = mMainThread.getHandler();</span><br><span class="line">                &#125;</span><br><span class="line">                rd = <span class="keyword">new</span> LoadedApk.ReceiverDispatcher(</span><br><span class="line">                        receiver, context, scheduler, <span class="keyword">null</span>, <span class="keyword">true</span>).getIIntentReceiver();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用AMS的registerReceiver方法</span></span><br><span class="line">            <span class="keyword">final</span> Intent intent = ActivityManager.getService().registerReceiver(</span><br><span class="line">                    mMainThread.getApplicationThread(), mBasePackageName, rd, filter,</span><br><span class="line">                    broadcastPermission, userId, flags);</span><br><span class="line">            <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                intent.setExtrasClassLoader(getClassLoader());</span><br><span class="line">                intent.prepareToEnterProcess();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> intent;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用AMS的registerReceiver方法，这里传入了LoadedAPK$ReceiverDispatcher类型的对象</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AMS</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">registerReceiver</span><span class="params">(IApplicationThread caller, String callerPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">            IIntentReceiver receiver, IntentFilter filter, String permission, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            ReceiverList rl = mRegisteredReceivers.get(receiver.asBinder());</span><br><span class="line">            <span class="keyword">if</span> (rl == <span class="keyword">null</span>) &#123;</span><br><span class="line">                rl = <span class="keyword">new</span> ReceiverList(<span class="keyword">this</span>, callerApp, callingPid, callingUid,</span><br><span class="line">                        userId, receiver);</span><br><span class="line">                <span class="keyword">if</span> (rl.app != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> totalReceiversForApp = rl.app.receivers.size();</span><br><span class="line">                    <span class="keyword">if</span> (totalReceiversForApp &gt;= MAX_RECEIVERS_ALLOWED_PER_APP) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Too many receivers, total of "</span></span><br><span class="line">                                + totalReceiversForApp + <span class="string">", registered for pid: "</span></span><br><span class="line">                                + rl.pid + <span class="string">", callerPackage: "</span> + callerPackage);</span><br><span class="line">                    &#125;</span><br><span class="line">                    rl.app.receivers.add(rl);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        receiver.asBinder().linkToDeath(rl, <span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                        <span class="keyword">return</span> sticky;</span><br><span class="line">                    &#125;</span><br><span class="line">                    rl.linkedToDeath = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mRegisteredReceivers.put(receiver.asBinder(), rl);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里将信息保存</p>
<h3 id="发送广播过程"><a href="#发送广播过程" class="headerlink" title="发送广播过程"></a>发送广播过程</h3><p>在ContextImpl中调用sendBroadcast方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ContextImpl</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBroadcast</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        warnIfCallingFromSystemProcess();</span><br><span class="line">        String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            intent.prepareToLeaveProcess(<span class="keyword">this</span>);</span><br><span class="line">            ActivityManager.getService().broadcastIntent(</span><br><span class="line">                    mMainThread.getApplicationThread(), intent, resolvedType, <span class="keyword">null</span>,</span><br><span class="line">                    Activity.RESULT_OK, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, AppOpsManager.OP_NONE, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,</span><br><span class="line">                    getUserId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法中调用AMS的broadcastIntent方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AMS</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">broadcastIntent</span><span class="params">(IApplicationThread caller,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, String resolvedType, IIntentReceiver resultTo,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> resultCode, String resultData, Bundle resultExtras,</span></span></span><br><span class="line"><span class="function"><span class="params">            String[] requiredPermissions, <span class="keyword">int</span> appOp, Bundle bOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> serialized, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        enforceNotIsolatedCaller(<span class="string">"broadcastIntent"</span>);</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            intent = verifyBroadcastLocked(intent);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> ProcessRecord callerApp = getRecordForAppLocked(caller);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">            <span class="keyword">int</span> res = broadcastIntentLocked(callerApp,</span><br><span class="line">                    callerApp != <span class="keyword">null</span> ? callerApp.info.packageName : <span class="keyword">null</span>,</span><br><span class="line">                    intent, resolvedType, resultTo, resultCode, resultData, resultExtras,</span><br><span class="line">                    requiredPermissions, appOp, bOptions, serialized, sticky,</span><br><span class="line">                    callingPid, callingUid, userId);</span><br><span class="line">            Binder.restoreCallingIdentity(origId);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法调用broadcastIntentLocked:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AMS</span></span><br><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"this"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">broadcastIntentLocked</span><span class="params">(ProcessRecord callerApp,</span></span></span><br><span class="line"><span class="function"><span class="params">            String callerPackage, Intent intent, String resolvedType,</span></span></span><br><span class="line"><span class="function"><span class="params">            IIntentReceiver resultTo, <span class="keyword">int</span> resultCode, String resultData,</span></span></span><br><span class="line"><span class="function"><span class="params">            Bundle resultExtras, String[] requiredPermissions, <span class="keyword">int</span> appOp, Bundle bOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    queue.scheduleBroadcastsLocked();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用BroadcastQueue的scheduleBroadcastsLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BroadcastQueue</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleBroadcastsLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, <span class="string">"Schedule broadcasts ["</span></span><br><span class="line">                + mQueueName + <span class="string">"]: current="</span></span><br><span class="line">                + mBroadcastsScheduled);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mBroadcastsScheduled) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mHandler.sendMessage(mHandler.obtainMessage(BROADCAST_INTENT_MSG, <span class="keyword">this</span>));</span><br><span class="line">        mBroadcastsScheduled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法里通过BroadcastHandler发送了一个BROADCAST_INTENT_MSG消息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BroadcastQueue</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BroadcastHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(looper, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> BROADCAST_INTENT_MSG: &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_BROADCAST) Slog.v(</span><br><span class="line">                            TAG_BROADCAST, <span class="string">"Received BROADCAST_INTENT_MSG"</span>);</span><br><span class="line">                    processNextBroadcast(<span class="keyword">true</span>);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在handleMessage方法中调用processNextBroadcast方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BroadcastQueue</span></span><br><span class="line"> <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processNextBroadcast</span><span class="params">(<span class="keyword">boolean</span> fromMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mService) &#123;</span><br><span class="line">            processNextBroadcastLocked(fromMsg, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法调用processNextBroadcastLocked方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BroadcastQueue</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processNextBroadcastLocked</span><span class="params">(<span class="keyword">boolean</span> fromMsg, <span class="keyword">boolean</span> skipOomAdj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">     setBroadcastTimeoutLocked(timeoutTime);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    deliverToRegisteredReceiverLocked(r, filter, r.ordered, recIdx);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    cancelBroadcastTimeoutLocked();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>首先调用setBroadcastTimeoutLocked方法来设置超时时间</p>
<p>BroadcastReceiver超时时间,前台广播10秒，后台广播60秒。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; How long we allow a receiver to run before giving up on it.</span><br><span class="line">static final int BROADCAST_FG_TIMEOUT &#x3D; 10*1000;</span><br><span class="line">static final int BROADCAST_BG_TIMEOUT &#x3D; 60*1000;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BroadcastQueue</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setBroadcastTimeoutLocked</span><span class="params">(<span class="keyword">long</span> timeoutTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! mPendingBroadcastTimeoutMessage) &#123;</span><br><span class="line">            Message msg = mHandler.obtainMessage(BROADCAST_TIMEOUT_MSG, <span class="keyword">this</span>);</span><br><span class="line">            mHandler.sendMessageAtTime(msg, timeoutTime);</span><br><span class="line">            mPendingBroadcastTimeoutMessage = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在handleMessage中,如果执行超时，则会回调</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">case</span> BROADCAST_TIMEOUT_MSG: &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (mService) &#123;</span><br><span class="line">                        broadcastTimeoutLocked(<span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>设置超时的部分，先看到这里。接下来看deliverToRegisteredReceiverLocked</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BroadcastQueue</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deliverToRegisteredReceiverLocked</span><span class="params">(BroadcastRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">            BroadcastFilter filter, <span class="keyword">boolean</span> ordered, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    performReceiveLocked(filter.receiverList.app, filter.receiverList.receiver,</span><br><span class="line">                        <span class="keyword">new</span> Intent(r.intent), r.resultCode, r.resultData,</span><br><span class="line">                        r.resultExtras, r.ordered, r.initialSticky, r.userId);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法会调用performReceiveLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BroadcastQueue</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">performReceiveLocked</span><span class="params">(ProcessRecord app, IIntentReceiver receiver,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, <span class="keyword">int</span> resultCode, String data, Bundle extras,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="comment">// Send the intent to the receiver asynchronously using one-way binder calls.</span></span><br><span class="line">        <span class="keyword">if</span> (app != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If we have an app thread, do the call through that so it is</span></span><br><span class="line">                <span class="comment">// correctly ordered with other one-way calls.</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    app.thread.scheduleRegisteredReceiver(receiver, intent, resultCode,</span><br><span class="line">                            data, extras, ordered, sticky, sendingUser, app.repProcState);</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> Uncomment this when (b/28322359) is fixed and we aren't getting</span></span><br><span class="line">                <span class="comment">// DeadObjectException when the process isn't actually dead.</span></span><br><span class="line">                <span class="comment">//&#125; catch (DeadObjectException ex) &#123;</span></span><br><span class="line">                <span class="comment">// Failed to call into the process.  It's dying so just let it die and move on.</span></span><br><span class="line">                <span class="comment">//    throw ex;</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                    <span class="comment">// Failed to call into the process. It's either dying or wedged. Kill it gently.</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (mService) &#123;</span><br><span class="line">                        Slog.w(TAG, <span class="string">"Can't deliver broadcast to "</span> + app.processName</span><br><span class="line">                                + <span class="string">" (pid "</span> + app.pid + <span class="string">"). Crashing it."</span>);</span><br><span class="line">                        app.scheduleCrash(<span class="string">"can't deliver broadcast"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Application has died. Receiver doesn't exist.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException(<span class="string">"app.thread must not be null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            receiver.performReceive(intent, resultCode, data, extras, ordered,</span><br><span class="line">                    sticky, sendingUser);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用Activity中的ApplicationThread的scheduleRegisteredReceiver方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActivityThread$ApplicationThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleRegisteredReceiver</span><span class="params">(IIntentReceiver receiver, Intent intent,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span> resultCode, String dataStr, Bundle extras, <span class="keyword">boolean</span> ordered,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser, <span class="keyword">int</span> processState)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            updateProcessState(processState, <span class="keyword">false</span>);</span><br><span class="line">            receiver.performReceive(intent, resultCode, dataStr, extras, ordered,</span><br><span class="line">                    sticky, sendingUser);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用BroadcastQueue的ReceiverDispatcher的InnerReceiver的performReceive方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BroadcastQueue$ReceiverDispatcher$InnerReceiver</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performReceive</span><span class="params">(Intent intent, <span class="keyword">int</span> resultCode, String data,</span></span></span><br><span class="line"><span class="function"><span class="params">                    Bundle extras, <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">final</span> LoadedApk.ReceiverDispatcher rd;</span><br><span class="line">                <span class="keyword">if</span> (intent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Log.wtf(TAG, <span class="string">"Null intent received"</span>);</span><br><span class="line">                    rd = <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    rd = mDispatcher.get();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ActivityThread.DEBUG_BROADCAST) &#123;</span><br><span class="line">                    <span class="keyword">int</span> seq = intent.getIntExtra(<span class="string">"seq"</span>, -<span class="number">1</span>);</span><br><span class="line">                    Slog.i(ActivityThread.TAG, <span class="string">"Receiving broadcast "</span> + intent.getAction()</span><br><span class="line">                            + <span class="string">" seq="</span> + seq + <span class="string">" to "</span> + (rd != <span class="keyword">null</span> ? rd.mReceiver : <span class="keyword">null</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (rd != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    rd.performReceive(intent, resultCode, data, extras,</span><br><span class="line">                            ordered, sticky, sendingUser);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// The activity manager dispatched a broadcast to a registered</span></span><br><span class="line">                    <span class="comment">// receiver in this process, but before it could be delivered the</span></span><br><span class="line">                    <span class="comment">// receiver was unregistered.  Acknowledge the broadcast on its</span></span><br><span class="line">                    <span class="comment">// behalf so that the system's broadcast sequence can continue.</span></span><br><span class="line">                    <span class="keyword">if</span> (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,</span><br><span class="line">                            <span class="string">"Finishing broadcast to unregistered receiver"</span>);</span><br><span class="line">                    IActivityManager mgr = ActivityManager.getService();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (extras != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            extras.setAllowFds(<span class="keyword">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        mgr.finishReceiver(<span class="keyword">this</span>, resultCode, data, extras, <span class="keyword">false</span>, intent.getFlags());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用BroadcastQueue的ReceiverDispatcher的performReceive方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BroadcastQueue$ReceiverDispatcher</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performReceive</span><span class="params">(Intent intent, <span class="keyword">int</span> resultCode, String data,</span></span></span><br><span class="line"><span class="function"><span class="params">                Bundle extras, <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Args args = <span class="keyword">new</span> Args(intent, resultCode, data, extras, ordered,</span><br><span class="line">                    sticky, sendingUser);</span><br><span class="line">            <span class="keyword">if</span> (intent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Log.wtf(TAG, <span class="string">"Null intent received"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ActivityThread.DEBUG_BROADCAST) &#123;</span><br><span class="line">                    <span class="keyword">int</span> seq = intent.getIntExtra(<span class="string">"seq"</span>, -<span class="number">1</span>);</span><br><span class="line">                    Slog.i(ActivityThread.TAG, <span class="string">"Enqueueing broadcast "</span> + intent.getAction()</span><br><span class="line">                            + <span class="string">" seq="</span> + seq + <span class="string">" to "</span> + mReceiver);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (intent == <span class="keyword">null</span> || !mActivityThread.post(args.getRunnable())) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mRegistered &amp;&amp; ordered) &#123;</span><br><span class="line">                    IActivityManager mgr = ActivityManager.getService();</span><br><span class="line">                    <span class="keyword">if</span> (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,</span><br><span class="line">                            <span class="string">"Finishing sync broadcast to "</span> + mReceiver);</span><br><span class="line">                    args.sendFinished(mgr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>
<p>这里调用了ReceiverDispatcher的Handler类型的mActivityThread的post方法，将一个runnable发送出去。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Runnable <span class="title">getRunnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">                    <span class="comment">//...</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        ClassLoader cl = mReceiver.getClass().getClassLoader();</span><br><span class="line">                        intent.setExtrasClassLoader(cl);</span><br><span class="line">                        intent.prepareToEnterProcess();</span><br><span class="line">                        setExtrasClassLoader(cl);</span><br><span class="line">                        receiver.setPendingResult(<span class="keyword">this</span>);</span><br><span class="line">                        <span class="comment">//回调onReceive</span></span><br><span class="line">                        receiver.onReceive(mContext, intent);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (mRegistered &amp;&amp; ordered) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,</span><br><span class="line">                                    <span class="string">"Finishing failed broadcast to "</span> + mReceiver);</span><br><span class="line">                            sendFinished(mgr);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (mInstrumentation == <span class="keyword">null</span> ||</span><br><span class="line">                                !mInstrumentation.onException(mReceiver, e)) &#123;</span><br><span class="line">                            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                                    <span class="string">"Error receiving broadcast "</span> + intent</span><br><span class="line">                                            + <span class="string">" in "</span> + mReceiver, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (receiver.getPendingResult() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        finish();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里回调onReceive</p>
<p>接下来看cancelBroadcastTimeoutLocked</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BroadcastQueue</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">cancelBroadcastTimeoutLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mPendingBroadcastTimeoutMessage) &#123;</span><br><span class="line">            mHandler.removeMessages(BROADCAST_TIMEOUT_MSG, <span class="keyword">this</span>);</span><br><span class="line">            mPendingBroadcastTimeoutMessage = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>移除了超时检测的消息,ANR不会触发。</p>
<p>如果没有在规定时间完成，则会处理BROADCAST_TIMEOUT_MSG消息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BroadcastQueue$Handler</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">case</span> BROADCAST_TIMEOUT_MSG: &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (mService) &#123;</span><br><span class="line">                        broadcastTimeoutLocked(<span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用broadcastTimeoutLocked，触发ANR</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">broadcastTimeoutLocked</span><span class="params">(<span class="keyword">boolean</span> fromMsg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!debugging &amp;&amp; anrMessage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Post the ANR to the handler since we do not want to process ANRs while</span></span><br><span class="line">            <span class="comment">// potentially holding our lock.</span></span><br><span class="line">            mHandler.post(<span class="keyword">new</span> AppNotResponding(app, anrMessage));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>ANR</tag>
        <tag>BroadcastReceiver</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中ANR的触发机制-Service篇</title>
    <url>/2020/03/16/Android/Android%E4%B8%ADANR%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9C%BA%E5%88%B6-Service%E7%AF%87/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android中ANR的触发机制-Service篇"><a href="#Android中ANR的触发机制-Service篇" class="headerlink" title="Android中ANR的触发机制-Service篇"></a>Android中ANR的触发机制-Service篇</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ANR，即Application Not Responding，应用程序不响应。在Android系统中，对于事件的处理，都需要在一定的时间内完成，如果处理超时的话，就会触发ANR，弹出不响应的界面，让用户选择等待或是立即结束应用。ANR机制的简单流程：在事件发给应用处理前，会先发一个延时消息到系统的Looper中，如果应用在规定的时间内执行完成，则会移除掉延时消息。如果没有在规定时间内执行完，就会在处理延时消息中，触发ANR。</p>
<p>ANR主要场景：</p>
<ol>
<li><p>Service</p>
</li>
<li><p>BroadcastReceiver</p>
</li>
<li><p>ContentProvider</p>
</li>
<li><p>Input:包括输入和触摸</p>
</li>
</ol>
<h2 id="触发机制分析"><a href="#触发机制分析" class="headerlink" title="触发机制分析"></a>触发机制分析</h2><p>下面对Service进行源码分析，源码为Android9.0。</p>
<p>首先从Service的启动来分析。这里只分析startService的模式，bindService模式暂时不分析。</p>
<p>附一张时序图</p>
<p><a href="/images/Service%E7%9A%84ANR%E6%9C%BA%E5%88%B6.png" data-fancybox="group" data-caption="Service的ANR机制" class="fancybox"><img alt="Service的ANR机制" title="Service的ANR机制" data-src="/images/Service%E7%9A%84ANR%E6%9C%BA%E5%88%B6.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>不管是通过Activity的startService还是非Activity的Context中的startService,最终都是调用ContextWrapper的startService方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ContextWrapper</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(Intent service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBase.startService(service);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>mBase对应的具体Context类为ContextImpl。ContextImpl的startService方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ContextImpl</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(Intent service)</span> </span>&#123;</span><br><span class="line">        warnIfCallingFromSystemProcess();</span><br><span class="line">        <span class="keyword">return</span> startServiceCommon(service, <span class="keyword">false</span>, mUser);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>startService方法调用startServiceCommon方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ContextImpl</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ComponentName <span class="title">startServiceCommon</span><span class="params">(Intent service, <span class="keyword">boolean</span> requireForeground,</span></span></span><br><span class="line"><span class="function"><span class="params">            UserHandle user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            validateServiceIntent(service);</span><br><span class="line">            service.prepareToLeaveProcess(<span class="keyword">this</span>);</span><br><span class="line">            ComponentName cn = ActivityManager.getService().startService(</span><br><span class="line">                mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(</span><br><span class="line">                            getContentResolver()), requireForeground,</span><br><span class="line">                            getOpPackageName(), user.getIdentifier());</span><br><span class="line">            <span class="keyword">if</span> (cn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cn.getPackageName().equals(<span class="string">"!"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line">                            <span class="string">"Not allowed to start service "</span> + service</span><br><span class="line">                            + <span class="string">" without permission "</span> + cn.getClassName());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cn.getPackageName().equals(<span class="string">"!!"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line">                            <span class="string">"Unable to start service "</span> + service</span><br><span class="line">                            + <span class="string">": "</span> + cn.getClassName());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cn.getPackageName().equals(<span class="string">"?"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                            <span class="string">"Not allowed to start service "</span> + service + <span class="string">": "</span> + cn.getClassName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cn;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个方法里，跨进程调用AMS的startService方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AMS</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(IApplicationThread caller, Intent service,</span></span></span><br><span class="line"><span class="function"><span class="params">            String resolvedType, <span class="keyword">boolean</span> requireForeground, String callingPackage, <span class="keyword">int</span> userId)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line">        enforceNotIsolatedCaller(<span class="string">"startService"</span>);</span><br><span class="line">        <span class="comment">// Refuse possible leaked file descriptors</span></span><br><span class="line">        <span class="keyword">if</span> (service != <span class="keyword">null</span> &amp;&amp; service.hasFileDescriptors() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"File descriptors passed in Intent"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (callingPackage == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"callingPackage cannot be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE,</span><br><span class="line">                <span class="string">"*** startService: "</span> + service + <span class="string">" type="</span> + resolvedType + <span class="string">" fg="</span> + requireForeground);</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">            ComponentName res;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//调用ActiveServices的startServiceLocked方法</span></span><br><span class="line">                res = mServices.startServiceLocked(caller, service,</span><br><span class="line">                        resolvedType, callingPid, callingUid,</span><br><span class="line">                        requireForeground, callingPackage, userId);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                Binder.restoreCallingIdentity(origId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>AMS中调用ActiveServices的startServiceLocked方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActiveServices</span></span><br><span class="line"><span class="function">ComponentName <span class="title">startServiceLocked</span><span class="params">(IApplicationThread caller, Intent service, String resolvedType,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid, <span class="keyword">boolean</span> fgRequired, String callingPackage, <span class="keyword">final</span> <span class="keyword">int</span> userId)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        ComponentName cmp = startServiceInnerLocked(smap, service, r, callerFg, addToStarting);</span><br><span class="line">        <span class="keyword">return</span> cmp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法又调用了startServiceInnerLocked方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActiveServices</span></span><br><span class="line"><span class="function">ComponentName <span class="title">startServiceInnerLocked</span><span class="params">(ServiceMap smap, Intent service, ServiceRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> callerFg, <span class="keyword">boolean</span> addToStarting)</span> <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        String error = bringUpServiceLocked(r, service.getFlags(), callerFg, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (error != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ComponentName(<span class="string">"!!"</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法调用bringUpServiceLocked方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActiveServices</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">bringUpServiceLocked</span><span class="params">(ServiceRecord r, <span class="keyword">int</span> intentFlags, <span class="keyword">boolean</span> execInFg,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> whileRestarting, <span class="keyword">boolean</span> permissionsReviewRequired)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        realStartServiceLocked(r, app, execInFg);</span><br><span class="line">        <span class="comment">//...      </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法里调用realStartServiceLocked方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActiveServices</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">realStartServiceLocked</span><span class="params">(ServiceRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">            ProcessRecord app, <span class="keyword">boolean</span> execInFg)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        bumpServiceExecutingLocked(r, execInFg, <span class="string">"create"</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        app.thread.scheduleCreateService(r, r.serviceInfo,</span><br><span class="line">                    mAm.compatibilityInfoForPackageLocked(r.serviceInfo.applicationInfo),</span><br><span class="line">                    app.repProcState);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这里先调用了bumpServiceExecutingLocked方法用来设置超时消息:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActiveServices</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">bumpServiceExecutingLocked</span><span class="params">(ServiceRecord r, <span class="keyword">boolean</span> fg, String why)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"&gt;&gt;&gt; EXECUTING "</span></span><br><span class="line">                + why + <span class="string">" of "</span> + r + <span class="string">" in app "</span> + r.app);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (DEBUG_SERVICE_EXECUTING) Slog.v(TAG_SERVICE_EXECUTING, <span class="string">"&gt;&gt;&gt; EXECUTING "</span></span><br><span class="line">                + why + <span class="string">" of "</span> + r.shortName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// For b/34123235: Services within the system server won't start until SystemServer</span></span><br><span class="line">        <span class="comment">// does Looper.loop(), so we shouldn't try to start/bind to them too early in the boot</span></span><br><span class="line">        <span class="comment">// process. However, since there's a little point of showing the ANR dialog in that case,</span></span><br><span class="line">        <span class="comment">// let's suppress the timeout until PHASE_THIRD_PARTY_APPS_CAN_START.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// (Note there are multiple services start at PHASE_THIRD_PARTY_APPS_CAN_START too,</span></span><br><span class="line">        <span class="comment">// which technically could also trigger this timeout if there's a system server</span></span><br><span class="line">        <span class="comment">// that takes a long time to handle PHASE_THIRD_PARTY_APPS_CAN_START, but that shouldn't</span></span><br><span class="line">        <span class="comment">// happen.)</span></span><br><span class="line">        <span class="keyword">boolean</span> timeoutNeeded = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> ((mAm.mBootPhase &lt; SystemService.PHASE_THIRD_PARTY_APPS_CAN_START)</span><br><span class="line">                &amp;&amp; (r.app != <span class="keyword">null</span>) &amp;&amp; (r.app.pid == android.os.Process.myPid())) &#123;</span><br><span class="line"></span><br><span class="line">            Slog.w(TAG, <span class="string">"Too early to start/bind service in system_server: Phase="</span> + mAm.mBootPhase</span><br><span class="line">                    + <span class="string">" "</span> + r.getComponentName());</span><br><span class="line">            timeoutNeeded = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (r.executeNesting == <span class="number">0</span>) &#123;</span><br><span class="line">            r.executeFg = fg;</span><br><span class="line">            ServiceState stracker = r.getTracker();</span><br><span class="line">            <span class="keyword">if</span> (stracker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stracker.setExecuting(<span class="keyword">true</span>, mAm.mProcessStats.getMemFactorLocked(), now);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r.app != <span class="keyword">null</span>) &#123;</span><br><span class="line">                r.app.executingServices.add(r);</span><br><span class="line">                r.app.execServicesFg |= fg;</span><br><span class="line">                <span class="keyword">if</span> (timeoutNeeded &amp;&amp; r.app.executingServices.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                    scheduleServiceTimeoutLocked(r.app);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.app != <span class="keyword">null</span> &amp;&amp; fg &amp;&amp; !r.app.execServicesFg) &#123;</span><br><span class="line">            r.app.execServicesFg = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (timeoutNeeded) &#123;</span><br><span class="line">                scheduleServiceTimeoutLocked(r.app);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        r.executeFg |= fg;</span><br><span class="line">        r.executeNesting++;</span><br><span class="line">        r.executingStart = now;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法中调用scheduleServiceTimeoutLocked方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActiveServices</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheduleServiceTimeoutLocked</span><span class="params">(ProcessRecord proc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (proc.executingServices.size() == <span class="number">0</span> || proc.thread == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Message msg = mAm.mHandler.obtainMessage(</span><br><span class="line">                ActivityManagerService.SERVICE_TIMEOUT_MSG);</span><br><span class="line">        msg.obj = proc;</span><br><span class="line">        mAm.mHandler.sendMessageDelayed(msg,</span><br><span class="line">                proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用ActivityManagerService的MainHandler发送一个SERVICE_TIMEOUT消息，这里具体根据是否为前台消息发送的消息不同。</p>
<p>前台服务超时时间：20s,后台服务超时时间:200s</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// How long we wait for a service to finish executing.</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVICE_TIMEOUT = <span class="number">20</span>*<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// How long we wait for a service to finish executing.</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVICE_BACKGROUND_TIMEOUT = SERVICE_TIMEOUT * <span class="number">10</span>;</span><br></pre></td></tr></table></figure></div>

<p>设置超时消息就先看到这里，接着看启动Service</p>
<p>调用ProcessRecord中的IApplicationThread类型的thread属性的scheduleCreateService方法，即调用到了ActivityThread的内部类ApplicationThread的scheduleCreateService方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActivityThread$ApplicationThrad</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleCreateService</span><span class="params">(IBinder token,</span></span></span><br><span class="line"><span class="function"><span class="params">                ServiceInfo info, CompatibilityInfo compatInfo, <span class="keyword">int</span> processState)</span> </span>&#123;</span><br><span class="line">            updateProcessState(processState, <span class="keyword">false</span>);</span><br><span class="line">            CreateServiceData s = <span class="keyword">new</span> CreateServiceData();</span><br><span class="line">            s.token = token;</span><br><span class="line">            s.info = info;</span><br><span class="line">            s.compatInfo = compatInfo;</span><br><span class="line"></span><br><span class="line">            sendMessage(H.CREATE_SERVICE, s);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法里调用了ActivityThread的sendMessage方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActivityThread</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="keyword">int</span> what, Object obj)</span> </span>&#123;</span><br><span class="line">        sendMessage(what, obj, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>最终通过Handler发送了一个消息出去</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Handler</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="keyword">int</span> what, Object obj, <span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(</span><br><span class="line">            TAG, <span class="string">"SCHEDULE "</span> + what + <span class="string">" "</span> + mH.codeToString(what)</span><br><span class="line">            + <span class="string">": "</span> + arg1 + <span class="string">" / "</span> + obj);</span><br><span class="line">        Message msg = Message.obtain();</span><br><span class="line">        msg.what = what;</span><br><span class="line">        msg.obj = obj;</span><br><span class="line">        msg.arg1 = arg1;</span><br><span class="line">        msg.arg2 = arg2;</span><br><span class="line">        <span class="keyword">if</span> (async) &#123;</span><br><span class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mH.sendMessage(msg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在mH的handleMessage中回调处理:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActivityThread$H.handleMessage</span></span><br><span class="line"><span class="keyword">case</span> CREATE_SERVICE:</span><br><span class="line">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, (<span class="string">"serviceCreate: "</span> + String.valueOf(msg.obj)));</span><br><span class="line">                    handleCreateService((CreateServiceData)msg.obj);</span><br><span class="line">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActivityThread</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCreateService</span><span class="params">(CreateServiceData data)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If we are getting ready to gc after going to the background, well</span></span><br><span class="line">        <span class="comment">// we are back active so skip it.</span></span><br><span class="line">        unscheduleGcIdler();</span><br><span class="line"></span><br><span class="line">        LoadedApk packageInfo = getPackageInfoNoCheck(</span><br><span class="line">                data.info.applicationInfo, data.compatInfo);</span><br><span class="line">        Service service = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.ClassLoader cl = packageInfo.getClassLoader();</span><br><span class="line">            service = packageInfo.getAppFactory()</span><br><span class="line">                    .instantiateService(cl, data.info.name, data.intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(service, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to instantiate service "</span> + data.info.name</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (localLOGV) Slog.v(TAG, <span class="string">"Creating service "</span> + data.info.name);</span><br><span class="line"></span><br><span class="line">            ContextImpl context = ContextImpl.createAppContext(<span class="keyword">this</span>, packageInfo);</span><br><span class="line">            context.setOuterContext(service);</span><br><span class="line"></span><br><span class="line">            Application app = packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line">            service.attach(context, <span class="keyword">this</span>, data.info.name, data.token, app,</span><br><span class="line">                    ActivityManager.getService());</span><br><span class="line">            <span class="comment">//完成Service的创建，并回调onCreate方法</span></span><br><span class="line">            service.onCreate();</span><br><span class="line">            mServices.put(data.token, service);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//通知移除延时消息</span></span><br><span class="line">                ActivityManager.getService().serviceDoneExecuting(</span><br><span class="line">                        data.token, SERVICE_DONE_EXECUTING_ANON, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(service, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to create service "</span> + data.info.name</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>如果在规定的时间内完成处理，则会调用AMS的serviceDoneExecuting:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AMS</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceDoneExecuting</span><span class="params">(IBinder token, <span class="keyword">int</span> type, <span class="keyword">int</span> startId, <span class="keyword">int</span> res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(token <span class="keyword">instanceof</span> ServiceRecord)) &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">"serviceDoneExecuting: Invalid service token="</span> + token);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid service token"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mServices.serviceDoneExecutingLocked((ServiceRecord)token, type, startId, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法调用ActiveServices中的serviceDoneExecutingLocked方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActiveServices</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">serviceDoneExecutingLocked</span><span class="params">(ServiceRecord r, <span class="keyword">int</span> type, <span class="keyword">int</span> startId, <span class="keyword">int</span> res)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        serviceDoneExecutingLocked(r, inDestroying, inDestroying);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法会调用另一个重载方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActiveServices</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">serviceDoneExecutingLocked</span><span class="params">(ServiceRecord r, <span class="keyword">boolean</span> inDestroying,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> finishing)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mAm.mHandler.removeMessages(ActivityManagerService.SERVICE_TIMEOUT_MSG, r.app);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个方法里移除了前面的延时消息，就不会触发ANR。</p>
<p>如果没有及时移除这个消息，那么将会在ActivityManagerService的MainHandler中触发:</p>
<p>MainHandler收到消息的处理:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ActivityManagerService$MainHandler.handleMessage</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">case</span> SERVICE_TIMEOUT_MSG: &#123;</span><br><span class="line">                    mServices.serviceTimeout((ProcessRecord)msg.obj);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法调用ActiveServices中的serviceTimeout方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">serviceTimeout</span><span class="params">(ProcessRecord proc)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">if</span> (anrMessage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mAm.mAppErrors.appNotResponding(proc, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>, anrMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里弹出了不响应的界面。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>ANR</tag>
        <tag>Service</tag>
      </tags>
  </entry>
  <entry>
    <title>Application中以标准模式启动Activity报错的原因分析</title>
    <url>/2020/03/11/Android/Application%E4%B8%AD%E4%BB%A5%E6%A0%87%E5%87%86%E6%A8%A1%E5%BC%8F%E5%90%AF%E5%8A%A8Activity%E6%8A%A5%E9%94%99%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Application中以标准模式启动Activity报错的原因分析"><a href="#Application中以标准模式启动Activity报错的原因分析" class="headerlink" title="Application中以标准模式启动Activity报错的原因分析"></a>Application中以标准模式启动Activity报错的原因分析</h1><p>在<code>Android</code>中，启动的<code>Activity</code>都会运行在相应的任务栈中。如果直接在<code>Application</code>中以<code>标准模式</code>启动Activity，则会报出以下错误(Android7、Android8除外，后面会分析)：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</span><br><span class="line">at android.app.ContextImpl.startActivity(ContextImpl.java:912)</span><br><span class="line">at android.app.ContextImpl.startActivity(ContextImpl.java:888)</span><br><span class="line">at android.content.ContextWrapper.startActivity(ContextWrapper.java:379)</span><br></pre></td></tr></table></figure></div>

<p>错误信息提示需要<code>FLAG_ACTIVITY_NEW_TASK</code>的Flag.</p>
<p>在Activity中调用<code>getApplication()</code>或者<code>getApplicationContext()</code>，最终获取到的都是Application，那么<code>getApplication().startActivity()</code>或者<code>getApplicationContext().startActivity()</code>方法都在Application中</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        mBase.startActivity(intent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在Application的startActivity方法里，又通过<code>mBase</code>来调用startActivity,而mBase就是<code>ContextImpl</code>。ContextImpl的startActivity方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        warnIfCallingFromSystemProcess();</span><br><span class="line">        startActivity(intent, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法里调用了另一个重载方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Android6</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, Bundle options)</span> </span>&#123;</span><br><span class="line">        warnIfCallingFromSystemProcess();</span><br><span class="line">        <span class="keyword">if</span> ((intent.getFlags()&amp;Intent.FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(</span><br><span class="line">                    <span class="string">"Calling startActivity() from outside of an Activity "</span></span><br><span class="line">                    + <span class="string">" context requires the FLAG_ACTIVITY_NEW_TASK flag."</span></span><br><span class="line">                    + <span class="string">" Is this really what you want?"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mMainThread.getInstrumentation().execStartActivity(</span><br><span class="line">                getOuterContext(), mMainThread.getApplicationThread(), <span class="keyword">null</span>,</span><br><span class="line">                (Activity) <span class="keyword">null</span>, intent, -<span class="number">1</span>, options);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>Android6中，在这个方法里，看到了前面抛出的异常提示。在这里判断了，如果没有加<code>FLAG_ACTIVITY_NEW_TASK</code>的Flag,就会抛出异常。</p>
<p>再来看Android7中的方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, Bundle options)</span> </span>&#123;</span><br><span class="line">        warnIfCallingFromSystemProcess();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calling start activity from outside an activity without FLAG_ACTIVITY_NEW_TASK is</span></span><br><span class="line">        <span class="comment">// generally not allowed, except if the caller specifies the task id the activity should</span></span><br><span class="line">        <span class="comment">// be launched in.</span></span><br><span class="line">        <span class="keyword">if</span> ((intent.getFlags()&amp;Intent.FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span></span><br><span class="line">                &amp;&amp; options != <span class="keyword">null</span> &amp;&amp; ActivityOptions.fromBundle(options).getLaunchTaskId() == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(</span><br><span class="line">                    <span class="string">"Calling startActivity() from outside of an Activity "</span></span><br><span class="line">                    + <span class="string">" context requires the FLAG_ACTIVITY_NEW_TASK flag."</span></span><br><span class="line">                    + <span class="string">" Is this really what you want?"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mMainThread.getInstrumentation().execStartActivity(</span><br><span class="line">                getOuterContext(), mMainThread.getApplicationThread(), <span class="keyword">null</span>,</span><br><span class="line">                (Activity) <span class="keyword">null</span>, intent, -<span class="number">1</span>, options);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，在Android7中，相对Android6,抛出异常还需要符合其它的几个条件。而从前面Application的startActivity方法来看，Bundle类型的options参数为null,所以这个条件不成立，不会抛出异常。</p>
<p>再来看Android8中的方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, Bundle options)</span> </span>&#123;</span><br><span class="line">       warnIfCallingFromSystemProcess();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Calling start activity from outside an activity without FLAG_ACTIVITY_NEW_TASK is</span></span><br><span class="line">       <span class="comment">// generally not allowed, except if the caller specifies the task id the activity should</span></span><br><span class="line">       <span class="comment">// be launched in.</span></span><br><span class="line">       <span class="keyword">if</span> ((intent.getFlags()&amp;Intent.FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span></span><br><span class="line">               &amp;&amp; options != <span class="keyword">null</span> &amp;&amp; ActivityOptions.fromBundle(options).getLaunchTaskId() == -<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(</span><br><span class="line">                   <span class="string">"Calling startActivity() from outside of an Activity "</span></span><br><span class="line">                   + <span class="string">" context requires the FLAG_ACTIVITY_NEW_TASK flag."</span></span><br><span class="line">                   + <span class="string">" Is this really what you want?"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       mMainThread.getInstrumentation().execStartActivity(</span><br><span class="line">               getOuterContext(), mMainThread.getApplicationThread(), <span class="keyword">null</span>,</span><br><span class="line">               (Activity) <span class="keyword">null</span>, intent, -<span class="number">1</span>, options);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>和Android7一样，也判断了options，由于options为null,因此条件不成立，也不会抛出异常。</p>
<p>再来看下Android9中的方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, Bundle options)</span> </span>&#123;</span><br><span class="line">        warnIfCallingFromSystemProcess();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calling start activity from outside an activity without FLAG_ACTIVITY_NEW_TASK is</span></span><br><span class="line">        <span class="comment">// generally not allowed, except if the caller specifies the task id the activity should</span></span><br><span class="line">        <span class="comment">// be launched in. A bug was existed between N and O-MR1 which allowed this to work. We</span></span><br><span class="line">        <span class="comment">// maintain this for backwards compatibility.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> targetSdkVersion = getApplicationInfo().targetSdkVersion;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((intent.getFlags() &amp; Intent.FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span></span><br><span class="line">                &amp;&amp; (targetSdkVersion &lt; Build.VERSION_CODES.N</span><br><span class="line">                        || targetSdkVersion &gt;= Build.VERSION_CODES.P)</span><br><span class="line">                &amp;&amp; (options == <span class="keyword">null</span></span><br><span class="line">                        || ActivityOptions.fromBundle(options).getLaunchTaskId() == -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(</span><br><span class="line">                    <span class="string">"Calling startActivity() from outside of an Activity "</span></span><br><span class="line">                            + <span class="string">" context requires the FLAG_ACTIVITY_NEW_TASK flag."</span></span><br><span class="line">                            + <span class="string">" Is this really what you want?"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mMainThread.getInstrumentation().execStartActivity(</span><br><span class="line">                getOuterContext(), mMainThread.getApplicationThread(), <span class="keyword">null</span>,</span><br><span class="line">                (Activity) <span class="keyword">null</span>, intent, -<span class="number">1</span>, options);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在Android9中，对于options==null用了||判断，那么ActivityOptions.fromBundle(options).getLaunchTaskId() == -1，条件还是会成立，还是会抛出异常。</p>
<p>可以看到，在Android7和Android8中，可以在Application中直接启动Activity,而不需要增加FLAG_ACTIVITY_NEW_TASK的Flag。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中插件化的简单实现：启动未注册的Activity</title>
    <url>/2020/03/10/Android/Android%E4%B8%AD%E6%8F%92%E4%BB%B6%E5%8C%96%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%EF%BC%9A%E5%90%AF%E5%8A%A8%E6%9C%AA%E6%B3%A8%E5%86%8C%E7%9A%84Activity/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android中插件化的简单实现：启动未注册的Activity"><a href="#Android中插件化的简单实现：启动未注册的Activity" class="headerlink" title="Android中插件化的简单实现：启动未注册的Activity"></a>Android中插件化的简单实现：启动未注册的Activity</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文介绍在Android中启动未在AndroidManifest中注册的Activity的一个解决方案。主要需要掌握以下知识点：</p>
<ol>
<li><p>反射</p>
</li>
<li><p>类加载</p>
</li>
<li><p>Activity的启动过程</p>
</li>
<li><p>Resource加载过程</p>
</li>
</ol>
<h2 id="启动应用内未注册的Activity"><a href="#启动应用内未注册的Activity" class="headerlink" title="启动应用内未注册的Activity"></a>启动应用内未注册的Activity</h2><p>Activity默认都需要在AndroidManifest中注册，未注册的应用无法启动。AMS在启动应用时，会检测是否已经注册。因此，如果想要启动未注册的Activity,那么需要在Activity前，替换启动应用的Intent为已经注册过的Activity,因此可以新建一个Activity，用于占位。在检测通过后，真正启动Activity前再替换回需要启动的未注册的Activity。</p>
<h3 id="获取替换Intent的Hook点"><a href="#获取替换Intent的Hook点" class="headerlink" title="获取替换Intent的Hook点"></a>获取替换Intent的Hook点</h3><p>调用startActivity方法后，最后都会在Instrumentation的execStartActivity方法中调用AMS的远程方法进行处理。Android6.0及以下和Android6.0以上，在execStartActivity中调用AMS的方法有所不同，因此需要做兼容处理。</p>
<h4 id="6-0"><a href="#6-0" class="headerlink" title="6.0"></a>6.0</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Context who, IBinder contextThread, IBinder token, Activity target,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, <span class="keyword">int</span> requestCode, Bundle options)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">int</span> result = ActivityManagerNative.getDefault()</span><br><span class="line">                .startActivity(whoThread, who.getBasePackageName(), intent,</span><br><span class="line">                        intent.resolveTypeIfNeeded(who.getContentResolver()),</span><br><span class="line">                        token, target != <span class="keyword">null</span> ? target.mEmbeddedID : <span class="keyword">null</span>,</span><br><span class="line">                        requestCode, <span class="number">0</span>, <span class="keyword">null</span>, options);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>通过调用ActivityManagerNative.getDefault()来获取AMS。</p>
<h4 id="8-0"><a href="#8-0" class="headerlink" title="8.0"></a>8.0</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Context who, IBinder contextThread, IBinder token, Activity target,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, <span class="keyword">int</span> requestCode, Bundle options)</span> </span>&#123;</span><br><span class="line">        IApplicationThread whoThread = (IApplicationThread) contextThread;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">int</span> result = ActivityManager.getService()</span><br><span class="line">                .startActivity(whoThread, who.getBasePackageName(), intent,</span><br><span class="line">                        intent.resolveTypeIfNeeded(who.getContentResolver()),</span><br><span class="line">                        token, target != <span class="keyword">null</span> ? target.mEmbeddedID : <span class="keyword">null</span>,</span><br><span class="line">                        requestCode, <span class="number">0</span>, <span class="keyword">null</span>, options);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>通过调用ActivityManager.getService()来获取AMS。</p>
<h3 id="替换Intent"><a href="#替换Intent" class="headerlink" title="替换Intent"></a>替换Intent</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookAMS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field singletonField;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">                singletonField = getField(Class.forName(<span class="string">"android.app.ActivityManager"</span>), <span class="string">"IActivityManagerSingleton"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                singletonField = getField(Class.forName(<span class="string">"android.app.ActivityManagerNative"</span>), <span class="string">"gDefault"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Object singleton = singletonField.get(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            Field mInstanceField = getField(Class.forName(<span class="string">"android.util.Singleton"</span>), <span class="string">"mInstance"</span>);</span><br><span class="line">            <span class="keyword">final</span> Object mInstance = mInstanceField.get(singleton);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Object proxyInstance = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), <span class="keyword">new</span> Class[]&#123;Class.forName(<span class="string">"android.app.IActivityManager"</span>)&#125;, <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"startActivity"</span>.equals(method.getName())) &#123;</span><br><span class="line">                        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (args[i] <span class="keyword">instanceof</span> Intent) &#123;</span><br><span class="line">                                index = i;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        Intent intent = (Intent) args[index];</span><br><span class="line"></span><br><span class="line">                        Intent proxyIntent = <span class="keyword">new</span> Intent(intent);</span><br><span class="line">                        <span class="comment">//占位的Activity</span></span><br><span class="line">                        proxyIntent.setClassName(<span class="string">"com.wangyz.plugindemo"</span>, <span class="string">"com.wangyz.plugindemo.ProxyActivity"</span>);</span><br><span class="line">                        proxyIntent.putExtra(<span class="string">"target_intent"</span>, intent);</span><br><span class="line"></span><br><span class="line">                        args[index] = proxyIntent;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> method.invoke(mInstance, args);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            mInstanceField.set(singleton, proxyInstance);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="获取还原Intent的Hook点"><a href="#获取还原Intent的Hook点" class="headerlink" title="获取还原Intent的Hook点"></a>获取还原Intent的Hook点</h3><h4 id="Android8-0及以下"><a href="#Android8-0及以下" class="headerlink" title="Android8.0及以下"></a>Android8.0及以下</h4><p>启动Activity的消息，会回调到ActivityThread中的mH的dispatchMessage方法，可以通过给mH设置一个callBack,在callBack的handleMessage中，然后替换回真正要启动的Intent，然后返回false,让handleMessage再继续处理。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handleCallback(msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>Android8.0及以下，在ActivityThread的mH中的handleMessage方法中，会处理LAUNCH_ACTIVITY类型的消息，在这里调用了handleLaunchActivity方法来启动Activity。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> LAUNCH_ACTIVITY: &#123;</span><br><span class="line">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</span><br><span class="line">                    <span class="keyword">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</span><br><span class="line"></span><br><span class="line">                    r.packageInfo = getPackageInfoNoCheck(</span><br><span class="line">                            r.activityInfo.applicationInfo, r.compatInfo);</span><br><span class="line">                    handleLaunchActivity(r, <span class="keyword">null</span>);</span><br><span class="line">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>

<h4 id="Android9-0"><a href="#Android9-0" class="headerlink" title="Android9.0"></a>Android9.0</h4><p>和8.0一样，设置callBack，然后修改Intent。</p>
<p>在ActivityThread的mH中的handleMessage方法中，会处理EXECUTE_TRANSACTION类型的消息，在这里调用了TransactionExecutor.execute方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> EXECUTE_TRANSACTION:</span><br><span class="line">                    <span class="keyword">final</span> ClientTransaction transaction = (ClientTransaction) msg.obj;</span><br><span class="line">                    mTransactionExecutor.execute(transaction);</span><br><span class="line">                    <span class="keyword">if</span> (isSystem()) &#123;</span><br><span class="line">                        <span class="comment">// Client transactions inside system process are recycled on the client side</span></span><br><span class="line">                        <span class="comment">// instead of ClientLifecycleManager to avoid being cleared before this</span></span><br><span class="line">                        <span class="comment">// message is handled.</span></span><br><span class="line">                        transaction.recycle();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// TODO(lifecycler): Recycle locally scheduled transactions.</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>

<p>execute方法中会调用executeCallbacks</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ClientTransaction transaction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> IBinder token = transaction.getActivityToken();</span><br><span class="line">        log(<span class="string">"Start resolving transaction for client: "</span> + mTransactionHandler + <span class="string">", token: "</span> + token);</span><br><span class="line"></span><br><span class="line">        executeCallbacks(transaction);</span><br><span class="line"></span><br><span class="line">        executeLifecycleState(transaction);</span><br><span class="line">        mPendingActions.clear();</span><br><span class="line">        log(<span class="string">"End resolving transaction"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeCallbacks</span><span class="params">(ClientTransaction transaction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;ClientTransactionItem&gt; callbacks = transaction.getCallbacks();</span><br><span class="line">        <span class="keyword">if</span> (callbacks == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No callbacks to execute, return early.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log(<span class="string">"Resolving callbacks"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> IBinder token = transaction.getActivityToken();</span><br><span class="line">        ActivityClientRecord r = mTransactionHandler.getActivityClient(token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In case when post-execution state of the last callback matches the final state requested</span></span><br><span class="line">        <span class="comment">// for the activity in this transaction, we won't do the last transition here and do it when</span></span><br><span class="line">        <span class="comment">// moving to final state instead (because it may contain additional parameters from server).</span></span><br><span class="line">        <span class="keyword">final</span> ActivityLifecycleItem finalStateRequest = transaction.getLifecycleStateRequest();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> finalState = finalStateRequest != <span class="keyword">null</span> ? finalStateRequest.getTargetState()</span><br><span class="line">                : UNDEFINED;</span><br><span class="line">        <span class="comment">// Index of the last callback that requests some post-execution state.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> lastCallbackRequestingState = lastCallbackRequestingState(transaction);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = callbacks.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            <span class="keyword">final</span> ClientTransactionItem item = callbacks.get(i);</span><br><span class="line">            log(<span class="string">"Resolving callback: "</span> + item);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> postExecutionState = item.getPostExecutionState();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> closestPreExecutionState = mHelper.getClosestPreExecutionState(r,</span><br><span class="line">                    item.getPostExecutionState());</span><br><span class="line">            <span class="keyword">if</span> (closestPreExecutionState != UNDEFINED) &#123;</span><br><span class="line">                cycleToPath(r, closestPreExecutionState);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            item.execute(mTransactionHandler, token, mPendingActions);</span><br><span class="line">            item.postExecute(mTransactionHandler, token, mPendingActions);</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Launch activity request will create an activity record.</span></span><br><span class="line">                r = mTransactionHandler.getActivityClient(token);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (postExecutionState != UNDEFINED &amp;&amp; r != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Skip the very last transition and perform it by explicit state request instead.</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> shouldExcludeLastTransition =</span><br><span class="line">                        i == lastCallbackRequestingState &amp;&amp; finalState == postExecutionState;</span><br><span class="line">                cycleToPath(r, postExecutionState, shouldExcludeLastTransition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个方法里会调用ClientTransactionItem的execute方法。ClientTransactionItem是在ActivityStackSupervisor中的realStartActivityLocked中添加的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">realStartActivityLocked</span><span class="params">(ActivityRecord r, ProcessRecord app,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">                <span class="comment">// Create activity launch transaction.</span></span><br><span class="line">                <span class="keyword">final</span> ClientTransaction clientTransaction = ClientTransaction.obtain(app.thread,</span><br><span class="line">                        r.appToken);</span><br><span class="line">                clientTransaction.addCallback(LaunchActivityItem.obtain(<span class="keyword">new</span> Intent(r.intent),</span><br><span class="line">                        System.identityHashCode(r), r.info,</span><br><span class="line">                        <span class="comment">// <span class="doctag">TODO:</span> Have this take the merged configuration instead of separate global</span></span><br><span class="line">                        <span class="comment">// and override configs.</span></span><br><span class="line">                        mergedConfiguration.getGlobalConfiguration(),</span><br><span class="line">                        mergedConfiguration.getOverrideConfiguration(), r.compat,</span><br><span class="line">                        r.launchedFromPackage, task.voiceInteractor, app.repProcState, r.icicle,</span><br><span class="line">                        r.persistentState, results, newIntents, mService.isNextTransitionForward(),</span><br><span class="line">                        profilerInfo));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<p>因此，ClientTransactionItem对应的具体类为LaunchActivityItem，它对应的execute方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ClientTransactionHandler client, IBinder token,</span></span></span><br><span class="line"><span class="function"><span class="params">            PendingTransactionActions pendingActions)</span> </span>&#123;</span><br><span class="line">        Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</span><br><span class="line">        ActivityClientRecord r = <span class="keyword">new</span> ActivityClientRecord(token, mIntent, mIdent, mInfo,</span><br><span class="line">                mOverrideConfig, mCompatInfo, mReferrer, mVoiceInteractor, mState, mPersistentState,</span><br><span class="line">                mPendingResults, mPendingNewIntents, mIsForward,</span><br><span class="line">                mProfilerInfo, client);</span><br><span class="line">        client.handleLaunchActivity(r, pendingActions, <span class="keyword">null</span> <span class="comment">/* customIntent */</span>);</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在它的方法里又调用了ClientTransactionHandler的handleLaunchActivity,而ClientTransactionHandler就是在ActivityThread中定义的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TransactionExecutor mTransactionExecutor = <span class="keyword">new</span> TransactionExecutor(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></div>

<p>ActivityThread继承了ClientTransactionHandler，那么它就会实现handleLaunchActivity。最终在这个方法里启动Activity</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityThread</span> <span class="keyword">extends</span> <span class="title">ClientTransactionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">handleLaunchActivity</span><span class="params">(ActivityClientRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">            PendingTransactionActions pendingActions, Intent customIntent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="还原Intent"><a href="#还原Intent" class="headerlink" title="还原Intent"></a>还原Intent</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field sCurrentActivityThreadThread = getField(Class.forName(<span class="string">"android.app.ActivityThread"</span>), <span class="string">"sCurrentActivityThread"</span>);</span><br><span class="line">            Object activityThread = sCurrentActivityThreadThread.get(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            Field mHField = getField(Class.forName(<span class="string">"android.app.ActivityThread"</span>), <span class="string">"mH"</span>);</span><br><span class="line">            Object mH = mHField.get(activityThread);</span><br><span class="line"></span><br><span class="line">            Field mCallbackField = getField(Class.forName(<span class="string">"android.os.Handler"</span>), <span class="string">"mCallback"</span>);</span><br><span class="line">            mCallbackField.set(mH, <span class="keyword">new</span> Handler.Callback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">100</span>: &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                Field intentField = getField(msg.obj.getClass(), <span class="string">"intent"</span>);</span><br><span class="line">                                Intent proxyIntent = (Intent) intentField.get(msg.obj);</span><br><span class="line">                                Intent targetIntent = proxyIntent.getParcelableExtra(<span class="string">"target_intent"</span>);</span><br><span class="line">                                <span class="keyword">if</span> (targetIntent != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//                                    proxyIntent.setComponent(targetIntent.getComponent());</span></span><br><span class="line">                                    intentField.set(msg.obj, targetIntent);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">159</span>: &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                Field mActivityCallbacksField = getField(msg.obj.getClass(), <span class="string">"mActivityCallbacks"</span>);</span><br><span class="line">                                List mActivityCallbacks = (List) mActivityCallbacksField.get(msg.obj);</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mActivityCallbacks.size(); i++) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (mActivityCallbacks.get(i).getClass().getName()</span><br><span class="line">                                            .equals(<span class="string">"android.app.servertransaction.LaunchActivityItem"</span>)) &#123;</span><br><span class="line">                                        Object launchActivityItem = mActivityCallbacks.get(i);</span><br><span class="line"></span><br><span class="line">                                        Field mIntentField = getField(launchActivityItem.getClass(), <span class="string">"mIntent"</span>);</span><br><span class="line">                                        Intent intent = (Intent) mIntentField.get(launchActivityItem);</span><br><span class="line">                                        <span class="comment">// 获取插件的</span></span><br><span class="line">                                        Intent proxyIntent = intent.getParcelableExtra(<span class="string">"target_intent"</span>);</span><br><span class="line">                                        <span class="comment">//替换</span></span><br><span class="line">                                        <span class="keyword">if</span> (proxyIntent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                            mIntentField.set(launchActivityItem, proxyIntent);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="在Application创建时Hook"><a href="#在Application创建时Hook" class="headerlink" title="在Application创建时Hook"></a>在Application创建时Hook</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">//一般是从服务器下载回来，然后复制到应用的私有目录下，这里演示从sdcard复制到data目录下,6.0及以上需要申请动态权限。复制应该放在非UI线程上做，这里简化操作，放在UI线程上操作。</span></span><br><span class="line">        String pluginPath = getDir(<span class="string">"plugin"</span>, Context.MODE_PRIVATE).getAbsolutePath();</span><br><span class="line">        pluginPath = pluginPath + <span class="string">"/plugin.apk"</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">new</span> File(pluginPath).exists()) &#123;</span><br><span class="line">            FileUtil.copyFile(PLUGIN_PATH, pluginPath);</span><br><span class="line">        &#125;</span><br><span class="line">        HookUtil.loadPlugin(<span class="keyword">this</span>, pluginPath);</span><br><span class="line">        HookUtil.hookAMS();</span><br><span class="line">        HookUtil.hookHandler();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>到这里，就可以启用同一应用内未注册的Activity。</p>
<h2 id="启动插件应用内的Activity"><a href="#启动插件应用内的Activity" class="headerlink" title="启动插件应用内的Activity"></a>启动插件应用内的Activity</h2><p>启动非同一应用内的Activity,相比启动同一应用内的Activity,需要多几个步骤。由于不在一个应用内，所以需要把插件的APK先加载进来，然后同样也需要在AMS检测前替换Intent为占位的Intent,在检测后，启动Activity前替换回为需要启动Activity的Intent。另外，由于插件是动态加载进去的，也需要解决资源加载的问题。</p>
<h3 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h3><p>加载插件主要是用到类加载器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadPlugin</span><span class="params">(Context context, String dexPath)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断dex是否存在</span></span><br><span class="line">        File dex = <span class="keyword">new</span> File(dexPath);</span><br><span class="line">        <span class="keyword">if</span> (!dex.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取自己的dexElements</span></span><br><span class="line">            PathClassLoader pathClassLoader = (PathClassLoader) context.getClassLoader();</span><br><span class="line"></span><br><span class="line">            Field pathListField = getField(pathClassLoader.getClass(), <span class="string">"pathList"</span>);</span><br><span class="line">            Object pathListObject = pathListField.get(pathClassLoader);</span><br><span class="line"></span><br><span class="line">            Field dexElementsField = getField(pathListObject.getClass(), <span class="string">"dexElements"</span>);</span><br><span class="line">            Object[] dexElementsObject = (Object[]) dexElementsField.get(pathListObject);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取dex中的dexElements</span></span><br><span class="line">            File odex = context.getDir(<span class="string">"odex"</span>, Context.MODE_PRIVATE);</span><br><span class="line">            DexClassLoader dexClassLoader = <span class="keyword">new</span> DexClassLoader(dexPath, odex.getAbsolutePath(), <span class="keyword">null</span>, pathClassLoader);</span><br><span class="line"></span><br><span class="line">            Field pluginPathListField = getField(dexClassLoader.getClass(), <span class="string">"pathList"</span>);</span><br><span class="line">            Object pluginPathListObject = pluginPathListField.get(dexClassLoader);</span><br><span class="line"></span><br><span class="line">            Field pluginDexElementsField = getField(pluginPathListObject.getClass(), <span class="string">"dexElements"</span>);</span><br><span class="line">            Object[] pluginDexElementsObject = (Object[]) pluginDexElementsField.get(pluginPathListObject);</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; elementClazz = dexElementsObject.getClass().getComponentType();</span><br><span class="line">            Object newDexElements = Array.newInstance(elementClazz, pluginDexElementsObject.length + dexElementsObject.length);</span><br><span class="line">            System.arraycopy(pluginDexElementsObject, <span class="number">0</span>, newDexElements, <span class="number">0</span>, pluginDexElementsObject.length);</span><br><span class="line">            System.arraycopy(dexElementsObject, <span class="number">0</span>, newDexElements, pluginDexElementsObject.length, dexElementsObject.length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置</span></span><br><span class="line">            dexElementsField.set(pathListObject, newDexElements);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="替换Intent-1"><a href="#替换Intent-1" class="headerlink" title="替换Intent"></a>替换Intent</h3><p>这个过程和应用内的情况是一样的，不再赘述</p>
<h3 id="加载资源"><a href="#加载资源" class="headerlink" title="加载资源"></a>加载资源</h3><p>加载资源主要用到AssetManager的addAssetPath方法，通过反射来加载</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Resources <span class="title">loadResource</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           AssetManager assetManager = AssetManager<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">           Method addAssetPathField = assetManager.getClass().getDeclaredMethod(<span class="string">"addAssetPath"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">           addAssetPathField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">           addAssetPathField.invoke(assetManager, PATH);</span><br><span class="line">           Resources resources = context.getResources();</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> Resources(assetManager, resources.getDisplayMetrics(), resources.getConfiguration());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/milovetingting/Samples/tree/master/PluginDemo" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/PluginDemo</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>插件化</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中网络框架的简单封装</title>
    <url>/2020/03/03/Android/Android%E4%B8%AD%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android中网络框架的简单封装"><a href="#Android中网络框架的简单封装" class="headerlink" title="Android中网络框架的简单封装"></a>Android中网络框架的简单封装</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Android</code>作为一款主要应用在移动终端的操作系统，访问网络是必不可少的功能。访问网络，最基本的接口有：<code>HttpUrlConnection</code>,<code>HttpClient</code>，而在后续的发展中，出现了<code>Volley</code>，<code>OkHttp</code>，<code>Retrofit</code>等网络封装库。由于各种原因，在实际的项目开发中，我们可能会需要在项目的版本迭代中，切换网络框架。如果对于网络框架没有好的封装，那么当需要切换网络框架时，可能就会有大量的迁移工作要做。</p>
<h2 id="封装网络框架"><a href="#封装网络框架" class="headerlink" title="封装网络框架"></a>封装网络框架</h2><p>在架构设计中，面向<code>接口</code>和<code>抽象</code>，是解耦的一个重要原则。本文将基于这一原则，实现一个简单的网络框架封装。</p>
<h3 id="定义网络访问的接口"><a href="#定义网络访问的接口" class="headerlink" title="定义网络访问的接口"></a>定义网络访问的接口</h3><p><code>抽取出不同网络框架的共同方法，定义成接口方法。</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHttpLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GET方式请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(String url, Map&lt;String, Object&gt; params, IHttpCallback callback)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * POST方式请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">post</span><span class="params">(String url, Map&lt;String, Object&gt; params, IHttpCallback callback)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>定义网络访问的Callback</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHttpCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功时的回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败时的回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFailed</span><span class="params">(String msg)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="定义具体的接口实现类"><a href="#定义具体的接口实现类" class="headerlink" title="定义具体的接口实现类"></a>定义具体的接口实现类</h3><p><code>分别对具体的网络框架进行接口实现</code>，这里以Volley和OkHttp为例</p>
<p><code>Volley的实现类</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolleyHttpLoader</span> <span class="keyword">implements</span> <span class="title">IHttpLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RequestQueue mRequestQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VolleyHttpLoader</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mRequestQueue = Volley.newRequestQueue(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String url, Map&lt;String, Object&gt; params, <span class="keyword">final</span> IHttpCallback callback)</span> </span>&#123;</span><br><span class="line">        StringRequest request = <span class="keyword">new</span> StringRequest(Request.Method.GET, url,</span><br><span class="line">                <span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                        callback.onSuccess(s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError volleyError)</span> </span>&#123;</span><br><span class="line">                callback.onFailed(volleyError.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mRequestQueue.add(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(String url, Map&lt;String, Object&gt; params, <span class="keyword">final</span> IHttpCallback callback)</span> </span>&#123;</span><br><span class="line">        StringRequest request = <span class="keyword">new</span> StringRequest(Request.Method.POST, url,</span><br><span class="line">                <span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                        callback.onSuccess(s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError volleyError)</span> </span>&#123;</span><br><span class="line">                callback.onFailed(volleyError.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mRequestQueue.add(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>OkHttp的实现类</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpLoader</span> <span class="keyword">implements</span> <span class="title">IHttpLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient mOkHttpClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OkHttpLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mOkHttpClient = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String url, Map&lt;String, Object&gt; params, <span class="keyword">final</span> IHttpCallback callback)</span> </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder().url(url).build();</span><br><span class="line">        mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(@NotNull Call call, @NotNull IOException e)</span> </span>&#123;</span><br><span class="line">                callback.onFailed(e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(@NotNull Call call, @NotNull Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">                    String result = response.body().string();</span><br><span class="line">                    callback.onSuccess(result);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    callback.onFailed(response.message());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(String url, Map&lt;String, Object&gt; params, <span class="keyword">final</span> IHttpCallback callback)</span> </span>&#123;</span><br><span class="line">        RequestBody requestBody = appendBody(params);</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder().post(requestBody).url(url).build();</span><br><span class="line">        mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(@NotNull Call call, @NotNull IOException e)</span> </span>&#123;</span><br><span class="line">                callback.onFailed(e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(@NotNull Call call, @NotNull Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">                    String result = response.body().string();</span><br><span class="line">                    callback.onSuccess(result);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    callback.onFailed(response.message());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RequestBody <span class="title">appendBody</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">        FormBody.Builder body = <span class="keyword">new</span> FormBody.Builder();</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span> || params.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> body.build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : params.entrySet()) &#123;</span><br><span class="line">            body.add(entry.getKey(), entry.getValue().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> body.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="定义Callback的实现"><a href="#定义Callback的实现" class="headerlink" title="定义Callback的实现"></a>定义Callback的实现</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpCallback</span>&lt;<span class="title">Result</span>&gt; <span class="keyword">implements</span> <span class="title">IHttpCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        Class&lt;?&gt; clazz = analysisClazzInfo(<span class="keyword">this</span>);</span><br><span class="line">        Result resultObj = (Result) gson.fromJson(result, clazz);</span><br><span class="line">        onSuccess(resultObj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功时的回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Result result)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; analysisClazzInfo(Object object) &#123;</span><br><span class="line">        Type genType = object.getClass().getGenericSuperclass();</span><br><span class="line">        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();</span><br><span class="line">        <span class="keyword">return</span> (Class&lt;?&gt;) params[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="返回的数据Bean"><a href="#返回的数据Bean" class="headerlink" title="返回的数据Bean"></a>返回的数据Bean</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> errorCode;</span><br><span class="line">    <span class="keyword">private</span> String errorMsg;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DataBean&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorCode</span><span class="params">(<span class="keyword">int</span> errorCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorMsg</span><span class="params">(String errorMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorMsg = errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;DataBean&gt; <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(List&lt;DataBean&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> courseId;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> order;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> parentChapterId;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> userControlSetTop;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> visible;</span><br><span class="line">        <span class="keyword">private</span> List&lt;?&gt; children;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCourseId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> courseId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourseId</span><span class="params">(<span class="keyword">int</span> courseId)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.courseId = courseId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> order;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(<span class="keyword">int</span> order)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.order = order;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getParentChapterId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> parentChapterId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentChapterId</span><span class="params">(<span class="keyword">int</span> parentChapterId)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.parentChapterId = parentChapterId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUserControlSetTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> userControlSetTop;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserControlSetTop</span><span class="params">(<span class="keyword">boolean</span> userControlSetTop)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.userControlSetTop = userControlSetTop;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVisible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> visible;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVisible</span><span class="params">(<span class="keyword">int</span> visible)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.visible = visible;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;?&gt; getChildren() &#123;</span><br><span class="line">            <span class="keyword">return</span> children;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildren</span><span class="params">(List&lt;?&gt; children)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.children = children;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"DataBean&#123;"</span> +</span><br><span class="line">                    <span class="string">"courseId="</span> + courseId +</span><br><span class="line">                    <span class="string">", id="</span> + id +</span><br><span class="line">                    <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", order="</span> + order +</span><br><span class="line">                    <span class="string">", parentChapterId="</span> + parentChapterId +</span><br><span class="line">                    <span class="string">", userControlSetTop="</span> + userControlSetTop +</span><br><span class="line">                    <span class="string">", visible="</span> + visible +</span><br><span class="line">                    <span class="string">", children="</span> + children +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Data&#123;"</span> +</span><br><span class="line">                <span class="string">"errorCode="</span> + errorCode +</span><br><span class="line">                <span class="string">", errorMsg='"</span> + errorMsg + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", data="</span> + data +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="定义统一管理类"><a href="#定义统一管理类" class="headerlink" title="定义统一管理类"></a>定义统一管理类</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHelper</span> <span class="keyword">implements</span> <span class="title">IHttpLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IHttpLoader mHttpLoader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HttpHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(IHttpLoader httpLoader)</span> </span>&#123;</span><br><span class="line">        mHttpLoader = httpLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpHelper <span class="title">obtain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HttpHelperHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHelperHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> HttpHelper INSTANCE = <span class="keyword">new</span> HttpHelper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String url, Map&lt;String, Object&gt; params, IHttpCallback callback)</span> </span>&#123;</span><br><span class="line">        mHttpLoader.get(url, params, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(String url, Map&lt;String, Object&gt; params, IHttpCallback callback)</span> </span>&#123;</span><br><span class="line">        mHttpLoader.post(url, params, callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="在Application中初始化"><a href="#在Application中初始化" class="headerlink" title="在Application中初始化"></a>在Application中初始化</h3><p>定义一个继承自Application的类，在onCreate方法中初始化网络访问</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"><span class="comment">//        HttpHelper.init(new OkHttpLoader());</span></span><br><span class="line">        HttpHelper.init(<span class="keyword">new</span> VolleyHttpLoader(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>后续如果需要切换网络框架，只需要在这里修改就可以了。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL_HTTP = <span class="string">"https://www.wanandroid.com/wxarticle/chapters/json"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ImageView mIv;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mTv = findViewById(R.id.tv);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btn_get).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                HttpHelper.obtain().get(URL_HTTP, <span class="keyword">null</span>, <span class="keyword">new</span> HttpCallback&lt;Data&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailed</span><span class="params">(<span class="keyword">final</span> String msg)</span> </span>&#123;</span><br><span class="line">                        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                mTv.setText(msg);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(<span class="keyword">final</span> Data data)</span> </span>&#123;</span><br><span class="line">                        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                mTv.setText(data.toString());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>这里介绍的，其实只是一个封装的思路。基于这个思路，还可以封装常用的图片访问库等。可以自由拓展。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码地址：<a href="https://github.com/milovetingting/Samples/tree/master/Loader" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/Loader</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>网络</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>使用APT实现Android中View的注入</title>
    <url>/2020/03/03/Android/%E4%BD%BF%E7%94%A8APT%E5%AE%9E%E7%8E%B0Android%E4%B8%ADView%E7%9A%84%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="使用APT实现Android中View的注入"><a href="#使用APT实现Android中View的注入" class="headerlink" title="使用APT实现Android中View的注入"></a>使用APT实现Android中View的注入</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>APT</code>是<code>Annotation Processing Tool</code>的简写，通过在<code>Java编译</code>时期，处理<code>注解</code>，生成代码。APT在<code>ButterKnife、Dagger2</code>等框架中都有应用。下面通过使用APT，实现一个类似ButterKnife的简单的View注入的框架。(参考<code>Jett</code>老师的课程)</p>
<h2 id="ButterKnife的实现原理"><a href="#ButterKnife的实现原理" class="headerlink" title="ButterKnife的实现原理"></a>ButterKnife的实现原理</h2><p>既然准备实现类似ButterKnife的框架，那么我们就需要了解ButterKnife的实现原理。</p>
<p>ButterKnife的使用是从<code>ButterKnife.bind()</code>开始的:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NonNull</span> <span class="meta">@UiThread</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Unbinder <span class="title">bind</span><span class="params">(@NonNull Activity target)</span> </span>&#123;</span><br><span class="line">    View sourceView = target.getWindow().getDecorView();</span><br><span class="line">    <span class="keyword">return</span> bind(target, sourceView);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，<code>bind</code>方法中又调用了内部的<code>bind</code>方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NonNull</span> <span class="meta">@UiThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Unbinder <span class="title">bind</span><span class="params">(@NonNull Object target, @NonNull View source)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; targetClass = target.getClass();</span><br><span class="line">    <span class="keyword">if</span> (debug) Log.d(TAG, <span class="string">"Looking up binding for "</span> + targetClass.getName());</span><br><span class="line">    <span class="comment">//获取构造函数</span></span><br><span class="line">    Constructor&lt;? extends Unbinder&gt; constructor = findBindingConstructorForClass(targetClass);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (constructor == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> Unbinder.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//noinspection TryWithIdenticalCatches Resolves to API 19+ only type.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//返回实例</span></span><br><span class="line">      <span class="keyword">return</span> constructor.newInstance(target, source);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to invoke "</span> + constructor, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to invoke "</span> + constructor, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">      Throwable cause = e.getCause();</span><br><span class="line">      <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (RuntimeException) cause;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (Error) cause;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to create binding instance."</span>, cause);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个bind方法中，主要通过<code>findBindingConstructorForClass</code>方法获取到构造函数，然后返回具体的实例。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> <span class="meta">@CheckResult</span> <span class="meta">@UiThread</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Constructor&lt;? extends Unbinder&gt; findBindingConstructorForClass(Class&lt;?&gt; cls) &#123;</span><br><span class="line">    <span class="comment">//从缓存中查找</span></span><br><span class="line">    Constructor&lt;? extends Unbinder&gt; bindingCtor = BINDINGS.get(cls);</span><br><span class="line">    <span class="keyword">if</span> (bindingCtor != <span class="keyword">null</span> || BINDINGS.containsKey(cls)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (debug) Log.d(TAG, <span class="string">"HIT: Cached in binding map."</span>);</span><br><span class="line">      <span class="keyword">return</span> bindingCtor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有缓存过的，那么通过反射来获取</span></span><br><span class="line">    String clsName = cls.getName();</span><br><span class="line">    <span class="keyword">if</span> (clsName.startsWith(<span class="string">"android."</span>) || clsName.startsWith(<span class="string">"java."</span>)</span><br><span class="line">        || clsName.startsWith(<span class="string">"androidx."</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (debug) Log.d(TAG, <span class="string">"MISS: Reached framework class. Abandoning search."</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Class&lt;?&gt; bindingClass = cls.getClassLoader().loadClass(clsName + <span class="string">"_ViewBinding"</span>);</span><br><span class="line">      <span class="comment">//noinspection unchecked</span></span><br><span class="line">      bindingCtor = (Constructor&lt;? extends Unbinder&gt;) bindingClass.getConstructor(cls, View<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span> (debug) Log.d(TAG, <span class="string">"HIT: Loaded binding class and constructor."</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (debug) Log.d(TAG, <span class="string">"Not found. Trying superclass "</span> + cls.getSuperclass().getName());</span><br><span class="line">      <span class="comment">//没有Class，则递归调用，从父类中查找</span></span><br><span class="line">      bindingCtor = findBindingConstructorForClass(cls.getSuperclass());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to find binding constructor for "</span> + clsName, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//放入到缓存中</span></span><br><span class="line">    BINDINGS.put(cls, bindingCtor);</span><br><span class="line">    <span class="keyword">return</span> bindingCtor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在<code>findBindingConstructorForClass</code>方法中，首先查询缓存中是否有需要的构造函数，如果没有，那么会通过反射查找,最终返回了ButterKnife生成的辅助类<code>XXX_ViewBinding</code>的构造函数。</p>
<p>Build工程后，在生成的XXX_ViewBinding的Java文件的构造方法中，可以看到ButterKnife帮我们自己调用了<code>findViewById</code></p>
<p><a href="/images/apt_build.png" data-fancybox="group" data-caption="apt_build" class="fancybox"><img alt="apt_build" title="apt_build" data-src="/images/apt_build.png" src="/img/loading.gif" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MainActivity_ViewBinding类中的方法</span></span><br><span class="line"> <span class="meta">@UiThread</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MainActivity_ViewBinding</span><span class="params">(MainActivity target, View source)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line"></span><br><span class="line">    target.tv = Utils.findRequiredViewAsType(source, R.id.tv, <span class="string">"field 'tv'"</span>, TextView<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Utils类中方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">findRequiredViewAsType</span><span class="params">(View source, @IdRes <span class="keyword">int</span> id, String who,</span></span></span><br><span class="line"><span class="function"><span class="params">      Class&lt;T&gt; cls)</span> </span>&#123;</span><br><span class="line">    View view = findRequiredView(source, id, who);</span><br><span class="line">    <span class="keyword">return</span> castView(view, id, who, cls);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Utils类中方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> View <span class="title">findRequiredView</span><span class="params">(View source, @IdRes <span class="keyword">int</span> id, String who)</span> </span>&#123;</span><br><span class="line">    View view = source.findViewById(id);</span><br><span class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">    String name = getResourceEntryName(source, id);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Required view '"</span></span><br><span class="line">        + name</span><br><span class="line">        + <span class="string">"' with ID "</span></span><br><span class="line">        + id</span><br><span class="line">        + <span class="string">" for "</span></span><br><span class="line">        + who</span><br><span class="line">        + <span class="string">" was not found. If this view is optional add '@Nullable' (fields) or '@Optional'"</span></span><br><span class="line">        + <span class="string">" (methods) annotation."</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>可以得出结论，ButterKnife就是利用<code>APT</code>解析注解，在编译时生成了辅助类，用来帮助我们去调用findViewById方法，从而减少手动使用findViewById</p>
<h2 id="实现自已的View注入框架"><a href="#实现自已的View注入框架" class="headerlink" title="实现自已的View注入框架"></a>实现自已的View注入框架</h2><p>了解了原理后，就可以自己来实现简单的View注入框架了。</p>
<h3 id="新建annotation模块"><a href="#新建annotation模块" class="headerlink" title="新建annotation模块"></a>新建annotation模块</h3><p>新建<code>Java Library</code>类型的<code>Module</code>,名称为annotation，用来<code>定义注解</code></p>
<p><a href="/images/%E6%96%B0%E5%BB%BAJava_Library.png" data-fancybox="group" data-caption="新建Java_Library" class="fancybox"><img alt="新建Java_Library" title="新建Java_Library" data-src="/images/%E6%96%B0%E5%BB%BAJava_Library.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="新建annotation-compiler模块"><a href="#新建annotation-compiler模块" class="headerlink" title="新建annotation_compiler模块"></a>新建annotation_compiler模块</h3><p>然后，同样的方法新建名为annotation_compiler的模块，用来<code>处理注解</code></p>
<h3 id="新建Binder模块"><a href="#新建Binder模块" class="headerlink" title="新建Binder模块"></a>新建Binder模块</h3><p>我们还需要新建一个名为Binder的模块，用来<code>供用户直接调用</code></p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>新建这三个Modeule后，需要为相应的Module<code>添加依赖</code>。app模块需要依赖上面的三个模块，annotation_compiler需要依赖annotation。</p>
<p><a href="/images/%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97%E9%97%B4%E4%BE%9D%E8%B5%96.gif" data-fancybox="group" data-caption="添加模块间依赖" class="fancybox"><img alt="添加模块间依赖" title="添加模块间依赖" data-src="/images/%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97%E9%97%B4%E4%BE%9D%E8%B5%96.gif" src="/img/loading.gif" class="lazyload"></a></p>
<p><a href="/images/%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97%E9%97%B4%E4%BE%9D%E8%B5%962.gif" data-fancybox="group" data-caption="添加模块间依赖2" class="fancybox"><img alt="添加模块间依赖2" title="添加模块间依赖2" data-src="/images/%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97%E9%97%B4%E4%BE%9D%E8%B5%962.gif" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="编写annotation模块代码"><a href="#编写annotation模块代码" class="headerlink" title="编写annotation模块代码"></a>编写annotation模块代码</h3><p>在annotation模块下新建<code>BindView</code>注解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BindView &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="编写annotation-compiler模块代码"><a href="#编写annotation-compiler模块代码" class="headerlink" title="编写annotation_compiler模块代码"></a>编写annotation_compiler模块代码</h3><p>要使用APT，需要添加相关依赖，在<code>annotation_compiler</code>模块下的<code>build.gradle</code>文件中编辑</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">//注册APT功能</span></span><br><span class="line">    annotationProcessor <span class="string">'com.google.auto.service:auto-service:1.0-rc4'</span></span><br><span class="line">    compileOnly <span class="string">'com.google.auto.service:auto-service:1.0-rc4'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>同步后就可以使用APT了。</p>
<p>在annotation_compiler模块下新建<code>AnnotationsCompiler</code>类,继承自<code>AbstractProcessor</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AnnotationsCompiler</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>需要<code>重写三个方法</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的Java版本</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SourceVersion.latestSupported();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的注解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; types = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        types.add(BindView<span class="class">.<span class="keyword">class</span>.<span class="title">getCanonicalName</span>())</span>;</span><br><span class="line">        <span class="keyword">return</span> types;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnvironment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnvironment);</span><br><span class="line">        filer = processingEnvironment.getFiler();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>重写<code>process</code>方法，主要的逻辑都在这里实现</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</span><br><span class="line">        Set&lt;? extends Element&gt; elements = roundEnvironment.getElementsAnnotatedWith(BindView<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类：TypeElement</span></span><br><span class="line">        <span class="comment">//方法：ExecutableElement</span></span><br><span class="line">        <span class="comment">//属性：VariableElement</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String, List&lt;VariableElement&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            VariableElement variableElement = (VariableElement) element;</span><br><span class="line">            String activityName = variableElement.getEnclosingElement().getSimpleName().toString();</span><br><span class="line">            List&lt;VariableElement&gt; variableElements = map.get(activityName);</span><br><span class="line">            <span class="keyword">if</span> (variableElements == <span class="keyword">null</span>) &#123;</span><br><span class="line">                variableElements = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                map.put(activityName, variableElements);</span><br><span class="line">            &#125;</span><br><span class="line">            variableElements.add(variableElement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (map.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Writer writer = <span class="keyword">null</span>;</span><br><span class="line">            Iterator&lt;String&gt; iterator = map.keySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                String activityName = iterator.next();</span><br><span class="line">                List&lt;VariableElement&gt; variableElements = map.get(activityName);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取包名</span></span><br><span class="line">                TypeElement typeElement =</span><br><span class="line">                        (TypeElement) variableElements.get(<span class="number">0</span>).getEnclosingElement();</span><br><span class="line">                String packageName =</span><br><span class="line">                        processingEnv.getElementUtils().getPackageOf(typeElement).toString();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    JavaFileObject sourceFile =</span><br><span class="line">                            filer.createSourceFile(packageName + <span class="string">"."</span> + activityName +</span><br><span class="line">                                    <span class="string">"_ViewBinding"</span>);</span><br><span class="line">                    writer = sourceFile.openWriter();</span><br><span class="line">                    writer.write(<span class="string">"package "</span> + packageName + <span class="string">";\n"</span>);</span><br><span class="line">                    writer.write(<span class="string">"import "</span> + PACKAGE_NAME_BINDER + <span class="string">".IBinder;\n"</span>);</span><br><span class="line">                    writer.write(<span class="string">"public class "</span>+activityName+<span class="string">"_ViewBinding implements IBinder&lt;"</span>+packageName+<span class="string">"."</span>+activityName+<span class="string">"&gt;&#123;\n"</span>);</span><br><span class="line">                    writer.write(<span class="string">"@Override\n"</span>);</span><br><span class="line">                    writer.write(<span class="string">"public void bind("</span>+packageName+<span class="string">"."</span>+activityName+<span class="string">" target)&#123;\n"</span>);</span><br><span class="line">                    <span class="keyword">for</span>(VariableElement variableElement:variableElements)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//获取名字</span></span><br><span class="line">                        String variableName = variableElement.getSimpleName().toString();</span><br><span class="line">                        <span class="comment">//获取ID</span></span><br><span class="line">                        <span class="keyword">int</span> id = variableElement.getAnnotation(BindView<span class="class">.<span class="keyword">class</span>).<span class="title">value</span>()</span>;</span><br><span class="line">                        <span class="comment">//得到类型</span></span><br><span class="line">                        TypeMirror typeMirror = variableElement.asType();</span><br><span class="line">                        writer.write(<span class="string">"target."</span>+variableName+<span class="string">"=("</span>+typeMirror+<span class="string">")target.findViewById("</span>+id+<span class="string">");\n"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    writer.write(<span class="string">"\n&#125;\n&#125;"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(writer!=<span class="keyword">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            writer.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="编写Binder模块代码"><a href="#编写Binder模块代码" class="headerlink" title="编写Binder模块代码"></a>编写Binder模块代码</h3><p>在Binder模块下新建<code>IBinder</code>类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBinder</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定activity</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bind</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>新建ViewBinder类，这个类是直接供用户调用的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewBinder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object activity)</span> </span>&#123;</span><br><span class="line">        String name = activity.getClass().getName() + <span class="string">"_ViewBinding"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(name);</span><br><span class="line">            IBinder binder = (IBinder) clazz.newInstance();</span><br><span class="line">            binder.bind(activity);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="在app模块调用"><a href="#在app模块调用" class="headerlink" title="在app模块调用"></a>在app模块调用</h3><p>编写好上面的模块后，执行Build-Rebuild Project后，可以看到生成的java类文件</p>
<p><a href="/images/%E9%80%9A%E8%BF%87APT%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81.png" data-fancybox="group" data-caption="通过APT生成代码" class="fancybox"><img alt="通过APT生成代码" title="通过APT生成代码" data-src="/images/%E9%80%9A%E8%BF%87APT%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在app模块的MainActivity中使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BindView</span>(R.id.tv)</span><br><span class="line">TextView tv;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    <span class="comment">//调用自己定义的ViewBinder</span></span><br><span class="line">    ViewBinder.bind(<span class="keyword">this</span>);</span><br><span class="line">    tv.setText(<span class="string">"Hi,ViewBinder!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行应用后，可以看到已经更改了TextView的显示，从而证明我们自己定义的ViewBinder是可以正常运行的。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>使用APT实现Android中View的注入，具体步骤就是上面描述的。当然，这个只是一个简单的示例，如果要开发出完善的框架，还有很多需要注意和优化的，这里只是记录开发的一般流程，以便后面需要时查找资料。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码地址：<a href="https://github.com/milovetingting/Samples/tree/master/ViewBinder" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/ViewBinder</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>APT</tag>
      </tags>
  </entry>
  <entry>
    <title>Artifactory搭建本地仓库</title>
    <url>/2020/03/03/Android/Artifactory%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Artifactory搭建本地仓库"><a href="#Artifactory搭建本地仓库" class="headerlink" title="Artifactory搭建本地仓库"></a>Artifactory搭建本地仓库</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前使用<code>Nexus Repositories Manager</code>搭建了Maven本地仓库(可参考<code>Android Gradle</code>分类下的<code>Android Gradle 多项目构建</code>文章)。这里，用另一种方法：使用<code>Artifactory</code>来搭建本地仓库(参考Allen老师的课程)。</p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>下载Artifactory后，如果环境是window系统，可以直接双击运行<code>bin</code>目录下的<code>artifactory.bat</code>文件，在浏览器地址栏输入：<code>http://localhost:8081/artifactory/</code>，进入后台管理面板。</p>
<p><a href="/images/Artifactory%E9%A6%96%E9%A1%B5.png" data-fancybox="group" data-caption="Artifactory首页" class="fancybox"><img alt="Artifactory首页" title="Artifactory首页" data-src="/images/Artifactory%E9%A6%96%E9%A1%B5.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h2><p>点击左侧菜单栏<code>用户</code>图标,然后选择右侧的<code>Repositories</code>下的<code>Local</code>，在打开的界面中，点击右上角的<code>New</code>，在弹出的界面中选择<code>Maven</code>，输入<code>Repository key</code>，这个key就是本地仓库的名字，可能任意输入，但不能和已存在的仓库重名,输入后，不用修改其它，直接点击右下角的<code>Save&amp;Finish</code>。</p>
<p>创建本地仓库的操作过程如下：</p>
<p><a href="/images/%E6%96%B0%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.gif" data-fancybox="group" data-caption="Artifactory新建本地仓库" class="fancybox"><img alt="Artifactory新建本地仓库" title="Artifactory新建本地仓库" data-src="/images/%E6%96%B0%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.gif" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h2><p>点击左侧菜单栏<code>用户</code>图标，然后选择右侧的<code>Repositories</code>下的<code>Remote</code>，在打开的界面中，点击右上角的<code>New</code>，在弹出的界面中选择<code>Maven</code>，输入<code>Repository key</code>，这个key就是远程仓库的名字，可能任意输入，但不能和已存在的仓库重名,输入后，还需要配置<code>URL</code>选项，配置完成后点击右下角的<code>Save&amp;Finish</code>。</p>
<p>创建远程仓库时，容易出现以下的一个错误,提示<code>Error parsing json body</code>，出现这个问题，是由于<code>Max Unique Snapshots</code>的配置项，Chrome浏览器自己帮我们填充了admin的内容，而这个配置项是一个int的类型，删除默认填充的admin，再次点击Save&amp;Finish就可以创建成功：</p>
<p><a href="/images/Artifactory%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" data-fancybox="group" data-caption="Artifactory创建远程仓库" class="fancybox"><img alt="Artifactory创建远程仓库" title="Artifactory创建远程仓库" data-src="/images/Artifactory%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>创建远程仓库的操作过程如下：</p>
<p><a href="/images/%E6%96%B0%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.gif" data-fancybox="group" data-caption="新建远程仓库" class="fancybox"><img alt="新建远程仓库" title="新建远程仓库" data-src="/images/%E6%96%B0%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.gif" src="/img/loading.gif" class="lazyload"></a></p>
<p>一般来说，我们需要创建google,jcenter,public这三个仓库，参照下面的URL依次创建：</p>
<p><a href="/images/Artifactory%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%932.png" data-fancybox="group" data-caption="Artifactory创建远程仓库" class="fancybox"><img alt="Artifactory创建远程仓库" title="Artifactory创建远程仓库" data-src="/images/Artifactory%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%932.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="创建虚拟仓库"><a href="#创建虚拟仓库" class="headerlink" title="创建虚拟仓库"></a>创建虚拟仓库</h2><p>点击左侧菜单栏<code>用户</code>图标，然后选择右侧的<code>Repositories</code>下的<code>Virtual</code>，在打开的界面中，点击右上角的<code>New</code>，在弹出的界面中选择<code>Maven</code>，输入<code>Repository key</code>，这个key就是虚拟仓库的名字，可能任意输入，但不能和已存在的仓库重名,输入后，将之前创建的本地仓库和三个远程仓库选择到右侧选择列表中，配置完成后点击右下角的<code>Save&amp;Finish</code>。</p>
<p>操作步骤如下：</p>
<p><a href="/images/%E6%96%B0%E5%BB%BA%E8%99%9A%E6%8B%9F%E4%BB%93%E5%BA%93.gif" data-fancybox="group" data-caption="新建虚拟仓库" class="fancybox"><img alt="新建虚拟仓库" title="新建虚拟仓库" data-src="/images/%E6%96%B0%E5%BB%BA%E8%99%9A%E6%8B%9F%E4%BB%93%E5%BA%93.gif" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="上传文件到本地仓库"><a href="#上传文件到本地仓库" class="headerlink" title="上传文件到本地仓库"></a>上传文件到本地仓库</h2><p>点击左侧菜单栏的<code>Artifacts</code>,选择之前创建的本地仓库，然后点击右上角的<code>Deploy</code>,在弹出的界面，选择需要上传的文件，上传完成后，点击右下角的deply。</p>
<p>操作步骤如下：</p>
<p><a href="/images/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.gif" data-fancybox="group" data-caption="上传文件到本地仓库" class="fancybox"><img alt="上传文件到本地仓库" title="上传文件到本地仓库" data-src="/images/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.gif" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="引入Artifactory"><a href="#引入Artifactory" class="headerlink" title="引入Artifactory"></a>引入Artifactory</h2><p>修改项目根目录下的<code>build.gradle</code>文件，将<code>buildscript</code>和<code>allprojects</code>节点下的<code>repositories</code>修改为本地搭建的<code>artifactory</code>地址</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven&#123;</span><br><span class="line">            url <span class="string">'http://localhost:8081/artifactory/android_group/'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.5.3'</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven&#123;</span><br><span class="line">            url <span class="string">'http://localhost:8081/artifactory/android_group/'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>修改gradle-wrapper.properties文件中的distributionUrl的值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">distributionUrl=http\:<span class="comment">//localhost:8081/artifactory/android_local/gradle-4.4-all.zip</span></span><br></pre></td></tr></table></figure></div>

<p>Rebuild项目，依赖的资源，会先下载到本地仓库，后续再新建项目，依赖的资源如果在本地仓库已经存在，则会先引用本地仓库的资源。通过引用本地仓库，能够加快项目构建。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Artifactory</tag>
        <tag>Maven</tag>
        <tag>Repository</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Android Studio新建工程时repositories的默认配置</title>
    <url>/2020/03/02/Android/%E4%BF%AE%E6%94%B9Android%20Studio%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B%E6%97%B6repositories%E7%9A%84%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="修改Android-Studio新建工程时repositories的默认配置"><a href="#修改Android-Studio新建工程时repositories的默认配置" class="headerlink" title="修改Android Studio新建工程时repositories的默认配置"></a>修改Android Studio新建工程时repositories的默认配置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于众所周知的原因，Android Studio中连接google和jcenter的仓库时，会比较慢，较大机率会失败。为解决这个问题，可以设置仓库为<code>阿里云</code>的仓库:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">maven&#123;</span><br><span class="line">    url <span class="string">'https://maven.aliyun.com/repository/public/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>或者设置为<code>本地</code>搭建的仓库，如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">maven&#123;</span><br><span class="line">    url <span class="string">'http://192.168.240.21:8081/nexus/content/groups/public/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>如果每次新建工程 后，都需要手动修改仓库的配置，那么还是比较麻烦。因此，需要修改新建工程时repositories的默认配置。</p>
<h2 id="修改repositories默认配置"><a href="#修改repositories默认配置" class="headerlink" title="修改repositories默认配置"></a>修改repositories默认配置</h2><p>在Android Studio安装目录下，找到以下子目录：<code>\plugins\android\lib\templates\gradle-projects\NewAndroidProject\root</code>,修改<code>build.gradle.ftl</code>中的<code>repositories</code>节点内容为我们需要定义的仓库地址，需要修改<code>buildscript</code>和<code>allprojects</code>节点下repositories的如:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;&lt;#<span class="keyword">if</span> includeKotlinSupport!<span class="keyword">false</span>&gt;</span><br><span class="line">    ext.kotlin_version = <span class="string">'$&#123;kotlinVersion&#125;'</span>&lt;<span class="regexp">/#if&gt;</span></span><br><span class="line"><span class="regexp">    &lt;@loadProperties/</span>&gt;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        &lt;@useProperties<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">		maven&#123;url 'http:/</span><span class="regexp">/192.168.240.21:8081/</span>nexus<span class="regexp">/content/g</span>roups<span class="regexp">/public/</span><span class="string">'&#125;</span></span><br><span class="line"><span class="string">        &lt;#if includeKotlinEapRepo!false&gt;maven &#123; url '</span>$&#123;kotlinEapRepoUrl&#125;<span class="string">' &#125;&lt;/#if&gt;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    dependencies &#123;</span></span><br><span class="line"><span class="string">        classpath '</span>com.android.tools.build:gradle:$&#123;gradlePluginVersion&#125;<span class="string">'</span></span><br><span class="line"><span class="string">        &lt;#if includeKotlinSupport!false&gt;classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"&lt;/#if&gt;</span></span><br><span class="line"><span class="string">        // NOTE: Do not place your application dependencies here; they belong</span></span><br><span class="line"><span class="string">        // in the individual module build.gradle files</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">allprojects &#123;</span></span><br><span class="line"><span class="string">    &lt;@loadProperties/&gt;</span></span><br><span class="line"><span class="string">    repositories &#123;</span></span><br><span class="line"><span class="string">        &lt;@useProperties/&gt;</span></span><br><span class="line"><span class="string">		maven&#123;url '</span>http:<span class="comment">//192.168.240.21:8081/nexus/content/groups/public/'&#125;</span></span><br><span class="line">        &lt;#<span class="keyword">if</span> includeKotlinEapRepo!<span class="keyword">false</span>&gt;maven &#123; url <span class="string">'$&#123;kotlinEapRepoUrl&#125;'</span> &#125;&lt;<span class="regexp">/#if&gt;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>如果Android Studio安装在C盘下，可能修改这个文件会需要管理员权限，可以以管理员身份修改。</p>
<h2 id="修改gradle-wrapper-properties的默认配置"><a href="#修改gradle-wrapper-properties的默认配置" class="headerlink" title="修改gradle-wrapper.properties的默认配置"></a>修改gradle-wrapper.properties的默认配置</h2><p>有时项目可能会用到本地仓库已保存好的Gradle版本，那么可以修改gradle-wrapper.properties模板，具体路径在Android Studio的安装目录下，子目录：<code>\plugins\android\lib\templates\gradle\wrapper\gradle\wrapper</code></p>
<p>可以根据具体情况修改distributionUrl:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper<span class="regexp">/dists</span></span><br><span class="line"><span class="regexp">distributionUrl=https\:/</span><span class="regexp">/services.gradle.org/</span>distributions<span class="regexp">/gradle-4.8-bin.zip</span></span><br><span class="line"><span class="regexp">zipStoreBase=GRADLE_USER_HOME</span></span><br><span class="line"><span class="regexp">zipStorePath=wrapper/</span>dists</span><br></pre></td></tr></table></figure></div>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>修改完成后，重启Android Studio,以后新建工程时就会用修改后的模板。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android Studio</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>ASM字节码插桩</title>
    <url>/2020/02/25/Android/ASM%E5%AD%97%E8%8A%82%E7%A0%81%E6%8F%92%E6%A1%A9/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="ASM字节码插桩"><a href="#ASM字节码插桩" class="headerlink" title="ASM字节码插桩"></a>ASM字节码插桩</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>热修复的多Dex加载方案中，对于5.0以下的系统存在CLASS_ISPREVERIFIED的问题，而解决这个问题的一个方案是：通过ASM插桩，在类的构造方法里引入一个其它dex里的类，从而避免被打上CLASS_ISPREVERIFIED标签。热修复可以参考其它资料或者前面写的一篇文章。本文主要介绍ASM插桩，主要参考 <a href="https://juejin.im/post/5c6eaa066fb9a049fc042048" target="_blank" rel="noopener">https://juejin.im/post/5c6eaa066fb9a049fc042048</a> </p>
<h2 id="ASM框架"><a href="#ASM框架" class="headerlink" title="ASM框架"></a>ASM框架</h2><p>ASM是一个可以分析和操作字节码的框架，通过它可以动态地修改字节码内容。使用ASM可以实现无埋点统计、性能监控等。</p>
<h2 id="什么是字节码插桩"><a href="#什么是字节码插桩" class="headerlink" title="什么是字节码插桩"></a>什么是字节码插桩</h2><p>Android编译过程中，往字节码插入自定义的字节码。</p>
<h2 id="插桩时机"><a href="#插桩时机" class="headerlink" title="插桩时机"></a>插桩时机</h2><p>Android打包要经过:java文件–class文件–dex文件，通过Gradle提供的Transform API，可以在编译成dex文件前，得到class文件，然后通过ASM修改字节码，即字节码插桩。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>下面通过自定义Gradle插件来处理class文件来实现插桩。</p>
<h3 id="自定义Gradle插件"><a href="#自定义Gradle插件" class="headerlink" title="自定义Gradle插件"></a>自定义Gradle插件</h3><p>具体自定义Gradle插件的步骤，这里不再详细介绍，可以参考之前的一篇文章或者自行查阅其它资料。</p>
<h3 id="处理Class"><a href="#处理Class" class="headerlink" title="处理Class"></a>处理Class</h3><p>插件分为插件部分(src/main/groovy)、ASM部分(src/main/java)</p>
<p><a href="/images/ASM%E6%8F%92%E6%A1%A9.png" data-fancybox="group" data-caption="ASM插桩" class="fancybox"><img alt="ASM插桩" title="ASM插桩" data-src="/images/ASM%E6%8F%92%E6%A1%A9.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>ASMPlugin类继承自Transform并实现Plugin接口,在apply的方法里注册，transform里回调并处理class。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ASMPlugin</span> <span class="keyword">extends</span> <span class="title">Transform</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        <span class="keyword">def</span> android = project.extensions.getByType(AppExtension)</span><br><span class="line">        android.registerTransform(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ASMPlugin"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Set&lt;QualifiedContent.ContentType&gt; getInputTypes() &#123;</span><br><span class="line">        <span class="keyword">return</span> TransformManager.CONTENT_CLASS</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Set&lt;? super QualifiedContent.Scope&gt; getScopes() &#123;</span><br><span class="line">        return TransformManager.SCOPE_FULL_PROJECT</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    boolean isIncremental() &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    void transform(TransformInvocation transformInvocation) throws TransformException, InterruptedException, IOException &#123;</span><br><span class="line">        //处理class</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>主要的逻辑处理都在transform方法里</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> transform(TransformInvocation transformInvocation) <span class="keyword">throws</span> TransformException, InterruptedException, IOException &#123;</span><br><span class="line">        println(<span class="string">'--------------------ASMPlugin transform start--------------------'</span>)</span><br><span class="line">        <span class="keyword">def</span> startTime = System.currentTimeMillis()</span><br><span class="line">        Collection&lt;TransformInput&gt; inputs = transformInvocation.inputs</span><br><span class="line">        TransformOutputProvider outputProvider = transformInvocation.outputProvider</span><br><span class="line">        <span class="comment">//删除旧的输出</span></span><br><span class="line">        <span class="keyword">if</span> (outputProvider != <span class="literal">null</span>) &#123;</span><br><span class="line">            outputProvider.deleteAll()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历inputs</span></span><br><span class="line">        inputs.each &#123; input -&gt;</span><br><span class="line">            <span class="comment">//遍历directoryInputs</span></span><br><span class="line">            input.directoryInputs.each &#123;</span><br><span class="line">                directoryInput -&gt; handleDirectoryInput(directoryInput, outputProvider)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历jarInputs</span></span><br><span class="line">            input.jarInputs.each &#123;</span><br><span class="line">                jarInput -&gt; handleJarInput(jarInput, outputProvider)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">def</span> time = (System.currentTimeMillis() - startTime) / <span class="number">1000</span></span><br><span class="line">        println(<span class="string">'-------------------- ASMPlugin transform end --------------------'</span>)</span><br><span class="line">        println(<span class="string">"ASMPlugin cost $time s"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在transform里处理class文件和jar文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理目录下的class文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> directoryInput</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outputProvider</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> handleDirectoryInput(DirectoryInput directoryInput, TransformOutputProvider outputProvider) &#123;</span><br><span class="line">    <span class="comment">//是否为目录</span></span><br><span class="line">    <span class="keyword">if</span> (directoryInput.file.isDirectory()) &#123;</span><br><span class="line">        <span class="comment">//列出目录所有文件（包含子文件夹，子文件夹内文件）</span></span><br><span class="line">        directoryInput.file.eachFileRecurse &#123;</span><br><span class="line">            file -&gt;</span><br><span class="line">                <span class="keyword">def</span> name = file.name</span><br><span class="line">                <span class="keyword">if</span> (isClassFile(name)) &#123;</span><br><span class="line">                    println(<span class="string">"-------------------- handle class file:&lt;$name&gt; --------------------"</span>)</span><br><span class="line">                    ClassReader classReader = <span class="keyword">new</span> ClassReader(file.bytes)</span><br><span class="line">                    ClassWriter classWriter = <span class="keyword">new</span> ClassWriter(classReader, ClassWriter.COMPUTE_MAXS)</span><br><span class="line">                    ClassVisitor classVisitor = <span class="keyword">new</span> ActivityClassVisitor(classWriter)</span><br><span class="line">                    classReader.accept(classVisitor, org.objectweb.asm.ClassReader.EXPAND_FRAMES)</span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = classWriter.toByteArray()</span><br><span class="line">                    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file.parentFile.absolutePath + File.separator + name)</span><br><span class="line">                    fileOutputStream.write(bytes)</span><br><span class="line">                    fileOutputStream.close()</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">def</span> dest = outputProvider.getContentLocation(directoryInput.name, directoryInput.contentTypes, directoryInput.scopes, Format.DIRECTORY)</span><br><span class="line">    FileUtils.copyDirectory(directoryInput.file, dest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理Jar中的class文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jarInput</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outputProvider</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> handleJarInput(JarInput jarInput, TransformOutputProvider outputProvider) &#123;</span><br><span class="line">    <span class="keyword">if</span> (jarInput.file.getAbsolutePath().endsWith(<span class="string">".jar"</span>)) &#123;</span><br><span class="line">        <span class="comment">//重名名输出文件,因为可能同名,会覆盖</span></span><br><span class="line">        <span class="keyword">def</span> jarName = jarInput.name</span><br><span class="line">        <span class="keyword">def</span> md5Name = DigestUtils.md5Hex(jarInput.file.absolutePath)</span><br><span class="line">        <span class="keyword">if</span> (jarName.endsWith(<span class="string">".jar"</span>)) &#123;</span><br><span class="line">            jarName = jarName.substring(<span class="number">0</span>, jarName.length() - <span class="number">4</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        JarFile jarFile = <span class="keyword">new</span> JarFile(jarInput.file)</span><br><span class="line">        Enumeration enumeration = jarFile.entries()</span><br><span class="line">        File tempFile = <span class="keyword">new</span> File(jarInput.file.parent + File.separator + <span class="string">"temp.jar"</span>)</span><br><span class="line">        <span class="comment">//避免上次的缓存被重复插入</span></span><br><span class="line">        <span class="keyword">if</span> (tempFile.exists()) &#123;</span><br><span class="line">            tempFile.delete()</span><br><span class="line">        &#125;</span><br><span class="line">        JarOutputStream jarOutputStream = <span class="keyword">new</span> JarOutputStream(<span class="keyword">new</span> FileOutputStream(tempFile))</span><br><span class="line">        <span class="comment">//保存</span></span><br><span class="line">        <span class="keyword">while</span> (enumeration.hasMoreElements()) &#123;</span><br><span class="line">            JarEntry jarEntry = enumeration.nextElement()</span><br><span class="line">            String entryName = jarEntry.name</span><br><span class="line">            ZipEntry zipEntry = <span class="keyword">new</span> ZipEntry(entryName)</span><br><span class="line">            InputStream inputStream = jarFile.getInputStream(zipEntry)</span><br><span class="line">            <span class="keyword">if</span> (isClassFile(entryName)) &#123;</span><br><span class="line">                println(<span class="string">"-------------------- handle jar file:&lt;$entryName&gt; --------------------"</span>)</span><br><span class="line">                jarOutputStream.putNextEntry(zipEntry)</span><br><span class="line">                ClassReader classReader = <span class="keyword">new</span> ClassReader(IOUtils.toByteArray(inputStream))</span><br><span class="line">                ClassWriter classWriter = <span class="keyword">new</span> ClassWriter(classReader, ClassWriter.COMPUTE_MAXS)</span><br><span class="line">                ClassVisitor classVisitor = <span class="keyword">new</span> ActivityClassVisitor(classWriter)</span><br><span class="line">                classReader.accept(classVisitor, org.objectweb.asm.ClassReader.EXPAND_FRAMES)</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = classWriter.toByteArray()</span><br><span class="line">                jarOutputStream.write(bytes)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                jarOutputStream.putNextEntry(zipEntry)</span><br><span class="line">                jarOutputStream.write(IOUtils.toByteArray(inputStream))</span><br><span class="line">            &#125;</span><br><span class="line">            jarOutputStream.closeEntry()</span><br><span class="line">        &#125;</span><br><span class="line">        jarOutputStream.close()</span><br><span class="line">        jarFile.close()</span><br><span class="line">        <span class="keyword">def</span> dest = outputProvider.getContentLocation(jarName + <span class="string">"_"</span> + md5Name, jarInput.contentTypes, jarInput.scopes, Format.JAR)</span><br><span class="line">        FileUtils.copyFile(tempFile, dest)</span><br><span class="line">        tempFile.delete()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否为需要处理class文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> isClassFile(String name) &#123;</span><br><span class="line">    <span class="keyword">return</span> (name.endsWith(<span class="string">".class"</span>) &amp;&amp; !name.startsWith(<span class="string">"R\$"</span>)</span><br><span class="line">            &amp;&amp; <span class="string">"R.class"</span> != name &amp;&amp; <span class="string">"BuildConfig.class"</span> != name &amp;&amp; name.contains(<span class="string">"Activity"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在handleDirectoryInput和handleJarInput调用了我们自己定义在src/main/java里的ClassVisitor，</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActivityClassVisitor</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> <span class="keyword">implements</span> <span class="title">Opcodes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mClassName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_NAME_ACTIVITY = <span class="string">"androidx/appcompat/app/AppCompatActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_NAME_ONCREATE = <span class="string">"onCreate"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_NAME_ONDESTROY = <span class="string">"onDestroy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActivityClassVisitor</span><span class="params">(ClassVisitor cv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Opcodes.ASM5, cv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, String name, String signature, String superName,</span></span></span><br><span class="line"><span class="function"><span class="params">                      String[] interfaces)</span> </span>&#123;</span><br><span class="line">        mClassName = name;</span><br><span class="line">        <span class="keyword">super</span>.visit(version, access, name, signature, superName, interfaces);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc, String signature,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     String[] exceptions)</span> </span>&#123;</span><br><span class="line">        MethodVisitor methodVisitor = cv.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">        <span class="keyword">if</span> (CLASS_NAME_ACTIVITY.equals(mClassName)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (METHOD_NAME_ONCREATE.equals(name)) &#123;</span><br><span class="line">                System.out.println(<span class="string">"-------------------- ActivityClassVisitor,visit method:"</span> + name +</span><br><span class="line">                        <span class="string">" --------------------"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ActivityOnCreateMethodVisitor(Opcodes.ASM5, methodVisitor);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (METHOD_NAME_ONDESTROY.equals(name)) &#123;</span><br><span class="line">                System.out.println(<span class="string">"-------------------- ActivityClassVisitor,visit method:"</span> + name +</span><br><span class="line">                        <span class="string">" --------------------"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ActivityOnDestroyMethodVisitor(Opcodes.ASM5, methodVisitor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methodVisitor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里为简化操作，只处理了Activity的onCreate和onDestroy方法。在visitMethod方法里又调用了具体的MethodVisitor。如果对字节码不是特别了解的，可以通过在Android Studio中安装ASM Bytecode Outline插件来辅助。</p>
<p>具体使用:</p>
<blockquote>
<p>安装完成ASM Bytecode Outline后，重启Android Studio，然后在相应的Java文件中右键，选择Show Bytecode outline</p>
</blockquote>
<p><a href="/images/ASM%E6%8F%92%E6%A1%A92.png" data-fancybox="group" data-caption="ASM插桩2" class="fancybox"><img alt="ASM插桩2" title="ASM插桩2" data-src="/images/ASM%E6%8F%92%E6%A1%A92.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>稍待一会后，会生成相应的字节码，在打开的面板中选择ASMified标签</p>
<p><a href="/images/ASM%E6%8F%92%E6%A1%A93.png" data-fancybox="group" data-caption="ASM插桩2" class="fancybox"><img alt="ASM插桩2" title="ASM插桩2" data-src="/images/ASM%E6%8F%92%E6%A1%A93.png" src="/img/loading.gif" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityOnCreateMethodVisitor</span> <span class="keyword">extends</span> <span class="title">MethodVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActivityOnCreateMethodVisitor</span><span class="params">(<span class="keyword">int</span> api, MethodVisitor mv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(api, mv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         mv.visitLdcInsn(<span class="string">"ASMPlugin"</span>);</span><br><span class="line">        mv.visitLdcInsn(<span class="string">"-------------------- MainActivity onCreate --------------------"</span>);</span><br><span class="line">        mv.visitMethodInsn(INVOKESTATIC, <span class="string">"android/util/Log"</span>, <span class="string">"i"</span>, <span class="string">"(Ljava/lang/String;"</span> +</span><br><span class="line">                <span class="string">"Ljava/lang/String;)I"</span>, <span class="keyword">false</span>);</span><br><span class="line">        mv.visitInsn(POP);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.visitCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInsn</span><span class="params">(<span class="keyword">int</span> opcode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.visitInsn(opcode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityOnDestroyMethodVisitor</span> <span class="keyword">extends</span> <span class="title">MethodVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActivityOnDestroyMethodVisitor</span><span class="params">(<span class="keyword">int</span> api, MethodVisitor mv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(api, mv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.visitCode();</span><br><span class="line"></span><br><span class="line">        mv.visitLdcInsn(<span class="string">"ASMPlugin"</span>);</span><br><span class="line">        mv.visitLdcInsn(<span class="string">"-------------------- MainActivity onDestroy --------------------"</span>);</span><br><span class="line">        mv.visitMethodInsn(INVOKESTATIC, <span class="string">"android/util/Log"</span>, <span class="string">"i"</span>, <span class="string">"(Ljava/lang/String;"</span> +</span><br><span class="line">                <span class="string">"Ljava/lang/String;)I"</span>, <span class="keyword">false</span>);</span><br><span class="line">        mv.visitInsn(POP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInsn</span><span class="params">(<span class="keyword">int</span> opcode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.visitInsn(opcode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在visitCode和visitInsn方法里执行具体的操作。</p>
<p>在处理Class过程中，可能会出现各种问题，可以通过调试插件来定位问题。可以参考上一篇文章来调试插件。</p>
<h3 id="引用插件"><a href="#引用插件" class="headerlink" title="引用插件"></a>引用插件</h3><p>在app模块引用插件，这里不再详细介绍，可以参考前面的文章</p>
<p>将应用运行在手机上，打开后，可以看到日志输出:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">02-25 17:29:45.885 31237 31237 I ASMPlugin: -------------------- MainActivity onCreate --------------------</span><br><span class="line">02-25 17:29:50.646 31237 31237 I ASMPlugin: -------------------- MainActivity onDestroy --------------------</span><br></pre></td></tr></table></figure></div>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这篇文章只是实现了简单的ASM插桩。可以查阅其它资料，了解更多关于字节码、ASM相关的内容。</p>
<p>源码地址：<a href="https://github.com/milovetingting/Samples/tree/master/ASM" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/ASM</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Android</tag>
        <tag>字节码</tag>
        <tag>插桩</tag>
      </tags>
  </entry>
  <entry>
    <title>在Android Studio中调试Gradle插件</title>
    <url>/2020/02/25/Android/%E5%9C%A8Android%20Studio%E4%B8%AD%E8%B0%83%E8%AF%95Gradle%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="在Android-Studio中调试Gradle插件"><a href="#在Android-Studio中调试Gradle插件" class="headerlink" title="在Android Studio中调试Gradle插件"></a>在Android Studio中调试Gradle插件</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发Gradle插件时，经常会需要通过调试来排查问题，如果只使用日志输出来定位的话，效率不高，可以通过单步调试来定位问题。关于调试插件的资料，网上比较多，最终经过实践，参照这一篇文章 <a href="https://juejin.im/post/5dc8d947e51d455523170b7f" target="_blank" rel="noopener">https://juejin.im/post/5dc8d947e51d455523170b7f</a> 的方法，实现了插件的调试。在此也记录一下具体步骤。至于Gradle插件的开发，可以参照其它的资料，或者参考上一篇文章。</p>
<h2 id="新增-Run-Debug-Configuration"><a href="#新增-Run-Debug-Configuration" class="headerlink" title="新增 Run/Debug Configuration"></a>新增 Run/Debug Configuration</h2><p>通过【Run】-【Edit Configurations】新增Configuration</p>
<p><a href="/images/%E6%96%B0%E5%A2%9EConfiguration.png" data-fancybox="group" data-caption="新增Configuration" class="fancybox"><img alt="新增Configuration" title="新增Configuration" data-src="/images/%E6%96%B0%E5%A2%9EConfiguration.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在打开的界面，单击左上角的+，选择Remote</p>
<p><a href="/images/%E6%96%B0%E5%A2%9EConfiguration2.png" data-fancybox="group" data-caption="新增Configuration2" class="fancybox"><img alt="新增Configuration2" title="新增Configuration2" data-src="/images/%E6%96%B0%E5%A2%9EConfiguration2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在编辑界面，复制Command line arguments for remote JVM的配置，选择Use module classpath为需要调试的插件，Name项可以随意。</p>
<p><a href="/images/%E7%BC%96%E8%BE%91Configuration.png" data-fancybox="group" data-caption="编辑Configuration" class="fancybox"><img alt="编辑Configuration" title="编辑Configuration" data-src="/images/%E7%BC%96%E8%BE%91Configuration.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>编辑好后，点击OK保存。</p>
<h2 id="创建Run-Configuration"><a href="#创建Run-Configuration" class="headerlink" title="创建Run Configuration"></a>创建Run Configuration</h2><p>在Gradle面板中，为需要引入插件的模块创建Run Configuration。这里以app为例，在app-Tasks-build-build上右击，选择Create …</p>
<p><a href="/images/%E5%88%9B%E5%BB%BARun_Configuration.png" data-fancybox="group" data-caption="创建Run Configuration" class="fancybox"><img alt="创建Run Configuration" title="创建Run Configuration" data-src="/images/%E5%88%9B%E5%BB%BARun_Configuration.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在打开的编辑界面，将之前复制的参数粘贴进VM options一栏，然后将suspend=n改为suspend=y</p>
<p><a href="/images/%E5%88%9B%E5%BB%BARun_Configuration2.png" data-fancybox="group" data-caption="创建Run Configuration2" class="fancybox"><img alt="创建Run Configuration2" title="创建Run Configuration2" data-src="/images/%E5%88%9B%E5%BB%BARun_Configuration2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>点击OK保存后，gradle面板会增加Run Configurations。</p>
<p><a href="/images/%E5%88%9B%E5%BB%BARun_Configuration3.png" data-fancybox="group" data-caption="创建Run Configuration3" class="fancybox"><img alt="创建Run Configuration3" title="创建Run Configuration3" data-src="/images/%E5%88%9B%E5%BB%BARun_Configuration3.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>在需要调试的插件文件中打上断点，如在apply方法中加上断点。</p>
<p><a href="/images/%E8%B0%83%E8%AF%95.png" data-fancybox="group" data-caption="调试" class="fancybox"><img alt="调试" title="调试" data-src="/images/%E8%B0%83%E8%AF%95.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>如图，选择之前创建的Remote类型的Configuration,然后点击右侧的Debug</p>
<p><a href="/images/%E8%B0%83%E8%AF%952.png" data-fancybox="group" data-caption="调试2" class="fancybox"><img alt="调试2" title="调试2" data-src="/images/%E8%B0%83%E8%AF%952.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>点击Debug按钮后，会看到Debug面板显示已经连接成功</p>
<p><a href="/images/%E8%B0%83%E8%AF%953.png" data-fancybox="group" data-caption="调试3" class="fancybox"><img alt="调试3" title="调试3" data-src="/images/%E8%B0%83%E8%AF%953.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>gradle面板中，引入插件的模块(此处为app)-Run Configuration下的任务，双击运行</p>
<p><a href="/images/%E8%B0%83%E8%AF%954.png" data-fancybox="group" data-caption="调试4" class="fancybox"><img alt="调试4" title="调试4" data-src="/images/%E8%B0%83%E8%AF%954.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>可以看到已经能断点调试</p>
<p><a href="/images/%E8%B0%83%E8%AF%955.png" data-fancybox="group" data-caption="调试5" class="fancybox"><img alt="调试5" title="调试5" data-src="/images/%E8%B0%83%E8%AF%955.png" src="/img/loading.gif" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Android</tag>
        <tag>插件</tag>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Gradle插件</title>
    <url>/2020/02/24/Android/%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="自定义Gradle插件"><a href="#自定义Gradle插件" class="headerlink" title="自定义Gradle插件"></a>自定义Gradle插件</h1><p>自定义Gradle插件可以分三种</p>
<ol>
<li><p>定义在具体的Module对应的gradle文件里。这种方式定义的插件只能在定义的Module中使用</p>
</li>
<li><p>定义名为BuildSrc的Module,在BuildSrc里定义。这种方式定义的插件只能在同一个工程中使用。</p>
</li>
<li><p>定义其它名字的Module,在新定义的Module里定义插件。这种方式定义的插件可以给第三方使用。</p>
</li>
</ol>
<p>下面针对这三种方式,以开发一个可以让用户自定义配置的插件为例，分别来展开具体的定义插件过程</p>
<h2 id="定义在Gradle文件里"><a href="#定义在Gradle文件里" class="headerlink" title="定义在Gradle文件里"></a>定义在Gradle文件里</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在app模块下的gradle文件中，增加定义</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> CustomInnerConfig &#123;</span><br><span class="line">    String key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义extension</span></span><br><span class="line">extensions.create(<span class="string">"customInnerConfig"</span>, CustomInnerConfig.<span class="keyword">class</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span>(<span class="string">"CustomInnerTask"</span>, <span class="keyword">group</span>: <span class="string">'CustomTask'</span>).<span class="keyword">doLast</span> &#123;</span><br><span class="line">    <span class="keyword">println</span>(<span class="string">"CustomInnerTask,key=$&#123;customInnerConfig.key&#125;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>同步项目后,可以在Android Studio右侧的gradle面板中看到新增加的插件</p>
<p><a href="/images/%E5%AE%9A%E4%B9%89%E5%9C%A8gradle%E6%96%87%E4%BB%B6.png" data-fancybox="group" data-caption="定义在gradle文件" class="fancybox"><img alt="定义在gradle文件" title="定义在gradle文件" data-src="/images/%E5%AE%9A%E4%B9%89%E5%9C%A8gradle%E6%96%87%E4%BB%B6.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>自定义配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">customInnerConfig &#123;</span><br><span class="line">    key = <span class="string">'inner key'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在gralde面板中，找到CustomInnerTask,双击运行</p>
<p>输出结果如下,可以看到自定义的配置已经生效:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Parallel execution with configuration on demand is an incubating feature.</span><br><span class="line">:app:CustomInnerTask</span><br><span class="line">CustomInnerTask,key&#x3D;inner key</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br><span class="line">1 actionable task: 1 executed</span><br><span class="line">10:56:44: Task execution finished &#39;CustomInnerTask&#39;.</span><br></pre></td></tr></table></figure></div>

<h2 id="在BuildSrc模块中定义"><a href="#在BuildSrc模块中定义" class="headerlink" title="在BuildSrc模块中定义"></a>在BuildSrc模块中定义</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>新建名为BuildSrc的模块，删除BuildSrc模块下其它文件，只保留build.gradle。配置build.gradle文件如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'groovy'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation gradleApi()</span><br><span class="line">    implementation localGroovy()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>同步后，新建src/main目录</p>
<p>在main目录下新建groovy文件夹</p>
<p>然后在groovy文件夹下新建目录:com/wangyz/local</p>
<p>在local目录下新建CustomLocalConfig.java文件，内容如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wangyz.local;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomLocalConfig</span> </span>&#123;</span><br><span class="line">    String key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在local目录下新建LocalPlugin.groovy文件，内容如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wangyz.local</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Plugin</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Project</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        project.extensions.create(<span class="string">"setting"</span>, Setting)</span><br><span class="line"></span><br><span class="line">        project.task(<span class="string">'CustomLocalTask'</span>, <span class="string">group:</span> <span class="string">'Custom'</span>).doLast &#123;</span><br><span class="line">            println <span class="string">"自定义LocalTask,versionName:$&#123;project.setting.versionName&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>在app模块下的gradle文件中引入刚才定义的插件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: com.wangyz.local.LocalPlugin</span><br></pre></td></tr></table></figure></div>

<p>同步后，gradle面板如下</p>
<p><a href="/images/%E5%AE%9A%E4%B9%89%E5%9C%A8BuildSrc.png" data-fancybox="group" data-caption="定义在BuildSrc" class="fancybox"><img alt="定义在BuildSrc" title="定义在BuildSrc" data-src="/images/%E5%AE%9A%E4%B9%89%E5%9C%A8BuildSrc.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>自定义配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">customLocalConfig&#123;</span><br><span class="line">    key = <span class="string">'local key'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>双击CustomLocalTask，执行结果如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CustomLocalTask,key&#x3D;local key</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br><span class="line">1 actionable task: 1 executed</span><br><span class="line">11:20:47: Task execution finished &#39;CustomLocalTask&#39;.</span><br></pre></td></tr></table></figure></div>

<h2 id="定义可供第三方使用的插件"><a href="#定义可供第三方使用的插件" class="headerlink" title="定义可供第三方使用的插件"></a>定义可供第三方使用的插件</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>新建名为Plugins的模块，删除Plugins模块下src/main其它文件。配置build.gradle文件如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'groovy'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation gradleApi()</span><br><span class="line">    implementation localGroovy()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在main目录下新建groovy文件夹</p>
<p>然后在groovy文件夹下新建目录:com/wangyz/plugins</p>
<p>CustomConfig.java文件，内容如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wangyz.plugins;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String key;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在plugins目录下新建CustomPlugin.groovy文件，内容如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wangyz.plugins</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Plugin</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Project</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project)&#123;</span><br><span class="line">         project.extensions.create(<span class="string">"customConfig"</span>, CustomConfig)</span><br><span class="line"></span><br><span class="line">        project.task(<span class="string">'CustomTask'</span>, <span class="string">group:</span> <span class="string">'CustomTask'</span>).doLast &#123;</span><br><span class="line">            println <span class="string">"CustomTask,key=$&#123;project.customConfig.key&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在Plugins模块的src/main目录下新建resources/META-INF/gradle-plugins目录,在目录下新建名为com.wangyz.plugins.CustomPlugin.properties的文件，文件名即为第三方引用的插件名称。文件内容为:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation-class&#x3D;com.wangyz.plugins.CustomPlugin</span><br></pre></td></tr></table></figure></div>

<p>在这个文件里配置了之前定义的CustomPlugin的路径</p>
<h3 id="发布插件"><a href="#发布插件" class="headerlink" title="发布插件"></a>发布插件</h3><p>在Plugin模块的build.gradle文件中增加以下配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'maven-publish'</span></span><br><span class="line"></span><br><span class="line">publishing&#123;</span><br><span class="line">    publications&#123;</span><br><span class="line">        mavenJava(MavenPublication)&#123;</span><br><span class="line">            groupId <span class="string">'com.wangyzs.plugin'</span></span><br><span class="line">            artifactId <span class="string">'CustomPlugin'</span></span><br><span class="line">            version <span class="string">'1.0.0'</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">from</span> components.java</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publishing&#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven&#123;</span><br><span class="line">            url uri(<span class="string">'D:\\Repository'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>同步后,在Terminal面板执行gradle publish命令，然后在D:\Repository下可以找到生成的插件</p>
<h3 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h3><p>在工程的build.gradle文件中增加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        maven&#123;</span><br><span class="line">            url uri(<span class="string">'D:\\Repository'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.wangyz.plugins:CustomPlugin:1.0.0'</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在需要引入的模块的build.gradle中增加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.wangyz.plugins.CustomPlugin'</span></span><br><span class="line"></span><br><span class="line">customConfig&#123;</span><br><span class="line">    key = <span class="string">'custom key'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>同步后，在gradle面板双击CustomTask运行</p>
<p><a href="/images/%E7%AC%AC%E4%B8%89%E6%96%B9%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6.png" data-fancybox="group" data-caption="第三方使用的插件" class="fancybox"><img alt="第三方使用的插件" title="第三方使用的插件" data-src="/images/%E7%AC%AC%E4%B8%89%E6%96%B9%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>输出结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CustomTask,key&#x3D;custom key</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br><span class="line">1 actionable task: 1 executed</span><br><span class="line">13:02:48: Task execution finished &#39;CustomTask&#39;.</span><br></pre></td></tr></table></figure></div>

<p>源码地址:<a href="https://github.com/milovetingting/Samples/tree/master/GradlePlugin" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/GradlePlugin</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Android</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>热修复</title>
    <url>/2020/02/20/Android/%E7%83%AD%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="热修复"><a href="#热修复" class="headerlink" title="热修复"></a>热修复</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在熟悉Android热修复方面的知识，纸上得来终觉浅，因此写了一个基于dex分包方案的简单Demo。</p>
<h2 id="热修复是什么"><a href="#热修复是什么" class="headerlink" title="热修复是什么"></a>热修复是什么</h2><p>在热修复技术出现前，对于已经发布的应用，如果遇到BUG，需要再次发布版本，用户需要更新应用版本，才可以解决问题。这种方式，存在新版本覆盖所需要的时间较长、需要全量更新的问题。而基于热修复技术，可以打包出修复的补丁包，推送给客户端或者客户端拉取，可以减少修复BUG所需时间、减少更新包大小。</p>
<p><a href="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D.png" data-fancybox="group" data-caption="热修复" class="fancybox"><img alt="热修复" title="热修复" data-src="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="热修复分类"><a href="#热修复分类" class="headerlink" title="热修复分类"></a>热修复分类</h2><p><a href="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D2.png" data-fancybox="group" data-caption="热修复" class="fancybox"><img alt="热修复" title="热修复" data-src="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D2.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="基于Dex分包的热修复方案原理"><a href="#基于Dex分包的热修复方案原理" class="headerlink" title="基于Dex分包的热修复方案原理"></a>基于Dex分包的热修复方案原理</h2><p>在Android中，类加载器的结构如下：</p>
<p><a href="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D3.png" data-fancybox="group" data-caption="热修复" class="fancybox"><img alt="热修复" title="热修复" data-src="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D3.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="加载Dex的流程"><a href="#加载Dex的流程" class="headerlink" title="加载Dex的流程"></a>加载Dex的流程</h2><p>PathClassLoader与DexClassLoader都可以加载Dex，但最终都是通过他们的父类BaseDexClassLoader的findClass方法加载的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, <span class="keyword">null</span>, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, String librarySearchPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, librarySearchPath, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DexClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DexClassLoader</span><span class="params">(String dexPath, String optimizedDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">            String librarySearchPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">new</span> File(optimizedDirectory), librarySearchPath, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>BaseDexClassLoader中的findClass方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BaseDexClassLoader中的代码</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DexPathList pathList;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        List&lt;Throwable&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;Throwable&gt;();</span><br><span class="line">        Class c = pathList.findClass(name, suppressedExceptions);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ClassNotFoundException cnfe = <span class="keyword">new</span> ClassNotFoundException(<span class="string">"Didn't find class \""</span> + name + <span class="string">"\" on path: "</span> + pathList);</span><br><span class="line">            <span class="keyword">for</span> (Throwable t : suppressedExceptions) &#123;</span><br><span class="line">                cnfe.addSuppressed(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> cnfe;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，BaseDexClassLoader中的findClass方法又是通过DexPathList的findClass方法来具体实现的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DexPathList中的代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Element[] dexElements;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name, List&lt;Throwable&gt; suppressed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Element element : dexElements) &#123;</span><br><span class="line">            DexFile dex = element.dexFile;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Class clazz = dex.loadClassBinaryName(name, definingContext, suppressed);</span><br><span class="line">                <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dexElementsSuppressedExceptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">            suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>通过遍历dexElements中的元素来查找class，如果找到就不再往后查找。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DexPathList</span><span class="params">(ClassLoader definingContext, String dexPath,</span></span></span><br><span class="line"><span class="function"><span class="params">           String librarySearchPath, File optimizedDirectory)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">       <span class="keyword">this</span>.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory,</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>dexElements是在构造方法中赋值的。</p>
<p>基于上面的分析，如果在dexElements数组的开始位置插入补丁dex，那么系统则会应用补丁包中的class,从而达到替换原来的class的效果。</p>
<p>由于dex在应用启动加载过后，不会再次重复加载。因此，这种方案只有在冷启动后，再次加载dex才会生效。</p>
<h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>在Application中，加载补丁dex,通过反射，将补丁dex插入到BaseDexClassLoader的属性:pathList中的dexElements数据开始位置。</p>
<p>实现代码:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PatchUtil.loadPatch(getApplicationContext(), <span class="string">"/sdcard/patch.dex"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PatchUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载patch</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> patch</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadPatch</span><span class="params">(Context context, String patch)</span> <span class="keyword">throws</span> NoSuchFieldException,</span></span><br><span class="line"><span class="function">            IllegalAccessException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果patch不存在，直接返回</span></span><br><span class="line">        File patchFile = <span class="keyword">new</span> File(patch);</span><br><span class="line">        <span class="keyword">if</span> (!patchFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统的PathClassLoader</span></span><br><span class="line">        PathClassLoader pathClassLoader = (PathClassLoader) context.getClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取BaseDexClassLoader中DexPathList类型的属性:pathList</span></span><br><span class="line">        Field pathListField = pathClassLoader.getClass().getSuperclass().getDeclaredField(</span><br><span class="line">                <span class="string">"pathList"</span>);</span><br><span class="line">        pathListField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object pathListObject = pathListField.get(pathClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取DexPathList中Element[]类型的dexElements</span></span><br><span class="line">        Field dexElementsField = pathListObject.getClass().getDeclaredField(<span class="string">"dexElements"</span>);</span><br><span class="line">        dexElementsField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object dexElementsObject = dexElementsField.get(pathListObject);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置optimizedDirectory</span></span><br><span class="line">        File odex = context.getDir(<span class="string">"odex"</span>, Context.MODE_PRIVATE);</span><br><span class="line">        <span class="comment">//创建自定义的DexClassLoader</span></span><br><span class="line">        DexClassLoader dexClassLoader = <span class="keyword">new</span> DexClassLoader(patch, odex.getAbsolutePath(), <span class="keyword">null</span>,</span><br><span class="line">                context.getClassLoader());</span><br><span class="line">        <span class="comment">//获取BaseDexClassLoader中DexPathList类型的属性:pathList</span></span><br><span class="line">        Field patchPathListField = dexClassLoader.getClass().getSuperclass().getDeclaredField(</span><br><span class="line">                <span class="string">"pathList"</span>);</span><br><span class="line">        patchPathListField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object patchPathListObject = patchPathListField.get(dexClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取DexPathList中Element[]类型的dexElements</span></span><br><span class="line">        Field patchDexElementsField = patchPathListObject.getClass().getDeclaredField(</span><br><span class="line">                <span class="string">"dexElements"</span>);</span><br><span class="line">        patchDexElementsField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object patchDexElementsObject = patchDexElementsField.get(patchPathListObject);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并数组</span></span><br><span class="line">        Class&lt;?&gt; elementClazz = dexElementsObject.getClass().getComponentType();</span><br><span class="line">        <span class="keyword">int</span> dexElementsSize = Array.getLength(dexElementsObject);</span><br><span class="line">        <span class="keyword">int</span> patchDexElementsSize = Array.getLength(patchDexElementsObject);</span><br><span class="line">        <span class="keyword">int</span> newDexElementsSize = dexElementsSize + patchDexElementsSize;</span><br><span class="line">        Object newDexElements = Array.newInstance(elementClazz, newDexElementsSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newDexElementsSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; patchDexElementsSize) &#123;</span><br><span class="line">                Array.set(newDexElements, i, Array.get(patchDexElementsObject, i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Array.set(newDexElements, i, Array.get(dexElementsObject,</span><br><span class="line">                        i - patchDexElementsSize));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//替换原来的dexElements</span></span><br><span class="line">        dexElementsField.set(pathListObject, newDexElements);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="模拟发布应用中出现的BUG"><a href="#模拟发布应用中出现的BUG" class="headerlink" title="模拟发布应用中出现的BUG"></a>模拟发布应用中出现的BUG</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示Toast</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showToastShort</span><span class="params">(Context context, String text)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(context, text, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> Foo foo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        foo = <span class="keyword">new</span> Foo();</span><br><span class="line">        foo.showToastShort(getApplicationContext(), <span class="string">"出现BUG啦~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="生成修复补丁"><a href="#生成修复补丁" class="headerlink" title="生成修复补丁"></a>生成修复补丁</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> Foo foo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        foo = <span class="keyword">new</span> Foo();</span><br><span class="line">        foo.showToastShort(getApplicationContext(), <span class="string">"BUG修复啦~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在Android Studio中，先Build-Clean Project,然后Build-Rebuild Project，在项目的对应模块的\build\intermediates\javac\debug\classes目录下，将生成的对应class复制出来，放在其它位置，如D:\HotFix,复制出来的class文件要放在对应的包结构下，如:</p>
<p><a href="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D4.png" data-fancybox="group" data-caption="热修复" class="fancybox"><img alt="热修复" title="热修复" data-src="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D4.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>使用SDK中自带的dx工具生成dex文件</p>
<p>打开CMD窗口，定位到SDK中的build-tools文件夹中对应的版本，如28.0.0</p>
<p><a href="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D5.png" data-fancybox="group" data-caption="热修复" class="fancybox"><img alt="热修复" title="热修复" data-src="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D5.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>也可以将这个路径加入到系统的环境变量中，就可以在任何位置调用dx命令</p>
<p>输入以下命令生成dex:–dex –output=D:\HotFix\patch.dex D:\HotFix\</p>
<p>这里为简化操作，只是简单将文件推到/sdcard/下，对应具体的业务，可以通过网络下载回来。这里由于用到了sdcard，6.0以上的设备，需要申请存储的运行时权限。</p>
<p>结束应用的进程，再次打开应用，就会加载补丁dex，运行修复后的代码。</p>
<p>应用补丁前</p>
<p><a href="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D6.png" data-fancybox="group" data-caption="热修复" class="fancybox"><img alt="热修复" title="热修复" data-src="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D6.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>应用补丁后</p>
<p><a href="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D7.png" data-fancybox="group" data-caption="热修复" class="fancybox"><img alt="热修复" title="热修复" data-src="/images/%E7%83%AD%E4%BF%AE%E5%A4%8D7.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="CLASS-ISPREVERIFIED问题"><a href="#CLASS-ISPREVERIFIED问题" class="headerlink" title="CLASS_ISPREVERIFIED问题"></a>CLASS_ISPREVERIFIED问题</h2><p>这个问题只在Dalvik虚拟机之下出现(Android 4.4以下默认使用dalvik，5.0以后默认使用art虚拟机)。出现的原因：</p>
<p>apk在安装时，Dalvik虚拟机如果发现一个类A引用了其它类B，如果这个类B和类A位于同一个dex里，那么类A就会打上CLASS_ISPREVERIFIED标记。因此，如果类A引用了一个有BUG的类C，修复时用multidex热修复方案加载一个patch.dex，由于这个类已经被打上标记，而重启应用后，再次加载dex时，这个类C又位于另一个dex中，程序就会报错。</p>
<p>目前网上用的比较多的解决方案是，在类的构造函数中动态引入一个位于其它dex中的类，即字节码插桩。这块内容在下篇文章会展现。</p>
<p>源码地址:<a href="https://github.com/milovetingting/Samples/tree/master/HotFix" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/HotFix</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>热修复</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>/2020/02/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>桥接模式也称为桥梁模式，是结构型设计模式之一。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将抽象部分与实现部分分离，使它们都可以独立地进行变化。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>一个系统需要在构件的抽象化角色和具体角色之间增加更多灵活性，避免在两个层次之间建立静态的继承关系，可以通过桥接模式使它们在抽象层建立一个关联关系。</p>
</li>
<li><p>不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统。</p>
</li>
<li><p>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p>
</li>
</ol>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义抽象类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeAdditives</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">addSomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sugar</span> <span class="keyword">extends</span> <span class="title">CoffeeAdditives</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">addSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"加糖"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ordinary</span> <span class="keyword">extends</span> <span class="title">CoffeeAdditives</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">addSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"原味"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义抽象类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> CoffeeAdditives coffeeAdditives;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Coffee</span><span class="params">(CoffeeAdditives coffeeAdditives)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.coffeeAdditives = coffeeAdditives;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeCoffee</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LargeCoffee</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LargeCoffee</span><span class="params">(CoffeeAdditives coffeeAdditives)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(coffeeAdditives);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"大杯的"</span> + coffeeAdditives.addSomething() + <span class="string">"咖啡"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallCoffee</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SmallCoffee</span><span class="params">(CoffeeAdditives coffeeAdditives)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(coffeeAdditives);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"小杯的"</span> + coffeeAdditives.addSomething() + <span class="string">"咖啡"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Ordinary ordinary = <span class="keyword">new</span> Ordinary();</span><br><span class="line"></span><br><span class="line">		Sugar sugar = <span class="keyword">new</span> Sugar();</span><br><span class="line"></span><br><span class="line">		LargeCoffee largeCoffee = <span class="keyword">new</span> LargeCoffee(ordinary);</span><br><span class="line">		largeCoffee.makeCoffee();</span><br><span class="line"></span><br><span class="line">		SmallCoffee smallCoffee = <span class="keyword">new</span> SmallCoffee(ordinary);</span><br><span class="line">		smallCoffee.makeCoffee();</span><br><span class="line"></span><br><span class="line">		LargeCoffee largeCoffee2 = <span class="keyword">new</span> LargeCoffee(sugar);</span><br><span class="line">		largeCoffee2.makeCoffee();</span><br><span class="line"></span><br><span class="line">		SmallCoffee smallCoffee2 = <span class="keyword">new</span> SmallCoffee(sugar);</span><br><span class="line">		smallCoffee2.makeCoffee();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">大杯的原味咖啡</span><br><span class="line">小杯的原味咖啡</span><br><span class="line">大杯的加糖咖啡</span><br><span class="line">小杯的加糖咖啡</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/2020/02/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>外观模式在开发过程中的运用频率非常高。通过一个外观类使得整个系统的接口只有一个统一的高层接口，这样能够降低用户的使用成本，也对用户屏蔽了很多实现细节。外观模式是我们封装API的常用手段。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>要求一个子系统的外部与内部通信必须通过一个统一的对象进行。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>为一个复杂子系统提供一个简单接口。</p>
</li>
<li><p>当需要构建一个层次结构的子系统，用外观模式定义子系统中每层的入口点。</p>
</li>
</ol>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义Phone接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dial</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">hangup</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Phono实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneImpl</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hangup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"挂断"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Camera接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Camera</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">takePhoto</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Camera实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CameraImpl</span> <span class="keyword">implements</span> <span class="title">Camera</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"打开相机"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhoto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"拍照"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"关闭相机"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义MobilePhone类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MobilePhone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Phone mPhone = <span class="keyword">new</span> PhoneImpl();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Camera mCamera = <span class="keyword">new</span> CameraImpl();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mPhone.dial();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hangup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mPhone.hangup();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhoto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mCamera.open();</span><br><span class="line">		mCamera.takePhoto();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeCamera</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mCamera.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">videoChat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"--&gt;视频聊天接通中"</span>);</span><br><span class="line">		mCamera.open();</span><br><span class="line">		mPhone.dial();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		MobilePhone mobilePhone = <span class="keyword">new</span> MobilePhone();</span><br><span class="line">		mobilePhone.takePhoto();</span><br><span class="line">		mobilePhone.videoChat();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开相机</span><br><span class="line">拍照</span><br><span class="line">--&gt;视频聊天接通中</span><br><span class="line">打开相机</span><br><span class="line">打电话</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>享元模式</title>
    <url>/2020/02/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>享元模式是对象池的一种实现，用来尽可能减少内存使用量，它适合用于可能存在大量重复对象的场景，来缓存可共享的对象，达到对象共享、避免创建过多对象的效果，以提升性能、避免内存移除等。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>使用共享对象可有效地支持大量的细粒度的对象。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>系统中存在大量的相似对象</p>
</li>
<li><p>细粒度的对象都具备较接近的外部状态，而且内部状态与环境无关，也就是说对象没有特定身份</p>
</li>
<li><p>需要缓冲池的场景</p>
</li>
</ol>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>创建接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showTicketInfo</span><span class="params">(String bunk)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>实现接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainTicket</span> <span class="keyword">implements</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String from;</span><br><span class="line">	<span class="keyword">private</span> String to;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TrainTicket</span><span class="params">(String from, String to)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.from = from;</span><br><span class="line">		<span class="keyword">this</span>.to = to;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showTicketInfo</span><span class="params">(String bunk)</span> </span>&#123;</span><br><span class="line">		price = <span class="keyword">new</span> Random().nextInt(<span class="number">300</span>);</span><br><span class="line">		System.out.println(<span class="string">"购买 从 "</span> + from + <span class="string">" 到 "</span> + to + <span class="string">" 的 "</span> + bunk + <span class="string">" 火车票，价格:"</span> + price);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建工厂类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> Map&lt;String, Ticket&gt; sTicketMap = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Ticket&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Ticket <span class="title">getTicket</span><span class="params">(String from, String to)</span> </span>&#123;</span><br><span class="line">		String key = from + <span class="string">"-"</span> + to;</span><br><span class="line">		<span class="keyword">if</span> (sTicketMap.containsKey(key)) &#123;</span><br><span class="line">			System.out.println(<span class="string">"使用缓存==&gt;"</span> + key);</span><br><span class="line">			<span class="keyword">return</span> sTicketMap.get(key);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"创建对象==&gt;"</span> + key);</span><br><span class="line">			Ticket ticket = <span class="keyword">new</span> TrainTicket(from, to);</span><br><span class="line">			sTicketMap.put(key, ticket);</span><br><span class="line">			<span class="keyword">return</span> ticket;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Ticket ticket1 = TicketFactory.getTicket(<span class="string">"北京"</span>, <span class="string">"上海"</span>);</span><br><span class="line">		ticket1.showTicketInfo(<span class="string">"上铺"</span>);</span><br><span class="line">		Ticket ticket2 = TicketFactory.getTicket(<span class="string">"北京"</span>, <span class="string">"上海"</span>);</span><br><span class="line">		ticket1.showTicketInfo(<span class="string">"中铺"</span>);</span><br><span class="line">		Ticket ticket3 = TicketFactory.getTicket(<span class="string">"北京"</span>, <span class="string">"上海"</span>);</span><br><span class="line">		ticket1.showTicketInfo(<span class="string">"下铺"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建对象&#x3D;&#x3D;&gt;北京-上海</span><br><span class="line">购买 从 北京 到 上海 的 上铺 火车票，价格:44</span><br><span class="line">使用缓存&#x3D;&#x3D;&gt;北京-上海</span><br><span class="line">购买 从 北京 到 上海 的 中铺 火车票，价格:66</span><br><span class="line">使用缓存&#x3D;&#x3D;&gt;北京-上海</span><br><span class="line">购买 从 北京 到 上海 的 下铺 火车票，价格:86</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰模式</title>
    <url>/2020/02/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>装饰模式也称为包装模式，结构型设计模式之一，其使用一种对客户端透明的方式来动态地扩展对象的功能，同时它也是继承关系的一种替代方案之一。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式生成子类更为灵活。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>需要透明且动态地扩展类的功能时。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义Component</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义具体的Component</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"ConcreteComponent operate"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Decorator</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Component component;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.component = component;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		component.operate();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义具体的Decorator</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(component);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		operateA();</span><br><span class="line">		<span class="keyword">super</span>.operate();</span><br><span class="line">		operateB();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"operateA"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"operateB"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Component component = <span class="keyword">new</span> ConcreteComponent();</span><br><span class="line">		Decorator decorator = <span class="keyword">new</span> ConcreteDecorator(component);</span><br><span class="line">		decorator.operate();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">operateA</span><br><span class="line">ConcreteComponent operate</span><br><span class="line">operateB</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/2020/02/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>适配器模式，是将两个不兼容的类融合在一起，将不同的东西通过一种转换，使得它们能够协作起来。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>适配器模式把一个类的接口变换成客户端的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>系统需要使用现有的类，而此类的接口不符合系统的需要，即接口不兼容</p>
</li>
<li><p>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些将来可能引入的类一起工作</p>
</li>
<li><p>需要一个统一的输出接口，而输入端的类型不可预知</p>
</li>
</ol>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>适配器模式分为两种：</p>
<ol>
<li><p>类适配器模式</p>
</li>
<li><p>对象适配器模式</p>
</li>
</ol>
<h3 id="类适配器模式的简单使用"><a href="#类适配器模式的简单使用" class="headerlink" title="类适配器模式的简单使用"></a>类适配器模式的简单使用</h3><p>定义Target接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VoltTarget</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt5</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Adaptee，即需要被转换的对象</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltAdaptee</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt220</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">220</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Adapter</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltAdapter</span> <span class="keyword">extends</span> <span class="title">VoltAdaptee</span> <span class="keyword">implements</span> <span class="title">VoltTarget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		VoltAdapter adapter = <span class="keyword">new</span> VoltAdapter();</span><br><span class="line">		System.out.println(adapter.getVolt5());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></div>

<h3 id="对象适配器模式的简单使用"><a href="#对象适配器模式的简单使用" class="headerlink" title="对象适配器模式的简单使用"></a>对象适配器模式的简单使用</h3><p>与类的适配器模式一样，对象的适配器模式把被适配的类的API转换成目标类的API，与类的适配模式不同的是，对象的适配器模式不是使用继承关系连接到Adaptee类，而是使用代理关系连接到Adaptee类。</p>
<p>直接将要被适配的对象传递到Adapter中，使用组合的形式实现接口兼容的效果，这比类适配器方式更为灵活。它的另一个好处是被适配对象中的方法不会暴露出来。因此，对象适配器模式更加灵活、实用。</p>
<p>定义接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVoltTarget</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getVolt5</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Adaptee</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltAdaptee</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt220</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">220</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Adapter</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltAdapter2</span> <span class="keyword">implements</span> <span class="title">IVoltTarget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	VoltAdaptee voltAdaptee;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">VoltAdapter2</span><span class="params">(VoltAdaptee voltAdaptee)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.voltAdaptee = voltAdaptee;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt220</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> voltAdaptee.getVolt220();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVolt5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		VoltAdaptee adaptee = <span class="keyword">new</span> VoltAdaptee();</span><br><span class="line">		VoltAdapter2 adapter = <span class="keyword">new</span> VoltAdapter2(adaptee);</span><br><span class="line">		System.out.println(adapter.getVolt5());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/2020/02/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>组合模式也称为部分整体模式，结构型设计模式之一，组合模式比较简单，它将一组相似的对象看作一个对象处理，并根据一个树状结构来组合对象，然后提供一个统一的方法去访问相应的对象，以此忽略对象与对象集合之间的差别。生活中比较经典的例子就是公司的组织结构树状图。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将对象组合成树形结构以表示”部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>表示对象的部分-整体层次结构时。</p>
</li>
<li><p>从一个整体中能够独立出部分模块或功能时。</p>
</li>
</ol>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义节点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 节点名</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Component</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addChild</span><span class="params">(Component child)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">removeChild</span><span class="params">(Component child)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义枝干节点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> List&lt;Component&gt; components = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Composite</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		<span class="keyword">if</span> (components != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (Component c : components) &#123;</span><br><span class="line">				c.doSomething();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addChild</span><span class="params">(Component child)</span> </span>&#123;</span><br><span class="line">		components.add(child);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeChild</span><span class="params">(Component child)</span> </span>&#123;</span><br><span class="line">		components.remove(child);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> components.get(index);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义叶子节点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addChild</span><span class="params">(Component child)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"叶子节点没有子节点"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeChild</span><span class="params">(Component child)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"叶子节点没有子节点"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"叶子节点没有子节点"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Component root = <span class="keyword">new</span> Composite(<span class="string">"Root"</span>);</span><br><span class="line">		</span><br><span class="line">		Component branch1 = <span class="keyword">new</span> Composite(<span class="string">"Branch1"</span>);</span><br><span class="line">		Component branch2 = <span class="keyword">new</span> Composite(<span class="string">"Branch2"</span>);</span><br><span class="line">		</span><br><span class="line">		Component leaf1 = <span class="keyword">new</span> Leaf(<span class="string">"Leaf1"</span>);</span><br><span class="line">		Component leaf2 = <span class="keyword">new</span> Leaf(<span class="string">"Leaf2"</span>);</span><br><span class="line">		</span><br><span class="line">		branch1.addChild(leaf1);</span><br><span class="line">		branch2.addChild(leaf2);</span><br><span class="line">		</span><br><span class="line">		root.addChild(branch1);</span><br><span class="line">		root.addChild(branch2);</span><br><span class="line">		</span><br><span class="line">		root.doSomething();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Root</span><br><span class="line">Branch1</span><br><span class="line">Leaf1</span><br><span class="line">Branch2</span><br><span class="line">Leaf2</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2020/02/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>代理模式也称为委托模式，是一种结构型模式。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>为其他对象提供一种代理以控制对这个对象的访问。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>当无法或不想直接访问某个对象或访问对象存在困难时，可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，委托对象与代理对象需要实现相同的接口。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealVisitor</span> <span class="keyword">implements</span> <span class="title">IVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Real visit"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义代理类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyVisitor</span> <span class="keyword">implements</span> <span class="title">IVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> IVisitor mVisit;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxyVisitor</span><span class="params">(IVisitor mVisit)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.mVisit = mVisit;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mVisit.visit();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		IVisitor visitor = <span class="keyword">new</span> RealVisitor();</span><br><span class="line">		ProxyVisitor proxy = <span class="keyword">new</span> ProxyVisitor(visit);</span><br><span class="line">		proxy.visit();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Real Visit</span><br></pre></td></tr></table></figure></div>

<p>代理模式可以大致分为两大部分，一是静态代理，二是动态代理。静态代理如上述示例那样，代理者的代码由程序员自己或通过一些自动化工具生成固定的代码，再对其进行编译，我们的代码在运行前代理类的class编译文件已经存在；动态代理则与静态代理相反，通过反射机制动态地生成代理者的对象，也就是说我们在code阶段根本不需要知道代理谁，代理谁我们将在执行阶段决定。Java给我们提供了一个便捷的动态代理接口InvocationHandler。</p>
<p>定义动态代理类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.obj = obj;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		Object result = method.invoke(obj, args);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		IVisitor visitor = <span class="keyword">new</span> RealVisitor();</span><br><span class="line">		DynamicProxy proxy = <span class="keyword">new</span> DynamicProxy(visitor);</span><br><span class="line">		ClassLoader loader = visitor.getClass().getClassLoader();</span><br><span class="line">		IVisitor proxyVisitor = (IVisitor) Proxy.newProxyInstance(loader, <span class="keyword">new</span> Class[] &#123; IVisitor<span class="class">.<span class="keyword">class</span> &#125;, <span class="title">proxy</span>)</span>;</span><br><span class="line">		proxyVisitor.visit();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>中介者模式</title>
    <url>/2020/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h1><p>中介者模式也称为调解者模式或调停模式。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>中介者模式包装了一系列对象相互作用的方式，使得这些对象不必相互明显影响。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>当对象间交互操作很多且每个对象的行为操作都依赖彼此时，为防止在修改一个对象的行为时，同时涉及修改很多其他对象的行为。可采用中介者模式来解决耦合的问题。将对象间多对多关系变成一对多的问题。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义Mediator</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (customer <span class="keyword">instanceof</span> Seller) &#123;</span><br><span class="line">			sendMessageToBuyer();</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (customer <span class="keyword">instanceof</span> Buyer) &#123;</span><br><span class="line">			sendMessageToSeller();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sendMessageToSeller</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sendMessageToBuyer</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Customer</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Mediator实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediatorImpl</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToSeller</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"转发Buyer消息给Seller"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToBuyer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"转发Seller消息给Buyer"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Customer实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Buyer</span> <span class="keyword">extends</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Buyer</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(mediator);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mediator.handleMessage(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Seller</span> <span class="keyword">extends</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Seller</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(mediator);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mediator.handleMessage(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		MediatorImpl mediator = <span class="keyword">new</span> MediatorImpl();</span><br><span class="line">		Buyer buyer = <span class="keyword">new</span> Buyer(mediator);</span><br><span class="line">		Seller seller = <span class="keyword">new</span> Seller(mediator);</span><br><span class="line">		buyer.action();</span><br><span class="line">		seller.action();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">转发Buyer消息给Seller</span><br><span class="line">转发Seller消息给Buyer</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>访问者模式</title>
    <url>/2020/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>访问者模式是一种将数据操作与数据结构分离的设计模式，它是《设计模式》中23种设计模式最复杂的一个，但它的使用频率不高。</p>
<p>访问者模式的基本思想是，软件系统中拥有一个由许多对象构成的、比较稳定的对象结构，这些对象的类都拥有accept方法用来接受访问者对象的访问。访问者是一个接口，它拥有一个visit方法，这个方法对访问到的对象结构中不同类型的元素作出不同的处理。在对象结构的一次访问过程中，我们遍历整个对象结构，对每一个对象都实施accept方法，在每一个元素的accept方法中会调用访问者的visit方法，从而使访问者得以处理对象结构的每一个元素，我们可以针对对象结构设计不同的访问者类来完成不同的操作，达到区别对待的效果。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>对象结构比较稳定，但经常需要在此对象结构上定义新的操作。</p>
</li>
<li><p>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免这些操作污染这些对象的类，也不希望在增加新操作时修改这些类。</p>
</li>
</ol>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义Staff</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> kpi;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Staff</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		kpi = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Visitor</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Engineer engineer)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Manager manager)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Staff实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engineer</span> <span class="keyword">extends</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> codeLines;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Engineer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">		codeLines = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">		visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCodeLines</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> codeLines;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Staff</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> products;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">		products = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">		visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProducts</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> products;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Report</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Report</span> </span>&#123;</span><br><span class="line">	List&lt;Staff&gt; staffs = <span class="keyword">new</span> ArrayList&lt;Staff&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		staffs.add(<span class="keyword">new</span> Manager(<span class="string">"王经理"</span>));</span><br><span class="line">		staffs.add(<span class="keyword">new</span> Engineer(<span class="string">"王工"</span>));</span><br><span class="line">		staffs.add(<span class="keyword">new</span> Engineer(<span class="string">"李工"</span>));</span><br><span class="line">		staffs.add(<span class="keyword">new</span> Engineer(<span class="string">"周工"</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showReport</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (Staff staff : staffs) &#123;</span><br><span class="line">			staff.accept(visitor);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义Visitor实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEOVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Engineer engineer)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"工程师:"</span> + engineer.name + <span class="string">",KPI:"</span> + engineer.kpi);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Manager manager)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"经理:"</span> + manager.name + <span class="string">",KPI:"</span> + manager.kpi + <span class="string">",产品数量:"</span> + manager.getProducts());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CTOVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Engineer engineer)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"工程师:"</span> + engineer.name + <span class="string">",代码行数:"</span> + engineer.getCodeLines());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Manager manager)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"经理:"</span> + manager.name + <span class="string">",产品数量:"</span> + manager.getProducts());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Report report = <span class="keyword">new</span> Report();</span><br><span class="line">		System.out.println(<span class="string">"=====给CEO看的报表====="</span>);</span><br><span class="line">		report.showReport(<span class="keyword">new</span> CEOVisitor());</span><br><span class="line">		System.out.println(<span class="string">"=====给CTO看的报表====="</span>);</span><br><span class="line">		report.showReport(<span class="keyword">new</span> CTOVisitor());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;给CEO看的报表&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">经理:王经理,KPI:7,产品数量:5</span><br><span class="line">工程师:王工,KPI:7</span><br><span class="line">工程师:李工,KPI:7</span><br><span class="line">工程师:周工,KPI:6</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;给CTO看的报表&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">经理:王经理,产品数量:5</span><br><span class="line">工程师:王工,代码行数:1818</span><br><span class="line">工程师:李工,代码行数:4146</span><br><span class="line">工程师:周工,代码行数:8558</span><br></pre></td></tr></table></figure></div>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li><p>各角色职责分离，符合单一职责原则</p>
</li>
<li><p>具有优秀的扩展性</p>
</li>
<li><p>使得数据结构和作用于结构上的操作解耦，使得操作可以独立变化</p>
</li>
</ol>
<p>4.灵活性</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li><p>具体元素对访问者公布细节，违反了迪米特原则</p>
</li>
<li><p>具体元素变更时导致修改成本大</p>
</li>
<li><p>违反了依赖倒置原则，为了达到”区别对待”而依赖了具体类，没有依赖抽象</p>
</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模板方法模式</title>
    <url>/2020/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>在面向对象开发过程中，通常会遇到这样的问题：知道一个算法的关键步骤，并确定了这些步骤的执行顺序，但，某些步骤的具体实现是未知的，如：</p>
<ol>
<li><p>检查代码的正确性</p>
</li>
<li><p>链接相关的类库</p>
</li>
<li><p>编译相关代码</p>
</li>
<li><p>执行程序</p>
</li>
</ol>
<p>对于不同的程序设计语言，上述4个步骤是不一样的，但它们的执行流程是固定的，这类问题的解决方案就是模板方法模式。</p>
<h2 id="模式的定义"><a href="#模式的定义" class="headerlink" title="模式的定义"></a>模式的定义</h2><p>定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义算法的某些特定步骤。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>多个子类公有的方法，并且逻辑基本相同</p>
</li>
<li><p>重复、复杂的算法，可以将核心算法设计为模板方法，周边的相关代码细节功能由各个子类实现</p>
</li>
<li><p>重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为。</p>
</li>
</ol>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractComputer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"开启电源"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkHardware</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"硬件检测"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadOS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"载入操作系统"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"没有密码，直接进入系统"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">startUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-----开机 START-----"</span>);</span><br><span class="line">		powerOn();</span><br><span class="line">		checkHardware();</span><br><span class="line">		loadOS();</span><br><span class="line">		login();</span><br><span class="line">		System.out.println(<span class="string">"-----开机 END-----"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerA</span> <span class="keyword">extends</span> <span class="title">AbstractComputer</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"验证用户名和密码后开机"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerB</span> <span class="keyword">extends</span> <span class="title">AbstractComputer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkHardware</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.checkHardware();</span><br><span class="line">		System.out.println(<span class="string">"检查硬件防火墙"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"进行指纹验证"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AbstractComputer computerA = <span class="keyword">new</span> ComputerA();</span><br><span class="line">		computerA.startUp();</span><br><span class="line"></span><br><span class="line">		AbstractComputer computerB = <span class="keyword">new</span> ComputerB();</span><br><span class="line">		computerB.startUp();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-----开机 START-----</span><br><span class="line">开启电源</span><br><span class="line">硬件检测</span><br><span class="line">载入操作系统</span><br><span class="line">验证用户名和密码后开机</span><br><span class="line">-----开机 END-----</span><br><span class="line">-----开机 START-----</span><br><span class="line">开启电源</span><br><span class="line">硬件检测</span><br><span class="line">检查硬件防火墙</span><br><span class="line">载入操作系统</span><br><span class="line">进行指纹验证</span><br><span class="line">-----开机 END-----</span><br></pre></td></tr></table></figure></div>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>模板方法模式用4个字概括就是：流程封装。就是把固定的流程封装到一个final函数中，并且让子类能够定制这个流程中的某些或者所有步骤，这就要求父类提取共用的代码，提升代码的复用率，同时也带来了更好的可扩展性。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li><p>封装不变部分，扩展可变部分</p>
</li>
<li><p>提取公共部分代码，便于维护</p>
</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>模板方法会带来代码阅读的难度，会让用户觉得难以理解。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器模式</title>
    <url>/2020/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>迭代器模式又称为游标(Cursor)模式，是行为型设计模式之一。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>提供一种方法顺序访问一个容器对象中的各个元素，而又不需要暴露该对象的内部表示。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>遍历一个容器对象时。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义迭代器接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 迭代器接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 160317250</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 是否还有下一个元素</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 返回当前位置的元素并将位置移至下一位</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义迭代器实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体迭代器类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 160317250</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">IteratorImpl</span><span class="params">(List&lt;T&gt; list)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.list = list;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cursor != list.size();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		T obj = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.hasNext()) &#123;</span><br><span class="line">			obj = <span class="keyword">this</span>.list.get(cursor++);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> obj;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义容器接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 容器接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 160317250</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Container</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加一个元素</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(T obj)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 移除一个元素</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(T obj)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取容器的迭代器</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义容器实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Container</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">		list.add(obj);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">		list.remove(obj);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> IteratorImpl&lt;&gt;(list);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Container&lt;String&gt; container = <span class="keyword">new</span> ContainerImpl&lt;&gt;();</span><br><span class="line">		container.add(<span class="string">"a"</span>);</span><br><span class="line">		container.add(<span class="string">"b"</span>);</span><br><span class="line">		container.add(<span class="string">"c"</span>);</span><br><span class="line">		Iterator&lt;String&gt; iterator = container.iterator();</span><br><span class="line">		<span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">			System.out.println(iterator.next());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure></div>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>对于迭代器模式来说，其自身优点很明显也很单一，支持以不同的方式去遍历一个容器对象，也可以有多个遍历，弱化了容器类与遍历算法之间的关系，而缺点就是对类文件的增加。</p>
<p>迭代器模式发展至今，几乎每一种高级语言都有相应的内置实现，对于开发者而言，已经极少自己实现迭代器，因此对于迭代器模式更多的是在于了解。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>网络</title>
    <url>/2020/02/13/Java/%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文为学习Java相关知识所作笔记，参考以下资料:<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a> ,感谢原作者的分享!</p>
</blockquote>
<h2 id="网络-7-层架构"><a href="#网络-7-层架构" class="headerlink" title="网络 7 层架构"></a>网络 7 层架构</h2><p>7 层模型主要包括：</p>
<ol>
<li><p>物理层：主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。 它的主要作用是传输比特流（就是由 1、 0 转化为电流强弱来进行传输,到达目的地后在转化为1、 0，也就是我们常说的模数转换与数模转换）。这一层的数据叫做比特。</p>
</li>
<li><p>数据链路层：主要将从物理层接收的数据进行 MAC 地址（网卡的地址）的封装与解封装。常把这一层的数据叫做帧。在这一层工作的设备是交换机，数据通过交换机来传输。</p>
</li>
<li><p>网络层：主要将从下层接收到的数据进行 IP 地址（例 192.168.0.1)的封装与解封装。在这一层工作的设备是路由器，常把这一层的数据叫做数据包。</p>
</li>
<li><p>传输层：定义了一些传输数据的协议和端口号（WWW 端口 80 等），如： TCP（传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据）， UDP（用户数据报协议，与 TCP 特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如 QQ 聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段进行传输，到达目的地址后在进行重组。常常把这一层数据叫做段。</p>
</li>
<li><p>会话层：通过传输层（端口号：传输端口与接收端口） 建立数据传输的通路。主要在你的系统之间发起会话或或者接受会话请求（设备之间需要互相认识可以是 IP 也可以是 MAC 或者是主机名）</p>
</li>
<li><p>表示层：主要是进行对接收的数据进行解释、加密与解密、压缩与解压缩等（也就是把计算机能够识别的东西转换成人能够能识别的东西（如图片、声音等））</p>
</li>
<li><p>应用层 主要是一些终端的应用，比如说 FTP（各种文件下载）， WEB（IE浏览）， QQ之类的（你就把它理解成我们在电脑屏幕上可以看到的东西．就 是终端应用）。</p>
</li>
</ol>
<p><a href="/images/%E7%BD%91%E7%BB%9C.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/%E7%BD%91%E7%BB%9C.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="TCP-IP-原理"><a href="#TCP-IP-原理" class="headerlink" title="TCP/IP 原理"></a>TCP/IP 原理</h2><p>TCP/IP 协议不是 TCP 和 IP 这两个协议的合称，而是指因特网整个 TCP/IP 协议族。从协议分层模型方面来讲， TCP/IP 由四个层次组成：网络接口层、网络层、传输层、应用层。</p>
<p><a href="/images/%E7%BD%91%E7%BB%9C2.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/%E7%BD%91%E7%BB%9C2.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="网络访问层-Network-Access-Layer"><a href="#网络访问层-Network-Access-Layer" class="headerlink" title="网络访问层(Network Access Layer)"></a>网络访问层(Network Access Layer)</h3><p>网络访问层(Network Access Layer)在 TCP/IP 参考模型中并没有详细描述， 只是指出主机必须使用某种协议与网络相连</p>
<h3 id="网络层-Internet-Layer"><a href="#网络层-Internet-Layer" class="headerlink" title="网络层(Internet Layer)"></a>网络层(Internet Layer)</h3><p>网络层(Internet Layer)是整个体系结构的关键部分，其功能是使主机可以把分组发往任何网络，并使分组独立地传向目标。这些分组可能经由不同的网络，到达的顺序和发送的顺序也可能不同。高层如果需要顺序收发，那么就必须自行处理对分组的排序。 互联网层使用因特网协议(IP， Internet Protocol)</p>
<h3 id="传输层-Tramsport-Layer-TCP-UDP"><a href="#传输层-Tramsport-Layer-TCP-UDP" class="headerlink" title="传输层(Tramsport Layer-TCP/UDP)"></a>传输层(Tramsport Layer-TCP/UDP)</h3><p>传输层(Tramsport Layer)使源端和目的端机器上的对等实体可以进行会话。 在这一层定义了两个端到端的协议：传输控制协议(TCP， Transmission Control Protocol)和用户数据报协议(UDP， User Datagram Protocol)。 TCP 是面向连接的协议，它提供可靠的报文传输和对上层应用的连接服务。为此，除了基本的数据传输外，它还有可靠性保证、流量控制、多路复用、优先权和安全性控制等功能。 UDP 是面向无连接的不可靠传输的协议，主要用于不需要 TCP 的排序和流量控制等功能的应用程序</p>
<h3 id="应用层-Application-Layer"><a href="#应用层-Application-Layer" class="headerlink" title="应用层(Application Layer)"></a>应用层(Application Layer)</h3><p>应用层(Application Layer)包含所有的高层协议，包括： 虚拟终端协议(TELNET，TELecommunications NETwork)、文件传输协议(FTP， File Transfer Protocol)、电子邮件传输协议(SMTP， Simple Mail Transfer Protocol)、域名服务(DNS， Domain Name Service)、网上新闻传输协议(NNTP， Net News Transfer Protocol)和超文本传送协议(HTTP， HyperText Transfer Protocol)等</p>
<h2 id="TCP-三次握手-四次挥手"><a href="#TCP-三次握手-四次挥手" class="headerlink" title="TCP 三次握手/四次挥手"></a>TCP 三次握手/四次挥手</h2><p>TCP 在传输之前会进行三次沟通，一般称为“三次握手”，传完数据断开的时候要进行四次沟通，一般称为“四次挥手”</p>
<h3 id="数据包说明"><a href="#数据包说明" class="headerlink" title="数据包说明"></a>数据包说明</h3><ol>
<li><p>源端口号（16 位）：它（连同源主机 IP 地址）标识源主机的一个应用进程。</p>
</li>
<li><p>目的端口号（16 位）：它（连同目的主机 IP 地址）标识目的主机的一个应用进程。这两个值加上 IP 报头中的源主机 IP 地址和目的主机 IP 地址唯一确定一个 TCP 连接。</p>
</li>
<li><p>顺序号 seq（32 位）： 用来标识从 TCP 源端向 TCP 目的端发送的数据字节流，它表示在这个报文段中的第一个数据字节的顺序号。如果将字节流看作在两个应用程序间的单向流动，则TCP 用顺序号对每个字节进行计数。序号是 32bit 的无符号数， 序号到达 2 的 32 次方 － 1 后又从 0 开始。 当建立一个新的连接时， SYN 标志变 1 ，顺序号字段包含由这个主机选择的该连接的初始顺序号 ISN （Initial Sequence Number ）。</p>
</li>
<li><p>确认号 ack（32 位）： 包含发送确认的一端所期望收到的下一个顺序号。因此，确认序号应当是上次已成功收到数据字节顺序号加 1 。 只有 ACK 标志为 1 时确认序号字段才有效。 TCP 为应用层提供全双工服务，这意味数据能在两个方向上独立地进行传输。因此，连接的每一端必须保持每个方向上的传输数据顺序号。</p>
</li>
<li><p>TCP 报头长度（4 位）：给出报头中 32bit 字的数目， 它实际上指明数据从哪里开始。 需要这个值是因为任选字段的长度是可变的。这个字段占 4bit ，因此 TCP 最多有 60 字节的首部。然而，没有任选字段，正常的长度是 20 字节。</p>
</li>
<li><p>保留位（6 位）：保留给将来使用，目前必须置为 0 。</p>
</li>
<li><p>控制位（control flags ， 6 位）：在 TCP 报头中有 6 个标志比特，它们中的多个可同时被设置为 1 。依次为：</p>
<p> URG ：为 1 表示紧急指针有效，为 0 则忽略紧急指针值。<br> ACK ：为 1 表示确认号有效，为 0 表示报文中不包含确认信息，忽略确认号字段。<br> PSH ：为 1 表示是带有 PUSH 标志的数据， 指示接收方应该尽快将这个报文段交给应用层而不用等待缓冲区装满。<br> RST ： 用于复位由于主机崩溃或其他原因而出现错误的连接。它还可以用于拒绝非法的报文段和拒绝连接请求。一般情况下，如果收到一个 RST 为 1 的报文，那么一定发生了某些问题。<br> SYN ：同步序号， 为 1 表示连接请求，用于建立连接和使顺序号同步（synchronize ）。<br> FIN ： 用于释放连接，为 1 表示发送方已经没有数据发送了，即关闭本方数据流。</p>
</li>
<li><p>窗口大小（16 位）：数据字节数，表示从确认号开始，本报文的源方可以接收的字节数，即源方接收窗口大小。窗口大小是一个 16bit 字段，因而窗口大小最大为 65535 字节。</p>
</li>
<li><p>校验和（16 位）：此校验和是对整个的 TCP 报文段， 包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。这是一个强制性的字段，一定是由发送端计算和存储， 并由接收端进行验证。</p>
</li>
<li><p>紧急指针（16 位）：只有当 URG 标志置 1 时紧急指针才有效。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</p>
</li>
<li><p>选项：最常见的可选字段是最长报文大小，又称为 MSS(Maximum Segment Size) 。每个连接方通常都在通信的第一个报文段（为建立连接而设置 SYN 标志的那个段）中指明这个选项，它指明本端所能接收的最大长度的报文段。选项长度不一定是 32 位字的整数倍，所以要加填充位，使得报头长度成为整字数。</p>
</li>
<li><p>数据： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段。</p>
</li>
</ol>
<p><a href="/images/%E7%BD%91%E7%BB%9C3.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/%E7%BD%91%E7%BB%9C3.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>第一次握手：主机 A 发送位码为 syn＝1,随机产生 seq number=1234567 的数据包到服务器，主机 B由 SYN=1 知道， A 要求建立联机；</p>
<p>第 二 次 握 手 ： 主 机 B 收 到 请 求 后 要 确 认 联 机 信 息 ， 向 A 发 送 ack number=( 主 机 A 的seq+1),syn=1,ack=1,随机产生 seq=7654321 的包</p>
<p>第三次握手： 主机 A 收到后检查 ack number 是否正确，即第一次发送的 seq number+1,以及位码ack 是否为 1，若正确， 主机 A 会再发送 ack number=(主机 B 的 seq+1),ack=1，主机 B 收到后确认seq 值与 ack=1 则连接建立成功</p>
<p><a href="/images/%E7%BD%91%E7%BB%9C4.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/%E7%BD%91%E7%BB%9C4.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>TCP 建立连接要进行三次握手，而断开连接要进行四次。这是由于 TCP 的半关闭造成的。因为 TCP 连接是全双工的(即数据可在两个方向上同时传递)所以进行关闭时每个方向上都要单独进行关闭。这个单方向的关闭就叫半关闭。当一方完成它的数据发送任务，就发送一个 FIN 来向另一方通告将要终止这个方向的连接。</p>
<ol>
<li><p>关闭客户端到服务器的连接：首先客户端 A 发送一个 FIN，用来关闭客户到服务器的数据传送，然后等待服务器的确认。其中终止标志位 FIN=1，序列号 seq=u</p>
</li>
<li><p>服务器收到这个 FIN，它发回一个 ACK，确认号 ack 为收到的序号加 1。</p>
</li>
<li><p>关闭服务器到客户端的连接：也是发送一个 FIN 给客户端。</p>
</li>
<li><p>客户段收到 FIN 后，并发回一个 ACK 报文确认，并将确认序号 seq 设置为收到序号加 1。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</p>
</li>
</ol>
<p><a href="/images/%E7%BD%91%E7%BB%9C5.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/%E7%BD%91%E7%BB%9C5.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>主机 A 发送 FIN 后，进入终止等待状态， 服务器 B 收到主机 A 连接释放报文段后，就立即给主机 A 发送确认，然后服务器 B 就进入 close-wait 状态，此时 TCP 服务器进程就通知高层应用进程，因而从 A 到 B 的连接就释放了。此时是“半关闭”状态。即 A 不可以发送给B，但是 B 可以发送给 A。此时，若 B 没有数据报要发送给 A 了，其应用进程就通知 TCP 释放连接，然后发送给 A 连接释放报文段，并等待确认。 A 发送确认后，进入 time-wait，注意，此时 TCP 连接还没有释放掉，然后经过时间等待计时器设置的 2MSL 后， A 才进入到close 状态</p>
<h2 id="HTTP-原理"><a href="#HTTP-原理" class="headerlink" title="HTTP 原理"></a>HTTP 原理</h2><p>HTTP 是一个无状态的协议。无状态是指客户机（Web 浏览器）和服务器之间不需要建立持久的连接，这意味着当一个客户端向服务器端发出请求，然后服务器返回响应(response)，连接就被关闭了，在服务器端不保留连接的有关信息.HTTP 遵循请求(Request)/应答(Response)模型。客户机（浏览器）向服务器发送请求，服务器处理请求并返回适当的应答。所有 HTTP 连接都被构造成一套请求和应答。</p>
<h3 id="传输流程"><a href="#传输流程" class="headerlink" title="传输流程"></a>传输流程</h3><h4 id="地址解析"><a href="#地址解析" class="headerlink" title="地址解析"></a>地址解析</h4><p>如用客户端浏览器请求这个页面： <a href="http://localhost.com:8080/index.htm" target="_blank" rel="noopener">http://localhost.com:8080/index.htm</a> 从中分解出协议名、主机名、端口、对象路径等部分，对于我们的这个地址，解析得到的结果如下：</p>
<p>协议名： http</p>
<p>主机名： localhost.com</p>
<p>端口： 8080</p>
<p>对象路径： /index.htm</p>
<p>在这一步，需要域名系统 DNS 解析域名 localhost.com,得主机的 IP 地址。</p>
<h4 id="封装-HTTP-请求数据包"><a href="#封装-HTTP-请求数据包" class="headerlink" title="封装 HTTP 请求数据包"></a>封装 HTTP 请求数据包</h4><p>把以上部分结合本机自己的信息，封装成一个 HTTP 请求数据包</p>
<h4 id="封装成-TCP-包并建立连接"><a href="#封装成-TCP-包并建立连接" class="headerlink" title="封装成 TCP 包并建立连接"></a>封装成 TCP 包并建立连接</h4><p>封装成 TCP 包，建立 TCP 连接（TCP 的三次握手）</p>
<h4 id="客户机发送请求命令"><a href="#客户机发送请求命令" class="headerlink" title="客户机发送请求命令"></a>客户机发送请求命令</h4><p>客户机发送请求命令： 建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是 MIME 信息包括请求修饰符、客户机信息和可内容。</p>
<h4 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h4><p>服务器接到请求后，给予相应的响应信息， 其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是 MIME 信息包括服务器信息、实体信息和可能的内容</p>
<h4 id="服务器关闭-TCP-连接"><a href="#服务器关闭-TCP-连接" class="headerlink" title="服务器关闭 TCP 连接"></a>服务器关闭 TCP 连接</h4><p>服务器关闭 TCP 连接： 一般情况下，一旦 Web 服务器向浏览器发送了请求数据，它就要关闭 TCP 连接，然后如果浏览器或者服务器在其头信息加入了这行代码 Connection:keep-alive， TCP 连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽</p>
<p><a href="/images/%E7%BD%91%E7%BB%9C6.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/%E7%BD%91%E7%BB%9C6.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="HTTP-状态"><a href="#HTTP-状态" class="headerlink" title="HTTP 状态"></a>HTTP 状态</h3><p><a href="/images/%E7%BD%91%E7%BB%9C7.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/%E7%BD%91%E7%BB%9C7.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>HTTPS（全称： Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP 通道，简单讲是 HTTP 的安全版。即 HTTP 下加入 SSL 层， HTTPS 的安全基础是 SSL。其所用的端口号是 443。 过程大致如下：</p>
<h4 id="建立连接获取证书"><a href="#建立连接获取证书" class="headerlink" title="建立连接获取证书"></a>建立连接获取证书</h4><p>SSL 客户端通过 TCP 和服务器建立连接之后（443 端口），并且在一般的 tcp 连接协商（握手）过程中请求证书。即客户端发出一个消息给服务器，这个消息里面包含了自己可实现的算法列表和其它一些需要的消息， SSL 的服务器端会回应一个数据包，这里面确定了这次通信所需要的算法，然后服务器向客户端返回证书。（证书里面包含了服务器信息：域名。申请证书的公司，公共秘钥）</p>
<h4 id="证书验证"><a href="#证书验证" class="headerlink" title="证书验证"></a>证书验证</h4><p>Client 在收到服务器返回的证书后，判断签发这个证书的公共签发机构，并使用这个机构的公共秘钥确认签名是否有效，客户端还会确保证书中列出的域名就是它正在连接的域名。</p>
<h4 id="数据加密和传输"><a href="#数据加密和传输" class="headerlink" title="数据加密和传输"></a>数据加密和传输</h4><p>如果确认证书有效，那么生成对称秘钥并使用服务器的公共秘钥进行加密。然后发送给服务器，服务器使用它的私钥对它进行解密，这样两台计算机可以开始进行对称加密进行通信。</p>
<p><a href="/images/%E7%BD%91%E7%BB%9C8.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/%E7%BD%91%E7%BB%9C8.png" src="/img/loading.gif" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2020/02/13/Java/JAVA%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文为学习Java相关知识所作笔记，参考以下资料:<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a> ,感谢原作者的分享!</p>
</blockquote>
<h2 id="JAVA-异常分类及处理"><a href="#JAVA-异常分类及处理" class="headerlink" title="JAVA 异常分类及处理"></a>JAVA 异常分类及处理</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>如果某个方法不能按照正常的途径完成任务，就可以通过另一种路径退出方法。在这种情况下会抛出一个封装了错误信息的对象。此时，这个方法会立刻退出同时不返回任何值。另外，调用这个方法的其他代码也无法继续执行，异常处理机制会将代码执行交给异常处理器</p>
<p><a href="/images/java%E5%9F%BA%E7%A1%80.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/java%E5%9F%BA%E7%A1%80.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h3><p>Throwable 是 Java 语言中所有错误或异常的超类。下一层分为 Error 和 Exception</p>
<h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><p>Error 类是指 java 运行时系统的内部错误和资源耗尽错误。应用程序不会抛出该类对象。如果出现了这样的错误，除了告知用户，剩下的就是尽力使程序安全的终止</p>
<h4 id="Exception（RuntimeException、-CheckedException）"><a href="#Exception（RuntimeException、-CheckedException）" class="headerlink" title="Exception（RuntimeException、 CheckedException）"></a>Exception（RuntimeException、 CheckedException）</h4><p>Exception 又 有 两 个 分 支 ， 一 个 是 运 行 时 异 常 RuntimeException ， 一 个 是CheckedException</p>
<p>RuntimeException 如 ： NullPointerException 、 ClassCastException ； 一 个 是 检 查 异 常CheckedException，如 I/O 错误导致的 IOException、 SQLException。 RuntimeException 是那些可能在 Java 虚拟机正常运行期间抛出的异常的超类。 如果出现 RuntimeException，那么一定是程序员的错误.</p>
<p>检查异常 CheckedException： 一般是外部错误，这种异常都发生在编译阶段， Java 编译器会强制程序去捕获此类异常，即会出现要求你把这段可能出现异常的程序进行 try catch，该类异常一般包括几个方面：</p>
<ol>
<li><p>试图在文件尾部读取数据</p>
</li>
<li><p>试图打开一个错误格式的 URL</p>
</li>
<li><p>试图根据给定的字符串查找 class 对象，而这个字符串表示的类并不存在</p>
</li>
</ol>
<h3 id="异常的处理方式"><a href="#异常的处理方式" class="headerlink" title="异常的处理方式"></a>异常的处理方式</h3><h4 id="遇到问题不进行具体处理，而是继续抛给调用者-（throw-throws）"><a href="#遇到问题不进行具体处理，而是继续抛给调用者-（throw-throws）" class="headerlink" title="遇到问题不进行具体处理，而是继续抛给调用者 （throw,throws）"></a>遇到问题不进行具体处理，而是继续抛给调用者 （throw,throws）</h4><p>抛出异常有三种形式，一是 throw,一个 throws，还有一种系统自动抛异常</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="keyword">if</span>(s.equals(<span class="string">"abc"</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a/b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="try-catch-捕获异常针对性处理方式"><a href="#try-catch-捕获异常针对性处理方式" class="headerlink" title="try catch 捕获异常针对性处理方式"></a>try catch 捕获异常针对性处理方式</h4><h3 id="Throw-和-throws-的区别"><a href="#Throw-和-throws-的区别" class="headerlink" title="Throw 和 throws 的区别"></a>Throw 和 throws 的区别</h3><h4 id="位置不同"><a href="#位置不同" class="headerlink" title="位置不同"></a>位置不同</h4><p>throws 用在函数上，后面跟的是异常类，可以跟多个； 而 throw 用在函数内，后面跟的是异常对象。</p>
<h4 id="功能不同"><a href="#功能不同" class="headerlink" title="功能不同"></a>功能不同</h4><p>throws 用来声明异常，让调用者只知道该功能可能出现的问题，可以给出预先的处理方式； throw 抛出具体的问题对象，执行到 throw，功能就已经结束了，跳转到调用者，并将具体的问题对象抛给调用者。也就是说 throw 语句独立存在时，下面不要定义其他语句，因为执行不到。</p>
<p>throws 表示出现异常的一种可能性，并不一定会发生这些异常； throw 则是抛出了异常，执行 throw 则一定抛出了某种异常对象。</p>
<p>两者都是消极处理异常的方式，只是抛出或者可能抛出异常，但是不会由函数去处理异常，真正的处理异常由函数的上层调用处理。</p>
<h2 id="JAVA-反射"><a href="#JAVA-反射" class="headerlink" title="JAVA 反射"></a>JAVA 反射</h2><h3 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h3><p>动态语言，是指程序在运行时可以改变其结构：新的函数可以引进，已有的函数可以被删除等结构上的变化。比如常见的 JavaScript 就是动态语言，除此之外 Ruby,Python 等也属于动态语言，而 C、 C++则不属于动态语言。 从反射角度说 JAVA 属于半动态语言</p>
<h3 id="反射机制概念-（运行状态中知道类所有的属性和方法）"><a href="#反射机制概念-（运行状态中知道类所有的属性和方法）" class="headerlink" title="反射机制概念 （运行状态中知道类所有的属性和方法）"></a>反射机制概念 （运行状态中知道类所有的属性和方法）</h3><p><a href="/images/java%E5%9F%BA%E7%A1%802.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/java%E5%9F%BA%E7%A1%802.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在 Java 中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为 Java 语言的反射机制。</p>
<h3 id="反射的应用场合"><a href="#反射的应用场合" class="headerlink" title="反射的应用场合"></a>反射的应用场合</h3><h4 id="编译时类型和运行时类型"><a href="#编译时类型和运行时类型" class="headerlink" title="编译时类型和运行时类型"></a>编译时类型和运行时类型</h4><p>在 Java 程序中许多对象在运行是都会出现两种类型：编译时类型和运行时类型。 编译时的类型由声明对象时实用的类型来决定，运行时的类型由实际赋值给对象的类型决定 。 如：</p>
<p>Person p=new Student();</p>
<p>其中编译时类型为 Person，运行时类型为 Student</p>
<h4 id="编译时类型无法获取具体方法"><a href="#编译时类型无法获取具体方法" class="headerlink" title="编译时类型无法获取具体方法"></a>编译时类型无法获取具体方法</h4><p>程序在运行时还可能接收到外部传入的对象， 该对象的编译时类型为 Object,但是程序有需要调用该对象的运行时类型的方法。为了解决这些问题， 程序需要在运行时发现对象和类的真实信息。然而，如果编译时根本无法预知该对象和类属于哪些类，程序只能依靠运行时信息来发现该对象和类的真实信息，此时就必须使用到反射了</p>
<h3 id="Java-反射-API"><a href="#Java-反射-API" class="headerlink" title="Java 反射 API"></a>Java 反射 API</h3><h4 id="反射-API-用来生成-JVM-中的类、接口或则对象的信息"><a href="#反射-API-用来生成-JVM-中的类、接口或则对象的信息" class="headerlink" title="反射 API 用来生成 JVM 中的类、接口或则对象的信息"></a>反射 API 用来生成 JVM 中的类、接口或则对象的信息</h4><ol>
<li><p>Class 类：反射的核心类，可以获取类的属性，方法等信息。</p>
</li>
<li><p>Field 类： Java.lang.reflec 包中的类， 表示类的成员变量，可以用来获取和设置类之中的属性值。</p>
</li>
<li><p>Method 类： Java.lang.reflec 包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法。</p>
</li>
<li><p>Constructor 类： Java.lang.reflec 包中的类，表示类的构造方法。</p>
</li>
</ol>
<h4 id="反射使用步骤（获取-Class-对象、调用对象方法）"><a href="#反射使用步骤（获取-Class-对象、调用对象方法）" class="headerlink" title="反射使用步骤（获取 Class 对象、调用对象方法）"></a>反射使用步骤（获取 Class 对象、调用对象方法）</h4><ol>
<li><p>获取想要操作的类的 Class 对象，他是反射的核心，通过 Class 对象我们可以任意调用类的方法。</p>
</li>
<li><p>调用 Class 类中的方法，既就是反射的使用阶段。</p>
</li>
<li><p>使用反射 API 来操作这些信息。</p>
</li>
</ol>
<h4 id="获取-Class-对象的-3-种方法"><a href="#获取-Class-对象的-3-种方法" class="headerlink" title="获取 Class 对象的 3 种方法"></a>获取 Class 对象的 3 种方法</h4><h5 id="调用某个对象的-getClass-方法"><a href="#调用某个对象的-getClass-方法" class="headerlink" title="调用某个对象的 getClass()方法"></a>调用某个对象的 getClass()方法</h5><p>Person p=new Person();</p>
<p>Class clazz=p.getClass();</p>
<h5 id="调用某个类的-class-属性来获取该类对应的-Class-对象"><a href="#调用某个类的-class-属性来获取该类对应的-Class-对象" class="headerlink" title="调用某个类的 class 属性来获取该类对应的 Class 对象"></a>调用某个类的 class 属性来获取该类对应的 Class 对象</h5><p>Class clazz=Person.class;</p>
<h5 id="使用-Class-类中的-forName-静态方法-最安全-性能最好"><a href="#使用-Class-类中的-forName-静态方法-最安全-性能最好" class="headerlink" title="使用 Class 类中的 forName()静态方法(最安全/性能最好)"></a>使用 Class 类中的 forName()静态方法(最安全/性能最好)</h5><p>Class clazz=Class.forName(“类的全路径”); (最常用)</p>
<p>当我们获得了想要操作的类的 Class 对象后，可以通过 Class 类中的方法获取并查看该类中的方法<br>和属性</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取 Person 类的 Class 对象</span></span><br><span class="line">Class clazz=Class.forName(<span class="string">"reflection.Person"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取 Person 类的所有方法信息</span></span><br><span class="line">Method[] method=clazz.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m:method)&#123;</span><br><span class="line">    System.out.println(m.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取 Person 类的所有成员属性信息</span></span><br><span class="line">Field[] field=clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span>(Field f:field)&#123;</span><br><span class="line">    System.out.println(f.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取 Person 类的所有构造方法信息</span></span><br><span class="line">Constructor[] constructor=clazz.getDeclaredConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor c:constructor)&#123;</span><br><span class="line">    System.out.println(c.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="创建对象的两种方法"><a href="#创建对象的两种方法" class="headerlink" title="创建对象的两种方法"></a>创建对象的两种方法</h3><h4 id="Class-对象的-newInstance"><a href="#Class-对象的-newInstance" class="headerlink" title="Class 对象的 newInstance()"></a>Class 对象的 newInstance()</h4><p>使用 Class 对象的 newInstance()方法来创建该 Class 对象对应类的实例，但是这种方法要求<br>该 Class 对象对应的类有默认的空构造器。</p>
<p>调用 Constructor 对象的 newInstance()</p>
<p>先使用 Class 对象获取指定的 Constructor 对象，再调用 Constructor 对象的 newInstance()方法来创建 Class 对象对应类的实例,通过这种方法可以选定构造方法创建实例</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取 Person 类的 Class 对象</span></span><br><span class="line">Class clazz=Class.forName(<span class="string">"reflection.Person"</span>);</span><br><span class="line"><span class="comment">//使用.newInstane 方法创建对象</span></span><br><span class="line">Person p=(Person) clazz.newInstance();</span><br><span class="line"><span class="comment">//获取构造方法并创建对象</span></span><br><span class="line">Constructor c=clazz.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="comment">//创建对象并设置属性</span></span><br><span class="line">Person p1=(Person) c.newInstance(<span class="string">"李四"</span>,<span class="string">"男"</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="JAVA-注解"><a href="#JAVA-注解" class="headerlink" title="JAVA 注解"></a>JAVA 注解</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>Annotation（注解）是 Java 提供的一种对元程序中元素关联信息和元数据（metadata）的途径和方法。 Annatation(注解)是一个接口，程序可以通过反射来获取指定程序中元素的 Annotation对象，然后通过该 Annotation 对象来获取注解中的元数据信息。</p>
<h3 id="4-种标准元注解"><a href="#4-种标准元注解" class="headerlink" title="4 种标准元注解"></a>4 种标准元注解</h3><p>元注解的作用是负责注解其他注解。 Java5.0 定义了 4 个标准的 meta-annotation 类型，它们被用来提供对其它 annotation 类型作说明。</p>
<h4 id="Target-修饰的对象范围"><a href="#Target-修饰的对象范围" class="headerlink" title="@Target 修饰的对象范围"></a>@Target 修饰的对象范围</h4><p>@Target说明了Annotation所修饰的对象范围： Annotation可被用于 packages、 types（类、接口、枚举、 Annotation 类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、 catch 参数） 。在 Annotation 类型的声明中使用了 target 可更加明晰其修饰的目标</p>
<h4 id="Retention-定义-被保留的时间长短"><a href="#Retention-定义-被保留的时间长短" class="headerlink" title="@Retention 定义 被保留的时间长短"></a>@Retention 定义 被保留的时间长短</h4><p>Retention 定义了该 Annotation 被保留的时间长短：表示需要在什么级别保存注解信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效），取值（RetentionPoicy）由：</p>
<pre><code>SOURCE:在源文件中有效（即源文件保留）

CLASS:在 class 文件中有效（即 class 保留）

RUNTIME:在运行时有效（即运行时保留）</code></pre><h4 id="Documented-描述-javadoc"><a href="#Documented-描述-javadoc" class="headerlink" title="@Documented 描述-javadoc"></a>@Documented 描述-javadoc</h4><p>@ Documented 用于描述其它类型的 annotation 应该被作为被标注的程序成员的公共 API，因此可以被例如 javadoc 此类的工具文档化。</p>
<h4 id="Inherited-阐述了某个被标注的类型是被继承的"><a href="#Inherited-阐述了某个被标注的类型是被继承的" class="headerlink" title="@Inherited 阐述了某个被标注的类型是被继承的"></a>@Inherited 阐述了某个被标注的类型是被继承的</h4><p>@Inherited 元注解是一个标记注解， @Inherited 阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited 修饰的 annotation 类型被用于一个 class，则这个 annotation 将被用于该class 的子类</p>
<p><a href="/images/java%E5%9F%BA%E7%A1%803.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/java%E5%9F%BA%E7%A1%803.png" src="/img/loading.gif" class="lazyload"></a></p>
<h4 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h4><p>如果没有用来读取注解的方法和工作，那么注解也就不会比注释更有用处了。使用注解的过程中，很重要的一部分就是创建于使用注解处理器。 Java SE5 扩展了反射机制的 API，以帮助程序员快速的构造自定义注解处理器。 下面实现一个注解处理器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义注解</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FruitProvider &#123;</span><br><span class="line">    <span class="comment">/**供应商编号*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">    <span class="comment">/*** 供应商名称*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""；</span></span><br><span class="line"><span class="function">    <span class="comment">/*** 供应商地址*/</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">address</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.注解使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line">    <span class="meta">@FruitProvider</span>(id = <span class="number">1</span>, name = <span class="string">"陕西红富士集团"</span>, address = <span class="string">"陕西省西安市延安路"</span>)</span><br><span class="line">    <span class="keyword">private</span> String appleProvider;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppleProvider</span><span class="params">(String appleProvider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.appleProvider = appleProvider;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppleProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appleProvider;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.注解处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitInfoUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFruitInfo</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        String strFruitProvicer = <span class="string">"供应商信息： "</span>;</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();<span class="comment">//通过反射获取处理注解</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(FruitProvider<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                FruitProvider fruitProvider = (FruitProvider) field.getAnnotation(FruitProvider<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="comment">//注解信息的处理地方</span></span><br><span class="line">                strFruitProvicer = <span class="string">" 供应商编号： "</span> + fruitProvider.id() + <span class="string">" 供应商名称： "</span></span><br><span class="line">                + fruitProvider.name() + <span class="string">" 供应商地址： "</span>+ fruitProvider.address();</span><br><span class="line">                System.out.println(strFruitProvicer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitRun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FruitInfoUtil.getFruitInfo(Apple<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">/***********输出结果***************/</span></span><br><span class="line">        <span class="comment">// 供应商编号： 1 供应商名称：陕西红富士集团 供应商地址：陕西省西安市延</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="JAVA-内部类"><a href="#JAVA-内部类" class="headerlink" title="JAVA 内部类"></a>JAVA 内部类</h2><p>Java 类中不仅可以定义变量和方法，还可以定义类，这样定义在类内部的类就被称为内部类。根据定义的方式不同，内部类分为静态内部类，成员内部类，局部内部类，匿名内部类四种。</p>
<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>定义在类内部的静态类，就是静态内部类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Out</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>静态内部类可以访问外部类所有的静态变量和方法，即使是 private 的也一样。</p>
</li>
<li><p>静态内部类和一般类一致，可以定义静态变量、方法，构造方法等。</p>
</li>
<li><p>其它类使用静态内部类需要使用“外部类.静态内部类”方式，如下所示： Out.Inner inner =new Out.Inner();inner.print();</p>
</li>
<li><p>Java集合类HashMap内部就有一个静态内部类Entry。 Entry是HashMap存放元素的抽象，HashMap 内部维护 Entry 数组用了存放元素，但是 Entry 对使用者是透明的。像这种和外部类关系密切的，且不依赖外部类实例的，都可以使用静态内部类。</p>
</li>
</ol>
<h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>定义在类内部的非静态类，就是成员内部类。成员内部类不能定义静态方法和变量（final 修饰的除外）。这是因为成员内部类是非静态的， 类初始化的时候先初始化静态成员，如果允许成员内部类定义静态变量，那么成员内部类的静态变量初始化顺序是有歧义的。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Out</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            System.out.println(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="局部内部类（定义在方法中的类）"><a href="#局部内部类（定义在方法中的类）" class="headerlink" title="局部内部类（定义在方法中的类）"></a>局部内部类（定义在方法中的类）</h3><p>定义在方法中的类，就是局部类。如果一个类只在某个方法中使用，则可以考虑使用局部类。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Out</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> d = <span class="number">1</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="匿名内部类（要继承一个父类或者实现一个接口、直接使用new-来生成一个对象的引用）"><a href="#匿名内部类（要继承一个父类或者实现一个接口、直接使用new-来生成一个对象的引用）" class="headerlink" title="匿名内部类（要继承一个父类或者实现一个接口、直接使用new 来生成一个对象的引用）"></a>匿名内部类（要继承一个父类或者实现一个接口、直接使用new 来生成一个对象的引用）</h3><p>匿名内部类我们必须要继承一个父类或者实现一个接口，当然也仅能只继承一个父类或者实现一个接口。同时它也是没有 class 关键字，这是因为匿名内部类是直接使用 new 来生成一个对象的引用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Bird bird)</span></span>&#123;</span><br><span class="line">        System.out.println(bird.getName() + <span class="string">"能够飞 "</span> + bird.fly() + <span class="string">"米"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.test(<span class="keyword">new</span> Bird() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">10000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"大雁"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="JAVA-泛型"><a href="#JAVA-泛型" class="headerlink" title="JAVA 泛型"></a>JAVA 泛型</h2><p>泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。 比如我们要写一个排序方法，能够对整型数组、字符串数组甚至其他任何类型的数组进行排序，我们就可以使用 Java 泛型</p>
<h3 id="泛型方法（）"><a href="#泛型方法（）" class="headerlink" title="泛型方法（）"></a>泛型方法（<e>）</e></h3><p>你可以写一个泛型方法，该方法在调用时可以接收不同类型的参数。根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 泛型方法 printArray</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">( E[] inputArray )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( E element : inputArray )&#123;</span><br><span class="line">        System.out.printf( <span class="string">"%s "</span>, element );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>&lt;? extends T&gt;表示该通配符所代表的类型是 T 类型的子类。</p>
</li>
<li><p>&lt;? super T&gt;表示该通配符所代表的类型是 T 类型的父类。</p>
</li>
</ol>
<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类<t></t></h3><p>泛型类的声明和非泛型类的声明类似，除了在类名后面添加了类型参数声明部分。和泛型方法一样，泛型类的类型参数声明部分也包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。因为他们接受一个或多个参数，这些类被称为参数化的类或参数化的类型。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符?"></a>类型通配符?</h3><p>类 型 通 配 符 一 般 是 使 用 ? 代 替 具 体 的 类 型 参 数 。 例 如 List&lt;?&gt; 在 逻 辑 上 List<string>,List<integer> 等所有 List&lt;具体类型实参&gt;的父类</integer></string></p>
<h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><p>Java 中的泛型基本上都是在编译器这个层次来实现的。在生成的 Java 字节代码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会被编译器在编译的时候去掉。这个过程就称为类型擦除。如在代码中定义的 List<object>和 List<string>等类型，在编译之后都会变成 List。 JVM 看到的只是 List，而由泛型附加的类型信息对 JVM 来说是不可见的。类型擦除的基本过程也比较简单，首先是找到用来替换类型参数的具体类。这个具体类一般是 Object。如果指定了类型参数的上界的话，则使用这个上界。把代码中的类型参数都替换成具体的类</string></object></p>
<h2 id="JAVA-序列化-创建可复用的-Java-对象"><a href="#JAVA-序列化-创建可复用的-Java-对象" class="headerlink" title="JAVA 序列化(创建可复用的 Java 对象)"></a>JAVA 序列化(创建可复用的 Java 对象)</h2><h3 id="保存-持久化-对象及其状态到内存或者磁盘"><a href="#保存-持久化-对象及其状态到内存或者磁盘" class="headerlink" title="保存(持久化)对象及其状态到内存或者磁盘"></a>保存(持久化)对象及其状态到内存或者磁盘</h3><p>Java 平台允许我们在内存中创建可复用的 Java 对象，但一般情况下，只有当 JVM 处于运行时，这些对象才可能存在，即，这些对象的生命周期不会比 JVM 的生命周期更长。 但在现实应用中，就可能要求在JVM停止运行之后能够保存(持久化)指定的对象，并在将来重新读取被保存的对象。Java 对象序列化就能够帮助我们实现该功能。</p>
<h3 id="序列化对象以字节数组保持-静态成员不保存"><a href="#序列化对象以字节数组保持-静态成员不保存" class="headerlink" title="序列化对象以字节数组保持-静态成员不保存"></a>序列化对象以字节数组保持-静态成员不保存</h3><p>使用 Java 对象序列化， 在保存对象时，会把其状态保存为一组字节，在未来， 再将这些字节组装成对象。必须注意地是， 对象序列化保存的是对象的”状态”，即它的成员变量。由此可知，对象序列化不会关注类中的静态变量。</p>
<h3 id="序列化用户远程对象传输"><a href="#序列化用户远程对象传输" class="headerlink" title="序列化用户远程对象传输"></a>序列化用户远程对象传输</h3><p>除了在持久化对象时会用到对象序列化之外，当使用 RMI(远程方法调用)，或在网络中传递对象时，都会用到对象序列化。 Java序列化API为处理对象序列化提供了一个标准机制，该API简单易用。</p>
<h3 id="Serializable-实现序列化"><a href="#Serializable-实现序列化" class="headerlink" title="Serializable 实现序列化"></a>Serializable 实现序列化</h3><p>在 Java 中， 只要一个类实现了 java.io.Serializable 接口，那么它就可以被序列化</p>
<h3 id="ObjectOutputStream-和-ObjectInputStream-对对象进行序列化及反序列化"><a href="#ObjectOutputStream-和-ObjectInputStream-对对象进行序列化及反序列化" class="headerlink" title="ObjectOutputStream 和 ObjectInputStream 对对象进行序列化及反序列化"></a>ObjectOutputStream 和 ObjectInputStream 对对象进行序列化及反序列化</h3><p>通过 ObjectOutputStream 和 ObjectInputStream 对对象进行序列化及反序列化</p>
<h3 id="writeObject-和-readObject-自定义序列化策略"><a href="#writeObject-和-readObject-自定义序列化策略" class="headerlink" title="writeObject 和 readObject 自定义序列化策略"></a>writeObject 和 readObject 自定义序列化策略</h3><p>在类中增加 writeObject 和 readObject 方法可以实现自定义序列化策略</p>
<h3 id="序列化-ID"><a href="#序列化-ID" class="headerlink" title="序列化 ID"></a>序列化 ID</h3><p>虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化 ID 是否一致（就是 private static final long serialVersionUID）</p>
<h3 id="序列化并不保存静态变量"><a href="#序列化并不保存静态变量" class="headerlink" title="序列化并不保存静态变量"></a>序列化并不保存静态变量</h3><h3 id="序列化子父类说明"><a href="#序列化子父类说明" class="headerlink" title="序列化子父类说明"></a>序列化子父类说明</h3><p>要想将父类对象也序列化，就需要让父类也实现 Serializable 接口。</p>
<h3 id="Transient-关键字阻止该变量被序列化到文件中"><a href="#Transient-关键字阻止该变量被序列化到文件中" class="headerlink" title="Transient 关键字阻止该变量被序列化到文件中"></a>Transient 关键字阻止该变量被序列化到文件中</h3><ol>
<li><p>在变量声明前加上 Transient 关键字，可以阻止该变量被序列化到文件中，在被反序列化后， transient 变量的值被设为初始值，如 int 型的是 0，对象型的是 null。</p>
</li>
<li><p>服务器端给客户端发送序列化对象数据，对象中有一些数据是敏感的，比如密码字符串等，希望对该密码字段在序列化时，进行加密，而客户端如果拥有解密的密钥，只有在客户端进行反序列化时，才可以对密码进行读取，这样可以一定程度保证序列化对象的数据安全。</p>
</li>
</ol>
<h2 id="JAVA-复制"><a href="#JAVA-复制" class="headerlink" title="JAVA 复制"></a>JAVA 复制</h2><p>将一个对象的引用复制给另外一个对象，一共有三种方式。第一种方式是直接赋值，第二种方式是浅拷贝，第三种是深拷贝。这三种概念实际上都是为了拷贝对象</p>
<h3 id="直接赋值复制"><a href="#直接赋值复制" class="headerlink" title="直接赋值复制"></a>直接赋值复制</h3><p>直接赋值。在 Java 中， A a1 = a2，我们需要理解的是这实际上复制的是引用，也就是说 a1 和 a2 指向的是同一个对象。因此，当 a1 变化的时候， a2 里面的成员变量也会跟着变化</p>
<h3 id="浅复制（复制引用但不复制引用的对象）"><a href="#浅复制（复制引用但不复制引用的对象）" class="headerlink" title="浅复制（复制引用但不复制引用的对象）"></a>浅复制（复制引用但不复制引用的对象）</h3><p>创建一个新对象，然后将当前对象的非静态字段复制到该新对象， 如果字段是值类型的，那么对该字段执行复制；如果该字段是引用类型的话，则复制引用但不复制引用的对象。因此，原始对象及其副本引用同一个对象</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resume</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Resume)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="深复制（复制对象和其应用对象）"><a href="#深复制（复制对象和其应用对象）" class="headerlink" title="深复制（复制对象和其应用对象）"></a>深复制（复制对象和其应用对象）</h3><p>深拷贝不仅复制对象本身，而且复制对象包含的引用指向的所有对象</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    Professor p;</span><br><span class="line">    Student(String name, <span class="keyword">int</span> age, Professor p) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.p = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student o = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            o = (Student) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        o.p = (Professor) p.clone();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="序列化（深-clone-一种实现）"><a href="#序列化（深-clone-一种实现）" class="headerlink" title="序列化（深 clone 一种实现）"></a>序列化（深 clone 一种实现）</h3><p>在 Java 语言里深复制一个对象，常常可以先使对象实现 Serializable 接口，然后把对象（实际上只是对象的一个拷贝）写到一个流里，再从流里读出来，便可以重建对象</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>注解</tag>
        <tag>反射</tag>
        <tag>Java</tag>
        <tag>Exception</tag>
        <tag>内部类</tag>
        <tag>泛型</tag>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程(四)</title>
    <url>/2020/02/13/Java/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B(%E5%9B%9B)/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Java多线程-四"><a href="#Java多线程-四" class="headerlink" title="Java多线程(四)"></a>Java多线程(四)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文为学习Java相关知识所作笔记，参考以下资料:<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a> ,感谢原作者的分享!</p>
</blockquote>
<h2 id="CyclicBarrier、-CountDownLatch、-Semaphore-的用法"><a href="#CyclicBarrier、-CountDownLatch、-Semaphore-的用法" class="headerlink" title="CyclicBarrier、 CountDownLatch、 Semaphore 的用法"></a>CyclicBarrier、 CountDownLatch、 Semaphore 的用法</h2><h3 id="CountDownLatch（线程计数器-）"><a href="#CountDownLatch（线程计数器-）" class="headerlink" title="CountDownLatch（线程计数器 ）"></a>CountDownLatch（线程计数器 ）</h3><p>CountDownLatch 类位于 java.util.concurrent 包下，利用它可以实现类似计数器的功能。比如有一个任务 A，它要等待其他 4 个任务执行完毕之后才能执行，此时就可以利用 CountDownLatch来实现这种功能了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">new</span> Thread()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"正在执行"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"执行完毕"</span>);</span><br><span class="line">        latch.countDown();</span><br><span class="line">&#125;;&#125;.start();</span><br><span class="line"><span class="keyword">new</span> Thread()&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"正在执行"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">"子线程"</span>+Thread.currentThread().getName()+<span class="string">"执行完毕"</span>);</span><br><span class="line">        latch.countDown();</span><br><span class="line">&#125;;&#125;.start();</span><br><span class="line">System.out.println(<span class="string">"等待 2 个子线程执行完毕..."</span>);</span><br><span class="line">latch.await();</span><br><span class="line">System.out.println(<span class="string">"2 个子线程已经执行完毕"</span>);</span><br><span class="line">System.out.println(<span class="string">"继续执行主线程"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="CyclicBarrier（回环栅栏-等待至-barrier-状态再全部同时执行）"><a href="#CyclicBarrier（回环栅栏-等待至-barrier-状态再全部同时执行）" class="headerlink" title="CyclicBarrier（回环栅栏-等待至 barrier 状态再全部同时执行）"></a>CyclicBarrier（回环栅栏-等待至 barrier 状态再全部同时执行）</h3><p>字面意思回环栅栏，通过它可以实现让一组线程等待至某个状态之后再全部同时执行。叫做回环是因为当所有等待线程都被释放以后， CyclicBarrier 可以被重用。我们暂且把这个状态就叫做barrier，当调用 await()方法之后，线程就处于 barrier 了</p>
<p>CyclicBarrier 中最重要的方法就是 await 方法，它有 2 个重载版本：</p>
<ol>
<li><p>public int await()： 用来挂起当前线程，直至所有线程都到达 barrier 状态再同时执行后续任<br>务；</p>
</li>
<li><p>public int await(long timeout, TimeUnit unit)： 让这些线程等待至一定的时间，如果还有<br>线程没有到达 barrier 状态就直接让到达 barrier 的线程执行后续任务。</p>
</li>
</ol>
<p>具体使用如下， 另外 CyclicBarrier 是可以重用的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">4</span>;</span><br><span class="line">    CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">new</span> Writer(barrier).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Writer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> CyclicBarrier cyclicBarrier;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Writer</span><span class="params">(CyclicBarrier cyclicBarrier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>); <span class="comment">//以睡眠来模拟线程需要预定写入数据操作</span></span><br><span class="line">            System.out.println(<span class="string">"线程 "</span>+Thread.currentThread().getName()+<span class="string">"写入数据完</span></span><br><span class="line"><span class="string">            毕，等待其他线程写入完毕"</span>);</span><br><span class="line">            cyclicBarrier.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(BrokenBarrierException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"所有线程写入完毕，继续处理其他任务，比如数据操作"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Semaphore（信号量-控制同时访问的线程个数）"><a href="#Semaphore（信号量-控制同时访问的线程个数）" class="headerlink" title="Semaphore（信号量-控制同时访问的线程个数）"></a>Semaphore（信号量-控制同时访问的线程个数）</h3><p>Semaphore 翻译成字面意思为 信号量， Semaphore 可以控制同时访问的线程个数， 通过acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可</p>
<p>Semaphore 类中比较重要的几个方法：</p>
<ol>
<li><p>public void acquire(): 用来获取一个许可，若无许可能够获得，则会一直等待，直到获得许可。</p>
</li>
<li><p>public void acquire(int permits):获取 permits 个许可</p>
</li>
<li><p>public void release() { } :释放许可。注意，在释放许可之前，必须先获获得许可。</p>
</li>
<li><p>public void release(int permits) { }:释放 permits 个许可</p>
</li>
</ol>
<p>上面 4 个方法都会被阻塞，如果想立即得到执行结果，可以使用下面几个方法</p>
<ol>
<li><p>public boolean tryAcquire():尝试获取一个许可，若获取成功，则立即返回 true，若获取失败，则立即返回 false</p>
</li>
<li><p>public boolean tryAcquire(long timeout, TimeUnit unit):尝试获取一个许可，若在指定的时间内获取成功，则立即返回 true，否则则立即返回 false</p>
</li>
<li><p>public boolean tryAcquire(int permits):尝试获取 permits 个许可，若获取成功，则立即返回 true，若获取失败，则立即返回 false</p>
</li>
<li><p>public boolean tryAcquire(int permits, long timeout, TimeUnit unit): 尝试获取 permits个许可，若在指定的时间内获取成功，则立即返回 true，否则则立即返回 false</p>
</li>
<li><p>还可以通过 availablePermits()方法得到可用的许可数目。</p>
</li>
</ol>
<p>例子：若一个工厂有 5 台机器，但是有 8 个工人，一台机器同时只能被一个工人使用，只有使用完了，其他工人才能继续使用。那么我们就可以通过 Semaphore 来实现：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> N = <span class="number">8</span>; <span class="comment">//工人数</span></span><br><span class="line">Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">5</span>); <span class="comment">//机器数目</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    <span class="keyword">new</span> Worker(i,semaphore).start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> Semaphore semaphore;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(<span class="keyword">int</span> num,Semaphore semaphore)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">        <span class="keyword">this</span>.semaphore = semaphore;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            semaphore.acquire();</span><br><span class="line">            System.out.println(<span class="string">"工人"</span>+<span class="keyword">this</span>.num+<span class="string">"占用一个机器在生产..."</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">"工人"</span>+<span class="keyword">this</span>.num+<span class="string">"释放出机器"</span>);</span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>CountDownLatch 和 CyclicBarrier 都能够实现线程之间的等待，只不过它们侧重点不同； CountDownLatch 一般用于某个线程 A 等待若干个其他线程执行完任务之后，它才执行； 而 CyclicBarrier 一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；另外， CountDownLatch 是不能够重用的，而 CyclicBarrier 是可以重用的。</p>
<p>Semaphore 其实和锁有点类似，它一般用于控制对某组资源的访问权限</p>
<h2 id="volatile-关键字的作用（变量可见性、禁止重排序）"><a href="#volatile-关键字的作用（变量可见性、禁止重排序）" class="headerlink" title="volatile 关键字的作用（变量可见性、禁止重排序）"></a>volatile 关键字的作用（变量可见性、禁止重排序）</h2><p>Java 语言提供了一种稍弱的同步机制，即 volatile 变量，用来确保将变量的更新操作通知到其他线程。 volatile 变量具备两种特性， volatile 变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取 volatile 类型的变量时总会返回最新写入的值。</p>
<h3 id="变量可见性"><a href="#变量可见性" class="headerlink" title="变量可见性"></a>变量可见性</h3><p>其一是保证该变量对所有线程可见，这里的可见性指的是当一个线程修改了变量的值，那么新的值对于其他线程是可以立即获取的</p>
<h3 id="禁止重排序"><a href="#禁止重排序" class="headerlink" title="禁止重排序"></a>禁止重排序</h3><p>volatile 禁止了指令重排。</p>
<h3 id="比-sychronized-更轻量级的同步锁"><a href="#比-sychronized-更轻量级的同步锁" class="headerlink" title="比 sychronized 更轻量级的同步锁"></a>比 sychronized 更轻量级的同步锁</h3><p>在访问 volatile 变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此 volatile 变量是一种比 sychronized 关键字更轻量级的同步机制。 volatile 适合这种场景：一个变量被多个线程共享，线程直接给这个变量赋值</p>
<p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B11.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B11.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>当对非 volatile 变量进行读写的时候，每个线程先从内存拷贝变量到 CPU 缓存中。如果计算机有多个 CPU，每个线程可能在不同的 CPU 上被处理，这意味着每个线程可以拷贝到不同的 CPUcache 中。而声明变量是 volatile 的， JVM 保证了每次读变量都从内存中读，跳过 CPU cache这一步。</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>值得说明的是对 volatile 变量的单次读/写操作可以保证原子性的，如 long 和 double 类型变量，但是并不能保证 i++这种操作的原子性，因为本质上 i++是读、写两次操作。在某些场景下可以代替 Synchronized。但是,volatile 的不能完全取代 Synchronized 的位置，只有在一些特殊的场景下，才能适用 volatile。总的来说，必须同时满足下面两个条件才能保证在并发环境的线程安全：</p>
<ol>
<li><p>对变量的写操作不依赖于当前值（比如 i++），或者说是单纯的变量赋值（booleanflag = true） 。</p>
</li>
<li><p>该变量没有包含在具有其他变量的不变式中， 也就是说，不同的 volatile 变量之间，不能互相依赖。 只有在状态真正独立于程序内其他内容时才能使用 volatile。</p>
</li>
</ol>
<h2 id="如何在两个线程之间共享数据"><a href="#如何在两个线程之间共享数据" class="headerlink" title="如何在两个线程之间共享数据"></a>如何在两个线程之间共享数据</h2><p>Java 里面进行多线程通信的主要方式就是共享内存的方式，共享内存主要的关注点有两个：可见性和有序性原子性。 Java 内存模型（JMM）解决了可见性和有序性的问题，而锁解决了原子性的问题， 理想情况下我们希望做到“同步”和“互斥”。 有以下常规实现方法：</p>
<h3 id="将数据抽象成一个类，并将数据的操作作为这个类的方法"><a href="#将数据抽象成一个类，并将数据的操作作为这个类的方法" class="headerlink" title="将数据抽象成一个类，并将数据的操作作为这个类的方法"></a>将数据抽象成一个类，并将数据的操作作为这个类的方法</h3><p>将数据抽象成一个类，并将对这个数据的操作作为这个类的方法，这么设计可以和容易做到同步，只要在方法上加” synchronized“</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        j++;</span><br><span class="line">        System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"j 为： "</span>+j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">()</span></span>&#123;</span><br><span class="line">        j--;</span><br><span class="line">        System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"j 为： "</span>+j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    MyData data;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddRunnable</span><span class="params">(MyData data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data= data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        data.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    MyData data;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecRunnable</span><span class="params">(MyData data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        data.dec();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyData data = <span class="keyword">new</span> MyData();</span><br><span class="line">    Runnable add = <span class="keyword">new</span> AddRunnable(data);</span><br><span class="line">    Runnable dec = <span class="keyword">new</span> DecRunnable(data);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(add).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(dec).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Runnable-对象作为一个类的内部类"><a href="#Runnable-对象作为一个类的内部类" class="headerlink" title="Runnable 对象作为一个类的内部类"></a>Runnable 对象作为一个类的内部类</h3><p>将 Runnable 对象作为一个类的内部类，共享数据作为这个类的成员变量，每个线程对共享数据的操作方法也封装在外部类，以便实现对数据的各个操作的同步和互斥，作为内部类的各个 Runnable 对象调用外部类的这些方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        j++;</span><br><span class="line">        System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"j 为： "</span>+j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">()</span></span>&#123;</span><br><span class="line">        j--;</span><br><span class="line">        System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"j 为： "</span>+j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> MyData data = <span class="keyword">new</span> MyData();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    data.add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    data.dec();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="ThreadLocal-作用（线程本地存储）"><a href="#ThreadLocal-作用（线程本地存储）" class="headerlink" title="ThreadLocal 作用（线程本地存储）"></a>ThreadLocal 作用（线程本地存储）</h2><p>ThreadLocal，很多地方叫做线程本地变量，也有些地方叫做线程本地存储， ThreadLocal 的作用是提供线程内的局部变量， 这种变量在线程的生命周期内起作用， 减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度</p>
<h3 id="ThreadLocalMap（线程的一个属性）"><a href="#ThreadLocalMap（线程的一个属性）" class="headerlink" title="ThreadLocalMap（线程的一个属性）"></a>ThreadLocalMap（线程的一个属性）</h3><ol>
<li><p>每个线程中都有一个自己的 ThreadLocalMap 类对象，可以将线程自己的对象保持到其中，各管各的，线程可以正确的访问到自己的对象。</p>
</li>
<li><p>将一个共用的 ThreadLocal 静态实例作为 key，将不同对象的引用保存 到不同线程的ThreadLocalMap 中，然后在线程执行的各处通过这个静态 ThreadLocal 实例的 get()方法取得自己线程保存的那个对象，避免了将这个对象作为参数传递的麻烦。</p>
</li>
<li><p>ThreadLocalMap 其实就是线程里面的一个属性，它在 Thread 类中定义</p>
<p> ThreadLocal.ThreadLocalMap threadLocals = null;</p>
</li>
</ol>
<p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B12.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B12.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>最常见的 ThreadLocal 使用场景为 用来解决 数据库连接、 Session 管理等。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal threadSession = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> <span class="keyword">throws</span> InfrastructureException </span>&#123;</span><br><span class="line">    Session s = (Session) threadSession.get();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            s = getSessionFactory().openSession();</span><br><span class="line">            threadSession.set(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (HibernateException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InfrastructureException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="synchronized-和-ReentrantLock-的区别"><a href="#synchronized-和-ReentrantLock-的区别" class="headerlink" title="synchronized 和 ReentrantLock 的区别"></a>synchronized 和 ReentrantLock 的区别</h2><h3 id="两者的共同点"><a href="#两者的共同点" class="headerlink" title="两者的共同点"></a>两者的共同点</h3><ol>
<li><p>都是用来协调多线程对共享对象、变量的访问</p>
</li>
<li><p>都是可重入锁，同一线程可以多次获得同一个锁</p>
</li>
<li><p>都保证了可见性和互斥性</p>
</li>
</ol>
<h3 id="两者的不同点"><a href="#两者的不同点" class="headerlink" title="两者的不同点"></a>两者的不同点</h3><ol>
<li><p>ReentrantLock 显示的获得、释放锁， synchronized 隐式获得释放锁</p>
</li>
<li><p>ReentrantLock 可响应中断、可轮回， synchronized 是不可以响应中断的，为处理锁的不可用性提供了更高的灵活性</p>
</li>
<li><p>ReentrantLock 是 API 级别的， synchronized 是 JVM 级别的</p>
</li>
<li><p>ReentrantLock 可以实现公平锁</p>
</li>
<li><p>ReentrantLock 通过 Condition 可以绑定多个条件</p>
</li>
<li><p>底层实现不一样， synchronized 是同步阻塞，使用的是悲观并发策略， lock 是同步非阻塞，采用的是乐观并发策略</p>
</li>
<li><p>Lock 是一个接口，而 synchronized 是 Java 中的关键字， synchronized 是内置的语言实现。</p>
</li>
<li><p>synchronized 在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而 Lock 在发生异常时，如果没有主动通过 unLock()去释放锁，则很可能造成死锁现象，因此使用 Lock 时需要在 finally 块中释放锁。</p>
</li>
<li><p>Lock 可以让等待锁的线程响应中断，而 synchronized 却不行，使用 synchronized 时，等待的线程会一直等待下去，不能够响应中断。</p>
</li>
<li><p>通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到。</p>
</li>
<li><p>Lock 可以提高多个线程进行读操作的效率，既就是实现读写锁等。</p>
</li>
</ol>
<h2 id="ConcurrentHashMap-并发"><a href="#ConcurrentHashMap-并发" class="headerlink" title="ConcurrentHashMap 并发"></a>ConcurrentHashMap 并发</h2><h3 id="减小锁粒度"><a href="#减小锁粒度" class="headerlink" title="减小锁粒度"></a>减小锁粒度</h3><p>减小锁粒度是指缩小锁定对象的范围，从而减小锁冲突的可能性，从而提高系统的并发能力。减小锁粒度是一种削弱多线程锁竞争的有效手段， 这种技术典型的应用是 ConcurrentHashMap(高性能的 HashMap)类的实现。对于 HashMap 而言，最重要的两个方法是 get 与 set 方法，如果我们对整个 HashMap 加锁，可以得到线程安全的对象，但是加锁粒度太大。 Segment 的大小也被称为 ConcurrentHashMap 的并发度。</p>
<h3 id="ConcurrentHashMap-分段锁"><a href="#ConcurrentHashMap-分段锁" class="headerlink" title="ConcurrentHashMap 分段锁"></a>ConcurrentHashMap 分段锁</h3><p>ConcurrentHashMap，它内部细分了若干个小的 HashMap，称之为段(Segment)。 默认情况下一个 ConcurrentHashMap 被进一步细分为 16 个段，既就是锁的并发度。</p>
<p>如果需要在 ConcurrentHashMap 中添加一个新的表项，并不是将整个 HashMap 加锁，而是首先根据 hashcode 得到该表项应该存放在哪个段中，然后对该段加锁，并完成 put 操作。在多线程环境中，如果多个线程同时进行 put操作，只要被加入的表项不存放在同一个段中，则线程间可以做到真正的并行。</p>
<h4 id="ConcurrentHashMap-是由-Segment-数组结构和-HashEntry-数组结构组成"><a href="#ConcurrentHashMap-是由-Segment-数组结构和-HashEntry-数组结构组成" class="headerlink" title="ConcurrentHashMap 是由 Segment 数组结构和 HashEntry 数组结构组成"></a>ConcurrentHashMap 是由 Segment 数组结构和 HashEntry 数组结构组成</h4><p>ConcurrentHashMap 是由 Segment 数组结构和 HashEntry 数组结构组成。 Segment 是一种可重入锁 ReentrantLock，在 ConcurrentHashMap 里扮演锁的角色， HashEntry 则用于存储键值对数据。一个 ConcurrentHashMap 里包含一个 Segment 数组， Segment 的结构和 HashMap类似，是一种数组和链表结构， 一个 Segment 里包含一个 HashEntry 数组，每个 HashEntry 是一个链表结构的元素， 每个 Segment 守护一个HashEntry 数组里的元素,当对 HashEntry 数组的数据进行修改时，必须首先获得它对应的 Segment 锁。</p>
<p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B13.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B13.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="Java-中用到的线程调度"><a href="#Java-中用到的线程调度" class="headerlink" title="Java 中用到的线程调度"></a>Java 中用到的线程调度</h2><h3 id="抢占式调度"><a href="#抢占式调度" class="headerlink" title="抢占式调度"></a>抢占式调度</h3><p>抢占式调度指的是每条线程执行的时间、线程的切换都由系统控制，系统控制指的是在系统某种运行机制下，可能每条线程都分同样的执行时间片，也可能是某些线程执行的时间片较长，甚至某些线程得不到执行的时间片。在这种机制下，一个线程的堵塞不会导致整个进程堵塞</p>
<h3 id="协同式调度"><a href="#协同式调度" class="headerlink" title="协同式调度"></a>协同式调度</h3><p>协同式调度指某一线程执行完后主动通知系统切换到另一线程上执行，这种模式就像接力赛一样，一个人跑完自己的路程就把接力棒交接给下一个人，下个人继续往下跑。线程的执行时间由线程本身控制，线程切换可以预知，不存在多线程同步问题，但它有一个致命弱点：如果一个线程编写有问题，运行到一半就一直堵塞，那么可能导致整个系统崩溃</p>
<h3 id="JVM-的线程调度实现（抢占式调度）"><a href="#JVM-的线程调度实现（抢占式调度）" class="headerlink" title="JVM 的线程调度实现（抢占式调度）"></a>JVM 的线程调度实现（抢占式调度）</h3><p>java 使用的线程调使用抢占式调度， Java 中线程会按优先级分配 CPU 时间片运行， 且优先级越高越优先执行，但优先级高并不代表能独自占用执行时间片，可能是优先级高得到越多的执行时间片，反之，优先级低的分到的执行时间少但不会分配不到执行时间</p>
<h3 id="线程让出-cpu-的情况"><a href="#线程让出-cpu-的情况" class="headerlink" title="线程让出 cpu 的情况"></a>线程让出 cpu 的情况</h3><ol>
<li><p>当前运行线程主动放弃 CPU， JVM 暂时放弃 CPU 操作（基于时间片轮转调度的 JVM 操作系统不会让线程永久放弃 CPU，或者说放弃本次时间片的执行权），例如调用 yield()方法。</p>
</li>
<li><p>当前运行线程因为某些原因进入阻塞状态，例如阻塞在 I/O 上。</p>
</li>
<li><p>当前运行线程结束，即运行完 run()方法里面的任务。</p>
</li>
</ol>
<h2 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h2><h3 id="优先调度算法"><a href="#优先调度算法" class="headerlink" title="优先调度算法"></a>优先调度算法</h3><ol>
<li><p>先来先服务调度算法（FCFS）</p>
<p> 当在作业调度中采用该算法时，每次调度都是从后备作业队列中选择一个或多个最先进入该队列的作业，将它们调入内存，为它们分配资源、创建进程，然后放入就绪队列。在进程调度中采用 FCFS 算法时，则每次调度是从就绪队列中选择一个最先进入该队列的进程，为之分配处理机，使之投入运行。该进程一直运行到完成或发生某事件而阻塞后才放弃处理机， 特点是：算法比较简单，可以实现基本上的公平</p>
</li>
<li><p>短作业(进程)优先调度算法</p>
<p> 短作业优先(SJF)的调度算法是从后备队列中选择一个或若干个估计运行时间最短的作业，将它们调入内存运行。而短进程优先(SPF)调度算法则是从就绪队列中选出一个估计运行时间最短的进程，将处理机分配给它，使它立即执行并一直执行到完成，或发生某事件而被阻塞放弃处理机时再重新调度。 该算法未照顾紧迫型作业。</p>
</li>
</ol>
<h3 id="高优先权优先调度算法"><a href="#高优先权优先调度算法" class="headerlink" title="高优先权优先调度算法"></a>高优先权优先调度算法</h3><p>为了照顾紧迫型作业，使之在进入系统后便获得优先处理，引入了最高优先权优先(FPF)调度算法。当把该算法用于作业调度时，系统将从后备队列中选择若干个优先权最高的作业装入内存。当用于进程调度时，该算法是把处理机分配给就绪队列中优先权最高的进程。</p>
<ol>
<li>非抢占式优先权算法</li>
</ol>
<p>在这种方式下，系统一旦把处理机分配给就绪队列中优先权最高的进程后，该进程便一直执行下去，直至完成；或因发生某事件使该进程放弃处理机时。这种调度算法主要用于批处理系统中；也可用于某些对实时性要求不严的实时系统中。</p>
<ol start="2">
<li>抢占式优先权调度算法</li>
</ol>
<p>在这种方式下，系统同样是把处理机分配给优先权最高的进程，使之执行。 但在其执行期间，只要又出现了另一个其优先权更高的进程，进程调度程序就立即停止当前进程(原优先权最高的进程)的执行，重新将处理机分配给新到的优先权最高的进程。显然，这种抢占式的优先权调度算法能更好地满足紧迫作业的要求，故而常用于要求比较严格的实时系统中，以及对性能要求较高的批处理和分时系统中</p>
<ol start="3">
<li>高响应比优先调度算法</li>
</ol>
<p>在批处理系统中，短作业优先算法是一种比较好的算法，其主要的不足之处是长作业的运行得不到保证。如果我们能为每个作业引入前面所述的动态优先权，并使作业的优先级随着等待时间的增加而以速率 a 提高，则长作业在等待一定的时间后，必然有机会分配到处理机。该优先权的变化规律可描述为</p>
<p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B14.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B14.png" src="/img/loading.gif" class="lazyload"></a></p>
<pre><code>(1) 如果作业的等待时间相同，则要求服务的时间愈短，其优先权愈高，因而该算法有利于短作业。

(2) 当要求服务的时间相同时，作业的优先权决定于其等待时间，等待时间愈长，其优先权愈高，因而它实现的是先来先服务。

(3) 对于长作业，作业的优先级可以随等待时间的增加而提高，当其等待时间足够长时，其优先级便可升到很高，从而也可获得处理机。简言之，该算法既照顾了短作业，又考虑了作业到达的先后次序，不会使长作业长期得不到服务。因此，该算法实现了一种较好的折衷。当然，在利用该算法时，每要进行调度之前，都须先做响应比的计算，这会增加系统开销。</code></pre><h3 id="基于时间片的轮转调度算法"><a href="#基于时间片的轮转调度算法" class="headerlink" title="基于时间片的轮转调度算法"></a>基于时间片的轮转调度算法</h3><ol>
<li><p>时间片轮转法</p>
<p> 在早期的时间片轮转法中，系统将所有的就绪进程按先来先服务的原则排成一个队列，每次调度时，把 CPU 分配给队首进程，并令其执行一个时间片。时间片的大小从几 ms 到几百 ms。 当执行的时间片用完时，由一个计时器发出时钟中断请求，调度程序便据此信号来停止该进程的执行，并将它送往就绪队列的末尾；然后，再把处理机分配给就绪队列中新的队首进程，同时也让它执行一个时间片。 这样就可以保证就绪队列中的所有进程在一给定的时间内均能获得一时间片的处理机执行时间</p>
</li>
<li><p>多级反馈队列调度算法</p>
<p> (1) 应设置多个就绪队列，并为各个队列赋予不同的优先级。第一个队列的优先级最高，第二个队列次之，其余各队列的优先权逐个降低。该算法赋予各个队列中进程执行时间片的大小也各不相同，在优先权愈高的队列中，为每个进程所规定的执行时间片就愈小。例如，第二个队列的时间片要比第一个队列的时间片长一倍，……，第 i+1 个队列的时间片要比第 i 个队列的时间片长一倍。</p>
<p> (2) 当一个新进程进入内存后，首先将它放入第一队列的末尾，按 FCFS 原则排队等待调度。当轮到该进程执行时，如它能在该时间片内完成，便可准备撤离系统；如果它在一个时间片结束时尚未完成，调度程序便将该进程转入第二队列的末尾，再同样地按 FCFS 原则等待调度执行；如果它在第二队列中运行一个时间片后仍未完成，再依次将它放入第三队列，……，如此下去，当一个长作业(进程)从第一队列依次降到第 n 队列后，在第 n 队列便采取按时间片轮转的方式运行。</p>
<p> (3) 仅当第一队列空闲时，调度程序才调度第二队列中的进程运行；仅当第 1～(i-1)队列均空时，才会调度第 i 队列中的进程运行。如果处理机正在第 i 队列中为某进程服务时，又有新进程进入优先权较高的队列(第 1～(i-1)中的任何一个队列)，则此时新进程将抢占正在运行进程的处理机，即由调度程序把正在运行的进程放回到第 i 队列的末尾，把处理机分配给新到的高优先权进程。在多级反馈队列调度算法中，如果规定第一个队列的时间片略大于多数人机交互所需之处理时间时，便能够较好的满足各种类型用户的需要。</p>
</li>
</ol>
<h2 id="什么是-CAS（比较并交换-乐观锁机制-锁自旋）"><a href="#什么是-CAS（比较并交换-乐观锁机制-锁自旋）" class="headerlink" title="什么是 CAS（比较并交换-乐观锁机制-锁自旋）"></a>什么是 CAS（比较并交换-乐观锁机制-锁自旋）</h2><h3 id="概念及特性"><a href="#概念及特性" class="headerlink" title="概念及特性"></a>概念及特性</h3><p>CAS（Compare And Swap/Set）比较并交换， CAS 算法的过程是这样：它包含 3 个参数CAS(V,E,N)。 V 表示要更新的变量(内存值)， E 表示预期值(旧的)， N 表示新值。当且仅当 V 值等于 E 值时，才会将 V 的值设为 N，如果 V 值和 E 值不同，则说明已经有其他线程做了更新，则当前线程什么都不做。最后， CAS 返回当前 V 的真实值</p>
<p>CAS 操作是抱着乐观的态度进行的(乐观锁)，它总是认为自己可以成功完成操作。 当多个线程同时使用 CAS 操作一个变量时，只有一个会胜出，并成功更新，其余均会失败。失败的线程不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。基于这样的原理，CAS 操作即使没有锁，也可以发现其他线程对当前线程的干扰，并进行恰当的处理</p>
<h3 id="原子包-java-util-concurrent-atomic（锁自旋）"><a href="#原子包-java-util-concurrent-atomic（锁自旋）" class="headerlink" title="原子包 java.util.concurrent.atomic（锁自旋）"></a>原子包 java.util.concurrent.atomic（锁自旋）</h3><p>JDK1.5 的原子包： java.util.concurrent.atomic 这个包里面提供了一组原子类。其基本的特性就是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性， 即当某个线程进入方法，执行其中的指令时，不会被其他线程打断，而别的线程就像自旋锁一样，一直等到该方法执行完成，才由 JVM 从等待队列中选择一个另一个线程进入，这只是一种逻辑上的理解。</p>
<p>相对于对于 synchronized 这种阻塞算法， CAS 是非阻塞算法的一种常见实现。 由于一般 CPU 切换时间比 CPU 指令集操作更加长， 所以 J.U.C 在性能上有了很大的提升。如下代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123; <span class="comment">//CAS 自旋，一直尝试，直达成功</span></span><br><span class="line">        <span class="keyword">int</span> current = get();</span><br><span class="line">        <span class="keyword">int</span> next = current + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSet(current, next))</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>getAndIncrement 采用了 CAS 操作，每次从内存中读取数据然后将此数据和+1 后的结果进行CAS 操作，如果成功就返回结果，否则重试直到成功为止。而 compareAndSet 利用 JNI 来完成CPU 指令的操作。</p>
<h3 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h3><p>CAS 会导致“ABA 问题”。 CAS 算法实现一个重要前提需要取出内存中某时刻的数据，而在下时刻比较并替换，那么在这个时间差类会导致数据的变化。</p>
<p>比如说一个线程 one 从内存位置 V 中取出 A，这时候另一个线程 two 也从内存中取出 A，并且two 进行了一些操作变成了 B，然后 two 又将 V 位置的数据变成 A，这时候线程 one 进行 CAS 操作发现内存中仍然是 A，然后 one 操作成功。尽管线程 one 的 CAS 操作成功，但是不代表这个过程就是没有问题的</p>
<p>部分乐观锁的实现是通过版本号（version）的方式来解决 ABA 问题，乐观锁每次在执行数据的修改操作时，都会带上一个版本号，一旦版本号和数据的版本号一致就可以执行修改操作并对版本号执行+1 操作，否则就执行失败。因为每次操作的版本号都会随之增加，所以不会出现 ABA 问题，因为版本号只会增加不会减少。</p>
<h2 id="什么是-AQS（抽象的队列同步器）"><a href="#什么是-AQS（抽象的队列同步器）" class="headerlink" title="什么是 AQS（抽象的队列同步器）"></a>什么是 AQS（抽象的队列同步器）</h2><p>AbstractQueuedSynchronizer 类如其名，抽象的队列式的同步器， AQS 定义了一套多线程访问共享资源的同步器框架，许多同步类实现都依赖于它，如常用的ReentrantLock/Semaphore/CountDownLatch。</p>
<p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B15.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B15.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>它维护了一个 volatile int state（代表共享资源）和一个 FIFO 线程等待队列（多线程争用资源被阻塞时会进入此队列）。这里 volatile 是核心关键词，具体 volatile 的语义，在此不述。 state 的访问方式有三种:</p>
<pre><code>getState()

setState()

compareAndSetState()</code></pre><p>AQS 定义两种资源共享方式</p>
<h3 id="Exclusive-独占资源-ReentrantLock"><a href="#Exclusive-独占资源-ReentrantLock" class="headerlink" title="Exclusive 独占资源-ReentrantLock"></a>Exclusive 独占资源-ReentrantLock</h3><p>Exclusive（独占，只有一个线程能执行，如 ReentrantLock）</p>
<h3 id="Share-共享资源-Semaphore-CountDownLatch"><a href="#Share-共享资源-Semaphore-CountDownLatch" class="headerlink" title="Share 共享资源-Semaphore/CountDownLatch"></a>Share 共享资源-Semaphore/CountDownLatch</h3><p>Share（共享，多个线程可同时执行，如 Semaphore/CountDownLatch）。</p>
<p>AQS 只是一个框架，具体资源的获取/释放方式交由自定义同步器去实现， AQS 这里只定义了一个接口，具体资源的获取交由自定义同步器去实现了（通过 state 的 get/set/CAS)之所以没有定义成abstract ，是 因 为独 占模 式 下 只 用实现 tryAcquire-tryRelease ，而 共享 模 式 下 只用 实 现tryAcquireShared-tryReleaseShared。如果都定义成 abstract，那么每个模式也要去实现另一模式下的接口。不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源 state 的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等）， AQS 已经在顶层实现好了。自定义同步器实现时主要实现以下几种方法：</p>
<p>1． isHeldExclusively()：该线程是否正在独占资源。只有用到 condition 才需要去实现它。</p>
<p>2． tryAcquire(int)：独占方式。尝试获取资源，成功则返回 true，失败则返回 false。</p>
<p>3． tryRelease(int)：独占方式。尝试释放资源，成功则返回 true，失败则返回 false。</p>
<p>4． tryAcquireShared(int)：共享方式。尝试获取资源。负数表示失败； 0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</p>
<p>5． tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回 false。</p>
<h3 id="同步器的实现是-ABS-核心（state-资源状态计数）"><a href="#同步器的实现是-ABS-核心（state-资源状态计数）" class="headerlink" title="同步器的实现是 ABS 核心（state 资源状态计数）"></a>同步器的实现是 ABS 核心（state 资源状态计数）</h3><p>同步器的实现是 ABS 核心，以 ReentrantLock 为例， state 初始化为 0，表示未锁定状态。 A 线程lock()时，会调用 tryAcquire()独占该锁并将 state+1。此后，其他线程再 tryAcquire()时就会失败，直到 A 线程 unlock()到 state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前， A 线程自己是可以重复获取此锁的（state 会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证 state 是能回到零态的。</p>
<p>以 CountDownLatch 以例，任务分为 N 个子线程去执行， state 也初始化为 N（注意 N 要与线程个数一致）。这 N 个子线程是并行执行的， 每个子线程执行完后 countDown()一次， state会 CAS 减 1。等到所有子线程都执行完后(即 state=0)，会 unpark()主调用线程，然后主调用线程就会从 await()函数返回，继续后余动作。</p>
<h3 id="ReentrantReadWriteLock-实现独占和共享两种方式"><a href="#ReentrantReadWriteLock-实现独占和共享两种方式" class="headerlink" title="ReentrantReadWriteLock 实现独占和共享两种方式"></a>ReentrantReadWriteLock 实现独占和共享两种方式</h3><p>一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现 tryAcquiretryRelease、 tryAcquireShared-tryReleaseShared 中的一种即可。 但 AQS 也支持自定义同步器同时实现独占和共享两种方式，如 ReentrantReadWriteLock</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程(三)</title>
    <url>/2020/02/13/Java/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B(%E4%B8%89)/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Java多线程-三"><a href="#Java多线程-三" class="headerlink" title="Java多线程(三)"></a>Java多线程(三)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文为学习Java相关知识所作笔记，参考以下资料:<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a> ,感谢原作者的分享!</p>
</blockquote>
<h2 id="线程基本方法"><a href="#线程基本方法" class="headerlink" title="线程基本方法"></a>线程基本方法</h2><p>线程相关的基本方法有 wait，notify，notifyAll，sleep，join，yield 等。</p>
<p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B5.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B5.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="线程等待（wait）"><a href="#线程等待（wait）" class="headerlink" title="线程等待（wait）"></a>线程等待（wait）</h3><p>调用该方法的线程进入 WAITING 状态，只有等待另外线程的通知或被中断才会返回，需要注意的是调用 wait()方法后，会释放对象的锁。因此，wait 方法一般用在同步方法或同步代码块中。</p>
<h3 id="线程睡眠（sleep）"><a href="#线程睡眠（sleep）" class="headerlink" title="线程睡眠（sleep）"></a>线程睡眠（sleep）</h3><p>sleep 导致当前线程休眠，与 wait 方法不同的是 sleep 不会释放当前占有的锁,sleep(long)会导致线程进入 TIMED-WATING 状态，而 wait()方法会导致当前线程进入 WATING 状态</p>
<h3 id="线程让步（yield）"><a href="#线程让步（yield）" class="headerlink" title="线程让步（yield）"></a>线程让步（yield）</h3><p>yield 会使当前线程让出 CPU 执行时间片，与其他线程一起重新竞争 CPU 时间片。一般情况下，优先级高的线程有更大的可能性成功竞争得到 CPU 时间片，但这又不是绝对的，有的操作系统对线程优先级并不敏感。</p>
<h3 id="线程中断（interrupt）"><a href="#线程中断（interrupt）" class="headerlink" title="线程中断（interrupt）"></a>线程中断（interrupt）</h3><p>中断一个线程，其本意是给这个线程一个通知信号，会影响这个线程内部的一个中断标识位。这个线程本身并不会因此而改变状态(如阻塞，终止等)。</p>
<ol>
<li><p>调用 interrupt()方法并不会中断一个正在运行的线程。也就是说处于 Running 状态的线程并不会因为被中断而被终止，仅仅改变了内部维护的中断标识位而已。</p>
</li>
<li><p>若调用 sleep()而使线程处于 TIMED-WATING 状态，这时调用 interrupt()方法，会抛出InterruptedException,从而使线程提前结束 TIMED-WATING 状态。</p>
</li>
<li><p>许多声明抛出 InterruptedException 的方法(如 Thread.sleep(long mills 方法))，抛出异常前，都会清除中断标识位，所以抛出异常后，调用 isInterrupted()方法将会返回 false。</p>
</li>
<li><p>中断状态是线程固有的一个标识位，可以通过此标识位安全的终止线程。比如,你想终止一个线程 thread 的时候，可以调用 thread.interrupt()方法，在线程的 run 方法内部可以根据 thread.isInterrupted()的值来优雅的终止线程。</p>
</li>
</ol>
<h3 id="Join-等待其他线程终止"><a href="#Join-等待其他线程终止" class="headerlink" title="Join 等待其他线程终止"></a>Join 等待其他线程终止</h3><p>join() 方法，等待其他线程终止，在当前线程中调用一个线程的 join() 方法，则当前线程转为阻塞状态，回到另一个线程结束，当前线程再由阻塞状态变为就绪状态，等待 cpu 的宠幸。</p>
<h3 id="为什么要用-join-方法"><a href="#为什么要用-join-方法" class="headerlink" title="为什么要用 join()方法"></a>为什么要用 join()方法</h3><p>很多情况下，主线程生成并启动了子线程，需要用到子线程返回的结果，也就是需要主线程需要在子线程结束后再结束，这时候就要用到 join() 方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"线程运行开始!"</span>);</span><br><span class="line">Thread6 thread1 = <span class="keyword">new</span> Thread6();</span><br><span class="line">thread1.setName(<span class="string">"线程 B"</span>);</span><br><span class="line">thread1.join();</span><br><span class="line">System.out.println(<span class="string">"这时 thread1 执行完毕之后才能执行主线程"</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="线程唤醒（notify）"><a href="#线程唤醒（notify）" class="headerlink" title="线程唤醒（notify）"></a>线程唤醒（notify）</h3><p>Object 类中的 notify() 方法，唤醒在此对象监视器上等待的单个线程，如果所有线程都在此对象上等待，则会选择唤醒其中一个线程，选择是任意的，并在对实现做出决定时发生，线程通过调用其中一个 wait() 方法，在对象的监视器上等待，直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程，被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞<br>争。类似的方法还有 notifyAll() ，唤醒再次监视器上等待的所有线程</p>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ol>
<li><p>sleep()：强迫一个线程睡眠Ｎ毫秒。</p>
</li>
<li><p>isAlive()： 判断一个线程是否存活。</p>
</li>
<li><p>join()： 等待线程终止。</p>
</li>
<li><p>activeCount()： 程序中活跃的线程数。</p>
</li>
<li><p>enumerate()： 枚举程序中的线程。</p>
</li>
<li><p>currentThread()： 得到当前线程。</p>
</li>
<li><p>isDaemon()： 一个线程是否为守护线程。</p>
</li>
<li><p>setDaemon()： 设置一个线程为守护线程。(用户线程和守护线程的区别在于，是否等待主线程依赖于主线程结束而结束) </p>
</li>
<li><p>setName()： 为线程设置一个名称。</p>
</li>
<li><p>wait()： 强迫一个线程等待</p>
</li>
<li><p>notify()： 通知一个线程继续运行。</p>
</li>
<li><p>setPriority()： 设置一个线程的优先级。</p>
</li>
<li><p>getPriority():：获得一个线程的优先级</p>
</li>
</ol>
<h2 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h2><p>巧妙地利用了时间片轮转的方式, CPU 给每个任务都服务一定的时间，然后把当前任务的状态保存下来，在加载下一任务的状态后，继续服务下一任务，任务的状态保存及再加载, 这段过程就叫做上下文切换。时间片轮转的方式使多个任务在同一颗 CPU 上执行变成了可能。</p>
<p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B6.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B6.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>（有时候也称做任务）是指一个程序运行的实例。在 Linux 系统中，线程就是能并行运行并且与他们的父进程（创建他们的进程）共享同一地址空间（一段内存区域）和其他资源的轻量级的进程</p>
<h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><p>是指某一时间点 CPU 寄存器和程序计数器的内容。</p>
<h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>是 CPU 内部的数量较少但是速度很快的内存（与之对应的是 CPU 外部相对较慢的 RAM 主内存）。寄存器通过对常用值（通常是运算的中间值）的快速访问来提高计算机程序运行的速度</p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>是一个专用的寄存器， 用于表明指令序列中 CPU 正在执行的位置，存的值为正在执行的指令的位置或者下一个将要被执行的指令的位置，具体依赖于特定的系统</p>
<h3 id="PCB-“切换桢”"><a href="#PCB-“切换桢”" class="headerlink" title="PCB-“切换桢”"></a>PCB-“切换桢”</h3><p>上下文切换可以认为是内核（操作系统的核心）在 CPU 上对于进程（包括线程）进行切换，上下文切换过程中的信息是保存在进程控制块（PCB, process control block）中的。 PCB 还经常被称作“切换桢”（switchframe）。 信息会一直保存到 CPU 的内存中，直到他们被再次使用。</p>
<h3 id="上下文切换的活动"><a href="#上下文切换的活动" class="headerlink" title="上下文切换的活动"></a>上下文切换的活动</h3><ol>
<li><p>挂起一个进程，将这个进程在 CPU 中的状态（上下文）存储于内存中的某处。</p>
</li>
<li><p>在内存中检索下一个进程的上下文并将其在 CPU 的寄存器中恢复。</p>
</li>
<li><p>跳转到程序计数器所指向的位置（即跳转到进程被中断时的代码行），以恢复该进程在程序中。</p>
</li>
</ol>
<h3 id="引起线程上下文切换的原因"><a href="#引起线程上下文切换的原因" class="headerlink" title="引起线程上下文切换的原因"></a>引起线程上下文切换的原因</h3><ol>
<li><p>当前执行任务的时间片用完之后，系统 CPU 正常调度下一个任务；</p>
</li>
<li><p>当前执行任务碰到 IO 阻塞，调度器将此任务挂起，继续下一任务；</p>
</li>
<li><p>多个任务抢占锁资源，当前任务没有抢到锁资源，被调度器挂起，继续下一任务；</p>
</li>
<li><p>用户代码挂起当前任务，让出 CPU 时间；</p>
</li>
<li><p>硬件中断；</p>
</li>
</ol>
<h2 id="同步锁与死锁"><a href="#同步锁与死锁" class="headerlink" title="同步锁与死锁"></a>同步锁与死锁</h2><h3 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h3><p>当多个线程同时访问同一个数据时，很容易出现问题。为了避免这种情况出现，我们要保证线程同步互斥，就是指并发执行的多个线程，在同一时间内只允许一个线程访问共享数据。 Java 中可以使用 synchronized 关键字来取得一个对象的同步锁。</p>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>何为死锁，就是多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。</p>
<h2 id="线程池原理"><a href="#线程池原理" class="headerlink" title="线程池原理"></a>线程池原理</h2><p>线程池做的工作主要是控制运行的线程的数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量超出数量的线程排队等候，等其它线程执行完毕，再从队列中取出任务来执行。 他的主要特点为： 线程复用； 控制最大并发数； 管理线程。</p>
<h3 id="线程复用"><a href="#线程复用" class="headerlink" title="线程复用"></a>线程复用</h3><p>每一个 Thread 的类都有一个 start 方法。 当调用 start 启动线程时 Java 虚拟机会调用该类的 run方法。 那么该类的 run() 方法中就是调用了 Runnable 对象的 run() 方法。 我们可以继承重写Thread 类，在其 start 方法中添加不断循环调用传递过来的 Runnable 对象。 这就是线程池的实现原理。 循环方法中不断获取 Runnable 是用 Queue 实现的，在获取下一个 Runnable 之前可以是阻塞的。</p>
<h3 id="线程池的组成"><a href="#线程池的组成" class="headerlink" title="线程池的组成"></a>线程池的组成</h3><p>一般的线程池主要分为以下 4 个组成部分：</p>
<ol>
<li><p>线程池管理器：用于创建并管理线程池</p>
</li>
<li><p>工作线程：线程池中的线程</p>
</li>
<li><p>任务接口：每个任务必须实现的接口，用于工作线程调度其运行</p>
</li>
<li><p>任务队列：用于存放待处理的任务，提供一种缓冲机制</p>
</li>
</ol>
<p>Java 中的线程池是通过 Executor 框架实现的，该框架中用到了 Executor， Executors，ExecutorService， ThreadPoolExecutor ， Callable 和 Future、 FutureTask 这几个类。</p>
<p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B7.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B7.png" src="/img/loading.gif" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,<span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">    Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>corePoolSize：指定了线程池中的线程数量。</p>
</li>
<li><p>maximumPoolSize：指定了线程池中的最大线程数量。</p>
</li>
<li><p>keepAliveTime：当前线程池数量超过 corePoolSize 时，多余的空闲线程的存活时间，即多长时间内会被销毁。</p>
</li>
<li><p>unit： keepAliveTime 的单位。</p>
</li>
<li><p>workQueue：任务队列，被提交但尚未被执行的任务。</p>
</li>
<li><p>threadFactory：线程工厂，用于创建线程，一般用默认的即可。</p>
</li>
<li><p>handler：拒绝策略，当任务太多来不及处理，如何拒绝任务。</p>
</li>
</ol>
<h3 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h3><p>线程池中的线程已经用完了，无法继续为新任务服务，同时，等待队列也已经排满了，再也塞不下新任务了。这时候我们就需要拒绝策略机制合理的处理这个问题。</p>
<p>JDK 内置的拒绝策略如下：</p>
<ol>
<li><p>AbortPolicy ： 直接抛出异常，阻止系统正常运行。</p>
</li>
<li><p>CallerRunsPolicy ： 只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。显然这样做不会真的丢弃任务，但是，任务提交线程的性能极有可能会急剧下降。</p>
</li>
<li><p>DiscardOldestPolicy ： 丢弃最老的一个请求，也就是即将被执行的一个任务，并尝试再次提交当前任务。</p>
</li>
<li><p>DiscardPolicy ： 该策略默默地丢弃无法处理的任务，不予任何处理。如果允许任务丢失，这是最好的一种方案。</p>
</li>
</ol>
<p>以上内置拒绝策略均实现了 RejectedExecutionHandler 接口，若以上策略仍无法满足实际需要，完全可以自己扩展 RejectedExecutionHandler 接口。</p>
<h3 id="Java-线程池工作过程"><a href="#Java-线程池工作过程" class="headerlink" title="Java 线程池工作过程"></a>Java 线程池工作过程</h3><ol>
<li><p>线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。</p>
</li>
<li><p>当调用 execute() 方法添加一个任务时，线程池会做如下判断：</p>
<p> a) 如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；</p>
<p> b) 如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列；</p>
<p> c) 如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；</p>
<p> d) 如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常 RejectExecutionException。</p>
</li>
<li><p>当一个线程完成任务时，它会从队列中取下一个任务来执行。</p>
</li>
<li><p>当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它<br>最终会收缩到 corePoolSize 的大小</p>
</li>
</ol>
<p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B8.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B8.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="JAVA-阻塞队列原理"><a href="#JAVA-阻塞队列原理" class="headerlink" title="JAVA 阻塞队列原理"></a>JAVA 阻塞队列原理</h2><p>阻塞队列，关键字是阻塞，先理解阻塞的含义，在阻塞队列中，线程阻塞有这样的两种情况：</p>
<ol>
<li><p>当队列中没有数据的情况下，消费者端的所有线程都会被自动阻塞（挂起），直到有数据放入队列。</p>
</li>
<li><p>当队列中填满数据的情况下，生产者端的所有线程都会被自动阻塞（挂起），直到队列中有空的位置，线程被自动唤醒。</p>
</li>
</ol>
<h3 id="阻塞队列的主要方法"><a href="#阻塞队列的主要方法" class="headerlink" title="阻塞队列的主要方法"></a>阻塞队列的主要方法</h3><p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B9.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B9.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>抛出异常：抛出一个异常；</p>
<p>特殊值：返回一个特殊值（null 或 false,视情况而定）</p>
<p>阻塞：在成功操作之前，一直阻塞线程</p>
<p>超时：放弃前只在最大的时间内阻塞</p>
<h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>1： public abstract boolean add(E paramE)： 将指定元素插入此队列中（如果立即可行且不会违反容量限制），成功时返回 true，如果当前没有可用的空间，则抛出 IllegalStateException。如果该元素是 NULL，则会抛出 NullPointerException 异常。</p>
<p>2： public abstract boolean offer(E paramE)： 将指定元素插入此队列中（如果立即可行且不会违反容量限制），成功时返回 true，如果当前没有可用的空间，则返回 false。</p>
<p>3： public abstract void put(E paramE) throws InterruptedException： 将指定元素插入此队列中，将等待可用的空间（如果有必要）</p>
<p>4： offer(E o, long timeout, TimeUnit unit)： 可以设定等待的时间， 如果在指定的时间内， 还不能往队列中加入 BlockingQueue， 则返回失败。</p>
<h4 id="获取数据操作"><a href="#获取数据操作" class="headerlink" title="获取数据操作"></a>获取数据操作</h4><p>1： poll(time):取走 BlockingQueue 里排在首位的对象,若不能立即取出,则可以等 time 参数规定的时间,取不到时返回 null;</p>
<p>2： poll(long timeout, TimeUnit unit)： 从 BlockingQueue 取出一个队首的对象， 如果在指定时间内， 队列一旦有数据可取， 则立即返回队列中的数据。否则直到时间超时还没有数据可取，返回失败。</p>
<p>3： take():取走 BlockingQueue 里排在首位的对象,若 BlockingQueue 为空,阻断进入等待状态直到 BlockingQueue 有新的数据被加入。</p>
<p>4.drainTo():一次性从 BlockingQueue 获取所有可用的数据对象（还可以指定获取数据的个数），通过该方法，可以提升获取数据效率；不需要多次分批加锁或释放锁</p>
<h3 id="Java-中的阻塞队列"><a href="#Java-中的阻塞队列" class="headerlink" title="Java 中的阻塞队列"></a>Java 中的阻塞队列</h3><ol>
<li><p>ArrayBlockingQueue ：由数组结构组成的有界阻塞队列。</p>
</li>
<li><p>LinkedBlockingQueue ：由链表结构组成的有界阻塞队列。</p>
</li>
<li><p>PriorityBlockingQueue ：支持优先级排序的无界阻塞队列。</p>
</li>
<li><p>DelayQueue：使用优先级队列实现的无界阻塞队列。</p>
</li>
<li><p>SynchronousQueue：不存储元素的阻塞队列。</p>
</li>
<li><p>LinkedTransferQueue：由链表结构组成的无界阻塞队列。</p>
</li>
<li><p>LinkedBlockingDeque：由链表结构组成的双向阻塞队列</p>
</li>
</ol>
<p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B10.png" data-fancybox="group" data-caption="pic" class="fancybox"><img alt="pic" title="pic" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B10.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="ArrayBlockingQueue（公平、非公平）"><a href="#ArrayBlockingQueue（公平、非公平）" class="headerlink" title="ArrayBlockingQueue（公平、非公平）"></a>ArrayBlockingQueue（公平、非公平）</h3><p>用数组实现的有界阻塞队列。此队列按照先进先出（FIFO）的原则对元素进行排序。 默认情况下不保证访问者公平的访问队列，所谓公平访问队列是指阻塞的所有生产者线程或消费者线程，当队列可用时，可以按照阻塞的先后顺序访问队列，即先阻塞的生产者线程，可以先往队列里插入元素，先阻塞的消费者线程，可以先从队列里获取元素。通常情况下为了保证公平性会降低吞吐量。我们可以使用以下代码创建一个公平的阻塞队列：</p>
<p>ArrayBlockingQueue fairQueue = new ArrayBlockingQueue(1000,true);</p>
<h3 id="LinkedBlockingQueue（两个独立锁提高并发）"><a href="#LinkedBlockingQueue（两个独立锁提高并发）" class="headerlink" title="LinkedBlockingQueue（两个独立锁提高并发）"></a>LinkedBlockingQueue（两个独立锁提高并发）</h3><p>基于链表的阻塞队列，同 ArrayListBlockingQueue 类似，此队列按照先进先出（FIFO）的原则对元素进行排序。而 LinkedBlockingQueue 之所以能够高效的处理并发数据，还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。</p>
<p>LinkedBlockingQueue 会默认一个类似无限大小的容量（Integer.MAX_VALUE）。</p>
<h3 id="PriorityBlockingQueue（compareTo-排序实现优先）"><a href="#PriorityBlockingQueue（compareTo-排序实现优先）" class="headerlink" title="PriorityBlockingQueue（compareTo 排序实现优先）"></a>PriorityBlockingQueue（compareTo 排序实现优先）</h3><p>是一个支持优先级的无界队列。默认情况下元素采取自然顺序升序排列。 可以自定义实现compareTo()方法来指定元素进行排序规则，或者初始化 PriorityBlockingQueue 时，指定构造参数 Comparator 来对元素进行排序。需要注意的是不能保证同优先级元素的顺序。</p>
<h3 id="DelayQueue（缓存失效、定时任务-）"><a href="#DelayQueue（缓存失效、定时任务-）" class="headerlink" title="DelayQueue（缓存失效、定时任务 ）"></a>DelayQueue（缓存失效、定时任务 ）</h3><p>是一个支持延时获取元素的无界阻塞队列。队列使用 PriorityQueue 来实现。队列中的元素必须实现 Delayed 接口，在创建元素时可以指定多久才能从队列中获取当前元素。只有在延迟期满时才能从队列中提取元素。我们可以将 DelayQueue 运用在以下应用场景：</p>
<ol>
<li><p>缓存系统的设计：可以用 DelayQueue 保存缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从 DelayQueue 中获取元素时，表示缓存有效期到了。</p>
</li>
<li><p>定 时 任 务 调 度 ： 使 用 DelayQueue 保 存 当 天 将 会 执 行 的 任 务 和 执 行 时 间 ， 一 旦 从DelayQueue 中获取到任务就开始执行，从比如 TimerQueue 就是使用 DelayQueue 实现的。</p>
</li>
</ol>
<h3 id="SynchronousQueue（不存储数据、可用于传递数据）"><a href="#SynchronousQueue（不存储数据、可用于传递数据）" class="headerlink" title="SynchronousQueue（不存储数据、可用于传递数据）"></a>SynchronousQueue（不存储数据、可用于传递数据）</h3><p>是一个不存储元素的阻塞队列。每一个 put 操作必须等待一个 take 操作，否则不能继续添加元素。SynchronousQueue 可以看成是一个传球手，负责把生产者线程处理的数据直接传递给消费者线程。队列本身并不存储任何元素，非常适合于传递性场景,比如在一个线程中使用的数据，传递给另 外 一 个 线 程 使 用 ， SynchronousQueue 的 吞 吐 量 高 于 LinkedBlockingQueue 和ArrayBlockingQueue</p>
<h3 id="LinkedTransferQueue"><a href="#LinkedTransferQueue" class="headerlink" title="LinkedTransferQueue"></a>LinkedTransferQueue</h3><p>是 一 个 由 链 表 结 构 组 成 的 无 界 阻 塞 TransferQueue 队 列 。 相 对 于 其 他 阻 塞 队 列 ，LinkedTransferQueue 多了 tryTransfer 和 transfer 方法。</p>
<ol>
<li><p>transfer 方法： 如果当前有消费者正在等待接收元素（消费者使用 take()方法或带时间限制的poll()方法时）， transfer 方法可以把生产者传入的元素立刻 transfer（传输）给消费者。如果没有消费者在等待接收元素， transfer 方法会将元素存放在队列的 tail 节点，并等到该元素被消费者消费了才返回。</p>
</li>
<li><p>tryTransfer 方法。则是用来试探下生产者传入的元素是否能直接传给消费者。如果没有消费者等待接收元素，则返回 false。和 transfer 方法的区别是 tryTransfer 方法无论消费者是否<br>接收，方法立即返回。而 transfer 方法是必须等到消费者消费了才返回。对于带有时间限制的 tryTransfer(E e, long timeout, TimeUnit unit)方法，则是试图把生产者传入的元素直接传给消费者，但是如果没有消费者消费该元素则等待指定的时间再返回，如果超时还没消费元素，则返回 false，如果在超时时间内消费了元素，则返回 true。</p>
</li>
</ol>
<h3 id="LinkedBlockingDeque"><a href="#LinkedBlockingDeque" class="headerlink" title="LinkedBlockingDeque"></a>LinkedBlockingDeque</h3><p>是一个由链表结构组成的双向阻塞队列。所谓双向队列指的你可以从队列的两端插入和移出元素。双端队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。相比其他的阻塞队列， LinkedBlockingDeque 多了 addFirst， addLast， offerFirst， offerLast，peekFirst， peekLast 等方法，以 First 单词结尾的方法，表示插入，获取（peek）或移除双端队列的第一个元素。以 Last 单词结尾的方法，表示插入，获取或移除双端队列的最后一个元素。另外插入方法 add 等同于 addLast，移除方法 remove 等效于 removeFirst。但是 take 方法却等同于 takeFirst，不知道是不是 Jdk 的 bug，使用时还是用带有 First 和 Last 后缀的方法更清楚。</p>
<p>在初始化 LinkedBlockingDeque 时可以设置容量防止其过渡膨胀。另外双向阻塞队列可以运用在“工作窃取”模式中。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程(二)</title>
    <url>/2020/02/11/Java/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B(%E4%BA%8C)/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Java多线程-二"><a href="#Java多线程-二" class="headerlink" title="Java多线程(二)"></a>Java多线程(二)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文为学习Java相关知识所作笔记，参考以下资料:<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a> ,感谢原作者的分享!</p>
</blockquote>
<h2 id="JAVA-锁"><a href="#JAVA-锁" class="headerlink" title="JAVA 锁"></a>JAVA 锁</h2><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁是一种乐观思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。</p>
<p>java 中的乐观锁基本都是通过 CAS 操作实现的，CAS 是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败。</p>
<h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>悲观锁是就是悲观思想，即认为写多，遇到并发写的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会上锁，这样别人想读写这个数据就会 block 直到拿到锁。java中的悲观锁就是Synchronized,AQS框架下的锁则是先尝试cas乐观锁去获取锁，获取不到，才会转换为悲观锁，如 RetreenLock。</p>
<h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>自旋锁原理非常简单，如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态，它们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗</p>
<p>线程自旋是需要消耗 cup 的，说白了就是让 cup 在做无用功，如果一直获取不到锁，那线程也不能一直占用 cup 自旋做无用功，所以需要设定一个自旋等待的最大时间</p>
<p>如果持有锁的线程执行的时间超过自旋等待的最大时间扔没有释放锁，就会导致其它争用锁的线程在最大等待时间内还是获取不到锁，这时争用线程会停止自旋进入阻塞状态</p>
<h4 id="自旋锁的优缺点"><a href="#自旋锁的优缺点" class="headerlink" title="自旋锁的优缺点"></a>自旋锁的优缺点</h4><p>自旋锁尽可能的减少线程的阻塞，这对于锁的竞争不激烈，且占用锁时间非常短的代码块来说性能能大幅度的提升，因为自旋的消耗会小于线程阻塞挂起再唤醒的操作的消耗，这些操作会导致线程发生两次上下文切换</p>
<p>但是如果锁的竞争激烈，或者持有锁的线程需要长时间占用锁执行同步块，这时候就不适合使用自旋锁了，因为自旋锁在获取锁前一直都是占用 cpu 做无用功，占着 XX 不 XX，同时有大量线程在竞争一个锁，会导致获取锁的时间很长，线程自旋的消耗大于线程阻塞挂起操作的消耗，其它需要 cup 的线程又不能获取到 cpu，造成 cpu 的浪费。所以这种情况下我们要关闭自旋锁；</p>
<h4 id="自旋锁时间阈值（1-6-引入了适应性自旋锁）"><a href="#自旋锁时间阈值（1-6-引入了适应性自旋锁）" class="headerlink" title="自旋锁时间阈值（1.6 引入了适应性自旋锁）"></a>自旋锁时间阈值（1.6 引入了适应性自旋锁）</h4><p>自旋锁的目的是为了占着 CPU 的资源不释放，等到获取到锁立即进行处理。但是如何去选择自旋的执行时间呢？如果自旋执行时间太长，会有大量的线程处于自旋状态占用 CPU 资源，进而会影响整体系统的性能。因此自旋的周期选的额外重要！</p>
<p>JVM 对于自旋周期的选择，jdk1.5 这个限度是一定的写死的，在 1.6 引入了适应性自旋锁，适应性自旋锁意味着自旋的时间不在是固定的了，而是由前一次在同一个锁上的自旋时间以及锁的拥有者的状态来决定，基本认为一个线程上下文切换的时间是最佳的一个时间，同时 JVM 还针对当前 CPU 的负荷情况做了较多的优化，如果平均负载小于 CPUs 则一直自旋，如果有超过(CPUs/2)个线程正在自旋，则后来线程直接阻塞，如果正在自旋的线程发现 Owner 发生了变化则延迟自旋时间（自旋计数）或进入阻塞，如果 CPU 处于节电模式则停止自旋，自旋时间的最坏情况是 CPU的存储延迟（CPU A 存储了一个数据，到 CPU B 得知这个数据直接的时间差），自旋时会适当放弃线程优先级之间的差异。</p>
<h4 id="自旋锁的开启"><a href="#自旋锁的开启" class="headerlink" title="自旋锁的开启"></a>自旋锁的开启</h4><p>JDK1.6 中-XX:+UseSpinning 开启；</p>
<p>-XX:PreBlockSpin=10 为自旋次数；</p>
<p>JDK1.7 后，去掉此参数，由 jvm 控制；</p>
<h3 id="Synchronized-同步锁"><a href="#Synchronized-同步锁" class="headerlink" title="Synchronized 同步锁"></a>Synchronized 同步锁</h3><p>synchronized 它可以把任意一个非 NULL 的对象当作锁。他属于独占式的悲观锁，同时属于可重入锁</p>
<h4 id="Synchronized-作用范围"><a href="#Synchronized-作用范围" class="headerlink" title="Synchronized 作用范围"></a>Synchronized 作用范围</h4><ol>
<li><p>作用于方法时，锁住的是对象的实例(this)；</p>
</li>
<li><p>当作用于静态方法时，锁住的是Class实例，又因为Class的相关数据存储在永久带PermGen（jdk1.8 则是 metaspace），永久带是全局共享的，因此静态方法锁相当于类的一个全局锁，会锁所有调用该方法的线程；</p>
</li>
<li><p>synchronized 作用于一个对象实例时，锁住的是所有以该对象为锁的代码块。它有多个队列，当多个线程一起访问某个对象监视器的时候，对象监视器会将这些线程存储在不同的容器中。</p>
</li>
</ol>
<h3 id="Synchronized-核心组件"><a href="#Synchronized-核心组件" class="headerlink" title="Synchronized 核心组件"></a>Synchronized 核心组件</h3><ol>
<li><p>Wait Set：哪些调用 wait 方法被阻塞的线程被放置在这里；</p>
</li>
<li><p>Contention List：竞争队列，所有请求锁的线程首先被放在这个竞争队列中；</p>
</li>
<li><p>Entry List：Contention List 中那些有资格成为候选资源的线程被移动到 Entry List 中；</p>
</li>
<li><p>OnDeck：任意时刻，最多只有一个线程正在竞争锁资源，该线程被成为 OnDeck；</p>
</li>
<li><p>Owner：当前已经获取到所资源的线程被称为 Owner；</p>
</li>
<li><p>!Owner：当前释放锁的线程。</p>
</li>
</ol>
<h3 id="Synchronized-实现"><a href="#Synchronized-实现" class="headerlink" title="Synchronized 实现"></a>Synchronized 实现</h3><p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B4.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B4.png" src="/img/loading.gif" class="lazyload"></a></p>
<ol>
<li><p>JVM 每次从队列的尾部取出一个数据用于锁竞争候选者（OnDeck），但是并发情况下，ContentionList 会被大量的并发线程进行 CAS 访问，为了降低对尾部元素的竞争，JVM 会将一部分线程移动到 EntryList 中作为候选竞争线程</p>
</li>
<li><p>Owner 线程会在 unlock 时，将 ContentionList 中的部分线程迁移到 EntryList 中，并指定EntryList 中的某个线程为 OnDeck 线程（一般是最先进去的那个线程）</p>
</li>
<li><p>Owner 线程并不直接把锁传递给 OnDeck 线程，而是把锁竞争的权利交给 OnDeck，OnDeck 需要重新竞争锁。这样虽然牺牲了一些公平性，但是能极大的提升系统的吞吐量，在JVM 中，也把这种选择行为称之为“竞争切换”。</p>
</li>
<li><p>OnDeck 线程获取到锁资源后会变为 Owner 线程，而没有得到锁资源的仍然停留在 EntryList中。如果 Owner 线程被 wait 方法阻塞，则转移到WaitSet 队列中，直到某个时刻通过 notify或者 notifyAll 唤醒，会重新进去 EntryList 中</p>
</li>
<li><p>处于 ContentionList、EntryList、WaitSet 中的线程都处于阻塞状态，该阻塞是由操作系统来完成的（Linux 内核下采用 pthread_mutex_lock 内核函数实现的）</p>
</li>
<li><p>Synchronized 是非公平锁。 Synchronized 在线程进入ContentionList 时，等待的线程会先尝试自旋获取锁，如果获取不到就进入 ContentionList，这明显对于已经进入队列的线程是不公平的，还有一个不公平的事情就是自旋获取锁的线程还可能直接抢占 OnDeck 线程的锁资源</p>
</li>
<li><p>每个对象都有个 monitor 对象，加锁就是在竞争 monitor 对象，代码块加锁是在前后分别加上 monitorenter 和 monitorexit 指令来实现的，方法加锁是通过一个标记位来判断的</p>
</li>
<li><p>synchronized 是一个重量级操作，需要调用操作系统相关接口，性能是低效的，有可能给线程加锁消耗的时间比有用操作消耗的时间更多</p>
</li>
<li><p>Java1.6，synchronized 进行了很多的优化，有适应自旋、锁消除、锁粗化、轻量级锁及偏向锁等，效率有了本质上的提高。在之后推出的 Java1.7 与 1.8 中，均对该关键字的实现机理做了优化。引入了偏向锁和轻量级锁。都是在对象头中有标记位，不需要经过操作系统加锁</p>
</li>
<li><p>锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。这种升级过程叫做锁膨胀；</p>
</li>
<li><p>JDK 1.6 中默认是开启偏向锁和轻量级锁，可以通过-XX:-UseBiasedLocking 来禁用偏向锁</p>
</li>
</ol>
<h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><p>ReentantLock 继承接口 Lock 并实现了接口中定义的方法，他是一种可重入锁，除了能完成 synchronized 所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。</p>
<h4 id="Lock-接口的主要方法"><a href="#Lock-接口的主要方法" class="headerlink" title="Lock 接口的主要方法"></a>Lock 接口的主要方法</h4><ol>
<li><p>void lock(): 执行此方法时, 如果锁处于空闲状态, 当前线程将获取到锁. 相反, 如果锁已经被其他线程持有, 将禁用当前线程, 直到当前线程获取到锁.</p>
</li>
<li><p>boolean tryLock()：如果锁可用, 则获取锁, 并立即返回 true, 否则返回 false. 该方法和lock()的区别在于, tryLock()只是”试图”获取锁, 如果锁不可用, 不会导致当前线程被禁用, 当前线程仍然继续往下执行代码. 而 lock()方法则是一定要获取到锁, 如果锁不可用, 就一直等待, 在未获得锁之前,当前线程并不继续向下执行. </p>
</li>
<li><p>void unlock()：执行此方法时, 当前线程将释放持有的锁. 锁只能由持有者释放, 如果线程并不持有锁, 却执行该方法, 可能导致异常的发生.</p>
</li>
<li><p>Condition newCondition()：条件对象，获取等待通知组件。该组件和当前的锁绑定，当前线程只有获取了锁，才能调用该组件的 await()方法，而调用后，当前线程将释放锁。</p>
</li>
<li><p>getHoldCount() ：查询当前线程保持此锁的次数，也就是执行此线程执行 lock 方法的次数。</p>
</li>
<li><p>getQueueLength（）：返回正等待获取此锁的线程估计数，比如启动 10 个线程，1 个线程获得锁，此时返回的是 9</p>
</li>
<li><p>getWaitQueueLength：（Condition condition）返回等待与此锁相关的给定条件的线程估计数。比如 10 个线程，用同一个 condition 对象，并且此时这 10 个线程都执行了condition 对象的 await 方法，那么此时执行此方法返回 10</p>
</li>
<li><p>hasWaiters(Condition condition)：查询是否有线程等待与此锁有关的给定条件(condition)，对于指定 contidion 对象，有多少线程执行了 condition.await 方法</p>
</li>
<li><p>hasQueuedThread(Thread thread)：查询给定线程是否等待获取此锁</p>
</li>
<li><p>hasQueuedThreads()：是否有线程等待此锁</p>
</li>
<li><p>isFair()：该锁是否公平锁</p>
</li>
<li><p>isHeldByCurrentThread()： 当前线程是否保持锁锁定，线程的执行 lock 方法的前后分别是 false 和 true</p>
</li>
<li><p>isLock()：此锁是否有任意线程占用</p>
</li>
<li><p>lockInterruptibly（）：如果当前线程未被中断，获取锁</p>
</li>
<li><p>tryLock（）：尝试获得锁，仅在调用时锁未被线程占用，获得锁</p>
</li>
<li><p>tryLock(long timeout TimeUnit unit)：如果锁在给定等待时间内没有被另一个线程保持，则获取该锁。</p>
</li>
</ol>
<h4 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h4><p>JVM 按随机、就近原则分配锁的机制则称为不公平锁，ReentrantLock 在构造函数中提供了是否公平锁的初始化方式，默认为非公平锁。非公平锁实际执行的效率要远远超出公平锁，除非程序有特殊需要，否则最常用非公平锁的分配机制。</p>
<h4 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h4><p>公平锁指的是锁的分配机制是公平的，通常先对锁提出获取请求的线程会先被分配到锁，ReentrantLock 在构造函数中提供了是否公平锁的初始化方式来定义公平锁</p>
<h4 id="ReentrantLock-与-synchronized"><a href="#ReentrantLock-与-synchronized" class="headerlink" title="ReentrantLock 与 synchronized"></a>ReentrantLock 与 synchronized</h4><ol>
<li><p>ReentrantLock 通过方法 lock()与 unlock()来进行加锁与解锁操作，与 synchronized 会 被 JVM 自动解锁机制不同，ReentrantLock 加锁后需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用 ReentrantLock 必须在 finally 控制块中进行解锁操<br>作。</p>
</li>
<li><p>ReentrantLock 相比 synchronized 的优势是可中断、公平锁、多个锁。这种情况下需要使用 ReentrantLock。</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">//Lock lock=new ReentrantLock(true);//公平锁</span></span><br><span class="line">    <span class="comment">//Lock lock=new ReentrantLock(false);//非公平锁</span></span><br><span class="line">    <span class="keyword">private</span> Condition condition=lock.newCondition();<span class="comment">//创建 Condition</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        lock.lock();<span class="comment">//lock 加锁</span></span><br><span class="line">        <span class="comment">//1：wait 方法等待：</span></span><br><span class="line">        <span class="comment">//System.out.println("开始 wait");</span></span><br><span class="line">        condition.await();</span><br><span class="line">        <span class="comment">//通过创建 Condition 对象来使线程 wait，必须先执行 lock.lock 方法获得锁</span></span><br><span class="line">        <span class="comment">//:2：signal 方法唤醒</span></span><br><span class="line">        condition.signal();<span class="comment">//condition 对象的 signal 方法可以唤醒 wait 线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"ThreadName="</span> + Thread.currentThread().getName()+ (<span class="string">" "</span> + (i + <span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="Condition-类和-Object-类锁方法区别区别"><a href="#Condition-类和-Object-类锁方法区别区别" class="headerlink" title="Condition 类和 Object 类锁方法区别区别"></a>Condition 类和 Object 类锁方法区别区别</h4><ol>
<li><p>Condition 类的 awiat 方法和 Object 类的 wait 方法等效</p>
</li>
<li><p>Condition 类的 signal 方法和 Object 类的 notify 方法等效</p>
</li>
<li><p>Condition 类的 signalAll 方法和 Object 类的 notifyAll 方法等效</p>
</li>
<li><p>ReentrantLock 类可以唤醒指定条件的线程，而 object 的唤醒是随机的</p>
</li>
</ol>
<h4 id="tryLock-和-lock-和-lockInterruptibly-的区别"><a href="#tryLock-和-lock-和-lockInterruptibly-的区别" class="headerlink" title="tryLock 和 lock 和 lockInterruptibly 的区别"></a>tryLock 和 lock 和 lockInterruptibly 的区别</h4><ol>
<li><p>tryLock 能获得锁就返回 true，不能就立即返回 false，tryLock(long timeout,TimeUnit unit)，可以增加时间限制，如果超过该时间段还没获得锁，返回 false</p>
</li>
<li><p>lock 能获得锁就返回 true，不能的话一直等待获得锁</p>
</li>
<li><p>lock 和 lockInterruptibly，如果两个线程分别执行这两个方法，但此时中断这两个线程，lock 不会抛出异常，而 lockInterruptibly 会抛出异常。</p>
</li>
</ol>
<h3 id="Semaphore-信号量"><a href="#Semaphore-信号量" class="headerlink" title="Semaphore 信号量"></a>Semaphore 信号量</h3><p>Semaphore 是一种基于计数的信号量。它可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号将会被阻塞。Semaphore 可以用来构建一些对象池，资源池之类的，比如数据库连接池</p>
<h4 id="实现互斥锁（计数器为-1）"><a href="#实现互斥锁（计数器为-1）" class="headerlink" title="实现互斥锁（计数器为 1）"></a>实现互斥锁（计数器为 1）</h4><p>我们也可以创建计数为 1 的 Semaphore，将其作为一种类似互斥锁的机制，这也叫二元信号量，表示两种互斥状态</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个计数阈值为 5 的信号量对象</span></span><br><span class="line"><span class="comment">// 只能 5 个线程同时访问</span></span><br><span class="line">Semaphore semp = <span class="keyword">new</span> Semaphore(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">try</span> &#123; <span class="comment">// 申请许可</span></span><br><span class="line">    semp.acquire();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放许可</span></span><br><span class="line">        semp.release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="Semaphore-与-ReentrantLock"><a href="#Semaphore-与-ReentrantLock" class="headerlink" title="Semaphore 与 ReentrantLock"></a>Semaphore 与 ReentrantLock</h4><p>Semaphore 基本能完成 ReentrantLock 的所有工作，使用方法也与之类似，通过 acquire()与release()方法来获得和释放临界资源。经实测，Semaphone.acquire()方法默认为可响应中断锁，与 ReentrantLock.lockInterruptibly()作用效果一致，也就是说在等待临界资源的过程中可以被<br>Thread.interrupt()方法中断</p>
<p>此外，Semaphore 也实现了可轮询的锁请求与定时锁的功能，除了方法名 tryAcquire 与 tryLock不同，其使用方法与 ReentrantLock 几乎一致。Semaphore 也提供了公平与非公平锁的机制，也可在构造函数中进行设定</p>
<p>Semaphore 的锁释放操作也由手动进行，因此与 ReentrantLock 一样，为避免线程因抛出异常而无法正常释放锁的情况发生，释放锁的操作也必须在 finally 代码块中完成。</p>
<h3 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3><p>首先说明，此处 AtomicInteger ，一个提供原子操作的 Integer 的类，常见的还有AtomicBoolean、AtomicInteger、AtomicLong、AtomicReference 等，他们的实现原理相同，区别在与运算对象类型的不同。令人兴奋地，还可以通过 AtomicReference<v>将一个对象的所有操作转化成原子操作。</v></p>
<p>我们知道，在多线程程序中，诸如++i 或 i++等运算不具有原子性，是不安全的线程操作之一。通常我们会使用 synchronized 将该操作变成一个原子操作，但 JVM 为此类操作特意提供了一些同步类，使得使用更方便，且使程序运行效率变得更高。通过相关资料显示，通常AtomicInteger的性能是ReentantLock 的好几倍。</p>
<h3 id="可重入锁（递归锁）"><a href="#可重入锁（递归锁）" class="headerlink" title="可重入锁（递归锁）"></a>可重入锁（递归锁）</h3><p>本文里面讲的是广义上的可重入锁，而不是单指 JAVA 下的 ReentrantLock。可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。在 JAVA 环境下 ReentrantLock 和 synchronized 都是 可重入锁。</p>
<h3 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h3><h4 id="公平锁（Fair）"><a href="#公平锁（Fair）" class="headerlink" title="公平锁（Fair）"></a>公平锁（Fair）</h4><p>加锁前检查是否有排队等待的线程，优先排队等待的线程，先来先得</p>
<h4 id="非公平锁（Nonfair）"><a href="#非公平锁（Nonfair）" class="headerlink" title="非公平锁（Nonfair）"></a>非公平锁（Nonfair）</h4><p>加锁时不考虑排队等待问题，直接尝试获取锁，获取不到自动到队尾等待</p>
<ol>
<li><p>非公平锁性能比公平锁高 5~10 倍，因为公平锁需要在多核的情况下维护一个队列</p>
</li>
<li><p>Java 中的 synchronized 是非公平锁，ReentrantLock 默认的 lock()方法采用的是非公平锁。</p>
</li>
</ol>
<h3 id="ReadWriteLock-读写锁"><a href="#ReadWriteLock-读写锁" class="headerlink" title="ReadWriteLock 读写锁"></a>ReadWriteLock 读写锁</h3><p>为了提高性能，Java 提供了读写锁，在读的地方使用读锁，在写的地方使用写锁，灵活控制，如果没有写锁的情况下，读是无阻塞的,在一定程度上提高了程序的执行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁与写锁互斥，这是由 jvm 自己控制的，你只要上好相应的锁即可</p>
<h4 id="读锁"><a href="#读锁" class="headerlink" title="读锁"></a>读锁</h4><p>如果你的代码只读数据，可以很多人同时读，但不能同时写，那就上读锁</p>
<h4 id="写锁"><a href="#写锁" class="headerlink" title="写锁"></a>写锁</h4><p>如果你的代码修改数据，只能有一个人在写，且不能同时读取，那就上写锁。总之，读的时候上读锁，写的时候上写锁！</p>
<p>Java 中读写锁有个接口 java.util.concurrent.locks.ReadWriteLock ，也有具体的实现ReentrantReadWriteLock</p>
<h3 id="共享锁和独占锁"><a href="#共享锁和独占锁" class="headerlink" title="共享锁和独占锁"></a>共享锁和独占锁</h3><p>java 并发包提供的加锁模式分为独占锁和共享锁。</p>
<h4 id="独占锁"><a href="#独占锁" class="headerlink" title="独占锁"></a>独占锁</h4><p>独占锁模式下，每次只能有一个线程能持有锁，ReentrantLock 就是以独占方式实现的互斥锁。独占锁是一种悲观保守的加锁策略，它避免了读/读冲突，如果某个只读线程获取锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，因为读操作并不会影响数据的一致性</p>
<h4 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h4><p>共享锁则允许多个线程同时获取锁，并发访问 共享资源，如：ReadWriteLock。共享锁则是一种乐观锁，它放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源</p>
<ol>
<li><p>AQS 的内部类 Node 定义了两个常量 SHARED 和 EXCLUSIVE，他们分别标识 AQS 队列中等待线程的锁获取模式。</p>
</li>
<li><p>java 的并发包中提供了 ReadWriteLock，读-写锁。它允许一个资源可以被多个读操作访问，或者被一个 写操作访问，但两者不能同时进行。</p>
</li>
</ol>
<h3 id="重量级锁（Mutex-Lock）"><a href="#重量级锁（Mutex-Lock）" class="headerlink" title="重量级锁（Mutex Lock）"></a>重量级锁（Mutex Lock）</h3><p>Synchronized 是通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的 Mutex Lock 来实现的。而操作系统实现线程之间的切换这就需要从用户态转换到核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么Synchronized 效率低的原因。因此，这种依赖于操作系统 Mutex Lock 所实现的锁我们称之为“重量级锁”。JDK 中对 Synchronized 做的种种优化，其核心都是为了减少这种重量级锁的使用。JDK1.6 以后，为了减少获得锁和释放锁所带来的性能消耗，提高性能，引入了“轻量级锁”和“偏向锁”</p>
<h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>锁的状态总共有四种：无锁状态、偏向锁、轻量级锁和重量级锁。</p>
<h4 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a>锁升级</h4><p>随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级的重量级锁（但是锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级）</p>
<p>“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的。但是，首先需要强调一点的是，轻量级锁并不是用来代替重量级锁的，它的本意是在没有多线程竞争的前提下，减少传统的重量级锁使用产生的性能消耗。在解释轻量级锁的执行过程之前，先明白一点，轻量级锁所适应的场景是线程交替执行同步块的情况，如果存在同一时间访问同一锁的情况，就会导致轻量级锁膨胀为重量级锁。</p>
<h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>Hotspot 的作者经过以往的研究发现大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得。偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来让这个线程得到了偏护。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换ThreadID 的时候依赖一次 CAS 原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所<br>以偏向锁的撤销操作的性能损耗必须小于节省下来的 CAS 原子指令的性能消耗）。上面说过，轻量级锁是为了在线程交替执行同步块时提高性能，而偏向锁则是在只有一个线程执行同步块时进一步提高性能。</p>
<h3 id="分段锁"><a href="#分段锁" class="headerlink" title="分段锁"></a>分段锁</h3><p>分段锁也并非一种实际的锁，而是一种思想 ConcurrentHashMap 是学习分段锁的最好实践</p>
<h3 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h3><h4 id="减少锁持有时间"><a href="#减少锁持有时间" class="headerlink" title="减少锁持有时间"></a>减少锁持有时间</h4><p>只用在有线程安全要求的程序上加锁</p>
<h4 id="减小锁粒度"><a href="#减小锁粒度" class="headerlink" title="减小锁粒度"></a>减小锁粒度</h4><p>将大对象（这个对象可能会被很多线程访问），拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁，轻量级锁成功率才会提高。最最典型的减小锁粒度的案例就是ConcurrentHashMap</p>
<h4 id="锁分离"><a href="#锁分离" class="headerlink" title="锁分离"></a>锁分离</h4><p>最常见的锁分离就是读写锁 ReadWriteLock，根据功能进行分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，即保证了线程安全，又提高了性能，具体也请查看[高并发 Java 五] JDK 并发包 1。读写分离思想可以延伸，只要操作互不影响，锁就可以分离。比如LinkedBlockingQueue 从头部取出，从尾部放数据</p>
<h4 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h4><p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是，凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化</p>
<h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><p>锁消除是在编译器级别的事情。在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程(一)</title>
    <url>/2020/02/11/Java/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B(%E4%B8%80)/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Java多线程-一"><a href="#Java多线程-一" class="headerlink" title="Java多线程(一)"></a>Java多线程(一)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文为学习Java相关知识所作笔记，参考以下资料:<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a> ,感谢原作者的分享!</p>
</blockquote>
<h2 id="JAVA-并发知识库"><a href="#JAVA-并发知识库" class="headerlink" title="JAVA 并发知识库"></a>JAVA 并发知识库</h2><p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="JAVA-线程实现-创建方式"><a href="#JAVA-线程实现-创建方式" class="headerlink" title="JAVA 线程实现/创建方式"></a>JAVA 线程实现/创建方式</h2><h3 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h3><p>Thread 类本质上是实现了 Runnable 接口的一个实例，代表一个线程的实例。启动线程的唯一方法就是通过 Thread 类的 start()实例方法。start()方法是一个 native 方法，它将启动一个新线程，并执行 run()方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"MyThread.run()"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">MyThread myThread1 = <span class="keyword">new</span> MyThread(); </span><br><span class="line">myThread1.start();</span><br></pre></td></tr></table></figure></div>

<h3 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a>实现 Runnable 接口</h3><p>如果自己的类已经 extends 另一个类，就无法直接 extends Thread，此时，可以实现一个Runnable 接口。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">OtherClass</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"MyThread.run()"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动 MyThread，需要首先实例化一个 Thread，并传入自己的 MyThread 实例：</span></span><br><span class="line">MyThread myThread = <span class="keyword">new</span> MyThread(); </span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(myThread); </span><br><span class="line">thread.start(); </span><br><span class="line"><span class="comment">//事实上，当传入一个 Runnable target 参数给 Thread 后，Thread 的 run()方法就会调用</span></span><br><span class="line">target.run()</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123; </span><br><span class="line">        target.run(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="ExecutorService、Callable、Future-有返回值线程"><a href="#ExecutorService、Callable、Future-有返回值线程" class="headerlink" title="ExecutorService、Callable、Future 有返回值线程"></a>ExecutorService、Callable<class>、Future 有返回值线程</class></h3><p>有返回值的任务必须实现 Callable 接口，类似的，无返回值的任务必须 Runnable 接口。执行Callable 任务后，可以获取一个 Future 的对象，在该对象上调用 get 就可以获取到 Callable 任务返回的 Object 了，再结合线程池接口 ExecutorService 就可以实现传说中有返回结果的多线程了。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个线程池</span></span><br><span class="line">ExecutorService pool = Executors.newFixedThreadPool(taskSize);</span><br><span class="line"><span class="comment">// 创建多个有返回值的任务</span></span><br><span class="line">List&lt;Future&gt; list = <span class="keyword">new</span> ArrayList&lt;Future&gt;(); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; taskSize; i++) &#123; </span><br><span class="line">    Callable c = <span class="keyword">new</span> MyCallable(i + <span class="string">" "</span>); </span><br><span class="line">    <span class="comment">// 执行任务并获取 Future 对象</span></span><br><span class="line">    Future f = pool.submit(c); </span><br><span class="line">    list.add(f); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 关闭线程池</span></span><br><span class="line">pool.shutdown(); </span><br><span class="line"><span class="comment">// 获取所有并发任务的运行结果</span></span><br><span class="line"><span class="keyword">for</span> (Future f : list) &#123; </span><br><span class="line">    <span class="comment">// 从 Future 对象上获取任务的返回值，并输出到控制台</span></span><br><span class="line">    System.out.println(<span class="string">"res："</span> + f.get().toString()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="基于线程池的方式"><a href="#基于线程池的方式" class="headerlink" title="基于线程池的方式"></a>基于线程池的方式</h3><p>线程和数据库连接这些资源都是非常宝贵的资源。那么每次需要的时候创建，不需要的时候销毁，是非常浪费资源的。那么我们就可以使用缓存的策略，也就是使用线程池</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建线程池</span></span><br><span class="line"> ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"> <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">    threadPool.execute(<span class="keyword">new</span> Runnable() &#123; <span class="comment">// 提交多个线程任务，并执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" is running .."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125; &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4种线程池"><a href="#4种线程池" class="headerlink" title="4种线程池"></a>4种线程池</h2><p>Java 里面线程池的顶级接口是 Executor，但是严格意义上讲 Executor 并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是 ExecutorService。</p>
<p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B2.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h3><p>创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。对于执行很多短期异步任务的程序而言，这些线程池通常可提高程序性能。调用 execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。因此，长时间保持空闲的线程池不会使用任何资源。</p>
<h3 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h3><p>创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。在任意点，在大多数 nThreads 线程会处于处理任务的活动状态。如果在所有线程处于活动状态时提交附加任务，则在有可用线程之前，附加任务将在队列中等待。如果在关闭前的执行期间由于失败而导致任何线程终止，那么一个新线程将代替它执行后续的任务（如果需要）。在某个线程被显式地关闭之前，池中的线程将一直存在。</p>
<h3 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h3><p>创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> ScheduledExecutorService scheduledThreadPool= Executors.newScheduledThreadPool(<span class="number">3</span>); </span><br><span class="line"> scheduledThreadPool.schedule(newRunnable()&#123; </span><br><span class="line"> <span class="meta">@Override</span> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"延迟三秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">scheduledThreadPool.scheduleAtFixedRate(newRunnable()&#123; </span><br><span class="line"> <span class="meta">@Override</span> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"延迟 1 秒后每三秒执行一次"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;,<span class="number">1</span>,<span class="number">3</span>,TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure></div>

<h3 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h3><p>Executors.newSingleThreadExecutor()返回一个线程池（这个线程池只有一个线程）,这个线程池可以在线程死后（或发生异常时）重新启动一个线程来替代原来的线程继续执行下去！</p>
<h2 id="线程生命周期-状态"><a href="#线程生命周期-状态" class="headerlink" title="线程生命周期(状态)"></a>线程生命周期(状态)</h2><p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经过新建(New)、就绪（Runnable）、运行（Running）、阻塞(Blocked)和死亡(Dead)5 种状态。尤其是当线程启动以后，它不可能一直”霸占”着 CPU 独自运行，所以 CPU 需要在多条线程之间切换，于是线程状态也会多次在运行、阻塞之间切换</p>
<h3 id="新建状态（NEW）"><a href="#新建状态（NEW）" class="headerlink" title="新建状态（NEW）"></a>新建状态（NEW）</h3><p>当程序使用 new 关键字创建了一个线程之后，该线程就处于新建状态，此时仅由 JVM 为其分配内存，并初始化其成员变量的值</p>
<h3 id="就绪状态（RUNNABLE）"><a href="#就绪状态（RUNNABLE）" class="headerlink" title="就绪状态（RUNNABLE）"></a>就绪状态（RUNNABLE）</h3><p>当线程对象调用了 start()方法之后，该线程处于就绪状态。Java 虚拟机会为其创建方法调用栈和程序计数器，等待调度运行。</p>
<h3 id="运行状态（RUNNING）"><a href="#运行状态（RUNNING）" class="headerlink" title="运行状态（RUNNING）"></a>运行状态（RUNNING）</h3><p>如果处于就绪状态的线程获得了 CPU，开始执行 run()方法的线程执行体，则该线程处于运行状态</p>
<h3 id="阻塞状态（BLOCKED）"><a href="#阻塞状态（BLOCKED）" class="headerlink" title="阻塞状态（BLOCKED）"></a>阻塞状态（BLOCKED）</h3><p>阻塞状态是指线程因为某种原因放弃了 cpu 使用权，也即让出了 cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得 cpu timeslice 转到运行(running)状态。阻塞的情况分三种：</p>
<p>等待阻塞（o.wait-&gt;等待对列）：<br>运行(running)的线程执行 o.wait()方法，JVM 会把该线程放入等待队列(waitting queue)中。</p>
<p>同步阻塞(lock-&gt;锁池):<br>运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线程放入锁池(lock pool)中</p>
<p>其他阻塞(sleep/join):<br>运行(running)的线程执行 Thread.sleep(long ms)或 t.join()方法，或者发出了 I/O 请求时，JVM 会把该线程置为阻塞状态。当 sleep()状态超时、join()等待线程终止或者超时、或者 I/O处理完毕时，线程重新转入可运行(runnable)状态。</p>
<h3 id="线程死亡（DEAD）"><a href="#线程死亡（DEAD）" class="headerlink" title="线程死亡（DEAD）"></a>线程死亡（DEAD）</h3><p>线程会以下面三种方式结束，结束后就是死亡状态。</p>
<p>正常结束</p>
<p>run()或 call()方法执行完成，线程正常结束。</p>
<p>异常结束</p>
<p>线程抛出一个未捕获的 Exception 或 Error。</p>
<p>调用 stop</p>
<p>直接调用该线程的 stop()方法来结束该线程—该方法通常容易导致死锁，不推荐使用。</p>
<p><a href="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B3.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B3.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="终止线程-4-种方式"><a href="#终止线程-4-种方式" class="headerlink" title="终止线程 4 种方式"></a>终止线程 4 种方式</h2><h3 id="正常运行结束"><a href="#正常运行结束" class="headerlink" title="正常运行结束"></a>正常运行结束</h3><p>程序运行结束，线程自动结束。</p>
<h3 id="使用退出标志退出线程"><a href="#使用退出标志退出线程" class="headerlink" title="使用退出标志退出线程"></a>使用退出标志退出线程</h3><p>一般 run()方法执行完，线程就会正常结束，然而，常常有些线程是伺服线程。它们需要长时间的运行，只有在外部某些条件满足的情况下，才能关闭这些线程。使用一个变量来控制循环，例如：最直接的方法就是设一个 boolean 类型的标志，并通过设置这个标志为 true 或 false 来控制 while循环是否退出，代码示例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafe</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> exit = <span class="keyword">false</span>; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">while</span> (!exit)&#123;</span><br><span class="line">            <span class="comment">//do something</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义了一个退出标志 exit，当 exit 为 true 时，while 循环退出，exit 的默认值为 false.在定义 exit时，使用了一个 Java 关键字 volatile，这个关键字的目的是使 exit 同步，也就是说在同一时刻只能由一个线程来修改 exit 的值</p>
<h3 id="Interrupt-方法结束线程"><a href="#Interrupt-方法结束线程" class="headerlink" title="Interrupt 方法结束线程"></a>Interrupt 方法结束线程</h3><p>使用 interrupt()方法来中断线程有两种情况：</p>
<ol>
<li><p>线程处于阻塞状态：如使用了 sleep,同步锁的 wait,socket 中的 receiver,accept 等方法时，会使线程处于阻塞状态。当调用线程的 interrupt()方法时，会抛出 InterruptException 异常。阻塞中的那个方法抛出这个异常，通过代码捕获该异常，然后 break 跳出循环状态，从而让<br>我们有机会结束这个线程的执行。通常很多人认为只要调用 interrupt 方法线程就会结束，实际上是错的， 一定要先捕获 InterruptedException 异常之后通过 break 来跳出循环，才能正常结束 run 方法。</p>
</li>
<li><p>线程未处于阻塞状态：使用 isInterrupted()判断线程的中断标志来退出循环。当使用interrupt()方法时，中断标志就会置 true，和使用自定义的标志来控制循环是一样的道理。</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafe</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">while</span> (!isInterrupted())&#123; <span class="comment">//非阻塞过程中通过判断中断标志来退出</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>*<span class="number">1000</span>);<span class="comment">//阻塞过程捕获中断异常来退出</span></span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//捕获到异常之后，执行 break 跳出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="stop-方法终止线程（线程不安全）"><a href="#stop-方法终止线程（线程不安全）" class="headerlink" title="stop 方法终止线程（线程不安全）"></a>stop 方法终止线程（线程不安全）</h3><p>程序中可以直接使用 thread.stop()来强行终止线程，但是 stop 方法是很危险的，就象突然关闭计算机电源，而不是按正常程序关机一样，可能会产生不可预料的结果，不安全主要是：thread.stop()调用之后，创建子线程的线程就会抛出 ThreadDeatherror 的错误，并且会释放子线程所持有的所有锁。一般任何进行加锁的代码块，都是为了保护数据的一致性，如果在调用thread.stop()后导致了该线程所持有的所有锁的突然释放(不可控制)，那么被保护数据就有可能呈现不一致性，其他线程在使用这些被破坏的数据时，有可能导致一些很奇怪的应用程序错误。因此，并不推荐使用 stop 方法来终止线程。</p>
<h2 id="sleep-与-wait-区别"><a href="#sleep-与-wait-区别" class="headerlink" title="sleep 与 wait 区别"></a>sleep 与 wait 区别</h2><ol>
<li><p>对于 sleep()方法，我们首先要知道该方法是属于 Thread 类中的。而 wait()方法，则是属于Object 类中的。</p>
</li>
<li><p>sleep()方法导致了程序暂停执行指定的时间，让出 cpu 该其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。</p>
</li>
<li><p>在调用 sleep()方法的过程中，线程不会释放对象锁</p>
</li>
<li><p>而当调用 wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用 notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。</p>
</li>
</ol>
<h2 id="start-与-run-区别"><a href="#start-与-run-区别" class="headerlink" title="start 与 run 区别"></a>start 与 run 区别</h2><ol>
<li>start（）方法来启动线程，真正实现了多线程运行。这时无需等待 run 方法体代码执行完毕，可以直接继续执行下面的代码。</li>
<li>通过调用 Thread 类的 start()方法来启动一个线程， 这时此线程是处于就绪状态， 并没有运行。</li>
<li>方法 run()称为线程体，它包含了要执行的这个线程的内容，线程就进入运行状态，开始运行 run 函数当中的代码。 Run 方法运行结束， 此线程终止。然后 CPU 再调度其它线程。</li>
</ol>
<h2 id="JAVA-后台线程"><a href="#JAVA-后台线程" class="headerlink" title="JAVA 后台线程"></a>JAVA 后台线程</h2><ol>
<li><p>定义：守护线程–也称“服务线程”，他是后台线程，它有一个特性，即为用户线程 提供公共服务，在没有用户线程可服务时会自动离开。</p>
</li>
<li><p>优先级：守护线程的优先级比较低，用于为系统中的其它对象和线程提供服务。</p>
</li>
<li><p>设置：通过 setDaemon(true)来设置线程为“守护线程”；将一个用户线程设置为守护线程的方式是在 线程对象创建 之前 用线程对象的 setDaemon 方法。</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread = <span class="keyword">new</span> Thread(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li><p>在 Daemon 线程中产生的新线程也是 Daemon 的。</p>
</li>
<li><p>线程则是 JVM 级别的，以 Tomcat 为例，如果你在 Web 应用中启动一个线程，这个线程的生命周期并不会和 Web 应用程序保持同步。也就是说，即使你停止了 Web 应用，这个线程依旧是活跃的。</p>
</li>
<li><p>example: 垃圾回收线程就是一个经典的守护线程，当我们的程序中不再有任何运行的Thread,程序就不会再产生垃圾，垃圾回收器也就无事可做，所以当垃圾回收线程是 JVM 上仅剩的线程时，垃圾回收线程会自动离开。它始终在低级别的状态中运行，用于实时监控和管理系统中的可回收资源。</p>
</li>
<li><p>生命周期：守护进程（Daemon）是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。也就是说守护线程不依赖于终端，但是依赖于系统，与系统“同生共死”。当 JVM 中所有的线程都是守护线程的时候，JVM 就可以退出了；如果还有一个或以上的非守护线程则 JVM 不会退出。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA集合</title>
    <url>/2020/02/11/Java/JAVA%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文为学习Java相关知识所作笔记，参考以下资料:<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a> ,感谢原作者的分享!</p>
</blockquote>
<h2 id="接口继承关系和实现"><a href="#接口继承关系和实现" class="headerlink" title="接口继承关系和实现"></a>接口继承关系和实现</h2><p>集合类存放于 Java.util 包中，主要有 3 种：set(集）、list(列表包含 Queue）和 map(映射)。</p>
<ol>
<li><p>Collection：Collection 是集合 List、Set、Queue 的最基本的接口。</p>
</li>
<li><p>Iterator：迭代器，可以通过迭代器遍历集合中的数据</p>
</li>
<li><p>Map：是映射表的基础接口</p>
</li>
</ol>
<p><a href="/images/collection.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/collection.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><a href="/images/collection2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/collection2.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>Java 的 List 是非常常用的数据类型。List 是有序的 Collection。Java List 一共三个实现类：分别是 ArrayList、Vector 和 LinkedList。</p>
<p><a href="/images/collection3.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/collection3.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="ArrayList（数组）"><a href="#ArrayList（数组）" class="headerlink" title="ArrayList（数组）"></a>ArrayList（数组）</h3><p>ArrayList 是最常用的 List 实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要将已经有数组的数据复制到新的存储空间中。当从 ArrayList 的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。</p>
<h3 id="Vector（数组实现、线程同步）"><a href="#Vector（数组实现、线程同步）" class="headerlink" title="Vector（数组实现、线程同步）"></a>Vector（数组实现、线程同步）</h3><p>Vector 与 ArrayList 一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写 Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问 ArrayList慢。</p>
<h3 id="LinkList（链表）"><a href="#LinkList（链表）" class="headerlink" title="LinkList（链表）"></a>LinkList（链表）</h3><p>LinkedList 是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了 List 接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。</p>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set 注重独一无二的性质,该体系集合用于存储无序(存入和取出的顺序不一定相同)元素，值不能重复。对象的相等性本质是对象 hashCode 值（java 是依据对象的内存地址计算出的此序号）判断的，如果想要让两个不同的对象视为相等的，就必须覆盖 Object 的 hashCode 方法和 equals 方法。</p>
<p><a href="/images/collection4.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/collection4.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="HashSet（Hash-表）"><a href="#HashSet（Hash-表）" class="headerlink" title="HashSet（Hash 表）"></a>HashSet（Hash 表）</h3><p>哈希表里存放的是哈希值。HashSet 存储元素的顺序并不是按照存入时的顺序（和 List 显然不同） 而是按照哈希值来存的,所以取数据也是按照哈希值取得。元素的哈希值是通过元素的hashcode 方法来获取的, HashSet 首先判断两个元素的哈希值，如果哈希值一样，接着会比较equals 方法。如果 equls 结果为 true ，HashSet 就视为同一个元素。如果 equals 为 false 就不是同一个元素。</p>
<p>哈希值相同,equals为false的元素是怎么存储呢,就是在同样的哈希值下顺延（可以认为哈希值相同的元素放在一个哈希桶中）。也就是哈希一样的存一列。如图 1 表示 hashCode 值不相同的情况；图 2 表示 hashCode 值相同，但 equals 不相同的情况。</p>
<p><a href="/images/collection5.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/collection5.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>HashSet 通过 hashCode 值来确定元素在内存中的位置。一个 hashCode 位置上可以存放多个元素。</p>
<h3 id="TreeSet（二叉树）"><a href="#TreeSet（二叉树）" class="headerlink" title="TreeSet（二叉树）"></a>TreeSet（二叉树）</h3><ol>
<li><p>TreeSet()是使用二叉树的原理对新 add()的对象按照指定的顺序排序（升序、降序），每增加一个对象都会进行排序，将对象插入的二叉树指定的位置。</p>
</li>
<li><p>Integer 和 String 对象都可以进行默认的 TreeSet 排序，而自定义类的对象是不可以的，自己定义的类必须实现 Comparable 接口，并且覆写相应的 compareTo()函数，才可以正常使用。</p>
</li>
<li><p>在覆写 compare()函数时，要返回相应的值才能使 TreeSet 按照一定的规则来排序</p>
</li>
<li><p>比较此对象与指定对象的顺序。如果该对象小于、等于或大于指定对象，则分别返回负整数、零或正整数。</p>
</li>
</ol>
<h3 id="LinkHashSet（HashSet-LinkedHashMap）"><a href="#LinkHashSet（HashSet-LinkedHashMap）" class="headerlink" title="LinkHashSet（HashSet+LinkedHashMap）"></a>LinkHashSet（HashSet+LinkedHashMap）</h3><p>对于 LinkedHashSet 而言，它继承于 HashSet、又基于 LinkedHashMap 来实现的。LinkedHashSet 底层使用 LinkedHashMap 来保存所有元素，它继承与 HashSet，其所有的方法操作上又与 HashSet 相同，因此 LinkedHashSet 的实现上非常简单，只提供了四个构造方法，并通过传递一个标识参数，调用父类的构造器，底层构造一个 LinkedHashMap 来实现，在相关操作上与父类 HashSet 的操作相同，直接调用父类 HashSet 的方法即可。</p>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><a href="/images/collection6.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/collection6.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="HashMap（数组-链表-红黑树）"><a href="#HashMap（数组-链表-红黑树）" class="headerlink" title="HashMap（数组+链表+红黑树）"></a>HashMap（数组+链表+红黑树）</h3><p>HashMap 根据键的 hashCode 值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。 HashMap 最多只允许一条记录的键为 null，允许多条记录的值为 null。HashMap 非线程安全，即任一时刻可以有多个线程同时写 HashMap，可能会导致数据的不一致。如果需要满足线程安全，可以用 Collections 的 synchronizedMap 方法使HashMap 具有线程安全的能力，或者使用 ConcurrentHashMap。我们用下面这张图来介绍HashMap 的结构。</p>
<h4 id="JAVA7-实现"><a href="#JAVA7-实现" class="headerlink" title="JAVA7 实现"></a>JAVA7 实现</h4><p><a href="/images/collection7.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/collection7.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>大方向上，HashMap 里面是一个数组，然后数组中每个元素是一个单向链表。上图中，每个绿色的实体是嵌套类 Entry 的实例，Entry 包含四个属性：key, value, hash 值和用于单向链表的 next。</p>
<ol>
<li><p>capacity：当前数组容量，始终保持 2^n，可以扩容，扩容后数组大小为当前的 2 倍。</p>
</li>
<li><p>loadFactor：负载因子，默认为 0.75。</p>
</li>
<li><p>threshold：扩容的阈值，等于 capacity * loadFactor</p>
</li>
</ol>
<h4 id="JAVA8-实现"><a href="#JAVA8-实现" class="headerlink" title="JAVA8 实现"></a>JAVA8 实现</h4><p>Java8 对 HashMap 进行了一些修改，最大的不同就是利用了红黑树，所以其由 数组+链表+红黑树 组成。</p>
<p>根据 Java7 HashMap 的介绍，我们知道，查找的时候，根据 hash 值我们能够快速定位到数组的具体下标，但是之后的话，需要顺着链表一个个比较下去才能找到我们需要的，时间复杂度取决于链表的长度，为 O(n)。为了降低这部分的开销，在 Java8 中，当链表中的元素超过了 8 个以后，会将链表转换为红黑树，在这些位置进行查找的时候可以降低时间复杂度为 O(logN)</p>
<p><a href="/images/collection8.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/collection8.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><h4 id="Segment-段"><a href="#Segment-段" class="headerlink" title="Segment 段"></a>Segment 段</h4><p>ConcurrentHashMap 和 HashMap 思路是差不多的，但是因为它支持并发操作，所以要复杂一些。整个 ConcurrentHashMap 由一个个 Segment 组成，Segment 代表”部分“或”一段“的意思，所以很多地方都会将其描述为分段锁。注意，行文中，我很多地方用了“槽”来代表一个segment。</p>
<h4 id="线程安全（Segment-继承-ReentrantLock-加锁）"><a href="#线程安全（Segment-继承-ReentrantLock-加锁）" class="headerlink" title="线程安全（Segment 继承 ReentrantLock 加锁）"></a>线程安全（Segment 继承 ReentrantLock 加锁）</h4><p>简单理解就是，ConcurrentHashMap 是一个 Segment 数组，Segment 通过继承ReentrantLock 来进行加锁，所以每次需要加锁的操作锁住的是一个 segment，这样只要保证每个 Segment 是线程安全的，也就实现了全局的线程安全。</p>
<p><a href="/images/collection9.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/collection9.png" src="/img/loading.gif" class="lazyload"></a></p>
<h4 id="并行度（默认-16）"><a href="#并行度（默认-16）" class="headerlink" title="并行度（默认 16）"></a>并行度（默认 16）</h4><p>concurrencyLevel：并行级别、并发数、Segment 数，怎么翻译不重要，理解它。默认是 16，也就是说 ConcurrentHashMap 有 16 个 Segments，所以理论上，这个时候，最多可以同时支持 16 个线程并发写，只要它们的操作分别分布在不同的 Segment 上。这个值可以在初始化的时候设置为其他值，但是一旦初始化以后，它是不可以扩容的。再具体到每个 Segment 内部，其实每个 Segment 很像之前介绍的 HashMap，不过它要保证线程安全，所以处理起来要麻烦些。</p>
<h4 id="Java8-实现-（引入了红黑树）"><a href="#Java8-实现-（引入了红黑树）" class="headerlink" title="Java8 实现 （引入了红黑树）"></a>Java8 实现 （引入了红黑树）</h4><p>Java8 对 ConcurrentHashMap 进行了比较大的改动,Java8 也引入了红黑树</p>
<p><a href="/images/collection10.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/collection10.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="HashTable（线程安全）"><a href="#HashTable（线程安全）" class="headerlink" title="HashTable（线程安全）"></a>HashTable（线程安全）</h3><p>Hashtable 是遗留类，很多映射的常用功能与 HashMap 类似，不同的是它承自 Dictionary 类，并且是线程安全的，任一时间只有一个线程能写 Hashtable，并发性不如 ConcurrentHashMap，因为 ConcurrentHashMap 引入了分段锁。Hashtable 不建议在新代码中使用，不需要线程安全<br>的场合可以用 HashMap 替换，需要线程安全的场合可以用ConcurrentHashMap 替换。</p>
<h3 id="TreeMap（可排序）"><a href="#TreeMap（可排序）" class="headerlink" title="TreeMap（可排序）"></a>TreeMap（可排序）</h3><p>TreeMap 实现 SortedMap 接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用 Iterator 遍历 TreeMap 时，得到的记录是排过序的。</p>
<p>如果使用排序的映射，建议使用 TreeMap。</p>
<p>在使用 TreeMap 时，key 必须实现 Comparable 接口或者在构造 TreeMap 传入自定义的Comparator，否则会在运行时抛出 java.lang.ClassCastException 类型的异常</p>
<h3 id="LinkHashMap（记录插入顺序）"><a href="#LinkHashMap（记录插入顺序）" class="headerlink" title="LinkHashMap（记录插入顺序）"></a>LinkHashMap（记录插入顺序）</h3><p>LinkedHashMap 是 HashMap 的一个子类，保存了记录的插入顺序，在用 Iterator 遍历LinkedHashMap 时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA IO/NIO</title>
    <url>/2020/02/09/Java/JAVA-IO/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="JAVA-IO-NIO"><a href="#JAVA-IO-NIO" class="headerlink" title="JAVA IO/NIO"></a>JAVA IO/NIO</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文为学习Java相关知识所作笔记，参考以下资料:<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a> ,感谢原作者的分享!</p>
</blockquote>
<h2 id="JAVA-IO-NIO-1"><a href="#JAVA-IO-NIO-1" class="headerlink" title="JAVA IO/NIO"></a>JAVA IO/NIO</h2><h3 id="阻塞-IO-模型"><a href="#阻塞-IO-模型" class="headerlink" title="阻塞 IO 模型"></a>阻塞 IO 模型</h3><p>最传统的一种 IO 模型，即在读写数据过程中会发生阻塞现象。当用户线程发出 IO 请求之后，内核会去查看数据是否就绪，如果没有就绪就会等待数据就绪，而用户线程就会处于阻塞状态，用户线程交出 CPU。当数据就绪之后，内核会将数据拷贝到用户线程，并返回结果给用户线程，用户线程才解除 block 状态。典型的阻塞 IO 模型的例子为：data = socket.read();如果数据没有就绪，就会一直阻塞在 read 方法</p>
<h3 id="非阻塞-IO-模型"><a href="#非阻塞-IO-模型" class="headerlink" title="非阻塞 IO 模型"></a>非阻塞 IO 模型</h3><p>当用户线程发起一个 read 操作后，并不需要等待，而是马上就得到了一个结果。如果结果是一个error 时，它就知道数据还没有准备好，于是它可以再次发送 read 操作。一旦内核中的数据准备好了，并且又再次收到了用户线程的请求，那么它马上就将数据拷贝到了用户线程，然后返回。所以事实上，在非阻塞 IO 模型中，用户线程需要不断地询问内核数据是否就绪，也就说非阻塞 IO<br>不会交出 CPU，而会一直占用 CPU。典型的非阻塞 IO 模型一般如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    data = socket.read();</span><br><span class="line">    <span class="keyword">if</span>(data!= error)&#123;</span><br><span class="line">    <span class="comment">//处理数据</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>但是对于非阻塞 IO 就有一个非常严重的问题，在 while 循环中需要不断地去询问内核数据是否就绪，这样会导致 CPU 占用率非常高，因此一般情况下很少使用 while 循环这种方式来读取数据。</p>
<h3 id="多路复用-IO-模型"><a href="#多路复用-IO-模型" class="headerlink" title="多路复用 IO 模型"></a>多路复用 IO 模型</h3><p>多路复用 IO 模型是目前使用得比较多的模型。Java NIO 实际上就是多路复用 IO。在多路复用 IO模型中，会有一个线程不断去轮询多个 socket 的状态，只有当 socket 真正有读写事件时，才真正调用实际的 IO 读写操作。因为在多路复用 IO 模型中，只需要使用一个线程就可以管理多个socket，系统不需要建立新的进程或者线程，也不必维护这些线程和进程，并且只有在真正有socket 读写事件进行时，才会使用 IO 资源，所以它大大减少了资源占用。在 Java NIO 中，是通过 selector.select()去查询每个通道是否有到达事件，如果没有事件，则一直阻塞在那里，因此这种方式会导致用户线程的阻塞。多路复用 IO 模式，通过一个线程就可以管理多个 socket，只有当socket 真正有读写事件发生才会占用资源来进行实际的读写操作。因此，多路复用 IO 比较适合连接数比较多的情况。</p>
<p>另外多路复用 IO 为何比非阻塞 IO 模型的效率高是因为在非阻塞 IO 中，不断地询问 socket 状态时通过用户线程去进行的，而在多路复用 IO 中，轮询每个 socket 状态是内核在进行的，这个效率要比用户线程要高的多。</p>
<p>不过要注意的是，多路复用 IO 模型是通过轮询的方式来检测是否有事件到达，并且对到达的事件逐一进行响应。因此对于多路复用 IO 模型来说，一旦事件响应体很大，那么就会导致后续的事件迟迟得不到处理，并且会影响新的事件轮询</p>
<h3 id="信号驱动-IO-模型"><a href="#信号驱动-IO-模型" class="headerlink" title="信号驱动 IO 模型"></a>信号驱动 IO 模型</h3><p>在信号驱动 IO 模型中，当用户线程发起一个 IO 请求操作，会给对应的 socket 注册一个信号函数，然后用户线程会继续执行，当内核数据就绪时会发送一个信号给用户线程，用户线程接收到信号之后，便在信号函数中调用 IO 读写操作来进行实际的 IO 请求操作</p>
<h3 id="异步-IO-模型"><a href="#异步-IO-模型" class="headerlink" title="异步 IO 模型"></a>异步 IO 模型</h3><p>异步 IO 模型才是最理想的 IO 模型，在异步 IO 模型中，当用户线程发起 read 操作之后，立刻就可以开始去做其它的事。而另一方面，从内核的角度，当它收到一个 asynchronous read 之后，它会立刻返回，说明 read 请求已经成功发起了，因此不会对用户线程产生任何 block。然后，内核会等待数据准备完成，然后将数据拷贝到用户线程，当这一切都完成之后，内核会给用户线程<br>发送一个信号，告诉它 read 操作完成了。也就说用户线程完全不需要实际的整个 IO 操作是如何进行的，只需要先发起一个请求，当接收内核返回的成功信号时表示 IO 操作已经完成，可以直接去使用数据了。</p>
<p>也就说在异步 IO 模型中，IO 操作的两个阶段都不会阻塞用户线程，这两个阶段都是由内核自动完成，然后发送一个信号告知用户线程操作已完成。用户线程中不需要再次调用 IO 函数进行具体的读写。这点是和信号驱动模型有所不同的，在信号驱动模型中，当用户线程接收到信号表示数据已经就绪，然后需要用户线程调用 IO 函数进行实际的读写操作；而在异步 IO 模型中，收到信号表示 IO 操作已经完成，不需要再在用户线程中调用 IO 函数进行实际的读写操作。</p>
<p>注意，异步 IO 是需要操作系统的底层支持，在 Java 7 中，提供了 Asynchronous IO。</p>
<h3 id="JAVA-IO-包"><a href="#JAVA-IO-包" class="headerlink" title="JAVA IO 包"></a>JAVA IO 包</h3><p><a href="/images/java-IO.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java-IO.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="JAVA-NIO"><a href="#JAVA-NIO" class="headerlink" title="JAVA NIO"></a>JAVA NIO</h3><p>NIO 主要有三大核心部分：Channel(通道)，Buffer(缓冲区), Selector。传统 IO 基于字节流和字符流进行操作，而 NIO 基于 Channel 和 Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。Selector(选择区)用于监听多个通道的事件（比如：连接打开，数据到达）。因此，单个线程可以监听多个数据通道。</p>
<p><a href="/images/java-NIO.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java-NIO.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>NIO 和传统 IO 之间第一个最大的区别是，IO 是面向流的，NIO 是面向缓冲区的。</p>
<h4 id="NIO-的缓冲区"><a href="#NIO-的缓冲区" class="headerlink" title="NIO 的缓冲区"></a>NIO 的缓冲区</h4><p>Java IO 面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。NIO 的缓冲导向方法不同。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据</p>
<h4 id="NIO-的非阻塞"><a href="#NIO-的非阻塞" class="headerlink" title="NIO 的非阻塞"></a>NIO 的非阻塞</h4><p>IO 的各种流是阻塞的。这意味着，当一个线程调用 read() 或 write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 NIO 的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它<br>完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞 IO 的空闲时间用于在其它通道上执行 IO 操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。</p>
<p><a href="/images/java-NIO2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java-NIO2.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>首先说一下 Channel，国内大多翻译成“通道”。Channel 和 IO 中的 Stream(流)是差不多一个等级的。只不过 Stream 是单向的，譬如：InputStream, OutputStream，而 Channel 是双向的，既可以用来进行读操作，又可以用来进行写操作。</p>
<p>NIO 中的 Channel 的主要实现有：</p>
<ol>
<li>FileChannel</li>
<li>DatagramChannel</li>
<li>SocketChannel</li>
<li>ServerSocketChannel</li>
</ol>
<p>这里看名字就可以猜出个所以然来：分别可以对应文件 IO、UDP 和 TCP（Server 和 Client）。</p>
<h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>Buffer，故名思意，缓冲区，实际上是一个容器，是一个连续数组。Channel 提供从文件、网络读取数据的渠道，但是读取或写入的数据都必须经由 Buffer。</p>
<p><a href="/images/java-channel.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java-channel.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>上面的图描述了从一个客户端向服务端发送数据，然后服务端接收数据的过程。客户端发送数据时，必须先将数据存入 Buffer 中，然后将 Buffer 中的内容写入通道。服务端这边接收数据必须通过 Channel 将数据读入到 Buffer 中，然后再从 Buffer 中取出数据来处理。 </p>
<p>在 NIO 中，Buffer 是一个顶层父类，它是一个抽象类，常用的 Buffer 的子类有：ByteBuffer、IntBuffer、 CharBuffer、 LongBuffer、 DoubleBuffer、FloatBuffer、ShortBuffer</p>
<h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p>Selector 类是 NIO 的核心类，Selector 能够检测多个注册的通道上是否有事件发生，如果有事件发生，便获取事件然后针对每个事件进行相应的响应处理。这样一来，只是用一个单线程就可以管理多个通道，也就是管理多个连接。这样使得只有在连接真正有读写事件发生时，才会调用函数来进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程，并且避免了多线程之间的上下文切换导致的开销</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IO</tag>
        <tag>NIO</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM类加载机制</title>
    <url>/2020/02/09/Java/JVM%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="JVM类加载机制"><a href="#JVM类加载机制" class="headerlink" title="JVM类加载机制"></a>JVM类加载机制</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文为学习Java相关知识所作笔记，参考以下资料:<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a> ,感谢原作者的分享!</p>
</blockquote>
<h2 id="JVM-类加载机制"><a href="#JVM-类加载机制" class="headerlink" title="JVM 类加载机制"></a>JVM 类加载机制</h2><p>JVM 类加载机制分为五个部分：加载，验证，准备，解析，初始化，下面我们就分别来看一下这五个过程。</p>
<p><a href="/images/java%E7%B1%BB%E5%8A%A0%E8%BD%BD.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E7%B1%BB%E5%8A%A0%E8%BD%BD.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>加载是类加载过程中的一个阶段，这个阶段会在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的入口。注意这里不一定非得要从一个 Class 文件获取，这里既可以从 ZIP 包中读取（比如从 jar 包和 war 包中读取），也可以在运行时计算生成（动态代理），也可以由其它文件生成（比如将 JSP 文件转换成对应的 Class 类）。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>这一阶段的主要目的是为了确保 Class 文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备阶段是正式为类变量分配内存并设置类变量的初始值阶段，即在方法区中分配这些变量所使用的内存空间。注意这里所说的初始值概念，比如一个类变量定义为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> v = <span class="number">8080</span>;</span><br></pre></td></tr></table></figure></div>

<p>实际上变量 v 在准备阶段过后的初始值为 0 而不是 8080，将 v 赋值为 8080 的 put static 指令是程序被编译后，存放于类构造器<client>方法之中。</client></p>
<p>但是注意如果声明为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> v = <span class="number">8080</span>;</span><br></pre></td></tr></table></figure></div>

<p>在编译阶段会为 v 生成 ConstantValue 属性，在准备阶段虚拟机会根据 ConstantValue 属性将 v赋值为 8080。</p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是 class 文件中的：</p>
<ol>
<li>CONSTANT_Class_info</li>
<li>CONSTANT_Field_info</li>
<li>CONSTANT_Method_info</li>
</ol>
<p>等类型的常量</p>
<h3 id="符号引用"><a href="#符号引用" class="headerlink" title="符号引用"></a>符号引用</h3><p>符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在 Java 虚拟机规范的 Class 文件格式中</p>
<h3 id="直接引用"><a href="#直接引用" class="headerlink" title="直接引用"></a>直接引用</h3><p>直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由 JVM 主导。到了初始阶段，才开始真正执行类中定义的 Java 程序代码。</p>
<h3 id="类构造器"><a href="#类构造器" class="headerlink" title="类构造器"></a>类构造器<client></client></h3><p>初始化阶段是执行类构造器client方法的过程。client方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证子client方法执行之前，父类的client方法已经执行完毕，如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成client()方法。</p>
<p>注意以下几种情况不会执行类初始化：</p>
<ol>
<li><p>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</p>
</li>
<li><p>定义对象数组，不会触发该类的初始化。</p>
</li>
<li><p>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</p>
</li>
<li><p>通过类名获取 Class 对象，不会触发类的初始化。</p>
</li>
<li><p>通过 Class.forName 加载指定类时，如果指定参数 initialize 为false 时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。</p>
</li>
<li><p>通过 ClassLoader 默认的 loadClass 方法，也不会触发初始化动作</p>
</li>
</ol>
<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>虚拟机设计团队把加载动作放到 JVM 外部实现，以便让应用程序决定如何获取所需的类，JVM 提供了 3 种类加载器：</p>
<h4 id="启动类加载器-Bootstrap-ClassLoader"><a href="#启动类加载器-Bootstrap-ClassLoader" class="headerlink" title="启动类加载器(Bootstrap ClassLoader)"></a>启动类加载器(Bootstrap ClassLoader)</h4><p>负责加载 JAVA_HOME\lib 目录中的，或通过-Xbootclasspath 参数指定路径中的，且被虚拟机认可（按文件名识别，如 rt.jar）的类</p>
<h4 id="扩展类加载器-Extension-ClassLoader"><a href="#扩展类加载器-Extension-ClassLoader" class="headerlink" title="扩展类加载器(Extension ClassLoader)"></a>扩展类加载器(Extension ClassLoader)</h4><p>负责加载 JAVA_HOME\lib\ext 目录中的，或通过 java.ext.dirs 系统变量指定路径中的类库。</p>
<h4 id="应用程序类加载器-Application-ClassLoader"><a href="#应用程序类加载器-Application-ClassLoader" class="headerlink" title="应用程序类加载器(Application ClassLoader)"></a>应用程序类加载器(Application ClassLoader)</h4><p>负责加载用户路径（classpath）上的类库。JVM 通过双亲委派模型进行类的加载，当然我们也可以通过继承 java.lang.ClassLoader实现自定义的类加载器</p>
<p><a href="/images/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h3><p>当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试自己去加载。</p>
<p>采用双亲委派的一个好处是比如加载位于 rt.jar 包中的类 java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个 Object 对象。</p>
<p><a href="/images/java%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="OSGI（动态模型系统）"><a href="#OSGI（动态模型系统）" class="headerlink" title="OSGI（动态模型系统）"></a>OSGI（动态模型系统）</h3><p>OSGi(Open Service Gateway Initiative)，是面向 Java 的动态模型系统，是 Java 动态化模块化系统的一系列规范。</p>
<h4 id="动态改变构造"><a href="#动态改变构造" class="headerlink" title="动态改变构造"></a>动态改变构造</h4><p>OSGi 服务平台提供在多种网络设备上无需重启的动态改变构造的功能。为了最小化耦合度和促使这些耦合度可管理，OSGi 技术提供一种面向服务的架构，它能使这些组件动态地发现对方。</p>
<h4 id="模块化编程与热插拔"><a href="#模块化编程与热插拔" class="headerlink" title="模块化编程与热插拔"></a>模块化编程与热插拔</h4><p>OSGi 旨在为实现 Java 程序的模块化编程提供基础条件，基于 OSGi 的程序很可能可以实现模块级的热插拔功能，当程序升级更新时，可以只停用、重新安装然后启动程序的其中一部分，这对企业级程序开发来说是非常具有诱惑力的特性。</p>
<p>OSGi 描绘了一个很美好的模块化开发目标，而且定义了实现这个目标的所需要服务与架构，同时也有成熟的框架进行实现支持。但并非所有的应用都适合采用 OSGi 作为基础架构，它在提供强大功能同时，也引入了额外的复杂度，因为它不遵守了类加载的双亲委托模型。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>类加载机制</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM垃圾回收与算法</title>
    <url>/2020/02/09/Java/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="JVM垃圾回收与算法"><a href="#JVM垃圾回收与算法" class="headerlink" title="JVM垃圾回收与算法"></a>JVM垃圾回收与算法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文为学习Java相关知识所作笔记，参考以下资料:<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a> ,感谢原作者的分享!</p>
</blockquote>
<h2 id="垃圾回收与算法"><a href="#垃圾回收与算法" class="headerlink" title="垃圾回收与算法"></a>垃圾回收与算法</h2><p> <a href="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="如何确定垃圾"><a href="#如何确定垃圾" class="headerlink" title="如何确定垃圾"></a>如何确定垃圾</h3><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p> 在 Java 中，引用和对象是有关联的。如果要操作对象则必须用引用进行。因此，很显然一个简单的办法是通过引用计数来判断一个对象是否可以回收。简单说，即一个对象如果没有任何与之关联的引用，即他们的引用计数都不为 0，则说明对象不太可能再被用到，那么这个对象就是可回收对象。</p>
<h4 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h4><p> 为了解决引用计数法的循环引用问题，Java 使用了可达性分析的方法。通过一系列的“GC roots”对象作为起点搜索。如果在“GC roots”和一个对象之间没有可达路径，则称该对象是不可达的。要注意的是，不可达对象不等价于可回收对象，不可达对象变为可回收对象至少要经过两次标记过程。两次标记后仍然是可回收对象，则将面临回收。</p>
<h3 id="标记清除算法（Mark-Sweep）"><a href="#标记清除算法（Mark-Sweep）" class="headerlink" title="标记清除算法（Mark-Sweep）"></a>标记清除算法（Mark-Sweep）</h3><p> 最基础的垃圾回收算法，分为两个阶段，标注和清除。标记阶段标记出所有需要回收的对象，清除阶段回收被标记的对象所占用的空间。如图</p>
<p>  <a href="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>  从图中我们就可以发现，该算法最大的问题是内存碎片化严重，后续可能发生大对象不能找到可利用空间的问题。</p>
<h3 id="复制算法（copying）"><a href="#复制算法（copying）" class="headerlink" title="复制算法（copying）"></a>复制算法（copying）</h3><p>  为了解决 Mark-Sweep 算法内存碎片化的缺陷而被提出的算法。按内存容量将内存划分为等大小的两块。每次只使用其中一块，当这一块内存满后将尚存活的对象复制到另一块上去，把已使用的内存清掉，如图：</p>
<p>  <a href="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%952.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%952.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>  这种算法虽然实现简单，内存效率高，不易产生碎片，但是最大的问题是可用内存被压缩到了原本的一半。且存活对象增多的话，Copying 算法的效率会大大降低。</p>
<h3 id="标记整理算法-Mark-Compact"><a href="#标记整理算法-Mark-Compact" class="headerlink" title="标记整理算法(Mark-Compact)"></a>标记整理算法(Mark-Compact)</h3><p>  结合了以上两个算法，为了避免缺陷而提出。标记阶段和 Mark-Sweep 算法相同，标记后不是清理对象，而是将存活对象移向内存的一端。然后清除端边界外的对象。如图：</p>
<p>  <a href="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%953.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%953.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>  分代收集法是目前大部分 JVM 所采用的方法，其核心思想是根据对象存活的不同生命周期将内存划分为不同的域，一般情况下将 GC 堆划分为老生代(Tenured/Old Generation)和新生代(Young Generation)。老生代的特点是每次垃圾回收时只有少量对象需要被回收，新生代的特点是每次垃圾回收时都有大量垃圾需要被回收，因此可以根据不同区域选择不同的算法。</p>
<h4 id="新生代与复制算法"><a href="#新生代与复制算法" class="headerlink" title="新生代与复制算法"></a>新生代与复制算法</h4><p>  目前大部分 JVM 的 GC 对于新生代都采取 Copying 算法，因为新生代中每次垃圾回收都要回收大部分对象，即要复制的操作比较少，但通常并不是按照 1：1 来划分新生代。一般将新生代划分为一块较大的 Eden 空间和两个较小的 Survivor 空间(From Space, To Space)，每次使用Eden 空间和其中的一块 Survivor 空间，当进行回收时，将该两块空间中还存活的对象复制到另一块 Survivor 空间中</p>
<p>   <a href="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%954.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%954.png" src="/img/loading.gif" class="lazyload"></a></p>
<h4 id="老年代与标记复制算法"><a href="#老年代与标记复制算法" class="headerlink" title="老年代与标记复制算法"></a>老年代与标记复制算法</h4><p>   而老年代因为每次只回收少量对象，因而采用 Mark-Compact 算法。</p>
<ol>
<li><p>JAVA 虚拟机提到过的处于方法区的永生代(Permanet Generation)，它用来存储 class 类，常量，方法描述等。对永生代的回收主要包括废弃常量和无用的类。</p>
</li>
<li><p>对象的内存分配主要在新生代的 Eden Space 和 Survivor Space 的 From Space(Survivor 目前存放对象的那一块)，少数情况会直接分配到老生代。</p>
</li>
<li><p>当新生代的 Eden Space 和 From Space 空间不足时就会发生一次 GC，进行 GC 后，Eden Space 和 From Space 区的存活对象会被挪到 To Space，然后将 Eden Space 和 From Space 进行清理。</p>
</li>
<li><p>如果 To Space 无法足够存储某个对象，则将这个对象存储到老生代。</p>
</li>
<li><p>在进行 GC 后，使用的便是 Eden Space 和 To Space 了，如此反复循环。</p>
</li>
<li><p>当对象在 Survivor 区躲过一次 GC 后，其年龄就会+1。默认情况下年龄到达 15 的对象会被移到老生代中。</p>
</li>
</ol>
<h2 id="JAVA-四中引用类型"><a href="#JAVA-四中引用类型" class="headerlink" title="JAVA 四中引用类型"></a>JAVA 四中引用类型</h2><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>在 Java 中最常见的就是强引用，把一个对象赋给一个引用变量，这个引用变量就是一个强引用。当一个对象被强引用变量引用时，它处于可达状态，它是不可能被垃圾回收机制回收的，即使该对象以后永远都不会被用到 JVM 也不会回收。因此强引用是造成 Java 内存泄漏的主要原因之一。</p>
<h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>软引用需要用 SoftReference 类来实现，对于只有软引用的对象来说，当系统内存足够时它不会被回收，当系统内存空间不足时它会被回收。软引用通常用在对内存敏感的程序中。</p>
<h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>弱引用需要用 WeakReference 类来实现，它比软引用的生存期更短，对于只有弱引用的对象来说，只要垃圾回收机制一运行，不管 JVM 的内存空间是否足够，总会回收该对象占用的内存。</p>
<h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>虚引用需要 PhantomReference 类来实现，它不能单独使用，必须和引用队列联合使用。虚引用的主要作用是跟踪对象被垃圾回收的状态</p>
<h2 id="GC-分代收集算法-VS-分区收集算法"><a href="#GC-分代收集算法-VS-分区收集算法" class="headerlink" title="GC 分代收集算法 VS 分区收集算法"></a>GC 分代收集算法 VS 分区收集算法</h2><h3 id="分代收集算法-1"><a href="#分代收集算法-1" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>当前主流 VM 垃圾收集都采用”分代收集”(Generational Collection)算法, 这种算法会根据对象存活周期的不同将内存划分为几块, 如 JVM 中的 新生代、老年代、永久代，这样就可以根据各年代特点分别采用最适当的 GC 算法</p>
<h4 id="在新生代-复制算法"><a href="#在新生代-复制算法" class="headerlink" title="在新生代-复制算法"></a>在新生代-复制算法</h4><p>每次垃圾收集都能发现大批对象已死, 只有少量存活. 因此选用复制算法, 只需要付出少量存活对象的复制成本就可以完成收集.</p>
<h4 id="在老年代-标记整理算法"><a href="#在老年代-标记整理算法" class="headerlink" title="在老年代-标记整理算法"></a>在老年代-标记整理算法</h4><p>因为对象存活率高、没有额外空间对它进行分配担保, 就必须采用“标记—清理”或“标记—整理”算法来进行回收, 不必进行内存复制, 且直接腾出空闲内存.</p>
<h3 id="分区收集算法"><a href="#分区收集算法" class="headerlink" title="分区收集算法"></a>分区收集算法</h3><p>分区算法则将整个堆空间划分为连续的不同小区间, 每个小区间独立使用, 独立回收. 这样做的好处是可以控制一次回收多少个小区间 , 根据目标停顿时间, 每次合理地回收若干个小区间(而不是整个堆), 从而减少一次 GC 所产生的停顿</p>
<h2 id="GC-垃圾收集器"><a href="#GC-垃圾收集器" class="headerlink" title="GC 垃圾收集器"></a>GC 垃圾收集器</h2><p>Java 堆内存被划分为新生代和年老代两部分，新生代主要使用复制和标记-清除垃圾回收算法；年老代主要使用标记-整理垃圾回收算法，因此 java 虚拟中针对新生代和年老代分别提供了多种不同的垃圾收集器，JDK1.6 中 Sun HotSpot 虚拟机的垃圾收集器如下：</p>
<p><a href="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%955.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%955.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="Serial-垃圾收集器（单线程、复制算法）"><a href="#Serial-垃圾收集器（单线程、复制算法）" class="headerlink" title="Serial 垃圾收集器（单线程、复制算法）"></a>Serial 垃圾收集器（单线程、复制算法）</h3><p>Serial（英文连续）是最基本垃圾收集器，使用复制算法，曾经是JDK1.3.1 之前新生代唯一的垃圾收集器。Serial 是一个单线程的收集器，它不但只会使用一个 CPU 或一条线程去完成垃圾收集工作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。Serial 垃圾收集器虽然在收集垃圾过程中需要暂停所有其他的工作线程，但是它简单高效，对于限定单个 CPU 环境来说，没有线程交互的开销，可以获得最高的单线程垃圾收集效率，因此 Serial垃圾收集器依然是 java 虚拟机运行在 Client 模式下默认的新生代垃圾收集器</p>
<h3 id="ParNew-垃圾收集器（Serial-多线程）"><a href="#ParNew-垃圾收集器（Serial-多线程）" class="headerlink" title="ParNew 垃圾收集器（Serial+多线程）"></a>ParNew 垃圾收集器（Serial+多线程）</h3><p>ParNew 垃圾收集器其实是 Serial 收集器的多线程版本，也使用复制算法，除了使用多线程进行垃圾收集之外，其余的行为和 Serial 收集器完全一样，ParNew 垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程</p>
<p>ParNew 收集器默认开启和 CPU 数目相同的线程数，可以通过-XX:ParallelGCThreads 参数来限制垃圾收集器的线程数。【Parallel：平行的】ParNew虽然是除了多线程外和Serial 收集器几乎完全一样，但是ParNew垃圾收集器是很多 java虚拟机运行在 Server 模式下新生代的默认垃圾收集器</p>
<h3 id="Parallel-Scavenge-收集器（多线程复制算法、高效）"><a href="#Parallel-Scavenge-收集器（多线程复制算法、高效）" class="headerlink" title="Parallel Scavenge 收集器（多线程复制算法、高效）"></a>Parallel Scavenge 收集器（多线程复制算法、高效）</h3><p>Parallel Scavenge 收集器也是一个新生代垃圾收集器，同样使用复制算法，也是一个多线程的垃圾收集器，它重点关注的是程序达到一个可控制的吞吐量（Thoughput，CPU 用于运行用户代码的时间/CPU 总消耗时间，即吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)），高吞吐量可以最高效率地利用 CPU 时间，尽快地完成程序的运算任务，主要适用于在后台运算而不需要太多交互的任务。自适应调节策略也是 ParallelScavenge 收集器与 ParNew 收集器的一个重要区别。</p>
<h3 id="Serial-Old-收集器（单线程标记整理算法-）"><a href="#Serial-Old-收集器（单线程标记整理算法-）" class="headerlink" title="Serial Old 收集器（单线程标记整理算法 ）"></a>Serial Old 收集器（单线程标记整理算法 ）</h3><p>Serial Old 是 Serial 垃圾收集器年老代版本，它同样是个单线程的收集器，使用标记-整理算法，这个收集器也主要是运行在 Client 默认的 java 虚拟机默认的年老代垃圾收集器。 在 Server 模式下，主要有两个用途：</p>
<ol>
<li>在 JDK1.5 之前版本中与新生代的 Parallel Scavenge 收集器搭配使用。</li>
<li>作为年老代中使用 CMS 收集器的后备垃圾收集方案。</li>
</ol>
<p>新生代 Serial 与年老代 Serial Old 搭配垃圾收集过程图</p>
<p><a href="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%956.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%956.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>新生代 Parallel Scavenge 收集器与 ParNew 收集器工作原理类似，都是多线程的收集器，都使用的是复制算法，在垃圾收集过程中都需要暂停所有的工作线程。新生代 Parallel Scavenge/ParNew 与年老代 Serial Old 搭配垃圾收集过程图：</p>
<p><a href="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%957.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%957.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="Parallel-Old-收集器（多线程标记整理算法）"><a href="#Parallel-Old-收集器（多线程标记整理算法）" class="headerlink" title="Parallel Old 收集器（多线程标记整理算法）"></a>Parallel Old 收集器（多线程标记整理算法）</h3><p>Parallel Old 收集器是Parallel Scavenge的年老代版本，使用多线程的标记-整理算法，在 JDK1.6才开始提供。<br>在 JDK1.6 之前，新生代使用 ParallelScavenge 收集器只能搭配年老代的 Serial Old 收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量，Parallel Old 正是为了在年老代同样提供吞吐量优先的垃圾收集器，如果系统对吞吐量要求比较高，可以优先考虑新生代 Parallel Scavenge和年老代 Parallel Old 收集器的搭配策略。新生代 Parallel Scavenge 和年老代 Parallel Old 收集器搭配运行过程图：</p>
<p><a href="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%958.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%958.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="CMS-收集器（多线程标记清除算法）"><a href="#CMS-收集器（多线程标记清除算法）" class="headerlink" title="CMS 收集器（多线程标记清除算法）"></a>CMS 收集器（多线程标记清除算法）</h3><p>Concurrent mark sweep(CMS)收集器是一种年老代垃圾收集器，其最主要目标是获取最短垃圾回收停顿时间，和其他年老代使用标记-整理算法不同，它使用多线程的标记-清除算法。最短的垃圾收集停顿时间可以为交互比较高的程序提高用户体验。CMS 工作机制相比其他的垃圾收集器来说更复杂，整个过程分为以下 4 个阶段：</p>
<h4 id="初始标记"><a href="#初始标记" class="headerlink" title="初始标记"></a>初始标记</h4><p>只是标记一下 GC Roots 能直接关联的对象，速度很快，仍然需要暂停所有的工作线程。</p>
<h4 id="并发标记"><a href="#并发标记" class="headerlink" title="并发标记"></a>并发标记</h4><p>进行 GC Roots 跟踪的过程，和用户线程一起工作，不需要暂停工作线程。</p>
<h4 id="重新标记"><a href="#重新标记" class="headerlink" title="重新标记"></a>重新标记</h4><p>为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，仍然需要暂停所有的工作线程。</p>
<h4 id="并发清除"><a href="#并发清除" class="headerlink" title="并发清除"></a>并发清除</h4><p>清除 GC Roots 不可达对象，和用户线程一起工作，不需要暂停工作线程。由于耗时最长的并发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作，所以总体上来看CMS 收集器的内存回收和用户线程是一起并发地执行。</p>
<p>CMS 收集器工作过程：</p>
<p><a href="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%959.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%959.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h3><p>Garbage first 垃圾收集器是目前垃圾收集器理论发展的最前沿成果，相比与 CMS 收集器，G1 收集器两个最突出的改进是：</p>
<ol>
<li>基于标记-整理算法，不产生内存碎片。</li>
<li>可以非常精确控制停顿时间，在不牺牲吞吐量前提下，实现低停顿垃圾回收。</li>
</ol>
<p>G1 收集器避免全区域垃圾收集，它把堆内存划分为大小固定的几个独立区域，并且跟踪这些区域的垃圾收集进度，同时在后台维护一个优先级列表，每次根据所允许的收集时间，优先回收垃圾最多的区域。区域划分和优先级区域回收机制，确保 G1 收集器可以在有限时间获得最高的垃圾收集效率</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>垃圾回收算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM内存模型</title>
    <url>/2020/02/09/Java/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="JVM内存模型"><a href="#JVM内存模型" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文为学习Java相关知识所作笔记，参考以下资料:<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a> ,感谢原作者的分享!</p>
</blockquote>
<p>基本概念</p>
<blockquote>
<p>JVM是可运行Java代码的虚拟计算机，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收器、堆和一个存储方法域。JVM运行在操作系统之上，它与硬件没有直接交互。</p>
</blockquote>
<p>Java源文件，通过编译器，能够生产相应的class文件，也就是字节码文件，字节码文件通过Java虚拟机中的解释器，编译成特定机器上的机器码。</p>
<p>Java源文件–&gt;编译器–&gt;字节码文件</p>
<p>字节码文件–&gt;JVM–&gt;机器码</p>
<p>每一种平台的解释器是不同的，但是实现的虚拟机是相同的，这也就是 Java 为什么能够跨平台的原因了 ，当一个程序从开始运行，这时虚拟机就开始实例化了，多个程序启动就会存在多个虚拟机实例。程序退出或者关闭，则虚拟机实例消亡，多个虚拟机实例之间数据不能共享。</p>
<p><a href="/images/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>这里所说的线程指程序执行过程中的一个线程实体。JVM 允许一个应用并发执行多个线程。Hotspot JVM 中的 Java 线程与原生操作系统线程有直接的映射关系。当线程本地存储、缓冲区分配、同步对象、栈、程序计数器等准备好以后，就会创建一个操作系统原生线程。Java 线程结束，原生线程随之被回收。操作系统负责调度所有线程，并把它们分配到任何可用的 CPU 上。当原生线程初始化完毕，就会调用 Java 线程的 run() 方法。当线程结束时，会释放原生线程和 Java 线程的所有资源。</p>
<p>Hotspot JVM 后台运行的系统线程主要有下面几个：</p>
<ol>
<li><p>虚拟机线程（VM thread）:<br>这个线程等待 JVM 到达安全点操作出现。这些操作必须要在独立的线程里执行，因为当堆修改无法进行时，线程都需要 JVM 位于安全点。这些操作的类型有：stop-the-world 垃圾回收、线程栈 dump、线程暂停、线程偏向锁（biased locking）解除。</p>
</li>
<li><p>周期性任务线程: 这线程负责定时器事件（也就是中断），用来调度周期性操作的执行。</p>
</li>
<li><p>GC 线程: 这些线程支持 JVM 中不同的垃圾回收活动。</p>
</li>
<li><p>编译器线程: 这些线程在运行时将字节码动态编译成本地平台相关的机器码。</p>
</li>
<li><p>信号分发线程: 这个线程接收发送到 JVM 的信号并调用适当的 JVM 方法处理。</p>
</li>
</ol>
<h2 id="JVM内存区域"><a href="#JVM内存区域" class="headerlink" title="JVM内存区域"></a>JVM内存区域</h2><p><a href="/images/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F-2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F-2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>JVM 内存区域主要分为线程私有区域【程序计数器、虚拟机栈、本地方法区】、线程共享区域【JAVA 堆、方法区】、直接内存。</p>
<ol>
<li><p>线程私有数据区域生命周期与线程相同, 依赖用户线程的启动/结束 而 创建/销毁(在 Hotspot VM 内, 每个线程都与操作系统的本地线程直接映射, 因此这部分内存区域的存/否跟随本地线程的生/死对应)。</p>
</li>
<li><p>线程共享区域随虚拟机的启动/关闭而创建/销毁。</p>
</li>
<li><p>直接内存并不是 JVM 运行时数据区的一部分, 但也会被频繁的使用: 在 JDK 1.4 引入的 NIO 提供了基于 Channel 与 Buffer 的 IO 方式, 它可以使用 Native 函数库直接分配堆外内存, 然后使用DirectByteBuffer 对象作为这块内存的引用进行操作(详见: Java I/O 扩展), 这样就避免了在 Java堆和 Native 堆中来回复制数据, 因此在一些场景中可以显著提高性能。</p>
</li>
</ol>
<p><a href="/images/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F-3.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F-3.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="程序计数器-线程私有"><a href="#程序计数器-线程私有" class="headerlink" title="程序计数器(线程私有)"></a>程序计数器(线程私有)</h3><p>一块较小的内存空间, 是当前线程所执行的字节码的行号指示器，每条线程都要有一个独立的程序计数器，这类内存也称为“线程私有”的内存。</p>
<p>正在执行 java 方法的话，计数器记录的是虚拟机字节码指令的地址（当前指令的地址）。如果还是 Native 方法，则为空。</p>
<p>这个内存区域是唯一一个在虚拟机中没有规定任何 OutOfMemoryError 情况的区域。</p>
<h3 id="虚拟机栈-线程私有"><a href="#虚拟机栈-线程私有" class="headerlink" title="虚拟机栈(线程私有)"></a>虚拟机栈(线程私有)</h3><p>是描述java方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p>
<p>栈帧（ Frame）是用来存储数据和部分过程结果的数据结构，同时也被用来处理动态链接(Dynamic Linking)、 方法返回值和异常分派（ Dispatch Exception）。栈帧随着方法调用而创建，随着方法结束而销毁——无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算作方法结束。</p>
<h3 id="本地方法区-线程私有"><a href="#本地方法区-线程私有" class="headerlink" title="本地方法区(线程私有)"></a>本地方法区(线程私有)</h3><p>本地方法区和 Java Stack 作用类似, 区别是虚拟机栈为执行 Java 方法服务, 而本地方法栈则为Native 方法服务, 如果一个 VM 实现使用 C-linkage 模型来支持 Native 调用, 那么该栈将会是一个C 栈，但 HotSpot VM 直接就把本地方法栈和虚拟机栈合二为一。</p>
<h3 id="堆（Heap-线程共享）-运行时数据区"><a href="#堆（Heap-线程共享）-运行时数据区" class="headerlink" title="堆（Heap-线程共享）-运行时数据区"></a>堆（Heap-线程共享）-运行时数据区</h3><p>是被线程共享的一块内存区域，创建的对象和数组都保存在 Java 堆内存中，也是垃圾收集器进行垃圾收集的最重要的内存区域。由于现代 VM 采用分代收集算法, 因此 Java 堆从 GC 的角度还可以细分为: 新生代(Eden 区、From Survivor 区和 To Survivor 区)和老年代</p>
<h3 id="方法区-永久代（线程共享）"><a href="#方法区-永久代（线程共享）" class="headerlink" title="方法区/永久代（线程共享）"></a>方法区/永久代（线程共享）</h3><p>即我们常说的永久代(Permanent Generation), 用于存储被 JVM 加载的类信息、常量、静态变量、即时编译器编译后的代码等数据. HotSpot VM把GC分代收集扩展至方法区, 即使用Java堆的永久代来实现方法区, 这样 HotSpot 的垃圾收集器就可以像管理 Java 堆一样管理这部分内存, 而不必为方法区开发专门的内存管理器(永久带的内存回收的主要目标是针对常量池的回收和类型<br>的卸载, 因此收益一般很小)。</p>
<p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。 Java 虚拟机对 Class 文件的每一部分（自然也包括常量池）的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会<br>被虚拟机认可、装载和执行。</p>
<h2 id="JVM-运行时内存"><a href="#JVM-运行时内存" class="headerlink" title="JVM 运行时内存"></a>JVM 运行时内存</h2><p>Java 堆从 GC 的角度还可以细分为: 新生代(Eden 区、From Survivor 区和 To Survivor 区)和老年代。</p>
<p><a href="/images/java%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/java%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h3><p>是用来存放新生的对象。一般占据堆的 1/3 空间。由于频繁创建对象，所以新生代会频繁触发MinorGC 进行垃圾回收。新生代又分为 Eden 区ServivorFrom、ServivorTo 三个区。</p>
<h4 id="Eden-区"><a href="#Eden-区" class="headerlink" title="Eden 区"></a>Eden 区</h4><p>Java 新对象的出生地（如果新创建的对象占用内存很大，则直接分配到老<br>年代）。当 Eden 区内存不够的时候就会触发 MinorGC，对新生代区进行<br>一次垃圾回收。</p>
<h4 id="ServivorFrom"><a href="#ServivorFrom" class="headerlink" title="ServivorFrom"></a>ServivorFrom</h4><p>上一次 GC 的幸存者，作为这一次 GC 的被扫描者。</p>
<h4 id="ServivorTo"><a href="#ServivorTo" class="headerlink" title="ServivorTo"></a>ServivorTo</h4><p>保留了一次 MinorGC 过程中的幸存者。</p>
<h4 id="MinorGC-的过程（复制-gt-清空-gt-互换）"><a href="#MinorGC-的过程（复制-gt-清空-gt-互换）" class="headerlink" title="MinorGC 的过程（复制-&gt;清空-&gt;互换）"></a>MinorGC 的过程（复制-&gt;清空-&gt;互换）</h4><p>MinorGC 采用复制算法。</p>
<ol>
<li>eden、servicorFrom 复制到 ServicorTo，年龄+1</li>
</ol>
<blockquote>
<p>首先，把 Eden 和 ServivorFrom 区域中存活的对象复制到 ServicorTo 区域（如果有对象的年龄以及达到了老年的标准，则赋值到老年代区），同时把这些对象的年龄+1（如果 ServicorTo 不够位置了就放到老年区）；</p>
</blockquote>
<ol start="2">
<li>清空 eden、servicorFrom</li>
</ol>
<blockquote>
<p>然后，清空 Eden 和 ServicorFrom 中的对象；</p>
</blockquote>
<ol start="3">
<li>ServicorTo 和 ServicorFrom 互换</li>
</ol>
<blockquote>
<p>最后，ServicorTo 和 ServicorFrom 互换，原 ServicorTo 成为下一次 GC 时的 ServicorFrom区。</p>
</blockquote>
<h3 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h3><p>主要存放应用程序中生命周期长的内存对象。</p>
<p>老年代的对象比较稳定，所以 MajorGC 不会频繁执行。在进行 MajorGC 前一般都先进行了一次 MinorGC，使得有新生代的对象晋身入老年代，导致空间不够用时才触发。当无法找到足够大的连续空间分配给新创建的较大对象时也会提前触发一次 MajorGC 进行垃圾回收腾出空间。</p>
<p> MajorGC 采用标记清除算法：首先扫描一次所有老年代，标记出存活的对象，然后回收没有标记的对象。MajorGC 的耗时比较长，因为要扫描再回收。MajorGC 会产生内存碎片，为了减少内存损耗，我们一般需要进行合并或者标记出来方便下次直接分配。当老年代也满了装不下的时候，就会抛出 OOM（Out of Memory）异常。</p>
<h3 id="永久代"><a href="#永久代" class="headerlink" title="永久代"></a>永久代</h3><p> 指内存的永久保存区域，主要存放 Class 和 Meta（元数据）的信息,Class 在被加载的时候被放入永久区域，它和和存放实例的区域不同,GC 不会在主程序运行期对永久区域进行清理。所以这也导致了永久代的区域会随着加载的 Class 的增多而胀满，最终抛出 OOM 异常。</p>
<h4 id="JAVA8-与元数据"><a href="#JAVA8-与元数据" class="headerlink" title="JAVA8 与元数据"></a>JAVA8 与元数据</h4><p> 在 Java8 中，永久代已经被移除，被一个称为“元数据区”（元空间）的区域所取代。元空间的本质和永久代类似，元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。类的元数据放入 native memory, 字符串池和类的静态变量放入 java 堆中，这样可以加载多少类的元数据就不再由MaxPermSize 控制, 而由系统的实际可用空间来控制。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>内存模型</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录模式</title>
    <url>/2020/02/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>备忘录是一种行为模式，用于保存对象当前状态，并且在之后可以再次恢复到此状态。备忘录模式实现的方式需要保证被保存的对象不能从外部访问，目的是为了保护好保存的这些对象状态的完整性以及内部实现不向外部暴露。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样，以后可将该对象恢复到原先保存的状态。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>需要保存一个对象在某一个时刻的状态或部分状态。</p>
</li>
<li><p>如果用一个接口来让其他对象得到这些状态，将会暴露对象的实现细节并破坏对象的封装性，一个对象不希望外界直接访问其内部状态，通过中间对象可以间接访问其内部状态。</p>
</li>
</ol>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义备忘录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> checkPoint;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> lifeValue;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Memo [checkPoint="</span> + checkPoint + <span class="string">", lifeValue="</span> + lifeValue + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义管理器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Memo memo;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Memo memo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.memo = memo;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Memo <span class="title">getMemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> memo;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义游戏</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> mCheckPoint = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> mLifeValue = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"玩游戏:"</span> + String.format(<span class="string">"第%d关"</span>, mCheckPoint));</span><br><span class="line">		mLifeValue -= <span class="number">10</span>;</span><br><span class="line">		System.out.println(<span class="string">"进入下一关"</span>);</span><br><span class="line">		mCheckPoint++;</span><br><span class="line">		System.out.println(String.format(<span class="string">"到达%d关"</span>, mCheckPoint));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line">		System.out.println(<span class="string">"退出游戏前属性:"</span> + <span class="keyword">this</span>.toString());</span><br><span class="line">		System.out.println(<span class="string">"退出游戏"</span>);</span><br><span class="line">		System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Memo <span class="title">createMemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Memo memo = <span class="keyword">new</span> Memo();</span><br><span class="line">		memo.checkPoint = mCheckPoint;</span><br><span class="line">		memo.lifeValue = mLifeValue;</span><br><span class="line">		<span class="keyword">return</span> memo;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restore</span><span class="params">(Memo memo)</span> </span>&#123;</span><br><span class="line">		mCheckPoint = memo.checkPoint;</span><br><span class="line">		mLifeValue = memo.lifeValue;</span><br><span class="line">		System.out.println(<span class="string">"恢复后的游戏属性:"</span> + <span class="keyword">this</span>.toString());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Game [mCheckPoint="</span> + mCheckPoint + <span class="string">", mLifeValue="</span> + mLifeValue + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Game game = <span class="keyword">new</span> Game();</span><br><span class="line">		<span class="comment">//打游戏</span></span><br><span class="line">		game.play();</span><br><span class="line">		Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">		<span class="comment">//存档</span></span><br><span class="line">		manager.save(game.createMemo());</span><br><span class="line">		<span class="comment">//退出游戏</span></span><br><span class="line">		game.exit();</span><br><span class="line">		<span class="comment">//恢复游戏</span></span><br><span class="line">		Game newGame = <span class="keyword">new</span> Game();</span><br><span class="line">		newGame.restore(manager.getMemo());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">玩游戏:第1关</span><br><span class="line">进入下一关</span><br><span class="line">到达2关</span><br><span class="line">-------------------</span><br><span class="line">退出游戏前属性:Game [mCheckPoint&#x3D;2, mLifeValue&#x3D;90]</span><br><span class="line">退出游戏</span><br><span class="line">-------------------</span><br><span class="line">恢复后的游戏属性:Game [mCheckPoint&#x3D;2, mLifeValue&#x3D;90]</span><br></pre></td></tr></table></figure></div>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>备忘录模式是在不破坏封装的条件下，通过备忘录对象存储另外一个对象内部的快照，在将来合适的时候把这个对象还原到存储起来的状态。</p>
<p>优点</p>
<p>给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。</p>
<p>实现了信息的封装，使用用户不需要关心状态的保存细节。</p>
<p>缺点</p>
<p>消耗资源，如果类的成员变量过多，势必会占用较大的资源，而且每一次保存都会消耗一定的内存。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2020/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>观察者模式是一个使用率非常高的模式。它最常用的地方是GUI系统，订阅-发布系统。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>定义对象间一种一对多的依赖关系，使得每当一个对象改变时，所有依赖它的对象得到通知并被自动更新。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>关联行为场景</p>
<p>事件多级触发场景</p>
<p>跨系统的消息交换场景，如消息队列、事件总线的处理机制</p>
<h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>定义被观察者</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableImpl</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 标识状态或者内容发生改变</span></span><br><span class="line">		setChanged();</span><br><span class="line">		<span class="comment">// 通知所有观察者</span></span><br><span class="line">		notifyObservers();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义观察者</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverImpl</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ObserverImpl</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable arg0, Object arg1)</span> </span>&#123;</span><br><span class="line">		System.out.println(name + <span class="string">":收到更新通知"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ObservableImpl observable = <span class="keyword">new</span> ObservableImpl();</span><br><span class="line">		ObserverImpl observer1 = <span class="keyword">new</span> ObserverImpl(<span class="string">"observer1"</span>);</span><br><span class="line">		ObserverImpl observer2 = <span class="keyword">new</span> ObserverImpl(<span class="string">"observer2"</span>);</span><br><span class="line">		observable.addObserver(observer1);</span><br><span class="line">		observable.addObserver(observer2);</span><br><span class="line">		observable.notifyChanged();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">observer2:收到更新通知</span><br><span class="line">observer1:收到更新通知</span><br></pre></td></tr></table></figure></div>

<p>可以看到，通知时是按照注册时的逆序来通知的，查看源码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = aobj.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            ((Observer)aobj[i]).update(<span class="keyword">this</span>, obj);</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>/2020/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>命令模式是行为型设计模式之一。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将请求封装成一个对象，从而让用户使用不同的请求把客户端参数化；对请求排除或者记录请求日志，以及支持可撤销操作。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>需要抽象出待执行的动作，然后以参数的形式提供出来</p>
</li>
<li><p>在不同的时刻指定、排列和执行请求。</p>
</li>
<li><p>需要支持取消操作。</p>
</li>
<li><p>支持修改日志功能。</p>
</li>
<li><p>需要支持事务操作。</p>
</li>
</ol>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义命令接收者，即执行者</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 真正执行具体命令的方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行具体的操作"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义命令的接口类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 执行具体操作的命令</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义命令的实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandImpl</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CommandImpl</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		receiver.action();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义请求者</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.command = command;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		command.execute();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">		Command command = <span class="keyword">new</span> CommandImpl(receiver);</span><br><span class="line">		Invoker invoker = <span class="keyword">new</span> Invoker(command);</span><br><span class="line">		invoker.action();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>解释器模式</title>
    <url>/2020/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>解释器模式是一种用得比较少的行为型模式，其提供了一种解释语言的语法或表达式的方式，该模式定义了一个表达式接口，通过该接口解释一个特定的上下文。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>给定一个语言，定义它的方法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>如果某个简单的语言需要解释执行而且可以将该语言中的语句表示为一个抽象语法树时，可以考虑使用解释器模式。</p>
</li>
<li><p>在某些特定的领域出现不断重复的问题时，可以将该领域的问题转化为一种语法规则下的语句，然后构建解释器来解释该语句。</p>
</li>
</ol>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>略…</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>优点</p>
<blockquote>
<p>灵活的扩展性。当我们想对方法规则进行扩展延伸时，只需要增加相应的非终结符解释器，并在构建抽象语法树时，使用到新增的解释器对象进行具体的解释即可。</p>
</blockquote>
<p>缺点</p>
<blockquote>
<p>因为对于每一条方法都可以对应至少一个解释器，其会生成大量的类，导致后期维护困难，同时，对于过于复杂的方法，构建抽象语法树会显得异常烦琐，甚至有可能会出现需要构建多棵抽象语法树的情况，因些，对于复杂的文档并不推荐使用解释器模式。</p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链模式</title>
    <url>/2020/01/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>责任链模式是行为型设计模式之一。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>使多个对象都有机会处理请求，从而避免了请求的发送者和接收者间的耦合。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>多个对象可以处理同一请求，但具体由哪个对象处理则在运行时动态决定。</p>
</li>
<li><p>在请求处理者不明确的情况下向多个对象的一个提交请求。</p>
</li>
<li><p>需要动态指定 组对象处理请求。</p>
</li>
</ol>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义抽象请求类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRequest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 处理对象</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AbstractRequest</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.obj = obj;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取处理对象</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> obj;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取请求级别</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getRequestLevel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义抽象处理类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 下一个处理者</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	AbstractHandler nextHandler;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取处理级别</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getHandlerLevel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 处理请求</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(AbstractRequest request)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 统一处理</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(AbstractRequest request)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (getHandlerLevel() == request.getRequestLevel()) &#123;</span><br><span class="line">			handle(request);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (nextHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">				nextHandler.handleRequest(request);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">"All of handler can not handle the request:"</span> + request.getRequestLevel());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义具体请求类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request1</span> <span class="keyword">extends</span> <span class="title">AbstractRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Request1</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(obj);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRequestLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request2</span> <span class="keyword">extends</span> <span class="title">AbstractRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Request2</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(obj);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRequestLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request3</span> <span class="keyword">extends</span> <span class="title">AbstractRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Request3</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(obj);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRequestLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义具体处理类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler1</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getHandlerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(AbstractRequest request)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Handler1 handle request:"</span> + request.getRequestLevel());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler2</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getHandlerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(AbstractRequest request)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Handler2 handle request:"</span> + request.getRequestLevel());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AbstractRequest request1 = <span class="keyword">new</span> Request1(<span class="string">"Request1"</span>);</span><br><span class="line">		AbstractRequest request2 = <span class="keyword">new</span> Request2(<span class="string">"Request2"</span>);</span><br><span class="line">		AbstractRequest request3 = <span class="keyword">new</span> Request3(<span class="string">"Request3"</span>);</span><br><span class="line">		AbstractHandler handler1 = <span class="keyword">new</span> Handler1();</span><br><span class="line">		AbstractHandler handler2 = <span class="keyword">new</span> Handler2();</span><br><span class="line">		handler1.nextHandler = handler2;</span><br><span class="line">		handler1.handleRequest(request1);</span><br><span class="line">		handler1.handleRequest(request2);</span><br><span class="line">		handler1.handleRequest(request3);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Handler1 handle request:1</span><br><span class="line">Handler2 handle request:2</span><br><span class="line">All of handler can not handle the request:3</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>状态模式</title>
    <url>/2020/01/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>状态模式中的行为是由状态来决定的，不同状态下有不同的行为。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>当一个对象的内在状态改变时允许其改变行为。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>一个对象的行为取决于它的状态，并且它必须在运行时根据状态来改变行为。</p>
</li>
<li><p>代码中包含大量与对象状态有关的条件语句。</p>
</li>
</ol>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>定义状态接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TvState</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextChannel</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prevChannel</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnUp</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnDown</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PowerOnState</span> <span class="keyword">implements</span> <span class="title">TvState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"下一个频道"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prevChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"上一个频道"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"增加音量"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"减小音量"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PowerOffState</span> <span class="keyword">implements</span> <span class="title">TvState</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prevChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义控制类接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PowerController</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOff</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义控制类的实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TvController</span> <span class="keyword">implements</span> <span class="title">PowerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> TvState mTvState;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTvState</span><span class="params">(TvState tvState)</span> </span>&#123;</span><br><span class="line">		mTvState = tvState;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		setTvState(<span class="keyword">new</span> PowerOnState());</span><br><span class="line">		System.out.println(<span class="string">"开机啦"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		setTvState(<span class="keyword">new</span> PowerOffState());</span><br><span class="line">		System.out.println(<span class="string">"关机啦"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mTvState.nextChannel();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prevChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mTvState.prevChannel();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mTvState.turnUp();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mTvState.turnDown();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TvController tvController = <span class="keyword">new</span> TvController();</span><br><span class="line">		tvController.powerOn();</span><br><span class="line">		tvController.nextChannel();</span><br><span class="line">		tvController.turnUp();</span><br><span class="line">		tvController.powerOff();</span><br><span class="line">		tvController.turnDown();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开机啦</span><br><span class="line">下一个频道</span><br><span class="line">增加音量</span><br><span class="line">关机啦</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算的简单应用-权限管理</title>
    <url>/2020/01/16/Android/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="位运算的简单应用-权限管理"><a href="#位运算的简单应用-权限管理" class="headerlink" title="位运算的简单应用-权限管理"></a>位运算的简单应用-权限管理</h1><p>位运算在实际的开发中，有很多巧妙的应用场景。如：</p>
<ol>
<li><p>一个存放正整数的数组，里面有一个数字只出现一次，其它数字都出现两次，求只出现一次的数字。</p>
</li>
<li><p>不用临时变量，交换两个数字的值。</p>
</li>
<li><p>Android中Window设置Flag</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlags</span><span class="params">(<span class="keyword">int</span> flags, <span class="keyword">int</span> mask)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> WindowManager.LayoutParams attrs = getAttributes();</span><br><span class="line">       attrs.flags = (attrs.flags&amp;~mask) | (flags&amp;mask);</span><br><span class="line">       mForcedWindowFlags |= mask;</span><br><span class="line">       dispatchWindowAttributesChanged(attrs);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>产品具有某些Feature，这些Feature可以利用位运算来存储。</li>
</ol>
<p>下面利用位运算来简单模拟权限管理</p>
<p>权限管理类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSION_NONE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSION_A = <span class="number">1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSION_B = <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSION_C = <span class="number">1</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSION_D = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> mPermission = PERMISSION_NONE;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionManagerHolder</span> </span>&#123;</span><br><span class="line">		<span class="keyword">static</span> PermissionManager sPermissionManager = <span class="keyword">new</span> PermissionManager();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">PermissionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PermissionManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> PermissionManagerHolder.sPermissionManager;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加权限</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> permission</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPermission</span><span class="params">(<span class="keyword">int</span> permission)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (hasPermission(permission)) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		mPermission |= permission;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 移除权限</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> permission</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePermission</span><span class="params">(<span class="keyword">int</span> permission)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!hasPermission(permission)) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		mPermission &amp;= ~permission;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 判断是否有权限</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> permission</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPermission</span><span class="params">(<span class="keyword">int</span> permission)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (mPermission &amp; permission) != <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"没有添加任何权限----------"</span>);</span><br><span class="line">		PermissionManager permissionManager = PermissionManager.getInstance();</span><br><span class="line">		checkPermission(permissionManager);</span><br><span class="line">		System.out.println(<span class="string">"添加权限A----------"</span>);</span><br><span class="line">		System.out.println(<span class="string">"添加权限B----------"</span>);</span><br><span class="line">		System.out.println(<span class="string">"添加权限C----------"</span>);</span><br><span class="line">		permissionManager.addPermission(PermissionManager.PERMISSION_A);</span><br><span class="line">		permissionManager.addPermission(PermissionManager.PERMISSION_B);</span><br><span class="line">		permissionManager.addPermission(PermissionManager.PERMISSION_C);</span><br><span class="line">		checkPermission(permissionManager);</span><br><span class="line">		System.out.println(<span class="string">"删除权限C----------"</span>);</span><br><span class="line">		permissionManager.removePermission(PermissionManager.PERMISSION_C);</span><br><span class="line">		checkPermission(permissionManager);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkPermission</span><span class="params">(PermissionManager permissionManager)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"PERMISSION_A exist:"</span> + permissionManager.hasPermission(PermissionManager.PERMISSION_A));</span><br><span class="line">		System.out.println(<span class="string">"PERMISSION_B exist:"</span> + permissionManager.hasPermission(PermissionManager.PERMISSION_B));</span><br><span class="line">		System.out.println(<span class="string">"PERMISSION_C exist:"</span> + permissionManager.hasPermission(PermissionManager.PERMISSION_C));</span><br><span class="line">		System.out.println(<span class="string">"PERMISSION_D exist:"</span> + permissionManager.hasPermission(PermissionManager.PERMISSION_D));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">没有添加任何权限----------</span><br><span class="line">PERMISSION_A exist:false</span><br><span class="line">PERMISSION_B exist:false</span><br><span class="line">PERMISSION_C exist:false</span><br><span class="line">PERMISSION_D exist:false</span><br><span class="line">添加权限A----------</span><br><span class="line">添加权限B----------</span><br><span class="line">添加权限C----------</span><br><span class="line">PERMISSION_A exist:true</span><br><span class="line">PERMISSION_B exist:true</span><br><span class="line">PERMISSION_C exist:true</span><br><span class="line">PERMISSION_D exist:false</span><br><span class="line">删除权限C----------</span><br><span class="line">PERMISSION_A exist:true</span><br><span class="line">PERMISSION_B exist:true</span><br><span class="line">PERMISSION_C exist:false</span><br><span class="line">PERMISSION_D exist:false</span><br></pre></td></tr></table></figure></div>

<p>位运算并不限于权限管理，具有多个状态的应用场景，都可以用到。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2020/01/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>实现某一个功能有多种算法或者策略，可以根据实际情况选择不同的算法或者策略来实现该功能，如果将这些算法或者策略抽象出来，提供一个统一的接口，不同的算法或策略有不同的实现类，这样在程序客户端就可以通过注入不同的实现对象来实现算法或者策略的动态替换，这种模式的可扩展性，可维护性更高。这就是策略模式。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>策略模式定义了一系列的算法，并将每一个算法封装起来，使他们可以相互替换。策略模式让算法独立于使用它的客户而独立变化。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>针对同一类型问题的多种处理方式，仅仅是具体行为有差别时</p>
</li>
<li><p>需要安全地封装多种同一类型的操作时</p>
</li>
<li><p>出现同一抽象类有多个子类，而又需要使用if-else或者switch-case来选择具体子类时。</p>
</li>
</ol>
<p>定义策略接口类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义具体的策略实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy1</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Strategy1"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy2</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Strategy2"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>增加一个策略管理类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Strategy mStrategy;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.mStrategy = strategy;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mStrategy.calc();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过setStrategy，可以动态替换具体的策略类</p>
<p>在客户端中调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		StrategyManager manager = <span class="keyword">new</span> StrategyManager();</span><br><span class="line">		Strategy strategy1 = <span class="keyword">new</span> Strategy1();</span><br><span class="line">		manager.setStrategy(strategy1);</span><br><span class="line">		manager.calc();</span><br><span class="line">		Strategy strategy2 = <span class="keyword">new</span> Strategy2();</span><br><span class="line">		manager.setStrategy(strategy2);</span><br><span class="line">		manager.calc();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Strategy1</span><br><span class="line">Strategy2</span><br></pre></td></tr></table></figure></div>

<p>依次执行了策略1和策略2。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>策略模式主要用来分离算法，在相同的行为抽象下有不同的具体实现策略。策略模式很好地演示了开闭原则，也就是定义抽象，注入不同的实现，从而达到很好的可扩展性。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/2020/01/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>抽象工厂模式，也是创建型设计模式之一。</p>
<h2 id="模式的定义"><a href="#模式的定义" class="headerlink" title="模式的定义"></a>模式的定义</h2><p>为创建一组相关或者相互依赖的对象提供一个接口，而不需要指定它们的具体类。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>一个对象族有相同的约束时可以使用抽象工厂模式。如，Android,ios都有短信软件和拨号软件，两者都属于软件的范畴，但它们所在的操作系统平台不一样，这时可以使用抽象工厂模式来实现。</p>
<h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>抽象产品类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>抽象工厂类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>具体产品类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>具体工厂类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory1</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory2</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>抽象工厂模式优点：</p>
<blockquote>
<p>分离接口与实现</p>
</blockquote>
<p>抽象工厂模式缺点：</p>
<blockquote>
<p>一是类文件的爆炸性增加，二是不太容易扩展新的产品类，因为每增加一个产品类就需要修改抽象工厂。</p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂方法模式</title>
    <url>/2020/01/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>工厂方法模式是创建型设计模式之一。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>定义一个用于创建对象的接口，让子类决定实例化哪个类。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在任何需要生成复杂对象的地方，都可以使用工厂方法模式。用new就可以完成创建的对象无需使用工厂方法模式。</p>
<h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>定义抽象类Product</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 抽象方法，具体由子类实现</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义实现类ProductA,ProductB</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"productA:method"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"productB:method"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义抽象工厂Factory</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 抽象工厂方法，具体由子类实现</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">createProduct</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义实现类FactoryA,FactoryB</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryA</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryB</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Factory factory = <span class="keyword">new</span> FactoryA();</span><br><span class="line">		Product product = factory.createProduct();</span><br><span class="line">		product.method();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">productA:method</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Factory factory = <span class="keyword">new</span> FactoryB();</span><br><span class="line">		Product product = factory.createProduct();</span><br><span class="line">		product.method();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">productB:method</span><br></pre></td></tr></table></figure></div>

<p>这种方式，在Product的子类增加的时候，需要增加Product的实现以及Factory的实现。可以利用反射的方式更简洁地扩展,增加Product的子类时，不需要再增加Factory的子类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 抽象工厂方法，具体由子类实现</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clz</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createProduct</span><span class="params">(Class&lt;T&gt; clz)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryImpl</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createProduct</span><span class="params">(Class&lt;T&gt; clz)</span> </span>&#123;</span><br><span class="line">		Product product = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			product = (Product) Class.forName(clz.getName()).newInstance();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> (T) product;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AbstractFactory factory = <span class="keyword">new</span> FactoryImpl();</span><br><span class="line">		Product product = factory.createProduct(ProductA<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		product.method();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">productA:method</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AbstractFactory factory = <span class="keyword">new</span> FactoryImpl();</span><br><span class="line">		Product product = factory.createProduct(ProductB<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		product.method();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">productB:method</span><br></pre></td></tr></table></figure></div>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总的来说，工厂方法模式是一个很好的设计模式，但是缺点也是难以避免的，每次我们为工厂方法模式添加新的产品时就要编写一个新的产品类，同时还要引入抽象层，这必然会导致类结构的复杂化，所以在某些情况比较简单时，是否要使用工厂方法 模式，需要设计者权衡利弊。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/2020/01/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>原型模式是一个创建型的模式。多用于创建复杂的或者构造耗时的实例，因为这种情况下，复制一个已经存在的实例，可使程序运行更高效。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>用原型实例指定创建对象的种类，并通过复制这些原型创建新的对象。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>类初始化需要消耗非常多的资源</p>
</li>
<li><p>通过new产生一个对象需要非常繁琐的数据准备或访问权限</p>
</li>
<li><p>一个对象需要提供给其它对象访问，而且各个调用者可能都需要修改值</p>
</li>
</ol>
<blockquote>
<p>通过实现Cloneable接口的原型模式在调用clone函数构造实例时，并不一定比通过new操作速度快，只有当通过new构造函数对象较为耗时或成本较高时，通过clone方法才能够获得效率上的提升。</p>
</blockquote>
<h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>以简单的文档拷贝为例演示简单的原型模式。</p>
<p>先来演示浅拷贝</p>
<p>文档定义</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Document</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String mText;</span><br><span class="line">	<span class="keyword">private</span> ArrayList&lt;String&gt; mImages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getmText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mText;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmText</span><span class="params">(String mText)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.mText = mText;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getmImages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mImages;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addImage</span><span class="params">(String image)</span> </span>&#123;</span><br><span class="line">		mImages.add(image);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showDocument</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		Document doc = (Document) <span class="keyword">super</span>.clone();</span><br><span class="line">		doc.mText = <span class="keyword">this</span>.mText;</span><br><span class="line">		doc.mImages = <span class="keyword">this</span>.mImages;</span><br><span class="line">		<span class="keyword">return</span> doc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Document [mText="</span> + mText + <span class="string">", mImages="</span> + mImages + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Document doc1 = <span class="keyword">new</span> Document();</span><br><span class="line">		doc1.setmText(<span class="string">"文档1"</span>);</span><br><span class="line">		doc1.addImage(<span class="string">"图片1"</span>);</span><br><span class="line">		doc1.showDocument();</span><br><span class="line">		Document doc2;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			doc2 = (Document) doc1.clone();</span><br><span class="line">			doc2.setmText(<span class="string">"文档2"</span>);</span><br><span class="line">			doc2.addImage(<span class="string">"图片2"</span>);</span><br><span class="line">			doc2.showDocument();</span><br><span class="line">			doc.showDocument();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建文档1，然后显示文档1的内容。然后拷贝了文档1，修改了文档1的内容，然后依次显示文档2，文档1</p>
<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Document [mText&#x3D;文档1, mImages&#x3D;[图片1]]</span><br><span class="line">Document [mText&#x3D;文档2, mImages&#x3D;[图片1, 图片2]]</span><br><span class="line">Document [mText&#x3D;文档1, mImages&#x3D;[图片1, 图片2]]</span><br></pre></td></tr></table></figure></div>

<p>可以看到,修改拷贝后的文档2的Text，文档1没有受影响，但是修改文档2的Images，文档1也被修改了。</p>
<p>下面演示深拷贝</p>
<p>只需要修改clone方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		Document doc = (Document) <span class="keyword">super</span>.clone();</span><br><span class="line">		doc.mText = <span class="keyword">this</span>.mText;</span><br><span class="line">		<span class="comment">//doc.mImages = this.mImages;</span></span><br><span class="line">		doc.mImages = (ArrayList&lt;String&gt;) <span class="keyword">this</span>.mImages.clone();</span><br><span class="line">		<span class="keyword">return</span> doc;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>再次运行后的输出结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Document [mText&#x3D;文档1, mImages&#x3D;[图片1]]</span><br><span class="line">Document [mText&#x3D;文档2, mImages&#x3D;[图片1, 图片2]]</span><br><span class="line">Document [mText&#x3D;文档1, mImages&#x3D;[图片1]]</span><br></pre></td></tr></table></figure></div>

<p>修改文档2的Images并没有影响到文档1。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>原型模式本质上就是对象拷贝，容易出现的问题是深拷贝、浅拷贝。使用原型模式可以解决构建复杂对象的资源消耗问题，能够在某些场景下提升创建对象的效率。还有一个重要用途是保护性拷贝，也就是某个对象对外可能是只读的，为了防止外部对这个只读对象修改，可以通过返回一个对象拷贝的形式来实现只读的限制。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Builder模式</title>
    <url>/2020/01/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Builder%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Builder模式"><a href="#Builder模式" class="headerlink" title="Builder模式"></a>Builder模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>Builder模式是一步一步创建一个复杂对象的创建型模式，它允许用户在不知道内部构建细节的情况下，可以更精细地控制对象的构建流程。该模式是为了将构建复杂对象的过程和它的部件解耦，使得构建过程和部件的表示隔离开来。</p>
<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将一个复杂对象的构建与它的表示分离，使得同样的构建可以创建不同的表示。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>相同的方法，不同的执行顺序，产生不同的事件结果时。</p>
</li>
<li><p>多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时。</p>
</li>
<li><p>产品类非常复杂，或者产品类中的调用顺序不同产生了不同的作用。</p>
</li>
<li><p>当初始化一个对象特别复杂，如参数多，且很多参数都具有默认值时。</p>
</li>
</ol>
<h2 id="模式的简单实现"><a href="#模式的简单实现" class="headerlink" title="模式的简单实现"></a>模式的简单实现</h2><p>Computer类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String mCpu;</span><br><span class="line">	<span class="keyword">private</span> String mScreen;</span><br><span class="line">	<span class="keyword">private</span> String mHd;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(String cpu, String screen, String hd)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.mCpu = cpu;</span><br><span class="line">		<span class="keyword">this</span>.mScreen = screen;</span><br><span class="line">		<span class="keyword">this</span>.mHd = hd;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Computer [mCpu="</span> + mCpu + <span class="string">", mScreen="</span> + mScreen + <span class="string">", mHd="</span> + mHd + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>ComputerBuilder类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> String mCpu = <span class="string">"cpu"</span>;</span><br><span class="line">		<span class="keyword">private</span> String mScreen = <span class="string">"screen"</span>;</span><br><span class="line">		<span class="keyword">private</span> String mHd = <span class="string">"hd"</span>;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">cpu</span><span class="params">(String cpu)</span> </span>&#123;</span><br><span class="line">			mCpu = cpu;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">screen</span><span class="params">(String screen)</span> </span>&#123;</span><br><span class="line">			mScreen = screen;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">hd</span><span class="params">(String hd)</span> </span>&#123;</span><br><span class="line">			mHd = hd;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Computer <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Computer(mCpu, mScreen, mHd);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>默认使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Computer computer = <span class="keyword">new</span> ComputerBuilder.Builder().build();</span><br><span class="line">		System.out.println(computer);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出日志</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Computer [mCpu&#x3D;cpu, mScreen&#x3D;screen, mHd&#x3D;hd]</span><br></pre></td></tr></table></figure></div>

<p>自定义参数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Computer computer = <span class="keyword">new</span> ComputerBuilder.Builder().cpu(<span class="string">"CPU"</span>).screen(<span class="string">"SCREEN"</span>).hd(<span class="string">"HD"</span>).build();</span><br><span class="line">		System.out.println(computer);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出日志</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Computer [mCpu&#x3D;CPU, mScreen&#x3D;SCREEN, mHd&#x3D;HD]</span><br></pre></td></tr></table></figure></div>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Builder模式在Android开发中较为常用，通常作为配置类的构建器，将配置的构建和表示分离开来，同时也是将配置从目标类中隔离出来，避免过多的setter方法。Builder模式比较常见的实现形式是通过调用链实现，使得代码更简洁、易懂。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Android埋点方案的简单实现-AOP之AspectJ</title>
    <url>/2020/01/13/Android/Android%E5%9F%8B%E7%82%B9%E6%96%B9%E6%A1%88%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0-AOP%E4%B9%8BAspectJ/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android埋点方案的简单实现-AOP之AspectJ"><a href="#Android埋点方案的简单实现-AOP之AspectJ" class="headerlink" title="Android埋点方案的简单实现-AOP之AspectJ"></a>Android埋点方案的简单实现-AOP之AspectJ</h1><h2 id="AOP的定义"><a href="#AOP的定义" class="headerlink" title="AOP的定义"></a>AOP的定义</h2><blockquote>
<p>AOP为Aspect Oriented Programming的缩写，意为:面向切面编程，通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术。</p>
<p>以上关于AOP的定义引用自百度百科。</p>
</blockquote>
<h2 id="AOP的运用场景"><a href="#AOP的运用场景" class="headerlink" title="AOP的运用场景"></a>AOP的运用场景</h2><blockquote>
<p>日志记录、性能统计、权限控制、埋点等</p>
</blockquote>
<p>AOP的具体实现方案有很多，这里选用AspectJ来简单实现</p>
<blockquote>
<ol>
<li>监听View的点击、页面打开、关闭</li>
<li>为方法添加开始、结束的日志</li>
<li>统计方法运行时间</li>
</ol>
</blockquote>
<h2 id="AspectJ的使用"><a href="#AspectJ的使用" class="headerlink" title="AspectJ的使用"></a>AspectJ的使用</h2><h3 id="AspectJ的引入"><a href="#AspectJ的引入" class="headerlink" title="AspectJ的引入"></a>AspectJ的引入</h3><p>这里引用AspectJX，AspectJX是基于AspectJ的一个AOP框架</p>
<p>新建Android工程，在项目根目录下的build.gradle文件中添加依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.8'</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>新建Module，类型选择Android Library，在新建的library的build.gradle文件中，添加相应的依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'android-aspectjx'</span></span><br></pre></td></tr></table></figure></div>

<p>在app的build.gradle文件中增加对刚才新建的library的引用及AspectJ的依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'android-aspectjx'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.espresso:espresso-core:3.1.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="监听View的点击、页面打开、关闭"><a href="#监听View的点击、页面打开、关闭" class="headerlink" title="监听View的点击、页面打开、关闭"></a>监听View的点击、页面打开、关闭</h3><p>在library中新建回调接口TrackCallBack</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TrackCallBack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当View被点击</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> viewIdName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(String pageName, String viewIdName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当页面打开时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPageOpen</span><span class="params">(String pageName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当页面关闭时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPageClose</span><span class="params">(String pageName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在library中新建切入点TrackPoint</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrackPoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TrackCallBack mTrackCallBack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TrackPoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trackCallBack</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(TrackCallBack trackCallBack)</span> </span>&#123;</span><br><span class="line">        mTrackCallBack = trackCallBack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(String pageName, String viewIdName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mTrackCallBack == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mTrackCallBack.onClick(pageName, viewIdName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onPageOpen</span><span class="params">(String pageName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mTrackCallBack == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mTrackCallBack.onPageOpen(pageName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onPageClose</span><span class="params">(String pageName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mTrackCallBack == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mTrackCallBack.onPageClose(pageName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在library中新建切面TraceAspect</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TraceAspect<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* onClick(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickPointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* android.app.Activity+.onCreate(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activityOnCreatePointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* android.app.Activity+.onDestroy(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activityDestroyPointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"onClickPointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object target = joinPoint.getTarget();</span><br><span class="line">        String className = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            className = target.getClass().getName();</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span> &amp;&amp; args[<span class="number">0</span>] <span class="keyword">instanceof</span> View) &#123;</span><br><span class="line">            View view = (View) args[<span class="number">0</span>];</span><br><span class="line">            String entryName = view.getResources().getResourceEntryName(view.getId());</span><br><span class="line">            TrackPoint.onClick(className, entryName);</span><br><span class="line">        &#125;</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"activityOnCreatePointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageOpen</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object target = joinPoint.getTarget();</span><br><span class="line">        String className = target.getClass().getName();</span><br><span class="line">        TrackPoint.onPageOpen(className);</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"activityDestroyPointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageClose</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object target = joinPoint.getTarget();</span><br><span class="line">        String className = target.getClass().getName();</span><br><span class="line">        TrackPoint.onPageClose(className);</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在app模块新建Application，在onCreate中执行初始化:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TraceAspect<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        TrackPoint.init(<span class="keyword">new</span> TrackCallBack() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(String pageName, String viewIdName)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onClick:"</span> + pageName + <span class="string">"-"</span> + viewIdName);</span><br><span class="line">                <span class="comment">//执行相应的业务</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageOpen</span><span class="params">(String pageName)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onPageOpen:"</span> + pageName);</span><br><span class="line">                <span class="comment">//执行相应的业务</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageClose</span><span class="params">(String pageName)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onPageClose:"</span> + pageName);</span><br><span class="line">                <span class="comment">//执行相应的业务</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>新增的Application需要在AndroidManifest中引用才会生效。</p>
<p>运行App后，点击打开另一个Activity，然后依次退出Activity，输出日志如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-01-13 16:50:17.373 16610-16610&#x2F;com.wangyz.aspectjdemo D&#x2F;TraceAspect: onPageOpen:com.wangyz.aspectjdemo.MainActivity</span><br><span class="line">2020-01-13 16:50:19.243 16610-16610&#x2F;com.wangyz.aspectjdemo D&#x2F;TraceAspect: onClick:com.wangyz.aspectjdemo.MainActivity-btn_open</span><br><span class="line">2020-01-13 16:50:19.298 16610-16610&#x2F;com.wangyz.aspectjdemo D&#x2F;TraceAspect: onPageOpen:com.wangyz.aspectjdemo.SecondActivity</span><br><span class="line">2020-01-13 16:50:21.392 16610-16610&#x2F;com.wangyz.aspectjdemo D&#x2F;TraceAspect: onPageClose:com.wangyz.aspectjdemo.SecondActivity</span><br><span class="line">2020-01-13 16:50:22.320 16610-16610&#x2F;com.wangyz.aspectjdemo D&#x2F;TraceAspect: onPageClose:com.wangyz.aspectjdemo.MainActivity</span><br></pre></td></tr></table></figure></div>

<h3 id="为方法添加开始、结束的日志"><a href="#为方法添加开始、结束的日志" class="headerlink" title="为方法添加开始、结束的日志"></a>为方法添加开始、结束的日志</h3><p>在library中增加注解AddLog</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AddLog &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在TraceAspect增加以下代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(@com.wangyz.library.AddLog * *(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLogPointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"addLogPointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        AddLog addLog = signature.getMethod().getAnnotation(AddLog<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (addLog != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object target = joinPoint.getTarget();</span><br><span class="line">            String className = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">                className = target.getClass().getName();</span><br><span class="line">            &#125;</span><br><span class="line">            Log.d(TAG, <span class="string">"start execute:"</span> + className + <span class="string">"-"</span> + signature.getMethod().getName());</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">            Log.d(TAG, <span class="string">"end execute:"</span> + className + <span class="string">"-"</span> + signature.getMethod().getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在MainActivity的onCreate上增加AddLog注解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AddLog</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>运行App后，输入日志如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">01</span>-<span class="number">13</span> <span class="number">16</span>:<span class="number">50</span>:<span class="number">17.373</span> <span class="number">16610</span>-<span class="number">16610</span>/com.wangyz.aspectjdemo D/TraceAspect: start execute:com.wangyz.aspectjdemo.MainActivity-onCreate</span><br><span class="line"><span class="number">2020</span>-<span class="number">01</span>-<span class="number">13</span> <span class="number">16</span>:<span class="number">50</span>:<span class="number">17.392</span> <span class="number">16610</span>-<span class="number">16610</span>/com.wangyz.aspectjdemo D/TraceAspect: end execute:com.wangyz.aspectjdemo.MainActivity-onCreate</span><br></pre></td></tr></table></figure></div>

<h3 id="统计方法运行时间"><a href="#统计方法运行时间" class="headerlink" title="统计方法运行时间"></a>统计方法运行时间</h3><p>在library中增加注解ExecTime</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ExecTime &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在TraceAspect增加以下代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(@com.wangyz.library.ExecTime * *(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execTimePointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"execTimePointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execTime</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        ExecTime execTime = signature.getMethod().getAnnotation(ExecTime<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (execTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">            Object target = joinPoint.getTarget();</span><br><span class="line">            String className = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">                className = target.getClass().getName();</span><br><span class="line">            &#125;</span><br><span class="line">            Log.d(TAG,</span><br><span class="line">                    <span class="string">"execute time:"</span> + className + <span class="string">"-"</span> + signature.getMethod().getName() + <span class="string">" : "</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在onClick方法上增加ExecTime注解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExecTime</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_open:</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecondActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                startActivity(intent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>运行App后，输出日志如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-01-13 16:50:19.272 16610-16610&#x2F;com.wangyz.aspectjdemo D&#x2F;TraceAspect: execute time:com.wangyz.aspectjdemo.MainActivity-onClick : 28ms</span><br></pre></td></tr></table></figure></div>

<p>源码地址:<a href="https://github.com/milovetingting/Samples/tree/master/AspectJDemo" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/AspectJDemo</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AOP</tag>
        <tag>AspectJ</tag>
        <tag>埋点</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="模式介绍"><a href="#模式介绍" class="headerlink" title="模式介绍"></a>模式介绍</h2><p>整个系统只需要拥有一个全局对象，这样有利于我们协调系统整体的行为。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>
<p>实现单例模式主要有如下几个关键点：</p>
<ul>
<li><p>构造函数不对外开放，一般为private</p>
</li>
<li><p>通过一个静态方法或者枚举返回单例类对象</p>
</li>
<li><p>确保单例类的对象有且只有一个，尤其是在多线程环境下</p>
</li>
<li><p>确保单例类对象在反序列化时不会重新构建对象</p>
</li>
</ul>
<h2 id="单例模式的写法"><a href="#单例模式的写法" class="headerlink" title="单例模式的写法"></a>单例模式的写法</h2><ul>
<li>饿汉式</li>
</ul>
<p>在声明静态对象时已经初始化。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton mInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>懒汉式</li>
</ul>
<p>懒汉模式是声明一个静态对象，并且在用户第一次调用getInstance时进行初始化。优点是：单例只在使用时才会被实例化。缺点是：第一次加载需要及时进行实例化，反应稍慢，每次调用时都进行同步，造成不必要的同步开销。这种模式不建议使用。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton mInstance;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">			mInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>DCL(Double Check Lock)实现单例</li>
</ul>
<p>DCL模式实现单例的优点是既能够在需要时才初始化单例，又能够保证线程安全，且单例对象初始化后调用getInstance不进行同步锁。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton mInstance;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">					mInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>静态内部类单例模式</li>
</ul>
<p>当第一次加载Singleton类时并不会初始化sInstance，只有在第一次调用Sington的getInstance方法时才会导致sInstance被初始化。这是推荐使用的单例模式实现方式。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SingletonHolder.sInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton sInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>枚举单例</li>
</ul>
<p>在上述的几种单例模式实现中，在反序列化的情况下，它们就会出现重新创建对象。</p>
<p>序列化可以将一个单例的实例对象写到磁盘，然后再读回来，从而有效地获得一个实例。即使构造函数是私有的，反序列化时依然可以通过特殊的途径去创建一个新的实例。反序列化操作提供了一个特别的钩子函数，类中具有一个私有的readResolve()函数，这个函数可以让开发人员控制对象的反序列化。如果要杜绝对象在反序列化时重新生成对象，必须加入readResolve函数。而枚举则不存在这个问题。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mInstance;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>对于序列化，有两点需要注意：</p>
<ol>
<li><p>可序列化类中的字段类型不是Java的内置类型，那么该字段也需要实现Serializable接口</p>
</li>
<li><p>如果调整了可序列化类的内部结构，如新增，去除某个字段，但没有修改serialVersionUID,那么会引发java.io.InvalidClassException异常或者导致某个属性为0或者null。此时的最好方案是直接将serialVersionUID设置为0L，这样即使修改类的内部结构，反序列化也不会报错，只是新修改的字段会为0或者null。</p>
</li>
</ol>
<p>写法简单是枚举单例的最大优点。枚举在Java中与普通的类是一样的，不仅能够有字段，还能够有自己的方法。最重要的是默认枚举实例的创建是线程安全的，并且在任何情况下它都是一个单例。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line"></span><br><span class="line">	INSTANCE;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>使用容器实现单例模式</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonManager</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; objMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingletonManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String key, Object instance)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!objMap.containsKey(key)) &#123;</span><br><span class="line">			objMap.put(key, instance);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getService</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> objMap.get(key);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在程序的初始阶段，将多种单例类型注入到一个统一的管理类中，在使用时根据key获取对象。这种方式使得我们可以管理多种类型的单例，并且在使用时可以通过统一的接口进行获取操作，降低了用户的使用成本，也对用户隐藏具体实现，降低耦合度。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象的六大原则</title>
    <url>/2020/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="面向对象的六大原则"><a href="#面向对象的六大原则" class="headerlink" title="面向对象的六大原则"></a>面向对象的六大原则</h1><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>就一个类而言，应该仅有一个引起它变化的原因。</p>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>软件中的对象(类、模块、函数等)应该对于扩展是开放的，对于修改是封闭的。</p>
<p>遵循开闭原则的重要手段是通过抽象。</p>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p>所有引用基类的地方必须能透明地使用其子类的对象。</p>
<h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><blockquote>
<p>高层模块不应该依赖低层模块，两者都应该依赖其抽象</p>
<p>抽象不应该依赖细节</p>
<p>细节应该依赖抽象</p>
</blockquote>
<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>类之间的依赖应该建立在最小的接口上。</p>
<h2 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h2><p>一个类应该对其他对象有最少的了解。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>四大组件的工作过程</title>
    <url>/2020/01/09/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>个人博客</p>
<p><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="四大组件的工作过程"><a href="#四大组件的工作过程" class="headerlink" title="四大组件的工作过程"></a>四大组件的工作过程</h1><p><a href="/images/four_components.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/four_components.png" src="/img/loading.gif" class="lazyload"></a></p>
<blockquote>
<p>四大组件:Activity、Service、BroadcastReceiver、ContentProvider</p>
</blockquote>
<h2 id="四大组件的运行状态"><a href="#四大组件的运行状态" class="headerlink" title="四大组件的运行状态"></a>四大组件的运行状态</h2><p>Android的四大组件中除了BroadcastReceiver，其它三种组件必须在AndroidManifest中注册。对于BroadcastReceiver,既可以在AndroidManifest中注册，也可以通过代码注册。调用方式上，Activity、Service和BroadcastReceiver都需要借助Intent，而ContentProvider则不需要。</p>
<p>Activity是一种展示型组件。Activity的启动由Intent触发，Intent可以分为显示Intent和隐式Intent。</p>
<p>Service是一种计算型组件，它有两种状态：启动状态和绑定状态。Service虽然是运行在后台，但它本身是运行在主线程中。</p>
<p>BroadcastReceiver是一种消息型组件。它的注册有两种：静态注册和动态注册。</p>
<p>ContentProvider是一种数据共享型组件。它的内部需要实现增删改查这四种操作。这四个方法需要处理好线程同步。</p>
<h2 id="Activity的工作过程"><a href="#Activity的工作过程" class="headerlink" title="Activity的工作过程"></a>Activity的工作过程</h2><p>从Activity的startActivity方法开始分析，startActivity方法有几个重载，但最终都会调用startActivityForResult方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.startActivity(intent, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, @Nullable Bundle options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">            startActivityForResult(intent, -<span class="number">1</span>, options);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Note we want to go through this call for compatibility with</span></span><br><span class="line">            <span class="comment">// applications that may have overridden the method.</span></span><br><span class="line">            startActivityForResult(intent, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>startActivityForResult方法实现如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(@RequiresPermission Intent intent, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable Bundle options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            options = transferSpringboardActivityOptions(options);</span><br><span class="line">            Instrumentation.ActivityResult ar =</span><br><span class="line">                mInstrumentation.execStartActivity(</span><br><span class="line">                    <span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, <span class="keyword">this</span>,</span><br><span class="line">                    intent, requestCode, options);</span><br><span class="line">            <span class="keyword">if</span> (ar != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mMainThread.sendActivityResult(</span><br><span class="line">                    mToken, mEmbeddedID, requestCode, ar.getResultCode(),</span><br><span class="line">                    ar.getResultData());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// If this start is requesting a result, we can avoid making</span></span><br><span class="line">                <span class="comment">// the activity visible until the result is received.  Setting</span></span><br><span class="line">                <span class="comment">// this code during onCreate(Bundle savedInstanceState) or onResume() will keep the</span></span><br><span class="line">                <span class="comment">// activity hidden during this time, to avoid flickering.</span></span><br><span class="line">                <span class="comment">// This can only be done when a result is requested because</span></span><br><span class="line">                <span class="comment">// that guarantees we will get information back when the</span></span><br><span class="line">                <span class="comment">// activity is finished, no matter what happens to it.</span></span><br><span class="line">                mStartedActivity = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cancelInputsAndStartExitTransition(options);</span><br><span class="line">            <span class="comment">// TODO Consider clearing/flushing other event sources and events for child windows.</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode, options);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Note we want to go through this method for compatibility with</span></span><br><span class="line">                <span class="comment">// existing applications that may have overridden it.</span></span><br><span class="line">                mParent.startActivityFromChild(<span class="keyword">this</span>, intent, requestCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在mParent == null的分支里，会调用Instrumentation的execStartActivity方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Context who, IBinder contextThread, IBinder token, Activity target,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, <span class="keyword">int</span> requestCode, Bundle options)</span> </span>&#123;</span><br><span class="line">        IApplicationThread whoThread = (IApplicationThread) contextThread;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            intent.migrateExtraStreamToClipData();</span><br><span class="line">            intent.prepareToLeaveProcess(who);</span><br><span class="line">            <span class="keyword">int</span> result = ActivityManager.getService()</span><br><span class="line">                .startActivity(whoThread, who.getBasePackageName(), intent,</span><br><span class="line">                        intent.resolveTypeIfNeeded(who.getContentResolver()),</span><br><span class="line">                        token, target != <span class="keyword">null</span> ? target.mEmbeddedID : <span class="keyword">null</span>,</span><br><span class="line">                        requestCode, <span class="number">0</span>, <span class="keyword">null</span>, options);</span><br><span class="line">            checkStartActivityResult(result, intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failure from system"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，ActivityManager.getService()是一个单例,返回的是一个Binder对象。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IActivityManager <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IActivityManagerSingleton.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; IActivityManagerSingleton =</span><br><span class="line">            <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">final</span> IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE);</span><br><span class="line">                    <span class="keyword">final</span> IActivityManager am = IActivityManager.Stub.asInterface(b);</span><br><span class="line">                    <span class="keyword">return</span> am;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br></pre></td></tr></table></figure></div>

<p>最终启动Activity是由ActivityManagerService的startActivity方法实现。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</span><br><span class="line">                resultWho, requestCode, startFlags, profilerInfo, bOptions,</span><br><span class="line">                UserHandle.getCallingUserId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityAsUser</span><span class="params">(IApplicationThread caller, String callingPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        enforceNotIsolatedCaller(<span class="string">"startActivity"</span>);</span><br><span class="line">        userId = mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(),</span><br><span class="line">                userId, <span class="keyword">false</span>, ALLOW_FULL_ONLY, <span class="string">"startActivity"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Switch to user app stacks here.</span></span><br><span class="line">        <span class="keyword">return</span> mActivityStarter.startActivityMayWait(caller, -<span class="number">1</span>, callingPackage, intent,</span><br><span class="line">                resolvedType, <span class="keyword">null</span>, <span class="keyword">null</span>, resultTo, resultWho, requestCode, startFlags,</span><br><span class="line">                profilerInfo, <span class="keyword">null</span>, <span class="keyword">null</span>, bOptions, <span class="keyword">false</span>, userId, <span class="keyword">null</span>, <span class="string">"startActivityAsUser"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>Activity的启动转移到了ActivityStarter的startActivityMayWait方法里</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityMayWait</span><span class="params">(IApplicationThread caller, <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="function"><span class="params">            String callingPackage, Intent intent, String resolvedType,</span></span></span><br><span class="line"><span class="function"><span class="params">            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">            IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> startFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">            ProfilerInfo profilerInfo, WaitResult outResult,</span></span></span><br><span class="line"><span class="function"><span class="params">            Configuration globalConfig, Bundle bOptions, <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">            TaskRecord inTask, String reason)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">final</span> ActivityRecord[] outRecord = <span class="keyword">new</span> ActivityRecord[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> res = startActivityLocked(caller, intent, ephemeralIntent, resolvedType,</span><br><span class="line">                    aInfo, rInfo, voiceSession, voiceInteractor,</span><br><span class="line">                    resultTo, resultWho, requestCode, callingPid,</span><br><span class="line">                    callingUid, callingPackage, realCallingPid, realCallingUid, startFlags,</span><br><span class="line">                    options, ignoreTargetSecurity, componentSpecified, outRecord, inTask,</span><br><span class="line">                    reason);</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>startActivityMayWait方法会调用startActivityLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">startActivityLocked</span><span class="params">(IApplicationThread caller, Intent intent, Intent ephemeralIntent,</span></span></span><br><span class="line"><span class="function"><span class="params">            String resolvedType, ActivityInfo aInfo, ResolveInfo rInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">            IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="function"><span class="params">            String callingPackage, <span class="keyword">int</span> realCallingPid, <span class="keyword">int</span> realCallingUid, <span class="keyword">int</span> startFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">            ActivityOptions options, <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">boolean</span> componentSpecified,</span></span></span><br><span class="line"><span class="function"><span class="params">            ActivityRecord[] outActivity, TaskRecord inTask, String reason)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mLastStartActivityResult = startActivity(caller, intent, ephemeralIntent, resolvedType,</span><br><span class="line">                aInfo, rInfo, voiceSession, voiceInteractor, resultTo, resultWho, requestCode,</span><br><span class="line">                callingPid, callingUid, callingPackage, realCallingPid, realCallingUid, startFlags,</span><br><span class="line">                options, ignoreTargetSecurity, componentSpecified, mLastStartActivityRecord,</span><br><span class="line">                inTask);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在startActivityLocked方法里调用了startActivity方法,startActivity方法内又调用doPendingActivityLaunchesLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doPendingActivityLaunchesLocked</span><span class="params">(<span class="keyword">boolean</span> doResume)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!mPendingActivityLaunches.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">final</span> PendingActivityLaunch pal = mPendingActivityLaunches.remove(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> resume = doResume &amp;&amp; mPendingActivityLaunches.isEmpty();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                startActivity(pal.r, pal.sourceRecord, <span class="keyword">null</span>, <span class="keyword">null</span>, pal.startFlags, resume, <span class="keyword">null</span>,</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">null</span> <span class="comment">/*outRecords*/</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">"Exception during pending activity launch pal="</span> + pal, e);</span><br><span class="line">                pal.sendErrorResult(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> startFlags, <span class="keyword">boolean</span> doResume, ActivityOptions options, TaskRecord inTask,</span></span></span><br><span class="line"><span class="function"><span class="params">            ActivityRecord[] outActivity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = START_CANCELED;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mService.mWindowManager.deferSurfaceLayout();</span><br><span class="line">            result = startActivityUnchecked(r, sourceRecord, voiceSession, voiceInteractor,</span><br><span class="line">                    startFlags, doResume, options, inTask, outActivity);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// If we are not able to proceed, disassociate the activity from the task. Leaving an</span></span><br><span class="line">            <span class="comment">// activity in an incomplete state can lead to issues, such as performing operations</span></span><br><span class="line">            <span class="comment">// without a window container.</span></span><br><span class="line">            <span class="keyword">if</span> (!ActivityManager.isStartResultSuccessful(result)</span><br><span class="line">                    &amp;&amp; mStartActivity.getTask() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mStartActivity.getTask().removeActivity(mStartActivity);</span><br><span class="line">            &#125;</span><br><span class="line">            mService.mWindowManager.continueSurfaceLayout();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        postStartActivityProcessing(r, result, mSupervisor.getLastStack().mStackId,  mSourceRecord,</span><br><span class="line">                mTargetStack);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>startActivity调用startActivityUnchecked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivityUnchecked</span><span class="params">(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> startFlags, <span class="keyword">boolean</span> doResume, ActivityOptions options, TaskRecord inTask,</span></span></span><br><span class="line"><span class="function"><span class="params">            ActivityRecord[] outActivity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">if</span> (dontStart) &#123;</span><br><span class="line">            topStack.mLastPausedActivity = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (mDoResume) &#123;</span><br><span class="line">                mSupervisor.resumeFocusedStackTopActivityLocked();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>startActivityUnchecked调用ActivityStackSupervisor中的resumeFocusedStackTopActivityLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeFocusedStackTopActivityLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resumeFocusedStackTopActivityLocked(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeFocusedStackTopActivityLocked</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!readyToResume()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (targetStack != <span class="keyword">null</span> &amp;&amp; isFocusedStack(targetStack)) &#123;</span><br><span class="line">            <span class="keyword">return</span> targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ActivityRecord r = mFocusedStack.topRunningActivityLocked();</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="keyword">null</span> || r.state != RESUMED) &#123;</span><br><span class="line">            mFocusedStack.resumeTopActivityUncheckedLocked(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.state == RESUMED) &#123;</span><br><span class="line">            <span class="comment">// Kick off any lingering app transitions form the MoveTaskToFront operation.</span></span><br><span class="line">            mFocusedStack.executeAppTransition(targetOptions);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>resumeFocusedStackTopActivityLocked调用了ActivityStack的resumeTopActivityUncheckedLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeTopActivityUncheckedLocked</span><span class="params">(ActivityRecord prev, ActivityOptions options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mStackSupervisor.inResumeTopActivity) &#123;</span><br><span class="line">            <span class="comment">// Don't even start recursing.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Protect against recursion.</span></span><br><span class="line">            mStackSupervisor.inResumeTopActivity = <span class="keyword">true</span>;</span><br><span class="line">            result = resumeTopActivityInnerLocked(prev, options);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mStackSupervisor.inResumeTopActivity = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// When resuming the top activity, it may be necessary to pause the top activity (for</span></span><br><span class="line">        <span class="comment">// example, returning to the lock screen. We suppress the normal pause logic in</span></span><br><span class="line">        <span class="comment">// &#123;@link #resumeTopActivityUncheckedLocked&#125;, since the top activity is resumed at the end.</span></span><br><span class="line">        <span class="comment">// We call the &#123;@link ActivityStackSupervisor#checkReadyForSleepLocked&#125; again here to ensure</span></span><br><span class="line">        <span class="comment">// any necessary pause logic occurs. In the case where the Activity will be shown regardless</span></span><br><span class="line">        <span class="comment">// of the lock screen, the call to &#123;@link ActivityStackSupervisor#checkReadyForSleepLocked&#125;</span></span><br><span class="line">        <span class="comment">// is skipped.</span></span><br><span class="line">        <span class="keyword">final</span> ActivityRecord next = topRunningActivityLocked(<span class="keyword">true</span> <span class="comment">/* focusableOnly */</span>);</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span> || !next.canTurnScreenOn()) &#123;</span><br><span class="line">            checkReadyForSleep();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>resumeTopActivityInnerLocked方法最终调用ActivityStackSupervisor中的startSpecificActivityLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">resumeTopActivityInnerLocked</span><span class="params">(ActivityRecord prev, ActivityOptions options)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mStackSupervisor.startSpecificActivityLocked(next, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>resumeTopActivityInnerLocked方法调用realStartActivityLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startSpecificActivityLocked</span><span class="params">(ActivityRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Is this activity's application already running?</span></span><br><span class="line">        ProcessRecord app = mService.getProcessRecordLocked(r.processName,</span><br><span class="line">                r.info.applicationInfo.uid, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        r.getStack().setLaunchTime(r);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (app != <span class="keyword">null</span> &amp;&amp; app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((r.info.flags&amp;ActivityInfo.FLAG_MULTIPROCESS) == <span class="number">0</span></span><br><span class="line">                        || !<span class="string">"android"</span>.equals(r.info.packageName)) &#123;</span><br><span class="line">                    <span class="comment">// Don't add this if it is a platform component that is marked</span></span><br><span class="line">                    <span class="comment">// to run in multiple processes, because this is actually</span></span><br><span class="line">                    <span class="comment">// part of the framework so doesn't make sense to track as a</span></span><br><span class="line">                    <span class="comment">// separate apk in the process.</span></span><br><span class="line">                    app.addPackage(r.info.packageName, r.info.applicationInfo.versionCode,</span><br><span class="line">                            mService.mProcessStats);</span><br><span class="line">                &#125;</span><br><span class="line">                realStartActivityLocked(r, app, andResume, checkConfig);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"Exception when starting activity "</span></span><br><span class="line">                        + r.intent.getComponent().flattenToShortString(), e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If a dead object exception was thrown -- fall through to</span></span><br><span class="line">            <span class="comment">// restart the application.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class="keyword">true</span>, <span class="number">0</span>,</span><br><span class="line">                <span class="string">"activity"</span>, r.intent.getComponent(), <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在realStartActivityLocked方法中，通过ProcessRecord的thread来启动Activity。而thread是一个IApplicationThread类型的对象，它的具体实现为ActivityThread中的内部类ApplicationThread。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">realStartActivityLocked</span><span class="params">(ActivityRecord r, ProcessRecord app,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                        app.thread.scheduleLaunchActivity(<span class="keyword">new</span> Intent(r.intent), r.appToken,</span><br><span class="line">                        System.identityHashCode(r), r.info,</span><br><span class="line">                        <span class="comment">// <span class="doctag">TODO:</span> Have this take the merged configuration instead of separate global</span></span><br><span class="line">                        <span class="comment">// and override configs.</span></span><br><span class="line">                        mergedConfiguration.getGlobalConfiguration(),</span><br><span class="line">                        mergedConfiguration.getOverrideConfiguration(), r.compat,</span><br><span class="line">                        r.launchedFromPackage, task.voiceInteractor, app.repProcState, r.icicle,</span><br><span class="line">                        r.persistentState, results, newIntents, !andResume,</span><br><span class="line">                        mService.isNextTransitionForward(), profilerInfo);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleLaunchActivity</span><span class="params">(Intent intent, IBinder token, <span class="keyword">int</span> ident,</span></span></span><br><span class="line"><span class="function"><span class="params">                ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">                CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span> procState, Bundle state, PersistableBundle persistentState,</span></span></span><br><span class="line"><span class="function"><span class="params">                List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> notResumed, <span class="keyword">boolean</span> isForward, ProfilerInfo profilerInfo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            updateProcessState(procState, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            ActivityClientRecord r = <span class="keyword">new</span> ActivityClientRecord();</span><br><span class="line"></span><br><span class="line">            r.token = token;</span><br><span class="line">            r.ident = ident;</span><br><span class="line">            r.intent = intent;</span><br><span class="line">            r.referrer = referrer;</span><br><span class="line">            r.voiceInteractor = voiceInteractor;</span><br><span class="line">            r.activityInfo = info;</span><br><span class="line">            r.compatInfo = compatInfo;</span><br><span class="line">            r.state = state;</span><br><span class="line">            r.persistentState = persistentState;</span><br><span class="line"></span><br><span class="line">            r.pendingResults = pendingResults;</span><br><span class="line">            r.pendingIntents = pendingNewIntents;</span><br><span class="line"></span><br><span class="line">            r.startsNotResumed = notResumed;</span><br><span class="line">            r.isForward = isForward;</span><br><span class="line"></span><br><span class="line">            r.profilerInfo = profilerInfo;</span><br><span class="line"></span><br><span class="line">            r.overrideConfig = overrideConfig;</span><br><span class="line">            updatePendingConfiguration(curConfig);</span><br><span class="line"></span><br><span class="line">            sendMessage(H.LAUNCH_ACTIVITY, r);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>到这里，Activity的启动已经转到了ApplicationThread中。在scheduleLaunchActivity方法中，发了一个启动的消息LAUNCH_ACTIVITY出去。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">"&gt;&gt;&gt; handling: "</span> + codeToString(msg.what));</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> LAUNCH_ACTIVITY: &#123;</span><br><span class="line">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</span><br><span class="line">                    <span class="keyword">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</span><br><span class="line"></span><br><span class="line">                    r.packageInfo = getPackageInfoNoCheck(</span><br><span class="line">                            r.activityInfo.applicationInfo, r.compatInfo);</span><br><span class="line">                    handleLaunchActivity(r, <span class="keyword">null</span>, <span class="string">"LAUNCH_ACTIVITY"</span>);</span><br><span class="line">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在Handler中，调用了ActivityThread的handleLaunchActivity方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent, String reason)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        WindowManagerGlobal.initialize();</span><br><span class="line"></span><br><span class="line">        Activity a = performLaunchActivity(r, customIntent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</span><br><span class="line">            r.createdConfig = <span class="keyword">new</span> Configuration(mConfiguration);</span><br><span class="line">            reportSizeConfigurations(r);</span><br><span class="line">            Bundle oldState = r.state;</span><br><span class="line">            handleResumeActivity(r.token, <span class="keyword">false</span>, r.isForward,</span><br><span class="line">                    !r.activity.mFinished &amp;&amp; !r.startsNotResumed, r.lastProcessedSeq, reason);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!r.activity.mFinished &amp;&amp; r.startsNotResumed) &#123;</span><br><span class="line">                <span class="comment">// The activity manager actually wants this one to start out paused, because it</span></span><br><span class="line">                <span class="comment">// needs to be visible but isn't in the foreground. We accomplish this by going</span></span><br><span class="line">                <span class="comment">// through the normal startup (because activities expect to go through onResume()</span></span><br><span class="line">                <span class="comment">// the first time they run, before their window is displayed), and then pausing it.</span></span><br><span class="line">                <span class="comment">// However, in this case we do -not- need to do the full pause cycle (of freezing</span></span><br><span class="line">                <span class="comment">// and such) because the activity manager assumes it can just retain the current</span></span><br><span class="line">                <span class="comment">// state it has.</span></span><br><span class="line">                performPauseActivityIfNeeded(r, reason);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// We need to keep around the original state, in case we need to be created again.</span></span><br><span class="line">                <span class="comment">// But we only do this for pre-Honeycomb apps, which always save their state when</span></span><br><span class="line">                <span class="comment">// pausing, so we can not have them save their state when restarting from a paused</span></span><br><span class="line">                <span class="comment">// state. For HC and later, we want to (and can) let the state be saved as the</span></span><br><span class="line">                <span class="comment">// normal part of stopping the activity.</span></span><br><span class="line">                <span class="keyword">if</span> (r.isPreHoneycomb()) &#123;</span><br><span class="line">                    r.state = oldState;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If there was an error, for any reason, tell the activity manager to stop us.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ActivityManager.getService()</span><br><span class="line">                    .finishActivity(r.token, Activity.RESULT_CANCELED, <span class="keyword">null</span>,</span><br><span class="line">                            Activity.DONT_FINISH_TASK_WITH_ACTIVITY);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在performLaunchActivity方法中，完成了Activity对象的创建和启动过程。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        ContextImpl appContext = createBaseContextForActivity(r);</span><br><span class="line">        Activity activity = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.ClassLoader cl = appContext.getClassLoader();</span><br><span class="line">            activity = mInstrumentation.newActivity(</span><br><span class="line">                    cl, component.getClassName(), r.intent);</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to instantiate activity "</span> + component</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Application app = r.packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                Window window = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (r.mPendingRemoveWindow != <span class="keyword">null</span> &amp;&amp; r.mPreserveWindow) &#123;</span><br><span class="line">                    window = r.mPendingRemoveWindow;</span><br><span class="line">                    r.mPendingRemoveWindow = <span class="keyword">null</span>;</span><br><span class="line">                    r.mPendingRemoveWindowManager = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                appContext.setOuterContext(activity);</span><br><span class="line">                activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</span><br><span class="line">                        r.ident, app, r.intent, r.activityInfo, title, r.parent,</span><br><span class="line">                        r.embeddedID, r.lastNonConfigurationInstances, config,</span><br><span class="line">                        r.referrer, r.voiceInteractor, window, r.configCallback);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                    mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mInstrumentation.callActivityOnCreate(activity, r.state);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!activity.mCalled) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</span><br><span class="line">                        <span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</span><br><span class="line">                        <span class="string">" did not call through to super.onCreate()"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                r.activity = activity;</span><br><span class="line">                r.stopped = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">                    activity.performStart();</span><br><span class="line">                    r.stopped = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (r.state != <span class="keyword">null</span> || r.persistentState != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,</span><br><span class="line">                                    r.persistentState);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">                    activity.mCalled = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                        mInstrumentation.callActivityOnPostCreate(activity, r.state,</span><br><span class="line">                                r.persistentState);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mInstrumentation.callActivityOnPostCreate(activity, r.state);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!activity.mCalled) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</span><br><span class="line">                            <span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</span><br><span class="line">                            <span class="string">" did not call through to super.onPostCreate()"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            r.paused = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            mActivities.put(r.token, r);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to start activity "</span> + component</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> activity;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>Activity启动时序图</p>
<p><a href="/images/activity_start.jpg" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/activity_start.jpg" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="Service的工作过程"><a href="#Service的工作过程" class="headerlink" title="Service的工作过程"></a>Service的工作过程</h2><h3 id="Service的启动过程"><a href="#Service的启动过程" class="headerlink" title="Service的启动过程"></a>Service的启动过程</h3><p>Service的启动是从ContextWrapper的startService开始</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(Intent service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBase.startService(service);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>mBase的具体类型是ContextImpl,Activity创建时会通过attach将一个ContextImpl对象关联起来。startService方法会调用startServiceCommon方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(Intent service)</span> </span>&#123;</span><br><span class="line">        warnIfCallingFromSystemProcess();</span><br><span class="line">        <span class="keyword">return</span> startServiceCommon(service, <span class="keyword">false</span>, mUser);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>startServiceCommon对象会调用ActivityManagerService的startService方法,这是一个远程调用的过程。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ComponentName <span class="title">startServiceCommon</span><span class="params">(Intent service, <span class="keyword">boolean</span> requireForeground,</span></span></span><br><span class="line"><span class="function"><span class="params">            UserHandle user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        ComponentName cn = ActivityManager.getService().startService(</span><br><span class="line">                mMainThread.getApplicationThread(), service, service.resolveTypeIfNeeded(</span><br><span class="line">                            getContentResolver()), requireForeground,</span><br><span class="line">                            getOpPackageName(), user.getIdentifier());</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>ActivityManagerService的startService方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ComponentName <span class="title">startService</span><span class="params">(IApplicationThread caller, Intent service,</span></span></span><br><span class="line"><span class="function"><span class="params">            String resolvedType, <span class="keyword">boolean</span> requireForeground, String callingPackage, <span class="keyword">int</span> userId)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        res = mServices.startServiceLocked(caller, service,</span><br><span class="line">                        resolvedType, callingPid, callingUid,</span><br><span class="line">                        requireForeground, callingPackage, userId);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>startService方法会调用ActiveServices的startServiceLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ComponentName <span class="title">startServiceLocked</span><span class="params">(IApplicationThread caller, Intent service, String resolvedType,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid, <span class="keyword">boolean</span> fgRequired, String callingPackage, <span class="keyword">final</span> <span class="keyword">int</span> userId)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        ComponentName cmp = startServiceInnerLocked(smap, service, r, callerFg, addToStarting);</span><br><span class="line">        <span class="keyword">return</span> cmp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在startServiceLocked方法里会调用startServiceInnerLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ComponentName <span class="title">startServiceInnerLocked</span><span class="params">(ServiceMap smap, Intent service, ServiceRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> callerFg, <span class="keyword">boolean</span> addToStarting)</span> <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        String error = bringUpServiceLocked(r, service.getFlags(), callerFg, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (error != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ComponentName(<span class="string">"!!"</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>startServiceInnerLocked里调用了bringUpServiceLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">bringUpServiceLocked</span><span class="params">(ServiceRecord r, <span class="keyword">int</span> intentFlags, <span class="keyword">boolean</span> execInFg,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> whileRestarting, <span class="keyword">boolean</span> permissionsReviewRequired)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        realStartServiceLocked(r, app, execInFg);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>bringUpServiceLocked里调用realStartServiceLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">realStartServiceLocked</span><span class="params">(ServiceRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">            ProcessRecord app, <span class="keyword">boolean</span> execInFg)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//创建Service</span></span><br><span class="line">        app.thread.scheduleCreateService(r, r.serviceInfo,</span><br><span class="line">                    mAm.compatibilityInfoForPackageLocked(r.serviceInfo.applicationInfo),</span><br><span class="line">                    app.repProcState);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//调用Service的start方法</span></span><br><span class="line">        sendServiceArgsLocked(r, execInFg, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>realStartServiceLocked调用ApplicationThread中的scheduleCreateService方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleCreateService</span><span class="params">(IBinder token,</span></span></span><br><span class="line"><span class="function"><span class="params">                ServiceInfo info, CompatibilityInfo compatInfo, <span class="keyword">int</span> processState)</span> </span>&#123;</span><br><span class="line">            updateProcessState(processState, <span class="keyword">false</span>);</span><br><span class="line">            CreateServiceData s = <span class="keyword">new</span> CreateServiceData();</span><br><span class="line">            s.token = token;</span><br><span class="line">            s.info = info;</span><br><span class="line">            s.compatInfo = compatInfo;</span><br><span class="line"></span><br><span class="line">            sendMessage(H.CREATE_SERVICE, s);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>在scheduleCreateService方法里，发了一个创建服务的消息出去。Handler处理CREATE_SERVICE的消息，并通过ActivityThread的handleCreateService方法来完成Service的启动。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleCreateService</span><span class="params">(CreateServiceData data)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If we are getting ready to gc after going to the background, well</span></span><br><span class="line">        <span class="comment">// we are back active so skip it.</span></span><br><span class="line">        unscheduleGcIdler();</span><br><span class="line"></span><br><span class="line">        LoadedApk packageInfo = getPackageInfoNoCheck(</span><br><span class="line">                data.info.applicationInfo, data.compatInfo);</span><br><span class="line">        Service service = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.ClassLoader cl = packageInfo.getClassLoader();</span><br><span class="line">            service = (Service) cl.loadClass(data.info.name).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(service, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to instantiate service "</span> + data.info.name</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (localLOGV) Slog.v(TAG, <span class="string">"Creating service "</span> + data.info.name);</span><br><span class="line"></span><br><span class="line">            ContextImpl context = ContextImpl.createAppContext(<span class="keyword">this</span>, packageInfo);</span><br><span class="line">            context.setOuterContext(service);</span><br><span class="line"></span><br><span class="line">            Application app = packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line">            service.attach(context, <span class="keyword">this</span>, data.info.name, data.token, app,</span><br><span class="line">                    ActivityManager.getService());</span><br><span class="line">            service.onCreate();</span><br><span class="line">            mServices.put(data.token, service);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ActivityManager.getService().serviceDoneExecuting(</span><br><span class="line">                        data.token, SERVICE_DONE_EXECUTING_ANON, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(service, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to create service "</span> + data.info.name</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>Service启动的时序图</p>
<p><a href="/images/service_start.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/service_start.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="Service的绑定过程"><a href="#Service的绑定过程" class="headerlink" title="Service的绑定过程"></a>Service的绑定过程</h3><p>Service的绑定是从ContextWrapper的bindService方法开始的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bindService</span><span class="params">(Intent service, ServiceConnection conn,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBase.bindService(service, conn, flags);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>然后调用ContextImpl的bindService方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bindService</span><span class="params">(Intent service, ServiceConnection conn,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        warnIfCallingFromSystemProcess();</span><br><span class="line">        <span class="keyword">return</span> bindServiceCommon(service, conn, flags, mMainThread.getHandler(),</span><br><span class="line">                Process.myUserHandle());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>bindService调用bindServiceCommon方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">bindServiceCommon</span><span class="params">(Intent service, ServiceConnection conn, <span class="keyword">int</span> flags, Handler</span></span></span><br><span class="line"><span class="function"><span class="params">            handler, UserHandle user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">int</span> res = ActivityManager.getService().bindService(</span><br><span class="line">                mMainThread.getApplicationThread(), getActivityToken(), service,</span><br><span class="line">                service.resolveTypeIfNeeded(getContentResolver()),</span><br><span class="line">                sd, flags, getOpPackageName(), user.getIdentifier());</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>bindServiceCommon调用ActivityManagerService的bindService方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bindService</span><span class="params">(IApplicationThread caller, IBinder token, Intent service,</span></span></span><br><span class="line"><span class="function"><span class="params">            String resolvedType, IServiceConnection connection, <span class="keyword">int</span> flags, String callingPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> mServices.bindServiceLocked(caller, token, service,</span><br><span class="line">                    resolvedType, connection, flags, callingPackage, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>bindService调用ActiveServices中的bindServiceLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bindServiceLocked</span><span class="params">(IApplicationThread caller, IBinder token, Intent service,</span></span></span><br><span class="line"><span class="function"><span class="params">            String resolvedType, <span class="keyword">final</span> IServiceConnection connection, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">            String callingPackage, <span class="keyword">final</span> <span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">         bringUpServiceLocked(serviceRecord,serviceIntent.getFlags(),callerFg, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>bindServiceLocked调用bringUpServiceLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">bringUpServiceLocked</span><span class="params">(ServiceRecord r, <span class="keyword">int</span> intentFlags, <span class="keyword">boolean</span> execInFg,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> whileRestarting, <span class="keyword">boolean</span> permissionsReviewRequired)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        realStartServiceLocked(r, app, execInFg);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>bringUpServiceLocked调用realStartServiceLocked方法。这个过程和之前的启动过程已经是一样的。不同的是，Service绑定过程还会调用ApplicationThread的scheduleBindService方法,这个过程是在ActiveServices的requestServiceBindingLocked方法中</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">requestServiceBindingLocked</span><span class="params">(ServiceRecord r, IntentBindRecord i,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> execInFg, <span class="keyword">boolean</span> rebind)</span> <span class="keyword">throws</span> TransactionTooLargeException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r.app == <span class="keyword">null</span> || r.app.thread == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// If service is not currently running, can't yet bind.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_SERVICE) Slog.d(TAG_SERVICE, <span class="string">"requestBind "</span> + i + <span class="string">": requested="</span> + i.requested</span><br><span class="line">                + <span class="string">" rebind="</span> + rebind);</span><br><span class="line">        <span class="keyword">if</span> ((!i.requested || rebind) &amp;&amp; i.apps.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bumpServiceExecutingLocked(r, execInFg, <span class="string">"bind"</span>);</span><br><span class="line">                r.app.forceProcessStateUpTo(ActivityManager.PROCESS_STATE_SERVICE);</span><br><span class="line">                r.app.thread.scheduleBindService(r, i.intent.getIntent(), rebind,</span><br><span class="line">                        r.app.repProcState);</span><br><span class="line">                <span class="keyword">if</span> (!rebind) &#123;</span><br><span class="line">                    i.requested = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i.hasBound = <span class="keyword">true</span>;</span><br><span class="line">                i.doRebind = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (TransactionTooLargeException e) &#123;</span><br><span class="line">                <span class="comment">// Keep the executeNesting count accurate.</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"Crashed while binding "</span> + r, e);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> inDestroying = mDestroyingServices.contains(r);</span><br><span class="line">                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_SERVICE) Slog.v(TAG_SERVICE, <span class="string">"Crashed while binding "</span> + r);</span><br><span class="line">                <span class="comment">// Keep the executeNesting count accurate.</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> inDestroying = mDestroyingServices.contains(r);</span><br><span class="line">                serviceDoneExecutingLocked(r, inDestroying, inDestroying);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleBindService</span><span class="params">(IBinder token, Intent intent,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> rebind, <span class="keyword">int</span> processState)</span> </span>&#123;</span><br><span class="line">            updateProcessState(processState, <span class="keyword">false</span>);</span><br><span class="line">            BindServiceData s = <span class="keyword">new</span> BindServiceData();</span><br><span class="line">            s.token = token;</span><br><span class="line">            s.intent = intent;</span><br><span class="line">            s.rebind = rebind;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SERVICE)</span><br><span class="line">                Slog.v(TAG, <span class="string">"scheduleBindService token="</span> + token + <span class="string">" intent="</span> + intent + <span class="string">" uid="</span></span><br><span class="line">                        + Binder.getCallingUid() + <span class="string">" pid="</span> + Binder.getCallingPid());</span><br><span class="line">            sendMessage(H.BIND_SERVICE, s);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>在scheduleBindService方法里，发送一个绑定服务的消息。在ActivityThread里调用handleBindService方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleBindService</span><span class="params">(BindServiceData data)</span> </span>&#123;</span><br><span class="line">        Service s = mServices.get(data.token);</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_SERVICE)</span><br><span class="line">            Slog.v(TAG, <span class="string">"handleBindService s="</span> + s + <span class="string">" rebind="</span> + data.rebind);</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                data.intent.setExtrasClassLoader(s.getClassLoader());</span><br><span class="line">                data.intent.prepareToEnterProcess();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!data.rebind) &#123;</span><br><span class="line">                        IBinder binder = s.onBind(data.intent);</span><br><span class="line">                        ActivityManager.getService().publishService(</span><br><span class="line">                                data.token, data.intent, binder);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        s.onRebind(data.intent);</span><br><span class="line">                        ActivityManager.getService().serviceDoneExecuting(</span><br><span class="line">                                data.token, SERVICE_DONE_EXECUTING_ANON, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ensureJitEnabled();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mInstrumentation.onException(s, e)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                            <span class="string">"Unable to bind to service "</span> + s</span><br><span class="line">                            + <span class="string">" with "</span> + data.intent + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>服务的绑定时序图:</p>
<p><a href="/images/service_bind.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/service_bind.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="BroadcastReceiver的工作过程"><a href="#BroadcastReceiver的工作过程" class="headerlink" title="BroadcastReceiver的工作过程"></a>BroadcastReceiver的工作过程</h2><h3 id="广播的注册过程"><a href="#广播的注册过程" class="headerlink" title="广播的注册过程"></a>广播的注册过程</h3><p>广播的注册分为静态注册和动态注册，其中静态注册的广播在应用安装时由系统自动完成注册。这里只分析广播的动态注册过程。动态注册是从ContextWrapper的registerReceiver方法开始的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">registerReceiver</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        BroadcastReceiver receiver, IntentFilter filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBase.registerReceiver(receiver, filter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>registerReceiver调用ContextImpl中的registerReceiver方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">registerReceiver</span><span class="params">(BroadcastReceiver receiver, IntentFilter filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registerReceiver(receiver, filter, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>registerReceiver再调用内部的registerReceiver方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">registerReceiver</span><span class="params">(BroadcastReceiver receiver, IntentFilter filter,</span></span></span><br><span class="line"><span class="function"><span class="params">            String broadcastPermission, Handler scheduler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> registerReceiverInternal(receiver, getUserId(),</span><br><span class="line">                filter, broadcastPermission, scheduler, getOuterContext(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>registerReceiver会调用registerReceiverInternal方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Intent <span class="title">registerReceiverInternal</span><span class="params">(BroadcastReceiver receiver, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">            IntentFilter filter, String broadcastPermission,</span></span></span><br><span class="line"><span class="function"><span class="params">            Handler scheduler, Context context, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Intent intent = ActivityManager.getService().registerReceiver(</span><br><span class="line">                    mMainThread.getApplicationThread(), mBasePackageName, rd, filter,</span><br><span class="line">                    broadcastPermission, userId, flags);</span><br><span class="line">            <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                intent.setExtrasClassLoader(getClassLoader());</span><br><span class="line">                intent.prepareToEnterProcess();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> intent;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>registerReceiverInternal调用了AMS的registerReceiver方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">registerReceiver</span><span class="params">(IApplicationThread caller, String callerPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">            IIntentReceiver receiver, IntentFilter filter, String permission, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            BroadcastFilter bf = <span class="keyword">new</span> BroadcastFilter(filter, rl, callerPackage,</span><br><span class="line">                    permission, callingUid, userId, instantApp, visibleToInstantApps);</span><br><span class="line">            rl.add(bf);</span><br><span class="line">            <span class="keyword">if</span> (!bf.debugCheck()) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"==&gt; For Dynamic broadcast"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mReceiverResolver.addFilter(bf);</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">return</span> sticky;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="广播的发送和接收过程"><a href="#广播的发送和接收过程" class="headerlink" title="广播的发送和接收过程"></a>广播的发送和接收过程</h3><p>广播的发送是通过ContextWrapper的sendBroadcast方法实现的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBroadcast</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        mBase.sendBroadcast(intent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>sendBroadcast调用了ContextImpl中的sendBroadcast方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBroadcast</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        warnIfCallingFromSystemProcess();</span><br><span class="line">        String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            intent.prepareToLeaveProcess(<span class="keyword">this</span>);</span><br><span class="line">            ActivityManager.getService().broadcastIntent(</span><br><span class="line">                    mMainThread.getApplicationThread(), intent, resolvedType, <span class="keyword">null</span>,</span><br><span class="line">                    Activity.RESULT_OK, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, AppOpsManager.OP_NONE, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,</span><br><span class="line">                    getUserId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>sendBroadcast调用了AMS的broadcastIntent方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">broadcastIntent</span><span class="params">(IApplicationThread caller,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, String resolvedType, IIntentReceiver resultTo,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> resultCode, String resultData, Bundle resultExtras,</span></span></span><br><span class="line"><span class="function"><span class="params">            String[] requiredPermissions, <span class="keyword">int</span> appOp, Bundle bOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> serialized, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        enforceNotIsolatedCaller(<span class="string">"broadcastIntent"</span>);</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            intent = verifyBroadcastLocked(intent);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> ProcessRecord callerApp = getRecordForAppLocked(caller);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">            <span class="keyword">int</span> res = broadcastIntentLocked(callerApp,</span><br><span class="line">                    callerApp != <span class="keyword">null</span> ? callerApp.info.packageName : <span class="keyword">null</span>,</span><br><span class="line">                    intent, resolvedType, resultTo, resultCode, resultData, resultExtras,</span><br><span class="line">                    requiredPermissions, appOp, bOptions, serialized, sticky,</span><br><span class="line">                    callingPid, callingUid, userId);</span><br><span class="line">            Binder.restoreCallingIdentity(origId);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>broadcastIntent调用broadcastIntentLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">broadcastIntentLocked</span><span class="params">(ProcessRecord callerApp,</span></span></span><br><span class="line"><span class="function"><span class="params">            String callerPackage, Intent intent, String resolvedType,</span></span></span><br><span class="line"><span class="function"><span class="params">            IIntentReceiver resultTo, <span class="keyword">int</span> resultCode, String resultData,</span></span></span><br><span class="line"><span class="function"><span class="params">            Bundle resultExtras, String[] requiredPermissions, <span class="keyword">int</span> appOp, Bundle bOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                queue.enqueueOrderedBroadcastLocked(r);</span><br><span class="line">                queue.scheduleBroadcastsLocked();</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>broadcastIntentLocked调用了BroadcastQueue的enqueueOrderedBroadcastLocked将广播添加到队列中，通过BroadcastQueue的scheduleBroadcastsLocked来处理队列中的广播。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleBroadcastsLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_BROADCAST) Slog.v(TAG_BROADCAST, <span class="string">"Schedule broadcasts ["</span></span><br><span class="line">                + mQueueName + <span class="string">"]: current="</span></span><br><span class="line">                + mBroadcastsScheduled);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mBroadcastsScheduled) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mHandler.sendMessage(mHandler.obtainMessage(BROADCAST_INTENT_MSG, <span class="keyword">this</span>));</span><br><span class="line">        mBroadcastsScheduled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在scheduleBroadcastsLocked方法中，通过Handler发送了一个BROADCAST_INTENT_MSG的消息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> BROADCAST_INTENT_MSG: &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_BROADCAST) Slog.v(</span><br><span class="line">                            TAG_BROADCAST, <span class="string">"Received BROADCAST_INTENT_MSG"</span>);</span><br><span class="line">                    processNextBroadcast(<span class="keyword">true</span>);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> BROADCAST_TIMEOUT_MSG: &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (mService) &#123;</span><br><span class="line">                        broadcastTimeoutLocked(<span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>在Handler的handleMessage方法中处理消息,调用了processNextBroadcast方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processNextBroadcast</span><span class="params">(<span class="keyword">boolean</span> fromMsg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        deliverToRegisteredReceiverLocked(r, filter, r.ordered, recIdx);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>processNextBroadcast方法调用deliverToRegisteredReceiverLocked</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deliverToRegisteredReceiverLocked</span><span class="params">(BroadcastRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">            BroadcastFilter filter, <span class="keyword">boolean</span> ordered, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        performReceiveLocked(filter.receiverList.app, filter.receiverList.receiver,</span><br><span class="line">                        <span class="keyword">new</span> Intent(r.intent), r.resultCode, r.resultData,</span><br><span class="line">                        r.resultExtras, r.ordered, r.initialSticky, r.userId);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>deliverToRegisteredReceiverLocked调用performReceiveLocked</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">performReceiveLocked</span><span class="params">(ProcessRecord app, IIntentReceiver receiver,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, <span class="keyword">int</span> resultCode, String data, Bundle extras,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="comment">// Send the intent to the receiver asynchronously using one-way binder calls.</span></span><br><span class="line">        <span class="keyword">if</span> (app != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If we have an app thread, do the call through that so it is</span></span><br><span class="line">                <span class="comment">// correctly ordered with other one-way calls.</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    app.thread.scheduleRegisteredReceiver(receiver, intent, resultCode,</span><br><span class="line">                            data, extras, ordered, sticky, sendingUser, app.repProcState);</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> Uncomment this when (b/28322359) is fixed and we aren't getting</span></span><br><span class="line">                <span class="comment">// DeadObjectException when the process isn't actually dead.</span></span><br><span class="line">                <span class="comment">//&#125; catch (DeadObjectException ex) &#123;</span></span><br><span class="line">                <span class="comment">// Failed to call into the process.  It's dying so just let it die and move on.</span></span><br><span class="line">                <span class="comment">//    throw ex;</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                    <span class="comment">// Failed to call into the process. It's either dying or wedged. Kill it gently.</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (mService) &#123;</span><br><span class="line">                        Slog.w(TAG, <span class="string">"Can't deliver broadcast to "</span> + app.processName</span><br><span class="line">                                + <span class="string">" (pid "</span> + app.pid + <span class="string">"). Crashing it."</span>);</span><br><span class="line">                        app.scheduleCrash(<span class="string">"can't deliver broadcast"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Application has died. Receiver doesn't exist.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException(<span class="string">"app.thread must not be null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            receiver.performReceive(intent, resultCode, data, extras, ordered,</span><br><span class="line">                    sticky, sendingUser);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>performReceiveLocked调用ApplicationThread的scheduleRegisteredReceiver方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleRegisteredReceiver</span><span class="params">(IIntentReceiver receiver, Intent intent,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span> resultCode, String dataStr, Bundle extras, <span class="keyword">boolean</span> ordered,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser, <span class="keyword">int</span> processState)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            updateProcessState(processState, <span class="keyword">false</span>);</span><br><span class="line">            receiver.performReceive(intent, resultCode, dataStr, extras, ordered,</span><br><span class="line">                    sticky, sendingUser);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>scheduleRegisteredReceiver里调用LoadedApk的内部类ReceiverDispatcher中的performReceive方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performReceive</span><span class="params">(Intent intent, <span class="keyword">int</span> resultCode, String data, Bundle extras, <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser)</span> </span>&#123;</span><br><span class="line">                LoadedApk.ReceiverDispatcher rd;</span><br><span class="line">                <span class="keyword">if</span> (intent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Log.wtf(<span class="string">"LoadedApk"</span>, <span class="string">"Null intent received"</span>);</span><br><span class="line">                    rd = <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    rd = (LoadedApk.ReceiverDispatcher)<span class="keyword">this</span>.mDispatcher.get();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rd != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    rd.performReceive(intent, resultCode, data, extras, ordered, sticky, sendingUser);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    IActivityManager mgr = ActivityManagerNative.getDefault();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (extras != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            extras.setAllowFds(<span class="keyword">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        mgr.finishReceiver(<span class="keyword">this</span>, resultCode, data, extras, <span class="keyword">false</span>, intent.getFlags());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException var11) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> var11.rethrowFromSystemServer();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<p>performReceive调用performReceive的重载</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performReceive</span><span class="params">(Intent intent, <span class="keyword">int</span> resultCode, String data, Bundle extras, <span class="keyword">boolean</span> ordered, <span class="keyword">boolean</span> sticky, <span class="keyword">int</span> sendingUser)</span> </span>&#123;</span><br><span class="line">            LoadedApk.ReceiverDispatcher.Args args = <span class="keyword">new</span> LoadedApk.ReceiverDispatcher.Args(intent, resultCode, data, extras, ordered, sticky, sendingUser);</span><br><span class="line">            <span class="keyword">if</span> (intent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Log.wtf(<span class="string">"LoadedApk"</span>, <span class="string">"Null intent received"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((intent == <span class="keyword">null</span> || !<span class="keyword">this</span>.mActivityThread.post(args)) &amp;&amp; <span class="keyword">this</span>.mRegistered &amp;&amp; ordered) &#123;</span><br><span class="line">                IActivityManager mgr = ActivityManagerNative.getDefault();</span><br><span class="line">                args.sendFinished(mgr);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>performReceive调用ActivityThread的内部类Handler的post方法,将Args发送出去，Args是一个Runnable接口，在Handler处理消息时，会回调Args的run方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                receiver.onReceive(ReceiverDispatcher.<span class="keyword">this</span>.mContext, intent);</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<p>在run中回调receiver的onReceiver方法</p>
<p>广播注册的时序图</p>
<p><a href="/images/broadcast_register.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/broadcast_register.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>广播发送及接收的时序图</p>
<p><a href="/images/broadcast_post_receive.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/broadcast_post_receive.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="ContentProvider的工作过程"><a href="#ContentProvider的工作过程" class="headerlink" title="ContentProvider的工作过程"></a>ContentProvider的工作过程</h2><p>当ContentProvider所在的进程启动时，ContentProvider会同时启动并被发布到AMS中，这个时候ContentProvider的onCreate要先于Application的onCreate执行。</p>
<p>应用启动时的入口为ActivityThread的main方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">        ActivityThread thread = <span class="keyword">new</span> ActivityThread();</span><br><span class="line">        thread.attach(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sMainThreadHandler = thread.getHandler();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">            Looper.myLooper().setMessageLogging(<span class="keyword">new</span></span><br><span class="line">                    LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">        Looper.loop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在main方法中，会创建ActivityThread的实例，并调用attach方法，然后调用Looper.loop方法。这里主要分析attach方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(<span class="keyword">boolean</span> system)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">final</span> IActivityManager mgr = ActivityManager.getService();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mgr.attachApplication(mAppThread);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//...   </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在attach中，调用AMS的attachApplication方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attachApplication</span><span class="params">(IApplicationThread thread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">            attachApplicationLocked(thread, callingPid);</span><br><span class="line">            Binder.restoreCallingIdentity(origId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>attachApplication调用attachApplicationLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">attachApplicationLocked</span><span class="params">(IApplicationThread thread,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> pid)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            thread.bindApplication(processName, appInfo, providers,</span><br><span class="line">                        app.instr.mClass,</span><br><span class="line">                        profilerInfo, app.instr.mArguments,</span><br><span class="line">                        app.instr.mWatcher,</span><br><span class="line">                        app.instr.mUiAutomationConnection, testMode,</span><br><span class="line">                        mBinderTransactionTrackingEnabled, enableTrackAllocation,</span><br><span class="line">                        isRestrictedBackupMode || !normalMode, app.persistent,</span><br><span class="line">                        <span class="keyword">new</span> Configuration(getGlobalConfiguration()), app.compat,</span><br><span class="line">                        getCommonServicesLocked(app.isolated),</span><br><span class="line">                        mCoreSettingsObserver.getCoreSettingsLocked(),</span><br><span class="line">                        buildSerial);</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>attachApplicationLocked调用ApplicationThread的bindApplication方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">bindApplication</span><span class="params">(String processName, ApplicationInfo appInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">                List&lt;ProviderInfo&gt; providers, ComponentName instrumentationName,</span></span></span><br><span class="line"><span class="function"><span class="params">                ProfilerInfo profilerInfo, Bundle instrumentationArgs,</span></span></span><br><span class="line"><span class="function"><span class="params">                IInstrumentationWatcher instrumentationWatcher,</span></span></span><br><span class="line"><span class="function"><span class="params">                IUiAutomationConnection instrumentationUiConnection, <span class="keyword">int</span> debugMode,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> enableBinderTracking, <span class="keyword">boolean</span> trackAllocation,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> isRestrictedBackupMode, <span class="keyword">boolean</span> persistent, Configuration config,</span></span></span><br><span class="line"><span class="function"><span class="params">                CompatibilityInfo compatInfo, Map services, Bundle coreSettings,</span></span></span><br><span class="line"><span class="function"><span class="params">                String buildSerial)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (services != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Setup the service cache in the ServiceManager</span></span><br><span class="line">                ServiceManager.initServiceCache(services);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            setCoreSettings(coreSettings);</span><br><span class="line"></span><br><span class="line">            AppBindData data = <span class="keyword">new</span> AppBindData();</span><br><span class="line">            data.processName = processName;</span><br><span class="line">            data.appInfo = appInfo;</span><br><span class="line">            data.providers = providers;</span><br><span class="line">            data.instrumentationName = instrumentationName;</span><br><span class="line">            data.instrumentationArgs = instrumentationArgs;</span><br><span class="line">            data.instrumentationWatcher = instrumentationWatcher;</span><br><span class="line">            data.instrumentationUiAutomationConnection = instrumentationUiConnection;</span><br><span class="line">            data.debugMode = debugMode;</span><br><span class="line">            data.enableBinderTracking = enableBinderTracking;</span><br><span class="line">            data.trackAllocation = trackAllocation;</span><br><span class="line">            data.restrictedBackupMode = isRestrictedBackupMode;</span><br><span class="line">            data.persistent = persistent;</span><br><span class="line">            data.config = config;</span><br><span class="line">            data.compatInfo = compatInfo;</span><br><span class="line">            data.initProfilerInfo = profilerInfo;</span><br><span class="line">            data.buildSerial = buildSerial;</span><br><span class="line">            sendMessage(H.BIND_APPLICATION, data);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>bindApplication发送消息BIND_APPLICATION给Handler</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">"&gt;&gt;&gt; handling: "</span> + codeToString(msg.what));</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> BIND_APPLICATION:</span><br><span class="line">                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"bindApplication"</span>);</span><br><span class="line">                    AppBindData data = (AppBindData)msg.obj;</span><br><span class="line">                    handleBindApplication(data);</span><br><span class="line">                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>handleMessage中调用ActivityThread中的handleBindApplication方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleBindApplication</span><span class="params">(AppBindData data)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            app = data.info.makeApplication(data.restrictedBackupMode, <span class="keyword">null</span>);</span><br><span class="line">            mInitialApplication = app;</span><br><span class="line">            <span class="keyword">if</span> (!data.restrictedBackupMode) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!ArrayUtils.isEmpty(data.providers)) &#123;</span><br><span class="line">                    installContentProviders(app, data.providers);</span><br><span class="line">                    <span class="comment">// For process that contains content providers, we want to</span></span><br><span class="line">                    <span class="comment">// ensure that the JIT is enabled "at some point".</span></span><br><span class="line">                    mH.sendEmptyMessageDelayed(H.ENABLE_JIT, <span class="number">10</span>*<span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            mInstrumentation.callApplicationOnCreate(app);</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>handleBindApplication中创建了application实例和ContentProvider,并且Application的onCreate回调在ContentProvider之后。</p>
<p>下面来看installContentProviders方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installContentProviders</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Context context, List&lt;ProviderInfo&gt; providers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;ContentProviderHolder&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ProviderInfo cpi : providers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_PROVIDER) &#123;</span><br><span class="line">                StringBuilder buf = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">                buf.append(<span class="string">"Pub "</span>);</span><br><span class="line">                buf.append(cpi.authority);</span><br><span class="line">                buf.append(<span class="string">": "</span>);</span><br><span class="line">                buf.append(cpi.name);</span><br><span class="line">                Log.i(TAG, buf.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//1</span></span><br><span class="line">            ContentProviderHolder cph = installProvider(context, <span class="keyword">null</span>, cpi,</span><br><span class="line">                    <span class="keyword">false</span> <span class="comment">/*noisy*/</span>, <span class="keyword">true</span> <span class="comment">/*noReleaseNeeded*/</span>, <span class="keyword">true</span> <span class="comment">/*stable*/</span>);</span><br><span class="line">            <span class="keyword">if</span> (cph != <span class="keyword">null</span>) &#123;</span><br><span class="line">                cph.noReleaseNeeded = <span class="keyword">true</span>;</span><br><span class="line">                results.add(cph);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2</span></span><br><span class="line">            ActivityManager.getService().publishContentProviders(</span><br><span class="line">                getApplicationThread(), results);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在注释1处调用installProvider方法。注释2处调用AMS的publishContentProviders方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ContentProviderHolder <span class="title">installProvider</span><span class="params">(Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">            ContentProviderHolder holder, ProviderInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> noisy, <span class="keyword">boolean</span> noReleaseNeeded, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                localProvider = (ContentProvider)cl.</span><br><span class="line">                    loadClass(info.name).newInstance();</span><br><span class="line">                provider = localProvider.getIContentProvider();</span><br><span class="line">                <span class="keyword">if</span> (provider == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Slog.e(TAG, <span class="string">"Failed to instantiate class "</span> +</span><br><span class="line">                          info.name + <span class="string">" from sourceDir "</span> +</span><br><span class="line">                          info.applicationInfo.sourceDir);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_PROVIDER) Slog.v(</span><br><span class="line">                    TAG, <span class="string">"Instantiating local provider "</span> + info.name);</span><br><span class="line">                <span class="comment">// XXX Need to create the correct context for this provider.</span></span><br><span class="line">                localProvider.attachInfo(c, info);</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在installProvider创建了provider,并调用了attachInfo方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attachInfo</span><span class="params">(Context context, ProviderInfo info, <span class="keyword">boolean</span> testing)</span> </span>&#123;</span><br><span class="line">        mNoPerms = testing;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Only allow it to be set once, so after the content service gives</span></span><br><span class="line"><span class="comment">         * this to us clients can't change it.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (mContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mContext = context;</span><br><span class="line">            <span class="keyword">if</span> (context != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mTransport.mAppOpsManager = (AppOpsManager) context.getSystemService(</span><br><span class="line">                        Context.APP_OPS_SERVICE);</span><br><span class="line">            &#125;</span><br><span class="line">            mMyUid = Process.myUid();</span><br><span class="line">            <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">                setReadPermission(info.readPermission);</span><br><span class="line">                setWritePermission(info.writePermission);</span><br><span class="line">                setPathPermissions(info.pathPermissions);</span><br><span class="line">                mExported = info.exported;</span><br><span class="line">                mSingleUser = (info.flags &amp; ProviderInfo.FLAG_SINGLE_USER) != <span class="number">0</span>;</span><br><span class="line">                setAuthorities(info.authority);</span><br><span class="line">            &#125;</span><br><span class="line">            ContentProvider.<span class="keyword">this</span>.onCreate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在attchInfo中调用了onCreate方法</p>
<p>再看AMS的publishContentProviders方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishContentProviders</span><span class="params">(IApplicationThread caller,</span></span></span><br><span class="line"><span class="function"><span class="params">            List&lt;ContentProviderHolder&gt; providers)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                ComponentName comp = <span class="keyword">new</span> ComponentName(dst.info.packageName, dst.info.name);</span><br><span class="line">                    mProviderMap.putProviderByClass(comp, dst);</span><br><span class="line">                    String names[] = dst.info.authority.split(<span class="string">";"</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; names.length; j++) &#123;</span><br><span class="line">                        mProviderMap.putProviderByName(names[j], dst);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">if</span> (wasInLaunchingProviders) &#123;</span><br><span class="line">                        mHandler.removeMessages(CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG, r);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在publishContentProviders方法中，主要是将provider信息保存到Map中，移除CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG消息。因为在AMS的attachApplicationLocked方法中发送了一个CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG消息，以便在超时的时候作出相应的处理。</p>
<p>ContentProvider的启动时序图</p>
<p><a href="/images/contentprovider_start.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/contentprovider_start.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>访问ContentProvider需要通过ContentResolver,ContentResolver是一个抽象类，通过Context获取到的ContentResolver，其实是ContextImpl中的内部类ApplicationContentResolver的一个实例。当ContentProvider所在进程未启动时，第一次访问它就会触发ContentProvider的创建，ContentProvider的进程也会启动。通过ContentProvider的增删改查的任何一个方法都会触发ContentProvider的启动。这里选择query方法来分析。</p>
<p>ContentProvider的使用方法一般是如下这样：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.getContentResolver().query()</span><br></pre></td></tr></table></figure></div>

<p>context的实现类是ContextWrapper.来看ContextWrapper的getContentResolver方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ContentResolver <span class="title">getContentResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBase.getContentResolver();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>getContentResolver调用ContextImpl的getContentResolver方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ContentResolver <span class="title">getContentResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mContentResolver;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>mContentResolver是在ContextImpl的构造函数中初始化的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ContextImpl</span><span class="params">(@Nullable ContextImpl container, @NonNull ActivityThread mainThread,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull LoadedApk packageInfo, @Nullable String splitName,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable IBinder activityToken, @Nullable UserHandle user, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        mContentResolver = <span class="keyword">new</span> ApplicationContentResolver(<span class="keyword">this</span>, mainThread, user);</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>ApplicationContentResolver是ContextImpl的内部类。实例化ContentResolver后，调用query方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="meta">@Nullable</span> <span class="function">Cursor <span class="title">query</span><span class="params">(<span class="keyword">final</span> @RequiresPermission.Read @NonNull Uri uri,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable String[] projection, @Nullable Bundle queryArgs,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable CancellationSignal cancellationSignal)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        IContentProvider unstableProvider = acquireUnstableProvider(uri);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在query方法里，先通过acquireUnstableProvider获取ContentProvider</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> IContentProvider <span class="title">acquireUnstableProvider</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!SCHEME_CONTENT.equals(uri.getScheme())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String auth = uri.getAuthority();</span><br><span class="line">        <span class="keyword">if</span> (auth != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> acquireUnstableProvider(mContext, uri.getAuthority());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>acquireUnstableProvider会调用它的重载方法acquireUnstableProvider</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> IContentProvider <span class="title">acquireUnstableProvider</span><span class="params">(Context c, String auth)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.mMainThread.acquireProvider(c, ContentProvider.getAuthorityWithoutUserId(auth), <span class="keyword">this</span>.resolveUserIdFromAuthority(auth), <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>acquireUnstableProvider方法会调用ActivityThread的acquireProvider方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> IContentProvider <span class="title">acquireProvider</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Context c, String auth, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> IContentProvider provider = acquireExistingProvider(c, auth, userId, stable);</span><br><span class="line">        <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> provider;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// There is a possible race here.  Another thread may try to acquire</span></span><br><span class="line">        <span class="comment">// the same provider at the same time.  When this happens, we want to ensure</span></span><br><span class="line">        <span class="comment">// that the first one wins.</span></span><br><span class="line">        <span class="comment">// Note that we cannot hold the lock while acquiring and installing the</span></span><br><span class="line">        <span class="comment">// provider since it might take a long time to run and it could also potentially</span></span><br><span class="line">        <span class="comment">// be re-entrant in the case where the provider is in the same process.</span></span><br><span class="line">        ContentProviderHolder holder = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            holder = ActivityManager.getService().getContentProvider(</span><br><span class="line">                    getApplicationThread(), auth, userId, stable);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">"Failed to find provider info for "</span> + auth);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Install provider will increment the reference count for us, and break</span></span><br><span class="line">        <span class="comment">// any ties in the race.</span></span><br><span class="line">        holder = installProvider(c, holder, holder.info,</span><br><span class="line">                <span class="keyword">true</span> <span class="comment">/*noisy*/</span>, holder.noReleaseNeeded, stable);</span><br><span class="line">        <span class="keyword">return</span> holder.provider;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>如果有缓存过ContentProvider，则直接获取返回。如果没有缓存，则通过AMS的getContentProvider方法获取</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ContentProviderHolder <span class="title">getContentProvider</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            IApplicationThread caller, String name, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">        enforceNotIsolatedCaller(<span class="string">"getContentProvider"</span>);</span><br><span class="line">        <span class="keyword">if</span> (caller == <span class="keyword">null</span>) &#123;</span><br><span class="line">            String msg = <span class="string">"null IApplicationThread when getting content provider "</span></span><br><span class="line">                    + name;</span><br><span class="line">            Slog.w(TAG, msg);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// The incoming user check is now handled in checkContentProviderPermissionLocked() to deal</span></span><br><span class="line">        <span class="comment">// with cross-user grant.</span></span><br><span class="line">        <span class="keyword">return</span> getContentProviderImpl(caller, name, <span class="keyword">null</span>, stable, userId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>ContentProviderHolder调用getContentProviderImpl方法获取ContentResoverHolder</p>
<p>获取到Provider后，就会调用ContentProvider的query方法，这个方法是我们自定义ContentProvider时需要实现的。代码就切换到了我们定义的ContentProvider。</p>
<p>ContentProvider的Query时序图</p>
<p><a href="/images/contentprovider_query.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/contentprovider_query.png" src="/img/loading.gif" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>Service</tag>
        <tag>Activity</tag>
        <tag>BroadcastReceiver</tag>
        <tag>四大组件</tag>
        <tag>ContentProvider</tag>
      </tags>
  </entry>
  <entry>
    <title>理解Window和WindowManager</title>
    <url>/2020/01/08/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/%E7%90%86%E8%A7%A3Window%E5%92%8CWindowManager/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="理解Window和WindowManager"><a href="#理解Window和WindowManager" class="headerlink" title="理解Window和WindowManager"></a>理解Window和WindowManager</h1><p><a href="/images/window_windowmanager_mind.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/window_windowmanager_mind.png" src="/img/loading.gif" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Window表示一个窗口的概念,是一个抽象类，具体实现是PhoneWindow,可以通过WindowManager创建一个Window。WindowManager是外界访问Window的入口，Window具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。</span><br></pre></td></tr></table></figure></div>

<h2 id="Window和WindowManager"><a href="#Window和WindowManager" class="headerlink" title="Window和WindowManager"></a>Window和WindowManager</h2><p><strong>WindowManager.LayoutParams</strong></p>
<p>关注flags和type两个参数:</p>
<blockquote>
<p>Flags参数表示Window的属性，可以控制Window的显示特性。</p>
</blockquote>
<p>** FLAG_NOT_FOCUSABLE **</p>
<p>表示Window不需要获取焦点，也不需要接收各种输入事件，此标记会同时启用FLAG_NOT_TOUCH_MODAL,最终事件会直接传递给下层的具有焦点的Window。</p>
<p>** FLAG_NOT_TOUCH_MODAL **</p>
<p>系统会将当前Window区域以外的单击事件传递给底层的Window,当前Window区域以内的单击事件自己处理。</p>
<p>** FLAG_SHOW_WHEN_LOCKED **</p>
<p>让Window显示在锁屏的界面上。</p>
<blockquote>
<p>Type参数表示Window类型</p>
</blockquote>
<p>Window有三种类型：应用Window、子Window、系统Window。应用Window对应一个Activity。子Window不能单独存在，需要附属在特定的父Window中，如Dialog就是子Window。系统Window需要声明权限才能创建，如Toast和系统状态栏就是系统Window。</p>
<p>Window是分层的，每个Window都有对应的z-ordered,层级大的覆盖在层级小的Window上。应用Window的层级范围是1-99，子Window的层级范围是1000-1999，系统Window层级范围是2000-2999。</p>
<p>WindowManager常用的三个方法：添加View、更新View和删除View。这是从ViewManager实现过来的。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewManager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, ViewGroup.LayoutParams params)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateViewLayout</span><span class="params">(View view, ViewGroup.LayoutParams params)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeView</span><span class="params">(View view)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Window的内部机制"><a href="#Window的内部机制" class="headerlink" title="Window的内部机制"></a>Window的内部机制</h2><p>Window是一个抽象概念，每一个Window都对应一个View和一个ViewRootImpl,Window和View通过ViewRootImpl来建立联系。</p>
<h3 id="Window的添加过程"><a href="#Window的添加过程" class="headerlink" title="Window的添加过程"></a>Window的添加过程</h3><p>Window的添加过程需要通过WindowManager的addView来实现。WindowManager是一个接口，它的实现类是WindowManagerImpl。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, LayoutParams params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applyDefaultToken(params);</span><br><span class="line">        <span class="keyword">this</span>.mGlobal.addView(view, params, <span class="keyword">this</span>.mContext.getDisplay(), <span class="keyword">this</span>.mParentWindow);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>WindowManagerImpl并没有直接实现addView，而是通过内部的WindowManagerGlobal实现的。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view, android.view.ViewGroup.LayoutParams params, Display display, Window parentWindow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//检查view</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"view must not be null"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (display == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//检查display</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"display must not be null"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(params <span class="keyword">instanceof</span> LayoutParams)) &#123;</span><br><span class="line">            <span class="comment">//检查params</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Params must be WindowManager.LayoutParams"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LayoutParams wparams = (LayoutParams)params;</span><br><span class="line">            <span class="keyword">if</span> (parentWindow != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//调整子窗口的布局参数</span></span><br><span class="line">                parentWindow.adjustLayoutParamsForSubWindow(wparams);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Context context = view.getContext();</span><br><span class="line">                <span class="keyword">if</span> (context != <span class="keyword">null</span> &amp;&amp; (context.getApplicationInfo().flags &amp; <span class="number">536870912</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                    wparams.flags |= <span class="number">16777216</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            View panelParentView = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">int</span> index;</span><br><span class="line">            ViewRootImpl root;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>.mLock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.mSystemPropertyUpdater == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.mSystemPropertyUpdater = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">synchronized</span>(WindowManagerGlobal.<span class="keyword">this</span>.mLock) &#123;</span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">int</span> i = WindowManagerGlobal.<span class="keyword">this</span>.mRoots.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">                                    ((ViewRootImpl)WindowManagerGlobal.<span class="keyword">this</span>.mRoots.get(i)).loadSystemProperties();</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    SystemProperties.addChangeCallback(<span class="keyword">this</span>.mSystemPropertyUpdater);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> index = <span class="keyword">this</span>.findViewLocked(view, <span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="keyword">this</span>.mDyingViews.contains(view)) &#123;</span><br><span class="line">                        <span class="comment">//不允许重复添加窗口</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"View "</span> + view + <span class="string">" has already been added to the window manager."</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    ((ViewRootImpl)<span class="keyword">this</span>.mRoots.get(index)).doDie();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (wparams.type &gt;= <span class="number">1000</span> &amp;&amp; wparams.type &lt;= <span class="number">1999</span>) &#123;</span><br><span class="line">                    index = <span class="keyword">this</span>.mViews.size();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; ++i) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (((ViewRootImpl)<span class="keyword">this</span>.mRoots.get(i)).mWindow.asBinder() == wparams.token) &#123;</span><br><span class="line">                            panelParentView = (View)<span class="keyword">this</span>.mViews.get(i);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//创建ViewRootImpl</span></span><br><span class="line">                root = <span class="keyword">new</span> ViewRootImpl(view.getContext(), display);</span><br><span class="line">                <span class="comment">//设置LayoutParams</span></span><br><span class="line">                view.setLayoutParams(wparams);</span><br><span class="line">                <span class="keyword">this</span>.mViews.add(view);</span><br><span class="line">                <span class="keyword">this</span>.mRoots.add(root);</span><br><span class="line">                <span class="keyword">this</span>.mParams.add(wparams);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//ViewRootImpl添加view</span></span><br><span class="line">                root.setView(view, wparams, panelParentView);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException var15) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(<span class="keyword">this</span>.mLock) &#123;</span><br><span class="line">                    index = <span class="keyword">this</span>.findViewLocked(view, <span class="keyword">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.removeViewLocked(index, <span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">throw</span> var15;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>ViewRootImpl调用setView方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(View view, LayoutParams attrs, View panelParentView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.mView == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.mAdded = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">//1、调用requestLayout方法</span></span><br><span class="line">                <span class="keyword">this</span>.requestLayout();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> res;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.mOrigWindowType = <span class="keyword">this</span>.mWindowAttributes.type;</span><br><span class="line">                    <span class="keyword">this</span>.mAttachInfo.mRecomputeGlobalAttributes = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">this</span>.collectViewAttributes();</span><br><span class="line">                    <span class="comment">//2、通过Session添加Window</span></span><br><span class="line">                    res = <span class="keyword">this</span>.mWindowSession.addToDisplay(<span class="keyword">this</span>.mWindow, <span class="keyword">this</span>.mSeq, <span class="keyword">this</span>.mWindowAttributes, <span class="keyword">this</span>.getHostVisibility(), <span class="keyword">this</span>.mDisplay.getDisplayId(), <span class="keyword">this</span>.mAttachInfo.mContentInsets, <span class="keyword">this</span>.mAttachInfo.mStableInsets, <span class="keyword">this</span>.mAttachInfo.mOutsets, <span class="keyword">this</span>.mInputChannel);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException var20) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.mAdded = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">this</span>.mView = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">this</span>.mAttachInfo.mRootView = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">this</span>.mInputChannel = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">this</span>.mFallbackEventHandler.setView((View)<span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">this</span>.unscheduleTraversals();</span><br><span class="line">                    <span class="keyword">this</span>.setAccessibilityFocus((View)<span class="keyword">null</span>, (AccessibilityNodeInfo)<span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Adding window failed"</span>, var20);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (restore) &#123;</span><br><span class="line">                        attrs.restore();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//添加Window失败</span></span><br><span class="line">                    <span class="keyword">this</span>.mAttachInfo.mRootView = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">this</span>.mAdded = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">this</span>.mFallbackEventHandler.setView((View)<span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">this</span>.unscheduleTraversals();</span><br><span class="line">                    <span class="keyword">this</span>.setAccessibilityFocus((View)<span class="keyword">null</span>, (AccessibilityNodeInfo)<span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">switch</span>(res) &#123;</span><br><span class="line">                    <span class="keyword">case</span> -<span class="number">10</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidDisplayException(<span class="string">"Unable to add window "</span> + <span class="keyword">this</span>.mWindow + <span class="string">" -- the specified window type "</span> + <span class="keyword">this</span>.mWindowAttributes.type + <span class="string">" is not valid"</span>);</span><br><span class="line">                    <span class="keyword">case</span> -<span class="number">9</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidDisplayException(<span class="string">"Unable to add window "</span> + <span class="keyword">this</span>.mWindow + <span class="string">" -- the specified display can not be found"</span>);</span><br><span class="line">                    <span class="keyword">case</span> -<span class="number">8</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BadTokenException(<span class="string">"Unable to add window "</span> + <span class="keyword">this</span>.mWindow + <span class="string">" -- permission denied for window type "</span> + <span class="keyword">this</span>.mWindowAttributes.type);</span><br><span class="line">                    <span class="keyword">case</span> -<span class="number">7</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BadTokenException(<span class="string">"Unable to add window "</span> + <span class="keyword">this</span>.mWindow + <span class="string">" -- another window of type "</span> + <span class="keyword">this</span>.mWindowAttributes.type + <span class="string">" already exists"</span>);</span><br><span class="line">                    <span class="keyword">case</span> -<span class="number">6</span>:</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    <span class="keyword">case</span> -<span class="number">5</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BadTokenException(<span class="string">"Unable to add window -- window "</span> + <span class="keyword">this</span>.mWindow + <span class="string">" has already been added"</span>);</span><br><span class="line">                    <span class="keyword">case</span> -<span class="number">4</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BadTokenException(<span class="string">"Unable to add window -- app for token "</span> + attrs.token + <span class="string">" is exiting"</span>);</span><br><span class="line">                    <span class="keyword">case</span> -<span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BadTokenException(<span class="string">"Unable to add window -- token "</span> + attrs.token + <span class="string">" is not for an application"</span>);</span><br><span class="line">                    <span class="keyword">case</span> -<span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> (view.getContext().getPackageName().startsWith(<span class="string">"com.google.android.gms"</span>)) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (AppGlobals.getPackageManager().isFirstBoot()) &#123;</span><br><span class="line">                                    Log.d(<span class="keyword">this</span>.mTag, <span class="string">"firstboot crash return"</span>);</span><br><span class="line">                                    <span class="keyword">return</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (RemoteException var22) &#123;</span><br><span class="line">                                var22.printStackTrace();</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BadTokenException(<span class="string">"Unable to add window -- token "</span> + attrs.token + <span class="string">" is not valid; is your activity running?"</span>);</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to add window -- unknown error code "</span> + res);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//将view和ViewRootImpl关联起来</span></span><br><span class="line">                view.assignParent(<span class="keyword">this</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>1、requestLayout方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.mHandlingLayoutInLayoutRequest) &#123;</span><br><span class="line">            <span class="comment">//A检测线程</span></span><br><span class="line">            <span class="keyword">this</span>.checkThread();</span><br><span class="line">            <span class="keyword">this</span>.mLayoutRequested = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//B开始View的绘制</span></span><br><span class="line">            <span class="keyword">this</span>.scheduleTraversals();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>A:检测线程,如果不是主线程，则报错。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.mThread != Thread.currentThread()) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ViewRootImpl.CalledFromWrongThreadException(<span class="string">"Only the original thread that created a view hierarchy can touch its views."</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>B:开始View的绘制</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheduleTraversals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.mTraversalScheduled) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mTraversalScheduled = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.mTraversalBarrier = <span class="keyword">this</span>.mHandler.getLooper().getQueue().postSyncBarrier();</span><br><span class="line">            <span class="comment">//回调mTraversalRunnable</span></span><br><span class="line">            <span class="keyword">this</span>.mChoreographer.postCallback(<span class="number">2</span>, <span class="keyword">this</span>.mTraversalRunnable, (Object)<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.mUnbufferedInputDispatch) &#123;</span><br><span class="line">                <span class="keyword">this</span>.scheduleConsumeBatchedInput();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.notifyRendererOfFramePending();</span><br><span class="line">            <span class="keyword">this</span>.pokeDrawLockIfNeeded();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>回调mTraversalRunnable</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TraversalRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        TraversalRunnable() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//调用doTraversal</span></span><br><span class="line">            ViewRootImpl.<span class="keyword">this</span>.doTraversal();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用doTraversal</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doTraversal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mTraversalScheduled) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mTraversalScheduled = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.mHandler.getLooper().getQueue().removeSyncBarrier(<span class="keyword">this</span>.mTraversalBarrier);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.mProfile) &#123;</span><br><span class="line">                Debug.startMethodTracing(<span class="string">"ViewAncestor"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用performTraversals</span></span><br><span class="line">            <span class="keyword">this</span>.performTraversals();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.mProfile) &#123;</span><br><span class="line">                Debug.stopMethodTracing();</span><br><span class="line">                <span class="keyword">this</span>.mProfile = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>调用performTraversals方法，在performTraversals方法内会调用performMeasure()、PerformLayout()、PerformDraw()，并最终会调用view的measure()、layout()、draw()方法</p>
<p>回到ViewRootImpl的setView方法，在2处通过WindowSession调用addToDisplay()方法,WindowSession是一个Binder对象，最终的实现为Session类。Session中的addToDisplay方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addToDisplay</span><span class="params">(IWindow window, <span class="keyword">int</span> seq, WindowManager.LayoutParams attrs,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> viewVisibility, <span class="keyword">int</span> displayId, Rect outContentInsets, Rect outStableInsets,</span></span></span><br><span class="line"><span class="function"><span class="params">            Rect outOutsets, InputChannel outInputChannel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mService.addWindow(<span class="keyword">this</span>, window, seq, attrs, viewVisibility, displayId,</span><br><span class="line">                outContentInsets, outStableInsets, outOutsets, outInputChannel);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>addToDisplay方法通过调用WindowManagerService的addWindow方法。具体的addWindow方法，此处不再分析。</p>
<h3 id="Window的删除过程"><a href="#Window的删除过程" class="headerlink" title="Window的删除过程"></a>Window的删除过程</h3><p>Window的删除过程和添加过程基本一样，都是先通过WindowManagerImpl，再通过WindowManagerGlobal来实现的。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeView</span><span class="params">(View view, <span class="keyword">boolean</span> immediate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"view must not be null"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>.mLock) &#123;</span><br><span class="line">                <span class="keyword">int</span> index = <span class="keyword">this</span>.findViewLocked(view, <span class="keyword">true</span>);</span><br><span class="line">                View curView = ((ViewRootImpl)<span class="keyword">this</span>.mRoots.get(index)).getView();</span><br><span class="line">                <span class="keyword">this</span>.removeViewLocked(index, immediate);</span><br><span class="line">                <span class="keyword">if</span> (curView != view) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Calling with view "</span> + view + <span class="string">" but the ViewAncestor is attached to "</span> + curView);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>removeView方法中又调用removeViewLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeViewLocked</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">boolean</span> immediate)</span> </span>&#123;</span><br><span class="line">        ViewRootImpl root = (ViewRootImpl)<span class="keyword">this</span>.mRoots.get(index);</span><br><span class="line">        View view = root.getView();</span><br><span class="line">        <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">            InputMethodManager imm = InputMethodManager.getInstance();</span><br><span class="line">            <span class="keyword">if</span> (imm != <span class="keyword">null</span>) &#123;</span><br><span class="line">                imm.windowDismissed(((View)<span class="keyword">this</span>.mViews.get(index)).getWindowToken());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> deferred = root.die(immediate);</span><br><span class="line">        <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.assignParent((ViewParent)<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (deferred) &#123;</span><br><span class="line">                <span class="keyword">this</span>.mDyingViews.add(view);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在removeViewLocked方法里调用ViewRootImpl的die方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">die</span><span class="params">(<span class="keyword">boolean</span> immediate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (immediate &amp;&amp; !<span class="keyword">this</span>.mIsInTraversal) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doDie();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.mIsDrawing) &#123;</span><br><span class="line">                <span class="keyword">this</span>.destroyHardwareRenderer();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Log.e(<span class="keyword">this</span>.mTag, <span class="string">"Attempting to destroy the window while drawing!\n  window="</span> + <span class="keyword">this</span> + <span class="string">", title="</span> + <span class="keyword">this</span>.mWindowAttributes.getTitle());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.mHandler.sendEmptyMessage(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>die方法中，如果不是立即移除，则通过Handler发送一个移除消息，如果是立即移除，则调用doDie方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doDie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查线程</span></span><br><span class="line">        <span class="keyword">this</span>.checkThread();</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.mRemoved) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.mRemoved = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.mAdded) &#123;</span><br><span class="line">                <span class="keyword">this</span>.dispatchDetachedFromWindow();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.mAdded &amp;&amp; !<span class="keyword">this</span>.mFirst) &#123;</span><br><span class="line">                <span class="keyword">this</span>.destroyHardwareRenderer();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.mView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> viewVisibility = <span class="keyword">this</span>.mView.getVisibility();</span><br><span class="line">                    <span class="keyword">boolean</span> viewVisibilityChanged = <span class="keyword">this</span>.mViewVisibility != viewVisibility;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.mWindowAttributesChanged || viewVisibilityChanged) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((<span class="keyword">this</span>.relayoutWindow(<span class="keyword">this</span>.mWindowAttributes, viewVisibility, <span class="keyword">false</span>) &amp; <span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">this</span>.mWindowSession.finishDrawing(<span class="keyword">this</span>.mWindow);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (RemoteException var6) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.mSurface.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.mAdded = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        WindowManagerGlobal.getInstance().doRemoveView(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>真正移除Window是在dispatchDetachedFromWindow方法中实现的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mView != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.mView.mAttachInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mAttachInfo.mTreeObserver.dispatchOnWindowAttachedChange(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">this</span>.mView.dispatchDetachedFromWindow();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.mAccessibilityInteractionConnectionManager.ensureNoConnection();</span><br><span class="line">        <span class="keyword">this</span>.mAccessibilityManager.removeAccessibilityStateChangeListener(<span class="keyword">this</span>.mAccessibilityInteractionConnectionManager);</span><br><span class="line">        <span class="keyword">this</span>.mAccessibilityManager.removeHighTextContrastStateChangeListener(<span class="keyword">this</span>.mHighContrastTextManager);</span><br><span class="line">        <span class="keyword">this</span>.removeSendWindowContentChangedCallback();</span><br><span class="line">        <span class="keyword">this</span>.destroyHardwareRenderer();</span><br><span class="line">        <span class="keyword">this</span>.setAccessibilityFocus((View)<span class="keyword">null</span>, (AccessibilityNodeInfo)<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.mView.assignParent((ViewParent)<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.mView = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.mAttachInfo.mRootView = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.mSurface.release();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mInputQueueCallback != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.mInputQueue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mInputQueueCallback.onInputQueueDestroyed(<span class="keyword">this</span>.mInputQueue);</span><br><span class="line">            <span class="keyword">this</span>.mInputQueue.dispose();</span><br><span class="line">            <span class="keyword">this</span>.mInputQueueCallback = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.mInputQueue = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mInputEventReceiver != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mInputEventReceiver.dispose();</span><br><span class="line">            <span class="keyword">this</span>.mInputEventReceiver = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.mWindowSession.remove(<span class="keyword">this</span>.mWindow);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException var2) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mInputChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mInputChannel.dispose();</span><br><span class="line">            <span class="keyword">this</span>.mInputChannel = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.mDisplayManager.unregisterDisplayListener(<span class="keyword">this</span>.mDisplayListener);</span><br><span class="line">        <span class="keyword">this</span>.unscheduleTraversals();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在dispatchDetachedFromWindow中，最终通过Session来移除Window。</p>
<p>移除Window后，调用WindowManagerGlobal的doRemoveView方法将之前列表中的记录清除</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doRemoveView</span><span class="params">(ViewRootImpl root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>.mLock) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="keyword">this</span>.mRoots.indexOf(root);</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.mRoots.remove(index);</span><br><span class="line">                <span class="keyword">this</span>.mParams.remove(index);</span><br><span class="line">                View view = (View)<span class="keyword">this</span>.mViews.remove(index);</span><br><span class="line">                <span class="keyword">this</span>.mDyingViews.remove(view);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ThreadedRenderer.sTrimForeground &amp;&amp; ThreadedRenderer.isAvailable()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doTrimForeground();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Window的更新过程"><a href="#Window的更新过程" class="headerlink" title="Window的更新过程"></a>Window的更新过程</h3><p>Window的更新是通过WindowManagerGlobal的updateViewLayout方法来实现的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateViewLayout</span><span class="params">(View view, android.view.ViewGroup.LayoutParams params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"view must not be null"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(params <span class="keyword">instanceof</span> LayoutParams)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Params must be WindowManager.LayoutParams"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LayoutParams wparams = (LayoutParams)params;</span><br><span class="line">            view.setLayoutParams(wparams);</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>.mLock) &#123;</span><br><span class="line">                <span class="keyword">int</span> index = <span class="keyword">this</span>.findViewLocked(view, <span class="keyword">true</span>);</span><br><span class="line">                ViewRootImpl root = (ViewRootImpl)<span class="keyword">this</span>.mRoots.get(index);</span><br><span class="line">                <span class="keyword">this</span>.mParams.remove(index);</span><br><span class="line">                <span class="keyword">this</span>.mParams.add(index, wparams);</span><br><span class="line">                root.setLayoutParams(wparams, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Window创建过程"><a href="#Window创建过程" class="headerlink" title="Window创建过程"></a>Window创建过程</h2><h3 id="Activity的Window创建过程"><a href="#Activity的Window创建过程" class="headerlink" title="Activity的Window创建过程"></a>Activity的Window创建过程</h3><p>先说明Activity的创建过程。Activity是在ActivityThread的performLaunchActivity方法中创建的。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        ContextImpl appContext = createBaseContextForActivity(r);</span><br><span class="line">        Activity activity = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.ClassLoader cl = appContext.getClassLoader();</span><br><span class="line">            <span class="comment">//创建activity</span></span><br><span class="line">            activity = mInstrumentation.newActivity(</span><br><span class="line">                    cl, component.getClassName(), r.intent);</span><br><span class="line">            StrictMode.incrementExpectedActivityCount(activity.getClass());</span><br><span class="line">            r.intent.setExtrasClassLoader(cl);</span><br><span class="line">            r.intent.prepareToEnterProcess();</span><br><span class="line">            <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</span><br><span class="line">                r.state.setClassLoader(cl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to instantiate activity "</span> + component</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Application app = r.packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (localLOGV) Slog.v(TAG, <span class="string">"Performing launch of "</span> + r);</span><br><span class="line">            <span class="keyword">if</span> (localLOGV) Slog.v(</span><br><span class="line">                    TAG, r + <span class="string">": app="</span> + app</span><br><span class="line">                    + <span class="string">", appName="</span> + app.getPackageName()</span><br><span class="line">                    + <span class="string">", pkg="</span> + r.packageInfo.getPackageName()</span><br><span class="line">                    + <span class="string">", comp="</span> + r.intent.getComponent().toShortString()</span><br><span class="line">                    + <span class="string">", dir="</span> + r.packageInfo.getAppDir());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</span><br><span class="line">                Configuration config = <span class="keyword">new</span> Configuration(mCompatConfiguration);</span><br><span class="line">                <span class="keyword">if</span> (r.overrideConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    config.updateFrom(r.overrideConfig);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG, <span class="string">"Launching activity "</span></span><br><span class="line">                        + r.activityInfo.name + <span class="string">" with config "</span> + config);</span><br><span class="line">                Window window = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//创建window</span></span><br><span class="line">                <span class="keyword">if</span> (r.mPendingRemoveWindow != <span class="keyword">null</span> &amp;&amp; r.mPreserveWindow) &#123;</span><br><span class="line">                    window = r.mPendingRemoveWindow;</span><br><span class="line">                    r.mPendingRemoveWindow = <span class="keyword">null</span>;</span><br><span class="line">                    r.mPendingRemoveWindowManager = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                appContext.setOuterContext(activity);</span><br><span class="line">                <span class="comment">//将activity和window关联起来</span></span><br><span class="line">                activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</span><br><span class="line">                        r.ident, app, r.intent, r.activityInfo, title, r.parent,</span><br><span class="line">                        r.embeddedID, r.lastNonConfigurationInstances, config,</span><br><span class="line">                        r.referrer, r.voiceInteractor, window, r.configCallback);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to start activity "</span> + component</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> activity;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>Activity的attach方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context, ActivityThread aThread,</span></span></span><br><span class="line"><span class="function"><span class="params">            Instrumentation instr, IBinder token, <span class="keyword">int</span> ident,</span></span></span><br><span class="line"><span class="function"><span class="params">            Application application, Intent intent, ActivityInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params">            CharSequence title, Activity parent, String id,</span></span></span><br><span class="line"><span class="function"><span class="params">            NonConfigurationInstances lastNonConfigurationInstances,</span></span></span><br><span class="line"><span class="function"><span class="params">            Configuration config, String referrer, IVoiceInteractor voiceInteractor,</span></span></span><br><span class="line"><span class="function"><span class="params">            Window window, ActivityConfigCallback activityConfigCallback)</span> </span>&#123;</span><br><span class="line">        attachBaseContext(context);</span><br><span class="line"></span><br><span class="line">        mFragments.attachHost(<span class="keyword">null</span> <span class="comment">/*parent*/</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建window</span></span><br><span class="line">        mWindow = <span class="keyword">new</span> PhoneWindow(<span class="keyword">this</span>, window, activityConfigCallback);</span><br><span class="line">        mWindow.setWindowControllerCallback(<span class="keyword">this</span>);</span><br><span class="line">        mWindow.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        mWindow.setOnWindowDismissedCallback(<span class="keyword">this</span>);</span><br><span class="line">        mWindow.getLayoutInflater().setPrivateFactory(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置WindowManager</span></span><br><span class="line">        mWindow.setWindowManager(</span><br><span class="line">                (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),</span><br><span class="line">                mToken, mComponent.flattenToString(),</span><br><span class="line">                (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (mParent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mWindow.setContainer(mParent.getWindow());</span><br><span class="line">        &#125;</span><br><span class="line">        mWindowManager = mWindow.getWindowManager();</span><br><span class="line">        mCurrentConfig = config;</span><br><span class="line"></span><br><span class="line">        mWindow.setColorMode(info.colorMode);</span><br><span class="line"></span><br><span class="line">        setAutofillCompatibilityEnabled(application.isAutofillCompatibilityEnabled());</span><br><span class="line">        enableAutofillCompatibilityIfNeeded();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>window创建完成后，在Activity的setContentView方法中，将View附加到Window中的DecorView上。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(@LayoutRes <span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">        getWindow().setContentView(layoutResID);</span><br><span class="line">        initWindowDecorActionBar();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>window的唯一实现类为PhoneWindow,因此查看PhoneWindow的setContentView方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mContentParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果没有DecorView，则创建</span></span><br><span class="line">            <span class="keyword">this</span>.installDecor();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.hasFeature(<span class="number">12</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mContentParent.removeAllViews();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.hasFeature(<span class="number">12</span>)) &#123;</span><br><span class="line">            Scene newScene = Scene.getSceneForLayout(<span class="keyword">this</span>.mContentParent, layoutResID, <span class="keyword">this</span>.getContext());</span><br><span class="line">            <span class="keyword">this</span>.transitionTo(newScene);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.mLayoutInflater.inflate(layoutResID, <span class="keyword">this</span>.mContentParent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.mContentParent.requestApplyInsets();</span><br><span class="line">        android.view.Window.Callback cb = <span class="keyword">this</span>.getCallback();</span><br><span class="line">        <span class="keyword">if</span> (cb != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.isDestroyed()) &#123;</span><br><span class="line">            cb.onContentChanged();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.mContentParentExplicitlySet = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>View被添加到Window中的DecorView后，Window并没有马上被添加。在Activity的onResume方法中，通过调用makeVisible方法才被添加。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeVisible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mWindowAdded) &#123;</span><br><span class="line">            ViewManager wm = getWindowManager();</span><br><span class="line">            wm.addView(mDecor, getWindow().getAttributes());</span><br><span class="line">            mWindowAdded = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mDecor.setVisibility(View.VISIBLE);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Dialog的Window创建过程"><a href="#Dialog的Window创建过程" class="headerlink" title="Dialog的Window创建过程"></a>Dialog的Window创建过程</h3><p>1、创建Window</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dialog(<span class="meta">@NonNull</span> Context context, <span class="meta">@StyleRes</span> <span class="keyword">int</span> themeResId, <span class="keyword">boolean</span> createContextThemeWrapper) &#123;</span><br><span class="line">        <span class="keyword">if</span> (createContextThemeWrapper) &#123;</span><br><span class="line">            <span class="keyword">if</span> (themeResId == ResourceId.ID_NULL) &#123;</span><br><span class="line">                <span class="keyword">final</span> TypedValue outValue = <span class="keyword">new</span> TypedValue();</span><br><span class="line">                context.getTheme().resolveAttribute(R.attr.dialogTheme, outValue, <span class="keyword">true</span>);</span><br><span class="line">                themeResId = outValue.resourceId;</span><br><span class="line">            &#125;</span><br><span class="line">            mContext = <span class="keyword">new</span> ContextThemeWrapper(context, themeResId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mContext = context;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建window</span></span><br><span class="line">        <span class="keyword">final</span> Window w = <span class="keyword">new</span> PhoneWindow(mContext);</span><br><span class="line">        mWindow = w;</span><br><span class="line">        w.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        w.setOnWindowDismissedCallback(<span class="keyword">this</span>);</span><br><span class="line">        w.setOnWindowSwipeDismissedCallback(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCancelable) &#123;</span><br><span class="line">                cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        w.setWindowManager(mWindowManager, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        w.setGravity(Gravity.CENTER);</span><br><span class="line"></span><br><span class="line">        mListenersHandler = <span class="keyword">new</span> ListenersHandler(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>2、初始化DecorView并将Dialog的视图添加到DecorView中</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(@LayoutRes <span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">        mWindow.setContentView(layoutResID);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>3、将DecorView添加到Window</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        mWindowManager.addView(mDecor, l);</span><br><span class="line">        mShowing = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        sendShowMessage();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>普通Dialog必须采用Activity的Context。</p>
<h3 id="Toast的Window创建过程"><a href="#Toast的Window创建过程" class="headerlink" title="Toast的Window创建过程"></a>Toast的Window创建过程</h3><p>Toast也是基于Window来实现，但由于Toast具有定时取消功能，所以系统采用了Handler。</p>
<p>Toast的显示</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mNextView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"setView must have been called"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        INotificationManager service = getService();</span><br><span class="line">        String pkg = mContext.getOpPackageName();</span><br><span class="line">        TN tn = mTN;</span><br><span class="line">        tn.mNextView = mNextView;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            service.enqueueToast(pkg, tn, mDuration);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="comment">// Empty</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在show方法中，通过IPC调用NotificationManager的enqueueToast方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueueToast</span><span class="params">(String pkg, ITransientNotification callback, <span class="keyword">int</span> duration)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DBG) &#123;</span><br><span class="line">        Slog.i(TAG, <span class="string">"enqueueToast pkg="</span> + pkg + <span class="string">" callback="</span> + callback</span><br><span class="line">                + <span class="string">" duration="</span> + duration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span> || callback == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"Not doing toast. pkg="</span> + pkg + <span class="string">" callback="</span> + callback);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isSystemToast = isCallerSystemOrPhone() || (<span class="string">"android"</span>.equals(pkg));</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isPackageSuspended =</span><br><span class="line">            isPackageSuspendedForUser(pkg, Binder.getCallingUid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ENABLE_BLOCKED_TOASTS &amp;&amp; !isSystemToast &amp;&amp;</span><br><span class="line">            (!areNotificationsEnabledForPackage(pkg, Binder.getCallingUid())</span><br><span class="line">                    || isPackageSuspended)) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"Suppressing toast from package "</span> + pkg</span><br><span class="line">                + (isPackageSuspended</span><br><span class="line">                        ? <span class="string">" due to package suspended by administrator."</span></span><br><span class="line">                        : <span class="string">" by user request."</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mToastQueue) &#123;</span><br><span class="line">        <span class="keyword">int</span> callingPid = Binder.getCallingPid();</span><br><span class="line">        <span class="keyword">long</span> callingId = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ToastRecord record;</span><br><span class="line">            <span class="keyword">int</span> index;</span><br><span class="line">            <span class="comment">// All packages aside from the android package can enqueue one toast at a time</span></span><br><span class="line">            <span class="keyword">if</span> (!isSystemToast) &#123;</span><br><span class="line">                index = indexOfToastPackageLocked(pkg);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index = indexOfToastLocked(pkg, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If the package already has a toast, we update its toast</span></span><br><span class="line">            <span class="comment">// in the queue, we don't move it to the end of the queue.</span></span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                record = mToastQueue.get(index);</span><br><span class="line">                record.update(duration);</span><br><span class="line">                record.update(callback);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Binder token = <span class="keyword">new</span> Binder();</span><br><span class="line">                mWindowManagerInternal.addWindowToken(token, TYPE_TOAST, DEFAULT_DISPLAY);</span><br><span class="line">                record = <span class="keyword">new</span> ToastRecord(callingPid, pkg, callback, duration, token);</span><br><span class="line">                mToastQueue.add(record);</span><br><span class="line">                index = mToastQueue.size() - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            keepProcessAliveIfNeededLocked(callingPid);</span><br><span class="line">            <span class="comment">// If it's at index 0, it's the current toast.  It doesn't matter if it's</span></span><br><span class="line">            <span class="comment">// new or just been updated.  Call back and tell it to show itself.</span></span><br><span class="line">            <span class="comment">// If the callback fails, this will remove it from the list, so don't</span></span><br><span class="line">            <span class="comment">// assume that it's valid after this.</span></span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                showNextToastLocked();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(callingId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>showNextToastLocked方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mToastQueue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showNextToastLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ToastRecord record = mToastQueue.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (record != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DBG) Slog.d(TAG, <span class="string">"Show pkg="</span> + record.pkg + <span class="string">" callback="</span> + record.callback);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            record.callback.show(record.token);</span><br><span class="line">            scheduleTimeoutLocked(record);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Object died trying to show notification "</span> + record.callback</span><br><span class="line">                    + <span class="string">" in package "</span> + record.pkg);</span><br><span class="line">            <span class="comment">// remove it from the list and let the process die</span></span><br><span class="line">            <span class="keyword">int</span> index = mToastQueue.indexOf(record);</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                mToastQueue.remove(index);</span><br><span class="line">            &#125;</span><br><span class="line">            keepProcessAliveIfNeededLocked(record.pid);</span><br><span class="line">            <span class="keyword">if</span> (mToastQueue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                record = mToastQueue.get(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                record = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过record.callback，即Toast中的TN对象，调用show方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(IBinder windowToken)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"SHOW: "</span> + <span class="keyword">this</span>);</span><br><span class="line">    mHandler.obtainMessage(SHOW, windowToken).sendToTarget();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过Handler发送消息，然后在处理消息的逻辑中调用了handleShow</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleShow</span><span class="params">(IBinder windowToken)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"HANDLE SHOW: "</span> + <span class="keyword">this</span> + <span class="string">" mView="</span> + mView</span><br><span class="line">                    + <span class="string">" mNextView="</span> + mNextView);</span><br><span class="line">            <span class="comment">// If a cancel/hide is pending - no need to show - at this point</span></span><br><span class="line">            <span class="comment">// the window token is already invalid and no need to do any work.</span></span><br><span class="line">            <span class="keyword">if</span> (mHandler.hasMessages(CANCEL) || mHandler.hasMessages(HIDE)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mView != mNextView) &#123;</span><br><span class="line">                <span class="comment">// remove the old view if necessary</span></span><br><span class="line">                handleHide();</span><br><span class="line">                mView = mNextView;</span><br><span class="line">                Context context = mView.getContext().getApplicationContext();</span><br><span class="line">                String packageName = mView.getContext().getOpPackageName();</span><br><span class="line">                <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    context = mView.getContext();</span><br><span class="line">                &#125;</span><br><span class="line">                mWM = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">                <span class="comment">// We can resolve the Gravity here by using the Locale for getting</span></span><br><span class="line">                <span class="comment">// the layout direction</span></span><br><span class="line">                <span class="keyword">final</span> Configuration config = mView.getContext().getResources().getConfiguration();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> gravity = Gravity.getAbsoluteGravity(mGravity, config.getLayoutDirection());</span><br><span class="line">                mParams.gravity = gravity;</span><br><span class="line">                <span class="keyword">if</span> ((gravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.FILL_HORIZONTAL) &#123;</span><br><span class="line">                    mParams.horizontalWeight = <span class="number">1.0f</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((gravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == Gravity.FILL_VERTICAL) &#123;</span><br><span class="line">                    mParams.verticalWeight = <span class="number">1.0f</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mParams.x = mX;</span><br><span class="line">                mParams.y = mY;</span><br><span class="line">                mParams.verticalMargin = mVerticalMargin;</span><br><span class="line">                mParams.horizontalMargin = mHorizontalMargin;</span><br><span class="line">                mParams.packageName = packageName;</span><br><span class="line">                mParams.hideTimeoutMilliseconds = mDuration ==</span><br><span class="line">                    Toast.LENGTH_LONG ? LONG_DURATION_TIMEOUT : SHORT_DURATION_TIMEOUT;</span><br><span class="line">                mParams.token = windowToken;</span><br><span class="line">                <span class="keyword">if</span> (mView.getParent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"REMOVE! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</span><br><span class="line">                    mWM.removeView(mView);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (localLOGV) Log.v(TAG, <span class="string">"ADD! "</span> + mView + <span class="string">" in "</span> + <span class="keyword">this</span>);</span><br><span class="line">                <span class="comment">// Since the notification manager service cancels the token right</span></span><br><span class="line">                <span class="comment">// after it notifies us to cancel the toast there is an inherent</span></span><br><span class="line">                <span class="comment">// race and we may attempt to add a window after the token has been</span></span><br><span class="line">                <span class="comment">// invalidated. Let us hedge against that.</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mWM.addView(mView, mParams);</span><br><span class="line">                    trySendAccessibilityEvent();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (WindowManager.BadTokenException e) &#123;</span><br><span class="line">                    <span class="comment">/* ignore */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>在handleShow方法中，将View添加到了window。</p>
]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>Window</tag>
        <tag>WindowManager</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Butterfly+Github+Coding搭建个人博客</title>
    <url>/2020/01/06/Web/Hexo+Butterfly+Github+Coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Hexo-Butterfly-Github-Coding搭建个人博客"><a href="#Hexo-Butterfly-Github-Coding搭建个人博客" class="headerlink" title="Hexo+Butterfly+Github+Coding搭建个人博客"></a>Hexo+Butterfly+Github+Coding搭建个人博客</h1><p><a href="/images/Hexo_mind.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/Hexo_mind.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前用<a href="https://docsify.js.org" target="_blank" rel="noopener">docsify</a>搭建了一个简单的博客，但是docsify主题较少(也可能本人没有找到正确的设置方法⊙﹏⊙‖∣)，没有自己很喜欢的主题。于是，在近期，利用空闲的时间，用<a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>重新搭建了一个<a href="http://www.milovetingting.cn">博客</a>。关于Hexo的具体介绍，可以在其官方网站查看具体的说明。</p>
<h2 id="搭建Hexo"><a href="#搭建Hexo" class="headerlink" title="搭建Hexo"></a>搭建Hexo</h2><p>搭建Hexo比较简单，按照<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>的步骤操作即可。这里，简单记录如下：</p>
<h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装Hexo需要先安装:</p>
<blockquote>
<p>Node.js(Node.js版本不低于8.10，建议使用Node.js 10.0及以上版本)</p>
</blockquote>
<blockquote>
<p>Git</p>
</blockquote>
<p>Node.js和Git的具体安装方法，在Hexo的文档页有详细介绍，此处不再赘述。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>完成以上两个程序安装后，即可使用npm安装Hexo。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/hexo_install.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_install.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>以Windows环境为例，打开CMD命令窗口，定位到需要存放md的文件夹路径下，如:C:\Blog,执行以下命令:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/hexo_init.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_init.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>命令执行完成后，将在C:\Blog\下生成相应的文件，目录如下：</p>
<p><a href="/images/hexo_dir.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_dir.png" src="/img/loading.gif" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line"></span><br><span class="line">|-- _config.yml</span><br><span class="line"></span><br><span class="line">|-- package.json</span><br><span class="line"></span><br><span class="line">|-- scaffods</span><br><span class="line"></span><br><span class="line">|-- source</span><br><span class="line"></span><br><span class="line">    |-- _drafts</span><br><span class="line"></span><br><span class="line">    |-- _posts</span><br><span class="line"></span><br><span class="line">|-- themes</span><br></pre></td></tr></table></figure></div>

<p>主要关注以下目录及文件:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_config.yml</span><br><span class="line"></span><br><span class="line">网站的配置信息，可以在此配置大部分的参数。</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source--posts</span><br><span class="line"></span><br><span class="line">存放MD文件</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">themes</span><br><span class="line"></span><br><span class="line">主题文件夹</span><br></pre></td></tr></table></figure></div>

<h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><p>可通过以下命令生成静态页面:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/hexo_g.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_g.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>会在根目录C:\Blog\下生成public文件夹，里面包含相应的html页面。</p>
<p><a href="/images/hexo_public1.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_public1.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><a href="/images/hexo_public2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_public2.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>可通过以下命令启动服务器:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/hexo_s.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_s.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>打开浏览器，输入网址: <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，即可看到hexo生成的静态页面。</p>
<p><a href="/images/hexo_preview.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_preview.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="应用Butterfly主题"><a href="#应用Butterfly主题" class="headerlink" title="应用Butterfly主题"></a>应用Butterfly主题</h2><p>默认的主题可能并不是我们想要的效果，那么就可以通过更换主题来实现。可以在官网的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题页面</a>选择想要的主题。这里，选择Butterfly主题来应用。</p>
<p>Butterfly主页的展示页面：<a href="https://jerryc.me" target="_blank" rel="noopener">https://jerryc.me</a> ,对应的文档页面为:<a href="https://jerryc.me/posts/21cfbf15" target="_blank" rel="noopener">https://jerryc.me/posts/21cfbf15</a> </p>
<p><a href="/images/butterfly_doc.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/butterfly_doc.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>根据文档说明直接配置主题即可，这里简单记录如下：</p>
<h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><p>可通过以下命令安装主题:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;Butterfly</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/butterfly_install.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/butterfly_install.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="主题应用"><a href="#主题应用" class="headerlink" title="主题应用"></a>主题应用</h3><p>修改站点配置文件_config.yml,把主题修改为Butterfly</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: Butterfly</span><br></pre></td></tr></table></figure></div>

<p>为便于后续平滑升级，在source目录下创建_data文件夹,将Themes/Butterfly目录下的_config.yml复制一份到source/_data目录下,并改名为butterfly.yml</p>
<p>执行以下指令,以查看应用主题后的效果:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean #清除旧的内容</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/hexo_clean.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_clean.png" src="/img/loading.gif" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g #生成发布用的静态页面</span><br></pre></td></tr></table></figure></div>

<p>如果第一次操作，可能会报以下的错误</p>
<p><a href="/images/hexo_g_error.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_g_error.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>关于解决方案，文档里已经在最上方列出:</p>
<p><a href="/images/hexo_g_tip.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_g_tip.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>按照提示，执行以下命令即可：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install cheerio@0.22.0 --save</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/hexo_cheerio.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_cheerio.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>再次执行生成的指令:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/hexo_g2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_g2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>重新启动服务器:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>

<p>刷新网址:<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p>
<p>可以看到，会报以下错误:</p>
<p><a href="/images/hexo_localhost_error.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_localhost_error.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>对应的解决方案可以在Butterfly的<a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener">Github主页</a>看到：</p>
<p><a href="/images/hexo_localhost_tip.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_localhost_tip.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>安装以下插件即可：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/hexo_renderer.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_renderer.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>再次依次执行：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>

<p>刷新<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ,可以看到更新后的主题:</p>
<p><a href="/images/hexo_butterfly_review.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_butterfly_review.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><a href="/images/hexo_butterfly_preview2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_butterfly_preview2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>其它细节设置可以参考Butterfly的<a href="https://jerryc.me/posts/21cfbf15" target="_blank" rel="noopener">文档</a>来配置。</p>
<h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>这里假设已经注册过了Github帐户，如果没有，可以去<a href="https://github.com" target="_blank" rel="noopener">Github</a>注册。</p>
<p>注册好了后，登录Github,创建仓库：点击右上角的+号，选择new repository:</p>
<p><a href="/images/github_new_repository.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/github_new_repository.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><a href="/images/github_new_repository2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/github_new_repository2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在这里，建议将仓库名设置成以下格式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username.github.io</span><br></pre></td></tr></table></figure></div>

<p><strong><font color="#4D4D8F">其中,username请对应换成你的github用户名。</font></strong></p>
<h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><p>如果第一次使用git的话，需要设置用户名和邮箱:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;your username&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure></div>

<p>将上述的”your username”换成自己的真实用户名,”your email”换成真实的email。</p>
<h3 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h3><p>执行以下命令，然后连续三次回车,生成公钥:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/github_rsa.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/github_rsa.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在C盘/用户/用户名/.ssh目录下找到id_rsa.pub文件,用文本编辑工具打开，并复制所有文本内容。在Github页面右上角，点击用户头像-Settings-SSH and GPG keys-New SSH key</p>
<p><a href="/images/github_add_key.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/github_add_key.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><a href="/images/github_add_key2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/github_add_key2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>Title可以随意填写，Key需要填写刚才复制的公钥文本内容。</p>
<p>添加完成后，在控制台输入:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div>

<p>如果配置成功，可以看到成功的回复。</p>
<h3 id="上传文件到Github"><a href="#上传文件到Github" class="headerlink" title="上传文件到Github"></a>上传文件到Github</h3><p>配置_config.yml中的repo信息:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: #你的仓库地址,如:https:&#x2F;&#x2F;github.com&#x2F;milovemengmeng&#x2F;milovemengmeng.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></div>

<p>直接通过hexo来发布到github，需要安装以下插件：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/hexo_deployer_git.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_deployer_git.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>安装成功后，执行以下命令：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/hexo_d.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_d.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>刷新github对应的repository页面，即可看到提交的内容：</p>
<p><a href="/images/git_commit.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/git_commit.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="配置静态站点"><a href="#配置静态站点" class="headerlink" title="配置静态站点"></a>配置静态站点</h3><p>点击Settings,进入GitHub Pages配置，由于之前新建仓库的时候，仓库名为username.github.io，github已经自己为我们发布了静态的页面。如果不是username.github.io的格式，则需要手动配置。</p>
<p><a href="/images/git_static_setting.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/git_static_setting.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><a href="/images/git_static_setting2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/git_static_setting2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>打开username.github.io网址，可以看到之前的配置已经生效。</p>
<p><font color="red">请注意，文中所有的”username”请换成自己对应的用户名</font></p>
<p><a href="/images/hexo_pub.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_pub.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><a href="/images/hexo_pub2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/hexo_pub2.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="部署到Coding"><a href="#部署到Coding" class="headerlink" title="部署到Coding"></a>部署到Coding</h2><p>部署到Coding和部署到Github的过程大同小异，这里不再详细说明。</p>
<h3 id="创建仓库-1"><a href="#创建仓库-1" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>注册<a href="https://coding.net" target="_blank" rel="noopener">Coding</a>，登录后新建仓库。</p>
<h3 id="配置Git-1"><a href="#配置Git-1" class="headerlink" title="配置Git"></a>配置Git</h3><p>如果之前已经部署到了Github，那么则不需要再次执行配置Git。</p>
<h3 id="生成公钥-1"><a href="#生成公钥-1" class="headerlink" title="生成公钥"></a>生成公钥</h3><p>如果之前已经部署到了Github，那么则不需要再次执行生成公钥,但需要在Coding的设置中添加SSH公钥设置，添加完成后，同样可以通过以下命令测试是否配置成功:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure></div>

<p>如果配置成功，会有成功的回复。</p>
<h3 id="上传文件到Coding"><a href="#上传文件到Coding" class="headerlink" title="上传文件到Coding"></a>上传文件到Coding</h3><p>配置_config.yml中的repo信息:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    github: https:&#x2F;&#x2F;github.com&#x2F;milovemengmeng&#x2F;milovemengmeng.github.io.git,master</span><br><span class="line">    coding: https:&#x2F;&#x2F;git.dev.tencent.com&#x2F;milovetingting&#x2F;milovetingting.coding.me.git,master</span><br></pre></td></tr></table></figure></div>

<p>执行以下命令：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

<p>在coding对应的项目页面刷新即可看到新的提交。</p>
<h3 id="配置静态站点-1"><a href="#配置静态站点-1" class="headerlink" title="配置静态站点"></a>配置静态站点</h3><p><a href="/images/coding_pages.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/coding_pages.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在项目所在页面，点击左侧的Pages服务，点击同意协议后，就会配置生成静态应用。</p>
<p><a href="/images/coding_review.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/coding_review.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><a href="/images/coding_review2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/coding_review2.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h2><p>配置好Github和Coding的静态页面好，已经可以通过网络访问到对应的页面了。如果需要个性化域名，则需要申请对应的域名并绑定到Github和Coding上。</p>
<h3 id="域名注册"><a href="#域名注册" class="headerlink" title="域名注册"></a>域名注册</h3><p>域名申请，有很多的服务商可以提供相应的服务。由于本人是通过阿里云申请的域名，下面以阿里云的域名配置为例，来说明域名的绑定。</p>
<h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>登录阿里云的控制台，点击左侧菜单-域名，进入域名管理页面。</p>
<p><a href="/images/aliyun.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/aliyun.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在域名列表中，找到需要解析的域名，点击对应的解析按钮</p>
<p><a href="/images/aliyun1.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/aliyun1.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>点击”添加记录”</p>
<p><a href="/images/aliyun2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/aliyun2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>首先添加对Github的解析:</p>
<h4 id="解析-Github"><a href="#解析-Github" class="headerlink" title="@解析-Github"></a>@解析-Github</h4><p>在cmd窗口中，ping之前配置的静态页面地址</p>
<p><a href="/images/aliyun3.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/aliyun3.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>可以获取到对应的ip地址</p>
<p>编辑如下：</p>
<p><a href="/images/aliyun4.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/aliyun4.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>记录类型选择A</p>
<p>主机记录输入@</p>
<p>解析线路选择境外,因为我们是准备国内访问时访问到Coding，国外访问时访问到Github</p>
<p>记录值输入刚才获取到的ip地址,如:185.199.110.153</p>
<p>点击确定</p>
<h4 id="www解析-Github"><a href="#www解析-Github" class="headerlink" title="www解析-Github"></a>www解析-Github</h4><p>点击添加记录按钮，在打开的新的表单中输入：</p>
<p><a href="/images/aliyun5.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/aliyun5.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>记录类型选择CNME</p>
<p>主机记录输入www</p>
<p>解析线路选择境外</p>
<p>记录值就输入Github的静态页面地址</p>
<p>点击确定。</p>
<h4 id="解析-Coding"><a href="#解析-Coding" class="headerlink" title="@解析-Coding"></a>@解析-Coding</h4><p>在cmd窗口中，ping之前配置的静态页面地址</p>
<p><a href="/images/aliyun6.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/aliyun6.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>可以获取到对应的ip地址</p>
<p>编辑如下：</p>
<p><a href="/images/aliyun7.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/aliyun7.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>记录类型选择A</p>
<p>主机记录输入@</p>
<p>解析线路选择默认</p>
<p>记录值输入刚才获取到的ip地址,如:150.109.19.98</p>
<p>点击确定</p>
<h4 id="www解析-Coding"><a href="#www解析-Coding" class="headerlink" title="www解析-Coding"></a>www解析-Coding</h4><p>点击添加记录按钮，在打开的新的表单中输入：</p>
<p><a href="/images/aliyun8.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/aliyun8.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>记录类型选择CNME</p>
<p>主机记录输入www</p>
<p>解析线路选择默认</p>
<p>记录值就输入Coding的静态页面地址</p>
<p>点击确定。</p>
<h3 id="配置项目CNAME"><a href="#配置项目CNAME" class="headerlink" title="配置项目CNAME"></a>配置项目CNAME</h3><p>在项目根目录-source目录下，新建CNAME文件,内容输入前面申请的域名，如:<a href="http://www.milovetingting.cn">www.milovetingting.cn</a></p>
<p><a href="/images/cname.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/cname.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>依次执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

<p>提交成功后，就可以在Github和Coding对应的项目根目录下发到提交到的CNAME文件。</p>
<p>由于提交了CNAME文件，Github的静态页面服务已经自动绑定了新提交的域名：</p>
<p><a href="/images/cname2.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/cname2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>由于我之前已经绑定了 <a href="http://www.milovetingting.cn">www.milovetingting.cn</a> ,所以这里演示时会提示不能重复绑定。如果没有绑定过重复域名，则会立即生效。</p>
<p>Coding的个人域名绑定，在提交CNAME后，还需要再去设置才能生效</p>
<p><a href="/images/cname3.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/cname3.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在Pages服务，点击右侧的设置图标进行具体的设置：</p>
<p><a href="/images/cname4.png" data-fancybox="group" data-caption="avartar" class="fancybox"><img alt="avartar" title="avartar" data-src="/images/cname4.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在绑定新域名中输入申请的域名，点击绑定。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>其实，关于Hexo搭建博客的文章，网上还是比较多的。写这篇文章的主要目标，是记录此次搭建博客的过程，便于后续再次部署时查找资料，也希望能帮助到有需要的人。</p>
<p>END</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Gradle 多渠道构建</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC11%E7%AB%A0-Android_Gradle%E5%A4%9A%E6%B8%A0%E9%81%93%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android-Gradle-多渠道构建"><a href="#Android-Gradle-多渠道构建" class="headerlink" title="Android Gradle 多渠道构建"></a>Android Gradle 多渠道构建</h1><h2 id="多渠道构建的基本原理"><a href="#多渠道构建的基本原理" class="headerlink" title="多渠道构建的基本原理"></a>多渠道构建的基本原理</h2><p>在Android Gradle中，定义了一个叫Build Variant的概念，一个Build Variant=Build TYpe+Product Flavor，Build Type就是我们构建的类型，比如release和debug;Product Flavor就是我们构建的渠道，比如Baidu,Google等，它们加起来就是baiduRelease,baiduDebug,googleRelease,googleDebug，共有这几种组合的构件产出。Product Flavor也就是我们多渠道构建的基础。以下是新增一个ProductFlavor:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;&#125;</span><br><span class="line">        baidu&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以上的发布渠道配置后，Android Gradle就会生成很多Task。其中，assemble开头的负责生成构件产物(apk)。除此之外，还有compile系列，install系列等。除了生成的Task外，每个ProductFlavor还可以有自己的SourceSet，还可以有自己的dependencies依赖。</p>
<h2 id="Flurry多渠道和友盟多渠道构建"><a href="#Flurry多渠道和友盟多渠道构建" class="headerlink" title="Flurry多渠道和友盟多渠道构建"></a>Flurry多渠道和友盟多渠道构建</h2><p>Flurry本身没有渠道的概念，它有Application，所以可以把一个Application当成一个渠道。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line">            buildConfigField <span class="string">'String'</span>,<span class="string">'FLURRY_KEY'</span>,<span class="string">'"ABADFASSDFAS"'</span></span><br><span class="line">        &#125;</span><br><span class="line">        baidu&#123;</span><br><span class="line">            buildConfigField <span class="string">'String'</span>,<span class="string">'FLURRY_KEY'</span>,<span class="string">'"JKKJKHKJHIHIUY"'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样每个渠道的BuildConfig类中都会有名字为FLURRY_KEY的常量定义，它的值是我们在渠道中使用buildConfigField指定的值，每个渠道不一样，我们只需要在代码中指定使用这个常量即可，这样每个渠道的统计分析就可以做到了。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flurry.init(<span class="keyword">this</span>,FLURRY_KEY);</span><br></pre></td></tr></table></figure></div>

<p>友盟本身有渠道的概念。不过它不是在代码中指定的，而是在AndroidManifest.xml中配置的，通过配置meta-data标签来设置:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"UMENG_CHANNEL"</span> <span class="attr">android:value</span>=<span class="string">"Channel ID"</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="多渠道构建定制"><a href="#多渠道构建定制" class="headerlink" title="多渠道构建定制"></a>多渠道构建定制</h2><p>多渠道的定制，其实就是对Android Gradle插件的ProductFlavor的配置，通过配置ProductFlavor达到灵活控制每一个渠道的目的。</p>
<h3 id="applicaitonId"><a href="#applicaitonId" class="headerlink" title="applicaitonId"></a>applicaitonId</h3><p>用于设置渠道的包名</p>
<h3 id="consumerProguardFiles"><a href="#consumerProguardFiles" class="headerlink" title="consumerProguardFiles"></a>consumerProguardFiles</h3><p>只对Android库项目有用。当我们发布库项目生成一个aar包的时候，使用consumerProguardFiles配置的混淆文件列表也会被打包到aar里一起发布，这样当应用引用这个aar包，并且启用混淆的时候，会自动使用aar包里的混淆文件对aar包里的代码进行混淆，这样我们就不用对该aar包进行混淆配置了。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line">            consumeProguardFiles <span class="string">'proguard-rules.pro'</span>,<span class="string">'proguard-android.txt'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>除了这种方法，还有一种属性设置的方法，区别在于：consumerProguardFiles方法是一直添加，不会清空以前的混淆文件，而consumerProguardFiles属性配置的方式是每次都是新的混淆文件列表，以前配置的会先被清空。</p>
<h3 id="manifestPlaceholders"><a href="#manifestPlaceholders" class="headerlink" title="manifestPlaceholders"></a>manifestPlaceholders</h3><h3 id="multiDexEnabled"><a href="#multiDexEnabled" class="headerlink" title="multiDexEnabled"></a>multiDexEnabled</h3><p>用来启用多个dex的配置，主要用来突破65535方法的问题</p>
<h3 id="proguardFiles"><a href="#proguardFiles" class="headerlink" title="proguardFiles"></a>proguardFiles</h3><p>混淆使用的文件列表</p>
<h3 id="signingConfig"><a href="#signingConfig" class="headerlink" title="signingConfig"></a>signingConfig</h3><p>签名配置</p>
<h3 id="testApplicationId"><a href="#testApplicationId" class="headerlink" title="testApplicationId"></a>testApplicationId</h3><p>用来适配测试包的包名</p>
<h3 id="testFunctionalTest和testHandleProfiling"><a href="#testFunctionalTest和testHandleProfiling" class="headerlink" title="testFunctionalTest和testHandleProfiling"></a>testFunctionalTest和testHandleProfiling</h3><p>testFunctionalTest表示是否为功能测试，testHandleProfiling表示是否启用分析功能</p>
<h3 id="testInstrumentationRunner"><a href="#testInstrumentationRunner" class="headerlink" title="testInstrumentationRunner"></a>testInstrumentationRunner</h3><p>用来配置运行测试使用的Instrumentation Runner的类名，是一个全路径的类名，而且必须是android.app.Instrumentation的子类，一般情况下，我们使用android.test.InstrumentationTestRunner，当然也可以自定义。</p>
<h3 id="testInstrumentationRunnerArguments"><a href="#testInstrumentationRunnerArguments" class="headerlink" title="testInstrumentationRunnerArguments"></a>testInstrumentationRunnerArguments</h3><p>配合上一个属性用的，用来配置Instrumentation Runner使用的参数，它们最终都是使用adb shell am instrument这个命令。</p>
<h3 id="versionCode和versionName"><a href="#versionCode和versionName" class="headerlink" title="versionCode和versionName"></a>versionCode和versionName</h3><p>配置渠道的版本号和版本名称。</p>
<h3 id="useJack"><a href="#useJack" class="headerlink" title="useJack"></a>useJack</h3><p>用于标记是否启用Jack和Jill这个全新的，高性能的编译器。</p>
<h3 id="dimension"><a href="#dimension" class="headerlink" title="dimension"></a>dimension</h3><p>dimension是ProductFlavor的一个属性，接受一个字符串，作为该ProdoctFlavor的维度。可以简单理解为对ProductFlavor进行分组，dimension接受的参数就是我们分组的组名，也就是维度名称。维度名称不能随便指定，在使用前，必须先声明。</p>
<p>flavorDimension是我们使用的android{}里面的方法，它和productFlavors{}是平级的，一定要先使用flavorDimension声明维度，才能在ProductFlavor中使用。</p>
<p>我们同时指定多个维度，但是一定要，这些维度是有顺序的，有优先级的，第一个参数的优先级最大，其实是第二个，以此类推。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    flavorDimensions <span class="string">"abi"</span>,<span class="string">"version"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>声明维度后，就可以使用了:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    flavorDimensions <span class="string">"abi"</span>,<span class="string">"version"</span></span><br><span class="line"></span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        free&#123;</span><br><span class="line">            dimension <span class="string">'version'</span></span><br><span class="line">        &#125;</span><br><span class="line">        paid&#123;</span><br><span class="line">            dimension <span class="string">'version'</span></span><br><span class="line">        &#125;</span><br><span class="line">        x86&#123;</span><br><span class="line">            dimension <span class="string">'abi'</span></span><br><span class="line">        &#125;</span><br><span class="line">        arm&#123;</span><br><span class="line">            dimension <span class="string">'abi'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="提高多渠道构建的效率"><a href="#提高多渠道构建的效率" class="headerlink" title="提高多渠道构建的效率"></a>提高多渠道构建的效率</h2><p>参考美团方案</p>
<p>利用在apk的META-INF目录下添加空文件不用重新签名的原理</p>
<p>1、利用Android Gradle打一个基本包(母包)</p>
<p>2、基于该包复制一个，文件名要能区分出产品、打包时间 、版本、渠道等 </p>
<p>3、对复制出来的apk进行修改，在其META-INF目录下新增空文件，但空文件的文件名要有意义，必须包含能区分渠道的名字</p>
<p>4、重复步骤2、3生成我们所需的所有渠道包apk</p>
]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>构建</tag>
        <tag>多渠道</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Gradle 多项目构建</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC10%E7%AB%A0-Android_Gradle%E5%A4%9A%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android-Gradle-多项目构建"><a href="#Android-Gradle-多项目构建" class="headerlink" title="Android Gradle 多项目构建"></a>Android Gradle 多项目构建</h1><h2 id="Android-项目区别"><a href="#Android-项目区别" class="headerlink" title="Android 项目区别"></a>Android 项目区别</h2><p>Android项目一般分为库项目，应用项目，测试项目，Android Gradle 根据这些项目分别对应3种插件：com.android.library,com.android.application,com.android.test。</p>
<h2 id="Android多项目设置"><a href="#Android多项目设置" class="headerlink" title="Android多项目设置"></a>Android多项目设置</h2><p>定义一个工程，包含很多项目，在Gradle中，项目的结构没有那么多限制，只要在settings.gradle里配置好这些项目就可以了。</p>
<h2 id="库项目引用的配置"><a href="#库项目引用的配置" class="headerlink" title="库项目引用的配置"></a>库项目引用的配置</h2><p>Android库项目的引用，通过dependencies实现:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    <span class="keyword">implements</span> <span class="keyword">project</span>(<span class="string">':plugin'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="库项目单独发布"><a href="#库项目单独发布" class="headerlink" title="库项目单独发布"></a>库项目单独发布</h2><h3 id="Maven私服搭建"><a href="#Maven私服搭建" class="headerlink" title="Maven私服搭建"></a>Maven私服搭建</h3><p>搭建自己的Maven私服，推荐使用Nexus Repositories Manager。</p>
<p>具体的搭建如下：</p>
<p>1、下载。在<a href="https://www.sonatype.com/" target="_blank" rel="noopener">https://www.sonatype.com/</a> 选择对应的软件类型，我这里选择的是OSS3版本，即免费版。 在<a href="https://www.sonatype.com/download-nexus-repo-oss" target="_blank" rel="noopener">https://www.sonatype.com/download-nexus-repo-oss</a> 页面根据操作系统选择需要下载的应用。</p>
<p>2、解压。解压后有两个文件夹，nexus-3.13.0-01和sonatype-work。</p>
<p>3、启动。进入nexus-3.13.0-01目录下的bin目录，然后在命令行中输入./nexus start，启动nexus。</p>
<p>4、浏览器访问<a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a> ,如访问成功，即表示nexus搭建成功。以默认的管理员帐号admin,密码admin123登录，可以看到默认创建的仓库。</p>
<p>nexus的具体配置这里不展开讲，具体可以在网上找相关资源，这里只用默认配置。</p>
<h3 id="库项目发布"><a href="#库项目发布" class="headerlink" title="库项目发布"></a>库项目发布</h3><p>新建名为TestLib的Android Library，在根目录的gradle.properties中配置如下(这里配置是为了方便统一管理，也可以直接写在library的build.gradle中):</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># maven local config</span><br><span class="line">#正式版本号</span><br><span class="line">versionName=<span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line">#快照版本号</span><br><span class="line">snapshotVersionName=<span class="number">1.0</span>-SNAPSHOT</span><br><span class="line">#快照仓库地址</span><br><span class="line">mavenSnapshotUrl=http:<span class="comment">//localhost:8081/repository/maven-snapshots/</span></span><br><span class="line">#发布仓库地址</span><br><span class="line">mavenReleasesUrl=http:<span class="comment">//localhost:8081/repository/maven-releases/</span></span><br><span class="line">maven_local_username=admin</span><br><span class="line">maven_local_password=admin123</span><br><span class="line">#项目组 id</span><br><span class="line">maven_pom_groupId=com.wangyz.plugins</span><br><span class="line">#项目名称</span><br><span class="line">maven_pom__artifactId=testlib</span><br><span class="line">#打包类型</span><br><span class="line">maven_pom__packaging=aar</span><br><span class="line">maven_pom__description=test upload</span><br></pre></td></tr></table></figure></div>

<p>在TestLib目录下的build.gradle的android节点下增加以下配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">// type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义</span></span><br><span class="line">    <span class="keyword">task</span> androidJavadocs(type: Javadoc) &#123;</span><br><span class="line">        <span class="comment">// 设置源码所在的位置</span></span><br><span class="line">        <span class="keyword">source</span> = android.<span class="keyword">sourceSets</span>.main.java.sourceFiles</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成javadoc.jar</span></span><br><span class="line">    <span class="keyword">task</span> androidJavadocsJar(type: Jar) &#123;</span><br><span class="line">        <span class="comment">// 指定文档名称</span></span><br><span class="line">        classifier = <span class="string">'javadoc'</span></span><br><span class="line">        <span class="keyword">from</span> androidJavadocs.<span class="keyword">destinationDir</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成sources.jar</span></span><br><span class="line">    <span class="keyword">task</span> androidSourcesJar(type: Jar) &#123;</span><br><span class="line">        classifier = <span class="string">'sources'</span></span><br><span class="line">        <span class="keyword">from</span> android.<span class="keyword">sourceSets</span>.main.java.sourceFiles</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 产生相关配置文件的任务</span></span><br><span class="line">    <span class="keyword">artifacts</span> &#123;</span><br><span class="line">        archives androidSourcesJar</span><br><span class="line">        archives androidJavadocsJar</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传 到 maven 的任务</span></span><br><span class="line">    uploadArchives &#123;</span><br><span class="line">        <span class="keyword">repositories</span>.mavenDeployer &#123;</span><br><span class="line"></span><br><span class="line">            repository(url: mavenReleasesUrl) &#123;</span><br><span class="line">                authentication(userName: maven_local_username, password: maven_local_password)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            snapshotRepository(url: mavenSnapshotUrl) &#123;</span><br><span class="line">                authentication(userName: maven_local_username, password: maven_local_password)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pom.<span class="keyword">project</span> &#123;</span><br><span class="line">                <span class="comment">// 注意：【这里通过切换 versionName 的赋值来区分上传快照包还是正式包（snapshot 版本必须以 -SNAPSHOT 结尾）】</span></span><br><span class="line">                <span class="comment">//version snapshotVersionName</span></span><br><span class="line">                version versionName</span><br><span class="line">                artifactId maven_pom__artifactId</span><br><span class="line">                groupId maven_pom_groupId</span><br><span class="line">                packaging maven_pom__packaging</span><br><span class="line">                <span class="keyword">description</span> maven_pom__description</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>命令行切换到TestLib目录下，执行gradle uploadArchives命令，执行成功后，在浏览器中可看到上传成功。</p>
<h3 id="库项目的引用"><a href="#库项目的引用" class="headerlink" title="库项目的引用"></a>库项目的引用</h3><p>在要引用的项目，如app，在项目根目录的build.gradle的allprojects节点中添加以下配置:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line"></span><br><span class="line">        mavenCentral()</span><br><span class="line">        mavenLocal()</span><br><span class="line"></span><br><span class="line">        maven &#123;</span><br><span class="line">            url mavenReleasesUrl</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        maven &#123;</span><br><span class="line">            url mavenSnapshotUrl</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">'https://maven.google.com'</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后在app的build.gradle中引入依赖:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">'com.wangyz.plugins:testlib:1.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>同步项目后，即可引用TestLib的相关资源。</p>
<p>参考以下资源，在此表示感谢！</p>
<p><a href="https://www.jianshu.com/p/33d9861217bf" target="_blank" rel="noopener">https://www.jianshu.com/p/33d9861217bf</a></p>
]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>多项目</tag>
        <tag>构建</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Gradle 高级自定义</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC9%E7%AB%A0-Android_Gradle%E9%AB%98%E7%BA%A7%E8%87%AA%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android-Gradle-高级自定义"><a href="#Android-Gradle-高级自定义" class="headerlink" title="Android Gradle 高级自定义"></a>Android Gradle 高级自定义</h1><h2 id="使用共享库"><a href="#使用共享库" class="headerlink" title="使用共享库"></a>使用共享库</h2><p>Android的包,如android.app,android.content,android.view,android.widget等，是默认包含在Android SDK库里的，所有应用都可以直接使用它们。还有一些库，如com.google.android.maps,android.test.runner等，这些库是独立的，并不会被系统自动链接，所以如果要使用的话，就需要单独进行生成使用，这类库我们称为共享库。</p>
<p>在AndroidManifest.xml中，我们可以指定要使用的库:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">&lt;uses-library </span><br><span class="line">android:name=<span class="string">"com.google.android.maps"</span></span><br><span class="line">android:required=<span class="string">"true"</span></span><br><span class="line"><span class="regexp">/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这样我们就声明了需要使用maps这个共享库。声明之后，在安装生成的apk包的时候，系统会根据我们的定义，帮助检测手机系统是否有我们需要的共享库。因为我们设置的android:required=”true”,如果手机系统不满足，将不能安装该应用。</p>
<p>在Android中，除了标准的SDK，还存在两种库：一种是add-ons库，它们位于add-ons目录下，这些库大部分是第三方厂商或者公司开发的，一般是为了开发者使用，但又不想暴露具体标准实现；第二类是optional可选库，它们位于platforms/androi-xx/optional目录下，一般是为了兼容旧版本的API，比如org.apache.http.legacy。</p>
<p>对于第一类add-ons附件库来说，Android Gradle会自动解析，帮我们添加到classpath里。第二类optional可选库就不会，需要自己将这个可选库添加到classpath中。Android Gradle提供了useLibrary方法，让我们把一个库添加到classpath中。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    useLibrary <span class="string">'org.apache.http.legacy'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以上的配置已经可以生成APK，并能安装运行。但最好也要在AndroidManifest文件中配置一下uses-library标签，以防出现问题。</p>
<h2 id="批量修改生成的apk文件名"><a href="#批量修改生成的apk文件名" class="headerlink" title="批量修改生成的apk文件名"></a>批量修改生成的apk文件名</h2><p>Android对象为我们提供了3个属性：applicationVariants（仅仅适用于Android应用Gradle插件），libraryVariants（仅仅适用于Android库Grdle插件），testVariants（以上两种Gradle插件都适用）。</p>
<p>以上3个属性返回的都是DomainObjectSet对象集合，访问它们都会触发创建所有的任务。</p>
<p>以下为批量修改apk名称的示例:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.gradle"</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">        flavorDimensions <span class="string">"default"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        baidu &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        huawei &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    applicationVariants.all &#123;</span><br><span class="line">        variant -&gt;</span><br><span class="line">            variant.outputs.all &#123;</span><br><span class="line">                output -&gt;</span><br><span class="line">                    <span class="keyword">if</span> (output.outputFile != <span class="keyword">null</span> &amp;&amp; output.outputFile.name.endsWith(<span class="string">'.apk'</span>) &amp;&amp; <span class="string">'release'</span>.equals(variant.buildType.name)) &#123;</span><br><span class="line">                        <span class="keyword">def</span> flavorName = variant.flavorName.startsWith(<span class="string">"_"</span>) ? variant.flavorName.substring(<span class="number">1</span>) : variant.flavorName</span><br><span class="line">                        <span class="keyword">def</span> fileName = <span class="string">"channel_$&#123;flavorName&#125;_$&#123;variant.versionName&#125;.apk"</span></span><br><span class="line">                        outputFileName = fileName</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="动态生成版本信息"><a href="#动态生成版本信息" class="headerlink" title="动态生成版本信息"></a>动态生成版本信息</h2><p>一般的版本由3部分组成：major.minor.patch，第一个是主版本号，第二个是副版本号，第三个是补丁号。</p>
<h3 id="最原始的方式"><a href="#最原始的方式" class="headerlink" title="最原始的方式"></a>最原始的方式</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.channel"</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="分模块的方式"><a href="#分模块的方式" class="headerlink" title="分模块的方式"></a>分模块的方式</h3><p>可以把版本号的配置单独抽取出来，放在单独的文件里，供build引用。</p>
<p>新建一个vesion.gradle文件：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">ext&#123;</span><br><span class="line">    appVersionCode = <span class="number">1</span></span><br><span class="line">    appVersionName = <span class="string">"1.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在build.gradle中引用它：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">apply <span class="keyword">from</span>:<span class="string">'version.gradle'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.channel"</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode appVersionCode</span><br><span class="line">        versionName appVersionName</span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>先使用apply from加载version.gradle脚本文件，这样它里面定义的扩展属性就可以使用了。</p>
<h3 id="从git的tag中读取"><a href="#从git的tag中读取" class="headerlink" title="从git的tag中读取"></a>从git的tag中读取</h3><p>想获取当前的tag名称，在git下非常简单，使用以下命令即可：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">git describe --abbrev=<span class="number">0</span> --tags</span><br></pre></td></tr></table></figure></div>

<p>知道了命令，那么如何在Gradle中动态获取呢？这就需要exec。Gradle提供了执行shell命令非常简便的方法，即exec。它是一个Task任务。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> getAppVersionName()&#123;</span><br><span class="line">    <span class="keyword">def</span> stdout = <span class="keyword">new</span> ByteArrayOutputStream()</span><br><span class="line">    exec&#123;</span><br><span class="line">        commandLine <span class="string">'git'</span>,<span class="string">'describe'</span>,<span class="string">'--abbrev=0'</span>,<span class="string">'--tags'</span></span><br><span class="line">        standardOutput = stdout</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stdout.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以上定义了一个获取版本名称的方法，通过该方法获取了git tag的名称后，就可以把它作为应用的版本名称，只要把versionName配置成这个方法就好了。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.channel"</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName getAppVersionName()</span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="从属性文件中动态获取和递增"><a href="#从属性文件中动态获取和递增" class="headerlink" title="从属性文件中动态获取和递增"></a>从属性文件中动态获取和递增</h3><p>1、在项目目录下新建一个version.properties的属性文件</p>
<p>2、把版本名称分为3部分major.minor.patch，版本号分为一部分number，然后在properties新增4个KV键值对</p>
<p>3、在build.gradle新建一个方法用于读取该属性文件</p>
<h2 id="隐藏签名文件信息"><a href="#隐藏签名文件信息" class="headerlink" title="隐藏签名文件信息"></a>隐藏签名文件信息</h2><p>定义一个文件，用来保存签名的相关信息，如sign.properties,这个文件加入.gitignore，不上传到git中。通过读取这个文件来获取配置信息。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            <span class="keyword">def</span> signPropertiesFile = <span class="string">'sign.properties'</span></span><br><span class="line">            storeFile <span class="keyword">file</span>(readSignProperties(signPropertiesFile,<span class="string">'storeFile'</span>))</span><br><span class="line">            storePassword readSignProperties(signPropertiesFile,<span class="string">'storePassword'</span>)</span><br><span class="line">            keyAlias readSignProperties(signPropertiesFile,<span class="string">'keyAlias'</span>)</span><br><span class="line">            keyPassword readSignProperties(signPropertiesFile,<span class="string">'keyPassword'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buildTypes&#123;</span><br><span class="line">    release&#123;</span><br><span class="line">        signingConfig signingConfigs.release</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> readSignProperties(String filePath,String key)&#123;</span><br><span class="line">    <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">file</span>(filePath)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">file</span>.exists())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">def</span> Properties properties = <span class="keyword">new</span> Properties()</span><br><span class="line">        properties.load(<span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>))</span><br><span class="line">        <span class="keyword">return</span> properties[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"file not exist!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>sign.properties内容如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">storeFile=android.keystore</span><br><span class="line">storePassword=android</span><br><span class="line">keyAlias=android</span><br><span class="line">keyPassword=android</span><br></pre></td></tr></table></figure></div>

<h2 id="动态配置AndroidManifest文件"><a href="#动态配置AndroidManifest文件" class="headerlink" title="动态配置AndroidManifest文件"></a>动态配置AndroidManifest文件</h2><p>Android Gradle 提供了非常便捷的方法让我们来替换AndroidManifest文件中的内容，它就是manifestPlaceholder，Manifest占位符。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line">            manifestPlaceholders = [APP_CHANNEL:<span class="string">"google"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        baidu&#123;</span><br><span class="line">            manifestPlaceholders = [APP_CHANNEL:<span class="string">"baidu"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在AndroidManifest文件中使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">&lt;application&gt;</span><br><span class="line">&lt;meta-data </span><br><span class="line">android:name=<span class="string">"APP_CHANNEL"</span></span><br><span class="line">android:value=<span class="string">"$&#123;APP_CHANNEL&#125;"</span></span><br><span class="line"><span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>application&gt;</span><br></pre></td></tr></table></figure></div>

<p>如果需要批量修改(假设需要将名称改为和渠道名一样)，可以通过productFlavors迭代方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        baidu&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    productFlavors.all&#123;</span><br><span class="line">        flavor-&gt;</span><br><span class="line">        manifestPlaceholder = [APP_CHANNEL:name]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="自定义BuildConfig"><a href="#自定义BuildConfig" class="headerlink" title="自定义BuildConfig"></a>自定义BuildConfig</h2><p>Android Gradle 提供了buildConfigField(String type,String name,String value)让我们添加自己的常量到BuildConfig中。使用示例:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line">            buildConfigField <span class="string">'String'</span>,<span class="string">'URL'</span>,<span class="string">'"http://www.google.com"'</span></span><br><span class="line">        &#125;</span><br><span class="line">        baidu&#123;</span><br><span class="line">            buildConfigField <span class="string">'String'</span>,<span class="string">'URL'</span>,<span class="string">'"http://www.baidu.com"'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>需要注意，value这个参数，是单引号中间的部分，尤其对于String类型的值，里面的双引号不能省略。value是什么就写什么，原封不动地放在单引号里。</p>
<p>上面是渠道，productFlavor,其实不光渠道可以配置自定义字段，构建类型BuildType也可以配置。如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    buildTypes&#123;</span><br><span class="line">        debug&#123;</span><br><span class="line">            buildConfigField <span class="string">'String'</span>,<span class="string">'NAME'</span>,<span class="string">'"zhangsan"'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="动态添加自定义的资源"><a href="#动态添加自定义的资源" class="headerlink" title="动态添加自定义的资源"></a>动态添加自定义的资源</h2><p>实现这一功能的方法是resValue方法。它在BuildType和ProductFlavor这两个对象中存在。它会生成一个资源，效果和在res/values文件中定义一个资源是等价的。</p>
<p>resValue方法有三个参数，第一个是type，也就是你要定义资源的类型，比如有string,id,bool等；第二个是name,也就是定义资源的名称，以便在工程中引用；第三个是value,就是定义资源的值。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        google&#123;</span><br><span class="line">            resValue <span class="string">'string'</span>,<span class="string">'tip'</span>,<span class="string">'hello'</span></span><br><span class="line">        &#125;</span><br><span class="line">        baidu&#123;</span><br><span class="line">            resValue <span class="string">'string'</span>,<span class="string">'tip'</span>,<span class="string">'hi'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Java编译选项"><a href="#Java编译选项" class="headerlink" title="Java编译选项"></a>Java编译选项</h2><p>Android对象提供了一个compileOptions方法，接受一个CompileOptions类型的闭包作为参数，来对Java编译选项进行配置:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    compileOptions&#123;</span><br><span class="line">        encoding <span class="string">'utf-8'</span></span><br><span class="line">        <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_6</span><br><span class="line">        <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_6</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>CompileOptions是编译配置，它提供三个属性，分别是encoding,sourceCompatibility,targetCompatibility,通过对它们进行设置来配置Java相关的编译选项。</p>
<p>sourceCompatibility是配置Java源代码的编译级别</p>
<p>targetCompatibility是配置生成的Java字节码的版本</p>
<h2 id="adb操作选项配置"><a href="#adb操作选项配置" class="headerlink" title="adb操作选项配置"></a>adb操作选项配置</h2><p>在Android Gradle 中，为我们预留了对adb的一些选项的控制配置，它就是adbOptions{}闭包。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    adbOptions&#123;</span><br><span class="line">        timeOutInMs <span class="number">5</span>*<span class="number">1000</span></span><br><span class="line">        installOptions <span class="string">'-r'</span>,<span class="string">'-s'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="DEX选项配置"><a href="#DEX选项配置" class="headerlink" title="DEX选项配置"></a>DEX选项配置</h2><p>Android Gradle 提供了dexOptions{}闭包，让我们可以对dx操作进行一些配置。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    dexOptions&#123;</span><br><span class="line">        incremental <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="突破65535方法限制"><a href="#突破65535方法限制" class="headerlink" title="突破65535方法限制"></a>突破65535方法限制</h2><p>Java源文件被打包成一个DEX文件，这个文件就是优化过的、Dalvik虚拟机可执行的文件，Dalvik虚拟机在执行DEX文件时，使用了short类型来索引DEX文件中的方法，这就意味着单个DEX文件可以被定义的方法最多只有是65535，当定义的方法数量超过时，就会出错。</p>
<p>Android官方给出的解决方案：Multidex。对于Android5.0以后的版本，使用了ART的运行方式，可以天然支持App有多个DEX文件，ART在安装App的时候执行预编译，把多个DEX文件合并成一个oat文件执行。对于Android5.0之前的版本，Dalvik虚拟机限制每个App只能有一个class.dex，要使用它们，就得使用Android提供的Multidex库。</p>
<p>要在项目中使用Multidex,首先要修改Gradle build配置文件，启用Multidex，并同时配置Multidex需要的jar依赖。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        multiDexEnabled <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    implementation <span class="string">'com.android.support:multidex:1.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>配置好之后，开启了Multidex，会让我们的方法多于65535个的时候生成多个DEX文件，名字为classes.dex,classes(…n)这样的形式。但是对于Android5.0以前的系统虚拟机，它只认识一个DEX，名字还是classes.dex,所以想达到程序可以正常运行的目的，也要让虚拟机把其它几个生成的classes加载进来。要做到这步，就必须在App程序启动的入口控制，这个入口就是Application。</p>
<p>Multidex提供现成的Application，名字是MultiDexApplication，如果我们没有自定义Applicaiton的话，直接使用MultiDexApplication即可，在Manifest清单文件中配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> </span></span><br><span class="line"><span class="tag"><span class="attr">...</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:name</span>=<span class="string">"android.support.multidex.MultiDexApplication"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>如果有自定义的Application，并且是直接继承自Application，那么只需要把继承改为我们的MultiDexApplication即可。</p>
<p>如果自定义的Application是继承自第三方提供的Application,就不能改继承了，这个时候可以重写attachBaseContext方法来实现：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">    MultiDex.install(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>虽然有了解决65535问题的方法，但还是要尽量避免我们工程中的方法超过65535.首先不能滥用第三方库，如果引用，最好也要自己精简。精简后，还要使用ProGuard减小DEX的大小。还有因为Dalvik linearAlloc的限制，尤其在2.2和2.3版本上，只有5MB，到Android 4.0的时候升级到8MB，所以低于4.0的系统上dexopt的时候可能会崩溃。</p>
<h2 id="自动清理未使用的资源"><a href="#自动清理未使用的资源" class="headerlink" title="自动清理未使用的资源"></a>自动清理未使用的资源</h2><p>Android Gradle 为我们提供了在构建打包时自动清理未使用的资源的方法，这个就是Resource Shrinking。</p>
<p>Resource Shringking要结合Code Shringking一起使用，即我们开发中经常使用的ProGuard，也就是我们要启用minifyEnabled，是为了减缩代码。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    buildTypes&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            minifyEnabled <span class="keyword">true</span></span><br><span class="line">            shringkResources <span class="keyword">true</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>自动清理未使用的资源这个功能虽然好用，但是有时候会误删有用的程序，因为我们在代码编写的时候，可能会使用反射去引用资源，尤其很多的第三方库会这么做，这个时候Android Gradle就区分不出来，可能会误认为这些资源不有被使用。针对这种情况，Android Gradle提供了keep方法来让我们配置哪些资源不被清理。</p>
<p>keep方法使用非常简单，我们要新建一个xml文件来配置，这个文件是res/raw/keep.xml，然后通过tools:keep属性来设置。这个tools:keep接受一个以逗号分隔的配置资源列表，并且支持星号*通配符。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"&gt;</span></span><br><span class="line"><span class="meta">&lt;resources xmlns:tools="http://schemas.android.com/tools" tools:keep="@layout/layout_a,@layout/layout_b" /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>keep.xml还有一个属性是tools:shrinkMode，用于配置自动清理资源的模式，默认是false，是安全的。</p>
<p>除了shrinkResources之外，Android Gradle 还提供了一个resConfigs,它属于ProductFlavor的一个方法，可以让我们配置哪些类型的资源才会被打包进APK中。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        resConfigs <span class="string">'zh'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面代码表示，只保留zh资源。</p>
]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Android Gradle工程</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC8%E7%AB%A0-%E8%87%AA%E5%AE%9A%E4%B9%89Android_Gradle%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="自定义Android-Gradle工程"><a href="#自定义Android-Gradle工程" class="headerlink" title="自定义Android Gradle工程"></a>自定义Android Gradle工程</h1><h2 id="defaultConfig默认配置"><a href="#defaultConfig默认配置" class="headerlink" title="defaultConfig默认配置"></a>defaultConfig默认配置</h2><p>defaultConfig是Android对象中的一个配置项，负责定义所有的默认配置。一个基本的defaultConfig配置如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.app"</span></span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="applicationId"><a href="#applicationId" class="headerlink" title="applicationId"></a>applicationId</h3><p>applicationId是ProductFlavor的一个属性，用于指定生成的App的包名，默认情况下是Null.这个时候在构建的时候，会从我们的AndroidManifest.xml文件读取，也就是我们在AndroidManifest.xml文件中配置的manifest标签的package属性值。</p>
<h3 id="minSdkVersion"><a href="#minSdkVersion" class="headerlink" title="minSdkVersion"></a>minSdkVersion</h3><p>minSdkVersion是ProductFlavor的一个方法，对应的方法原型为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> minSdkVersion(<span class="keyword">int</span> minSdkVersion)&#123;</span><br><span class="line">    setMinSdkVersion(minSdkVersion);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>它可以指定我们的App最低支持的Android操作系统版本，其对应的值是Android Sdk的API LEVEL.它还有两个方法原型:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setMinSdkVersion(@Nullable String minSdkVersion)&#123;</span><br><span class="line">    setMinSdkVersion(getApiVersion(minSdkVersion))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> minSdkVersion(@Nullable String minSdkVersion)&#123;</span><br><span class="line">    setMinSdkVersion(minSdkVersion)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="targetSdkVersion"><a href="#targetSdkVersion" class="headerlink" title="targetSdkVersion"></a>targetSdkVersion</h3><p>这个用于配置我们基于哪个Android SDK开发，它的可选值和minSdkVersion一样。没有配置的时候，也会从AndroidManifest.xml读取。</p>
<h3 id="versionCode"><a href="#versionCode" class="headerlink" title="versionCode"></a>versionCode</h3><p>它也是ProductFlavor的一个属性，用于配置Android App的内部版本号，是一个整数，通常用于版本的升级，没有配置的时候，从AndroidManifest.xml读取。方法原型是:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">@NonNull</span><br><span class="line"><span class="keyword">public</span> ProductFlavor setVersionCode(Integer versionCode)&#123;</span><br><span class="line">    mVersionCode = versionCode;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">@NonNull</span><br><span class="line"><span class="keyword">public</span> Integer getVersionCode()&#123;</span><br><span class="line">    <span class="keyword">return</span> mVersionCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="versionName"><a href="#versionName" class="headerlink" title="versionName"></a>versionName</h3><p>用于配置Android App的版本名称，如V1.0.0等。</p>
<h3 id="testApplicationId"><a href="#testApplicationId" class="headerlink" title="testApplicationId"></a>testApplicationId</h3><p>用于配置测试App的包名，默认情况下是applicationId+”.test”。</p>
<h3 id="testInstrumentationRunner"><a href="#testInstrumentationRunner" class="headerlink" title="testInstrumentationRunner"></a>testInstrumentationRunner</h3><p>用于配置单元测试时使用的Runner，默认使用的是android.test.InstrumentationTestRunner。</p>
<h3 id="signingConfig"><a href="#signingConfig" class="headerlink" title="signingConfig"></a>signingConfig</h3><p>配置默认的签名信息，对生成的App签名。</p>
<h3 id="proguardFile"><a href="#proguardFile" class="headerlink" title="proguardFile"></a>proguardFile</h3><p>用于配置App ProGuard混淆所使用的Proguard配置文件。</p>
<h3 id="proguardFiles"><a href="#proguardFiles" class="headerlink" title="proguardFiles"></a>proguardFiles</h3><p>这个也是配置ProGuard的配置文件，只不过它可以同时接受多个配置文件，因为它的参数是一个可变类型的参数。</p>
<h2 id="配置签名信息"><a href="#配置签名信息" class="headerlink" title="配置签名信息"></a>配置签名信息</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line"></span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"myrelease.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyReleaseKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面例子中，配置了一个名为release的签名配置，除此之外，还可以配置多个不同的签名信息。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line"></span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"myrelease.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyReleaseKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"mydebug.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyDebugKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>现在已经配置好了两个签名信息，但还没有被应用，应用方法如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line"></span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"myrelease.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyReleaseKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"mydebug.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyDebugKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.app"</span></span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        signingConfig signingConfigs.debug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>除了上面的默认签名配置外，也可以对构建类型分别配置签名信息。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line"></span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"myrelease.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyReleaseKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"mydebug.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"password"</span></span><br><span class="line">            keyAlias <span class="string">"MyDebugKey"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">        &#125;</span><br><span class="line">        debug&#123;</span><br><span class="line">            signingConfig signingConfigs.debug</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="构建的应用类型"><a href="#构建的应用类型" class="headerlink" title="构建的应用类型"></a>构建的应用类型</h2><p>如果想增加新的构建类型，在buildTypes{}代码块中继续添加元素就可以。</p>
<h3 id="applicationIdSuffix"><a href="#applicationIdSuffix" class="headerlink" title="applicationIdSuffix"></a>applicationIdSuffix</h3><p>applicationIdSuffix是BuildType的一个属性，用于配置基于默认的applicationId的后缀。</p>
<h3 id="debuggable"><a href="#debuggable" class="headerlink" title="debuggable"></a>debuggable</h3><p>debuggable用于配置一个可供调试的apk。其值可以true或false。</p>
<h3 id="jniDebuggable"><a href="#jniDebuggable" class="headerlink" title="jniDebuggable"></a>jniDebuggable</h3><p>用于配置是否生成一个可供调试jni代码的apk。可接受boolean类型的值。</p>
<h3 id="minifyEnabled"><a href="#minifyEnabled" class="headerlink" title="minifyEnabled"></a>minifyEnabled</h3><p>用于配置该BuildType是否启用Proguard混淆，接受boolean类型的值。</p>
<h3 id="multiDexEnabled"><a href="#multiDexEnabled" class="headerlink" title="multiDexEnabled"></a>multiDexEnabled</h3><p>用于配置该BuildType是否启用自动拆分多个Dex的功能。</p>
<h3 id="proguardFile-1"><a href="#proguardFile-1" class="headerlink" title="proguardFile"></a>proguardFile</h3><p>用于配置Proguard混淆使用的配置文件。</p>
<h3 id="proguardFiles-1"><a href="#proguardFiles-1" class="headerlink" title="proguardFiles"></a>proguardFiles</h3><p>用于配置Proguard混淆使用的配置文件，可同时配置多个Proguard配置文件。</p>
<h3 id="shrinkResources"><a href="#shrinkResources" class="headerlink" title="shrinkResources"></a>shrinkResources</h3><p>用于配置是否自动清理未使用的资源，默认为false。</p>
<h3 id="signingConfig-1"><a href="#signingConfig-1" class="headerlink" title="signingConfig"></a>signingConfig</h3><p>配置该BuildType使用的签名配置。</p>
<p>每一个BuildType都会生成一个SourceSet，默认位置为src//。新增的BuildType名字不能是main和androidTest,因为这两个已经被系统占用，同时每个BuildType之间名称不能相同。</p>
<h2 id="使用混淆"><a href="#使用混淆" class="headerlink" title="使用混淆"></a>使用混淆</h2><p>代码混淆是一个非常有用的功能，它不仅能优化代码，让apk包变得更小，还可以混淆原来的代码，让反编译的人不容易看明白业务逻辑。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    buildTypes&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            minifyEnabled <span class="keyword">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>),<span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="启用Zipalign优化"><a href="#启用Zipalign优化" class="headerlink" title="启用Zipalign优化"></a>启用Zipalign优化</h2><p>zipalign是Android为我们提供的一个整理优化apk文件的工具。它能提高系统和应用的运行效率，更快地读写apk中的资源，降低内存的使。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    buildTypes&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            zipAlignEnabled <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Gradle 插件</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC7%E7%AB%A0-Android_Gradle%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android-Gradle-插件"><a href="#Android-Gradle-插件" class="headerlink" title="Android Gradle 插件"></a>Android Gradle 插件</h1><h2 id="Android-Gradle-插件简介"><a href="#Android-Gradle-插件简介" class="headerlink" title="Android Gradle 插件简介"></a>Android Gradle 插件简介</h2><p>从Gradle角度来看，Android其实是Gradle的一个第三方插件，它是由Google的Android团队开发的。但从Android角度 来看，Android插件是基于Gradle构建的，和Android Studio完美搭配的新一代构建系统。</p>
<h2 id="Android-Gradle-插件分类"><a href="#Android-Gradle-插件分类" class="headerlink" title="Android Gradle 插件分类"></a>Android Gradle 插件分类</h2><p>在Android中有三类工程，一类是App应用工程，它可以生成一个可运行的apk应用。一类是Library库工程，它可以生成AAR包给其它工程使用。一类是Test测试工程，用于对App工程或者Library库工程进行单元测试。</p>
<p>App插件id: com.android.application</p>
<p>Library插件id: com.android.library</p>
<p>Test插件id: com.android.test</p>
<h2 id="应用Android-Gradle插件"><a href="#应用Android-Gradle插件" class="headerlink" title="应用Android Gradle插件"></a>应用Android Gradle插件</h2><p>要应用一个插件，必须知道它们的插件id,如果是第三方插件，还需要配置它们的依赖classpath。Android Gradle插件就是第三方插件，它托管在Jcenter上，所在在应用前，需要配置依赖classpath，这样应用插件的时候，Gradle才能找到它们。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span>&#123;</span><br><span class="line">    <span class="keyword">repositories</span>&#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span>&#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.5.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>配置好后，就可以应用插件了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:<span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android&#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Android-Gradle-工程示例"><a href="#Android-Gradle-工程示例" class="headerlink" title="Android Gradle 工程示例"></a>Android Gradle 工程示例</h2><p>详见p75</p>
<p>Android Gradle工程的配置，都是在android{}中，这是唯一的入口 。</p>
<h3 id="compileSdkVersion"><a href="#compileSdkVersion" class="headerlink" title="compileSdkVersion"></a>compileSdkVersion</h3><h3 id="buildToolsVersion"><a href="#buildToolsVersion" class="headerlink" title="buildToolsVersion"></a>buildToolsVersion</h3><h3 id="defaultConfig"><a href="#defaultConfig" class="headerlink" title="defaultConfig"></a>defaultConfig</h3><p>defaultConfig是默认的配置。它是一个ProductFlavor，ProductFlavor允许我们根据不同情况同时生成多个不同的APK包。</p>
<h3 id="buildTypes"><a href="#buildTypes" class="headerlink" title="buildTypes"></a>buildTypes</h3><h2 id="Android-Gradle-任务"><a href="#Android-Gradle-任务" class="headerlink" title="Android Gradle 任务"></a>Android Gradle 任务</h2><h2 id="从Eclipse迁移到Android-Gradle工程"><a href="#从Eclipse迁移到Android-Gradle工程" class="headerlink" title="从Eclipse迁移到Android Gradle工程"></a>从Eclipse迁移到Android Gradle工程</h2><h3 id="使用Android-Studio导入"><a href="#使用Android-Studio导入" class="headerlink" title="使用Android Studio导入"></a>使用Android Studio导入</h3><h3 id="从Eclipse-ADT导出"><a href="#从Eclipse-ADT导出" class="headerlink" title="从Eclipse+ADT导出"></a>从Eclipse+ADT导出</h3>]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Android动画</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/Android%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android动画"><a href="#Android动画" class="headerlink" title="Android动画"></a>Android动画</h1><p>Android的动画可以分为三种:View动画、帧动画和属性动画，帧动画也属于View动画的一种，只不过它和平移、旋转等常见的View动画在表现形式上略有不同而已。</p>
<h2 id="1、View动画"><a href="#1、View动画" class="headerlink" title="1、View动画"></a>1、View动画</h2><ul>
<li><p>平移动画：TranslateAnimation</p>
</li>
<li><p>缩放动画：ScaleAnimation</p>
</li>
<li><p>旋转动画：RotateAnimation</p>
</li>
<li><p>透明度动画：AlphaAnimation</p>
</li>
</ul>
<p>用XML来定义属性动画需要定义在res/anim目录下。</p>
<h2 id="2、View动画的特殊使用场景"><a href="#2、View动画的特殊使用场景" class="headerlink" title="2、View动画的特殊使用场景"></a>2、View动画的特殊使用场景</h2><h3 id="2-1、LayoutAnimation"><a href="#2-1、LayoutAnimation" class="headerlink" title="2.1、LayoutAnimation"></a>2.1、LayoutAnimation</h3><p>LayoutAnimation使用于ViewGroup，为ViewGroup指定一个动画，它的子元素出场时都会具有这种动画效果。这种效果常用在ListView上。</p>
<h3 id="2-2、Activity的切换效果"><a href="#2-2、Activity的切换效果" class="headerlink" title="2.2、Activity的切换效果"></a>2.2、Activity的切换效果</h3><p>主要用到overridePendingTransition(int enterAnim,int exitAnim)这个方法，必须在startActivity(intent)或者finish()之后被调用才能生效。</p>
<p>Fragment中添加切换动画，可以通过FragmentTransaction中的setCustomAnimations()方法来添加切换动画，这个切换动画需要的是View动画。</p>
<h2 id="3、属性动画"><a href="#3、属性动画" class="headerlink" title="3、属性动画"></a>3、属性动画</h2><p>属性动画可以对任意对象的属性进行动画而不仅仅是View，动画默认时间间隔是300ms，默认帧是10ms/帧。</p>
<p>用XML来定义属性动画需要定义在res/animator目录下。</p>
<p>对object的属性abc属性做动画，如果要让动画生效，要同时满足两个条件:</p>
<p>1、object必须要提供setAbc方法，如果动画的时候没有传递初始值，还要提供getAbc方法，因为系统要去取abc属性的初始值。如果不满足这条，程序直接Crash。</p>
<p>2、object的setAbc对属性abc所做的改变必须能够通过某种方法反映出来，比如会带来UI的改变等。如果不满足这条，动画无效果但不会Crash。</p>
<p>如果只满足条件1，不满足条件2，可以有3种解决方法：</p>
<ul>
<li><p>给对象加上get和set，如果有权限的话</p>
</li>
<li><p>用一个类来包装原始对象，间接为其提供get和set方法</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performAnimate</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ViewWrapper wrapper = <span class="keyword">new</span> ViewWrapper(mButton);</span><br><span class="line">	ObjectAnimator.ofInt(wrapper,<span class="string">"width"</span>,<span class="number">500</span>).setDuration(<span class="number">5000</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewWrapper</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> View mTarget;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ViewWrapper</span><span class="params">(View target)</span></span>&#123;</span><br><span class="line">		mTarget = target;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mTarget.getLayoutParams().width;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span></span>&#123;</span><br><span class="line">		mTarget.getLayoutParams().width = width;</span><br><span class="line">		mTarget.requestLayout();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>采用ValueAnimator，监听动画过程，自己实现属性的改变</li>
</ul>
<h2 id="4、注意事项"><a href="#4、注意事项" class="headerlink" title="4、注意事项"></a>4、注意事项</h2><p>1、OOM问题</p>
<p>这个问题主要出现在帧动画中，当图片数量较多肯于图片较大时就极易出现OOM。</p>
<p>2、内存泄露</p>
<p>在属性动画中有一类无限循环的动画，这类动画需要在Activity退出时及时停止，否则将导致Activity无法释放从而造成内存泄露，View动画不存在此问题。</p>
<p>3、兼容性问题</p>
<p>动画在3.0以下系统上有兼容性问题。</p>
<p>4、View动画的问题</p>
<p>View动画是对View的影像做动画，并不是真正地改变View的状态，因此有时候会出现动画完成后View无法隐藏的现象，即setVisibility(View.GONE)失效，这时只要调用view.clearAnimation()清除View动画即可解决此问题。</p>
<p>5、不要用px</p>
<p>6、动画元素的交互</p>
<p>7硬件加速</p>
<p>使用动画的过程中，建议开启硬件加速，这样会提高动画的流畅性。</p>
]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Gradle 插件</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC6%E7%AB%A0-Java_Gradle%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Java-Gradle-插件"><a href="#Java-Gradle-插件" class="headerlink" title="Java Gradle 插件"></a>Java Gradle 插件</h1><h2 id="如何应用"><a href="#如何应用" class="headerlink" title="如何应用"></a>如何应用</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:<span class="string">'java'</span></span><br></pre></td></tr></table></figure></div>

<h2 id="Java插件约定的项目结构"><a href="#Java插件约定的项目结构" class="headerlink" title="Java插件约定的项目结构"></a>Java插件约定的项目结构</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Project</span></span><br><span class="line">|--build.gradle</span><br><span class="line">|--src</span><br><span class="line">    |--main</span><br><span class="line">            |--java</span><br><span class="line">            |--resources</span><br><span class="line">    |--test</span><br><span class="line">        |--java</span><br><span class="line">        |--resources</span><br></pre></td></tr></table></figure></div>

<p>main和test是Java插件为我们内置的两个源代码集合，如果想添加自定义的集合，如vip，则可以这样修改：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:<span class="string">'java'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceSets</span>&#123;</span><br><span class="line">    vip&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>添加一个vip源代码集合，然后我们在src目录下添加vip/java,vip/resources目录，就可以分别存放vip相关的源代码和资源文件了。</p>
<p>特殊情况下，我们需要修改java的文件目录，只需要在build.gradle配置对应的目录即可:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sourceSets</span>&#123;</span><br><span class="line">    main&#123;</span><br><span class="line">        java&#123;</span><br><span class="line">            srcDir <span class="string">'src/java'</span></span><br><span class="line">        &#125;</span><br><span class="line">        resources&#123;</span><br><span class="line">            srcDic <span class="string">'src/resources'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="如何配置很三方依赖"><a href="#如何配置很三方依赖" class="headerlink" title="如何配置很三方依赖"></a>如何配置很三方依赖</h2><p>要想使用第三方依赖，需要告诉Gradle如何找到这些依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">repositories</span>&#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以上脚本我们配置了一个Maven中心库，告诉Gradle可以在Maven中心库中搜寻我们依赖的第三方库。我们也可以从jcenter库、ivy库、本地Maven库、自己搭建的Maven私服库等 ，甚至我们本地配置的文件夹也可以作为一个仓库。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">repositories</span>&#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven&#123;</span><br><span class="line">        url <span class="string">'http://www.mavenurl.com'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>有了仓库后，通过配置来告诉Gradle需要依赖什么：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    implementation <span class="keyword">group</span>:<span class="string">'com.squareup.okhttp3'</span>,name:<span class="string">'okhttp'</span>,version:<span class="string">'3.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以上的简写方式，直接把group,name,version去掉，以:分隔：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    implementation <span class="string">'com.squareup.okhttp3:okhttp:3.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>除了以上这种编译时依赖，Gradle还提供了编译测试用例时的依赖:testImplementation</p>
<p>Java插件可以为不同的源集在编译和运行时指定不同的依赖：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    mainImplementation <span class="string">'com.squareup.okhttp3:okhttp:3.0.1'</span></span><br><span class="line">    vipImplementation <span class="string">'com.squareup.okhttp3:okhttp:2.5.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>项目依赖:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    implementation <span class="keyword">project</span>(<span class="string">':demo'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>文件依赖:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    implementation files(<span class="string">'libs/demo.jar'</span>,<span class="string">'libs/demo2.jar'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>简写方式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span>&#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir:<span class="string">'libs'</span>,<span class="keyword">include</span>:<span class="string">'*.jar'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="如何构建一个Java项目"><a href="#如何构建一个Java项目" class="headerlink" title="如何构建一个Java项目"></a>如何构建一个Java项目</h2><p>常见的任务：</p>
<p>build任务：构建整个项目。</p>
<p>clean任务：删除build目录以及其它构建生成的文件。</p>
<p>assemble任务：不会执行单元测试，只编译和打包。</p>
<p>check任务：只会执行单元测试。</p>
<p>javadoc任务：生成Java格式的doc api文档。</p>
<h2 id="源码集合-SourceSet-概念"><a href="#源码集合-SourceSet-概念" class="headerlink" title="源码集合[SourceSet]概念"></a>源码集合[SourceSet]概念</h2><p>SourceSet是Java插件用来描述和管理源代码及其资源的一个概念，是一个Java源代码文件和资源文件的集合。</p>
<h2 id="Java插件添加的任务"><a href="#Java插件添加的任务" class="headerlink" title="Java插件添加的任务"></a>Java插件添加的任务</h2><p>详见p65</p>
<h2 id="Java插件添加的属性"><a href="#Java插件添加的属性" class="headerlink" title="Java插件添加的属性"></a>Java插件添加的属性</h2><p>详见p66</p>
<h2 id="多项目构建"><a href="#多项目构建" class="headerlink" title="多项目构建"></a>多项目构建</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Project</span></span><br><span class="line">|--app</span><br><span class="line">    |--app.iml</span><br><span class="line">    |--build.gradle</span><br><span class="line">    |--src</span><br><span class="line">|--base</span><br><span class="line">    |--base.iml</span><br><span class="line">    |--build.gradle</span><br><span class="line">    |--src</span><br></pre></td></tr></table></figure></div>
<p>以上是目录结构，app是主项目，base是我们的基础依赖项目。下面在settings.gradle中配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">':app'</span></span><br><span class="line"><span class="keyword">project</span>(<span class="string">':app'</span>).projectDir=<span class="keyword">new</span> <span class="keyword">File</span>(rootDir,<span class="string">'chapter6/demo/app'</span>)</span><br><span class="line"><span class="keyword">include</span> <span class="string">':base'</span></span><br><span class="line"><span class="keyword">project</span>(<span class="string">':base'</span>).projectDir=<span class="keyword">new</span> <span class="keyword">File</span>(rootDir,<span class="string">'chapter6/demo/base'</span>)</span><br></pre></td></tr></table></figure></div>

<p>Gradle为我们提供了基于根项目对其所有子项目的通用配置的方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">subprojects</span>&#123;</span><br><span class="line">    apply plugin:<span class="string">'java'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">repositories</span>&#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="如何发布构件"><a href="#如何发布构件" class="headerlink" title="如何发布构件"></a>如何发布构件</h2><p>详见p69</p>
<h2 id="生成Idea和Eclipse配置"><a href="#生成Idea和Eclipse配置" class="headerlink" title="生成Idea和Eclipse配置"></a>生成Idea和Eclipse配置</h2><p>详见p71</p>
]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Drawable</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/Drawable/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Drawable"><a href="#Drawable" class="headerlink" title="Drawable"></a>Drawable</h1><blockquote>
<p>Drawable表示的是一种可以在Canvas上进行绘制的抽象的概念。</p>
</blockquote>
<h2 id="1、Drawable简介"><a href="#1、Drawable简介" class="headerlink" title="1、Drawable简介"></a>1、Drawable简介</h2><p>Drawable是一个抽象类，是所有Drawable对象的基类，每个具体的Drawable都是它的子类，比如ShapeDrawable、BitmapDrawable等。</p>
<p>通过getIntrinsicWidth和getIntrinsicHeight这两个方法可以获取到Drawable的内部宽/高。但并不是所有的Drawable都有内部宽/高，比如一张图片所形成的Drawable，它的内部宽/高就是图片的宽/高，但是一个颜色形成的Drawable，它没有内部宽/高。Drawable内部宽/高不等同于它的大小。Drawable是没有大小概念的。</p>
<h2 id="2、Drawable分类"><a href="#2、Drawable分类" class="headerlink" title="2、Drawable分类"></a>2、Drawable分类</h2><ul>
<li><p>BitmapDrawable</p>
</li>
<li><p>ShapeDrawable</p>
</li>
<li><p>LayerDrawable</p>
</li>
</ul>
<p>对应的XML标签是<layer-list>,表示一种层次化的Drawable集合。</layer-list></p>
<ul>
<li>StateListDrawable</li>
</ul>
<p>对应于<selector>标签，也是表示Drawable集合，每个Drawable都对应View的一种状态。主要用于设置可单击的View的背景。</selector></p>
<p>系统会根据View当前的状态从selector中选择对应的item,每个item对应着一个具体的Drawable，系统按照从上到下的顺序查找，直至查找到第一条匹配的item。一般来说，默认的item都应该放在selector的最后一条并且不带任何状态，这样当上面的item无法匹配View的当前状态，系统会选择默认的item。</p>
<ul>
<li>LevelListDrawable</li>
</ul>
<p>对应于<level-list>标签，表示一个Drawable集合，集合中的每个Drawable都有一个等级level的概念。根据不同的等级，LevelListDrawable会切换为对应的Drawable。Drawable等级是有范围的，即0-10000，最小等级为0，这也是默认值，最大等级为10000。</level-list></p>
<ul>
<li>TransitionDrawable</li>
</ul>
<p>对应于<transition>标签，用于实现两个Drawable之间的淡入淡出效果。</transition></p>
<ul>
<li>InsetDrawable</li>
</ul>
<p>对应于<inset>标签，它可以将其它Drawable内嵌到自己当中，并可以在四周留出一定的间距。当一个View希望自己的背景比自己的实际区域小的时候，可以采用InsetDrawable来实现。通过LayerDrawable也可以实现这种效果。</inset></p>
<ul>
<li>ScaleDrawable</li>
</ul>
<p>ScaleDrawable对应于<scale>标签，可以根据自己的等级将指定的Drawable缩放到一定比例。等级为0表示ScaleDrawable不可见，这是默认值，要想ScaleDrawable可见，需要等级不为0。</scale></p>
<ul>
<li>ClipDrawable</li>
</ul>
<p>对应于<clip>标签,可以根据自己当前的等级来裁剪另一个Drawable，裁剪方向可以通过android:clipOrientation和android:gravity这两个属性来共同控制。</clip></p>
<h2 id="3、自定义Drawable"><a href="#3、自定义Drawable" class="headerlink" title="3、自定义Drawable"></a>3、自定义Drawable</h2>]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>Drawable</tag>
      </tags>
  </entry>
  <entry>
    <title>RemoteViews</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/RemoteViews/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="RemoteViews"><a href="#RemoteViews" class="headerlink" title="RemoteViews"></a>RemoteViews</h1><blockquote>
<p>RemoteViews表示的是一个View结构，它可以在其他进程中显示。RemoteViews在Android中的使用场景有两种：通知栏和桌面小部件。</p>
</blockquote>
<h2 id="1、RemoteViews的应用"><a href="#1、RemoteViews的应用" class="headerlink" title="1、RemoteViews的应用"></a>1、RemoteViews的应用</h2><p>RemoteViews在实际开发中，主要用在通知栏的桌面小部件的开发过程中。通知栏主要是通过NotificationManager的notify方法来实现，除了默认效果，还可以另外定义布局。桌面小部件则是通过AppWidgetProvider来实现，AppWidgetProvider本质上是一个广播。RemoteViews运行在系统的SystemServer进程。</p>
<p>AppWidgetProvider除了最常用的onUpdate方法，还有以下几个方法：</p>
<ul>
<li><strong>onEnable:</strong></li>
</ul>
<p>当该窗口小部件第一次添加到桌面时调用该方法，可添加多次但只在第一次调用。</p>
<ul>
<li><strong>onUpdate:</strong></li>
</ul>
<p>小部件被添加时或者每次小部件更新时都会调用一次该方法，小部件的更新时机由updatePeriodMillis来指定，每个周期小部件都会自动更新一次。</p>
<ul>
<li><strong>onDeleted:</strong></li>
</ul>
<p>每删除一次桌面小部件就调用一次</p>
<ul>
<li><strong>onDisabled:</strong></li>
</ul>
<p>当最后一个该类型的桌面小部件被删除时调用该方法</p>
<ul>
<li><strong>onReceive:</strong></li>
</ul>
<p>这是广播的内置方法，用于分发具体的事件给其它方法。</p>
<p><strong>PendingIntent</strong></p>
<p>PendingIntent表示一种处于pending状态的意图，而pending状态表示的是一种待定、等待、即将发生的意思，就是说接下来有一个Intent将在某个特定的时刻发生。PendingIntent和Intent的区别在于，PendingIntent是在将来的某个不确定的时刻发生，而Intent是立刻发生。PendingIntent典型使用场景是给RemoveViews添加单击事件，通过send和cancel方法来发送和取消特定的待定的Intent。</p>
<p>PendingIntent主要方法：</p>
<p><strong>getActivity(Context context,int requestCode,Intent intent,int flags)</strong></p>
<blockquote>
<p>获得一个PendingIntent，该待定意图发生时，效果相当于Context.startActivity(Intent)</p>
</blockquote>
<p><strong>getService(Context context,int requestCode,Intent intent,int flags)</strong></p>
<blockquote>
<p>获得一个PendingIntent，该待定意图发生时，效果相当于Context.startService(Intent)</p>
</blockquote>
<p><strong>getBroadcast(Context context,int requestCode,Intent intent,int flags)</strong></p>
<blockquote>
<p>获得一个PendingIntent，该待定意图发生时，效果相当于Context.sendBroadcast(Intent)</p>
</blockquote>
<p>PendingIntent匹配规则：如果两个PendingIntent它们内部的Intent相同并且requestCode也相同，那么这两个PendingIntent就是相同的。</p>
<p><strong>flags:</strong></p>
<ul>
<li>FLAG_ONE_SHOT:</li>
</ul>
<p>当前描述的PendingIntent只能被使用一次，然后它就会被自动cancel。</p>
<ul>
<li>FLAG_NO_CREATE:</li>
</ul>
<p>当前描述的PendingIntent不会主动创建。日常开发中没有太多的使用意义。</p>
<ul>
<li>FLAG_CANCEL_CURRENT:</li>
</ul>
<p>当前描述的PendingIntent如果已经存在，那么它们都会被cancel，然后系统创建一个新的PendingIntent。对于通知栏消息，那些被cancel的消息单击后将无法打开。</p>
<ul>
<li>FLAG_UPDATE_CURRENT:</li>
</ul>
<p>当前描述的PendingIntent如果已经存在，那么它们都会被更新，即Intent中的Extras会被替换成最新的。</p>
<h2 id="2、RemoteViews的内部机制"><a href="#2、RemoteViews的内部机制" class="headerlink" title="2、RemoteViews的内部机制"></a>2、RemoteViews的内部机制</h2><p>RemoteView并不能支持所有的View类型，它所支持的类型如下：</p>
<p><strong>Layout</strong></p>
<p>FrameLayout、LinearLayout、RelativeLayout、GridLayout。</p>
<p><strong>View</strong></p>
<p>AnalogClock、Buttom、Chronometer、ImageButton、ImageView、ProgressBar、TextView、ViewFlipper、ListView、GridView、StackView、AdapterViewFlipper、ViewStub。</p>
<p>上面所描述的是RemoteViews所支持的所有View类型，RemoteViews不支持它们的子类以及其他View类型。</p>
<p>通知栏和桌面小部件分别由NotificationManager和AppWidgetManager管理，而NotificationManager和AppWidgetManager通过Binder分别和SystemServer进程中的NotificationManagerService以及AppWidgetService进行通信。由此可见，通知栏和桌面小部件中的布局实际是在NotificationManagerService以及AppWidgetService中被加载的,而它们运行在系统的SystemServer中。</p>
<p>setOnClickPendingIntent、setPendingIntentTemplate以及setOnClickFillInIntent它们之间的区别和联系：</p>
<p>首先setOnClickPendingIntent用于给普通View设置单击事件，但不能给集合(ListView和StackView)中的View设置单击事件，比如我们不能给ListView中的item通过setOnClickPendingIntent这种方式添加单击事件，因为开销比较大，所以系统禁止了这种方式；其次，如果要给ListView和StackView中的item添加单击事件，则必须将setPendingIntentTemplate和setOnClickFillInIntent组合使用才可以。</p>
]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>RemoteViews</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle插件</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC5%E7%AB%A0-Gradle%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Gradle插件"><a href="#Gradle插件" class="headerlink" title="Gradle插件"></a>Gradle插件</h1><h2 id="插件的作用"><a href="#插件的作用" class="headerlink" title="插件的作用"></a>插件的作用</h2><p>把插件应用到项目中，插件会扩展项目的功能，帮助在项目构建过程中做很多事情。</p>
<p>1、可以添加任务到项目中，帮助完成测试、编译、打包等。</p>
<p>2、可以添加依赖配置到项目中，可以通过它们配置项目在构建过程中需要的依赖，如编译时依赖的第三方库等。</p>
<p>3、可以向项目中现有的对象类型添加新的扩展属性、方法等。</p>
<p>4、可以对项目进行一些约定，如应用Java插件后，约定src/main/java目录是我们的源代码存在位置，在编译的时候也是编译这个目录下的Java源代码文件。</p>
<h2 id="如何应用一个插件"><a href="#如何应用一个插件" class="headerlink" title="如何应用一个插件"></a>如何应用一个插件</h2><p>插件的应用都是通过Project.apply()方法完成的。</p>
<h3 id="应用二进制插件"><a href="#应用二进制插件" class="headerlink" title="应用二进制插件"></a>应用二进制插件</h3><p>二进制插件就是实现了org.gradle.api.Plugin接口的插件，它们可以有Plugin id。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:<span class="string">'java'</span></span><br></pre></td></tr></table></figure></div>

<p>上面的语句，其中’java’就是Java插件的plugin id,它是唯一的。其实它对应的类型是org.gradle.api.plugins.JavaPlugin,所以通过该类型，我们也可以应用这个插件：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:org.gradle.api.plugins.JavaPlugin</span><br></pre></td></tr></table></figure></div>

<p>又因为包org.gradle.api.plugins是默认导入的，所以可以去掉包名直接写成:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:JavaPlugin</span><br></pre></td></tr></table></figure></div>

<h3 id="应用脚本插件"><a href="#应用脚本插件" class="headerlink" title="应用脚本插件"></a>应用脚本插件</h3><p>build.gradle</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply <span class="keyword">from</span>:<span class="string">'version.gradle'</span></span><br><span class="line"><span class="keyword">task</span> task1&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">"版本是:$&#123;versionName&#125;,版本号是:$&#123;versionCode&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>version.gradle</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">ext&#123;</span><br><span class="line">    versionName = <span class="string">'1.0'</span></span><br><span class="line">    versionCode = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="apply方法的其他用法"><a href="#apply方法的其他用法" class="headerlink" title="apply方法的其他用法"></a>apply方法的其他用法</h3><p>Project.apply()方法有三种使用方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> apply(Map&lt;String,?&gt; <span class="keyword">options</span>);</span><br><span class="line"><span class="keyword">void</span> apply(Closure closure);</span><br><span class="line"><span class="keyword">void</span> apply(Action&lt;? <span class="keyword">super</span> ObjectConfigurationAction&gt; action);</span><br></pre></td></tr></table></figure></div>

<p>闭包的方式如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply&#123;</span><br><span class="line">    plugin <span class="string">'java'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Action方式:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply (<span class="keyword">new</span> Action&lt;ObjectConfigurationAction&gt;)&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">void</span> execute(ObjectConfigurationAction objectConfigurationAction)&#123;</span><br><span class="line">        objectConfigurationAction.plugin(<span class="string">'java'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="应用第三方发布的插件"><a href="#应用第三方发布的插件" class="headerlink" title="应用第三方发布的插件"></a>应用第三方发布的插件</h3><p>第三方发布的jar的二进制插件，我们在应用的时候，必须要先在buildscript{}里配置其classpath才能使用。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span>&#123;</span><br><span class="line">    <span class="keyword">repositories</span>&#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span>&#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.5.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>buildscript{}是一个构建项目前，为项目进行前期准备和初始化相关配置依赖的地方，配置好所需的依赖，就可以应用插件了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:<span class="string">'com.android.application'</span></span><br></pre></td></tr></table></figure></div>


<h3 id="使用plugins-DSL应用插件"><a href="#使用plugins-DSL应用插件" class="headerlink" title="使用plugins DSL应用插件"></a>使用plugins DSL应用插件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">plugins&#123;</span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="更多好用的插件"><a href="#更多好用的插件" class="headerlink" title="更多好用的插件"></a>更多好用的插件</h3><p>可以在<a href="https://plugins.gradle.org/" target="_blank" rel="noopener">https://plugins.gradle.org/</a> 上找到，也可以在github上找。</p>
<h2 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h2><p>自定义插件必须实现Plugin接口，这个接口只有一个apply方法，该方法在插件被应用的时候执行。</p>
<p>定义在build脚本文件里：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:CustomPlugin</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CustomPlugin <span class="keyword">implements</span> Plugin&lt;<span class="keyword">Project</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">void</span> apply(<span class="keyword">Project</span> <span class="keyword">project</span>)&#123;</span><br><span class="line">        <span class="keyword">project</span>.<span class="keyword">task</span>(<span class="string">'customTask'</span>).<span class="keyword">doLast</span>&#123;</span><br><span class="line">            <span class="keyword">println</span> <span class="string">'这是一个通过自定义插件方式创建的任务。'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这种只能在自己项目里用，如果想开发一个独立的插件给所有想用的人，则需要创建单独工程来开发自定义插件了。</p>
<p>新建一个Android Module</p>
<p>清空Module的build.gradle内容，添加以下内容,配置开发所需的依赖:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'groovy'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation gradleApi()</span><br><span class="line">    implementation localGroovy()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后实现依赖类:</p>
<p>删除src/main目录下的所有文件，新建一个groovy文件夹,在这个文件夹新建包，如com.wangyz.plugins,然后在这个文件夹下，新建一个类，如:CustomPlugin.groovy,内容如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">groovy</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wangyz.plugins</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Plugin</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Project</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        project.task(<span class="string">'CustomTask'</span>).doLast &#123;</span><br><span class="line">            println(<span class="string">"这是一个通过自定义插件方式创建的任务"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在src/main文件夹下新建resources文件夹,然后在这个文件夹中新建META-INF文件夹，然后在这个文件夹下新建gradle-plugins文件夹,然后新建com.wangyz.plugins.customplugin.properties文件，文件名就是其它应用依赖的名。内容如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation-<span class="keyword">class</span>=com.wangyz.plugins.CustomPlugin</span><br></pre></td></tr></table></figure></div>

<p>写好后，我们配置发布：</p>
<p>在Module的build.gradle文件中，添加以下内容:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'maven-publish'</span></span><br><span class="line"></span><br><span class="line">publishing &#123;</span><br><span class="line">    publications &#123;</span><br><span class="line">        mavenJava(MavenPublication) &#123;</span><br><span class="line"></span><br><span class="line">            groupId <span class="string">'com.wangyz.plugins'</span></span><br><span class="line">            artifactId <span class="string">'customplugin'</span></span><br><span class="line">            version <span class="string">'1.0.0'</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">from</span> components.java</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publishing &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            <span class="comment">// change to point to your repo, e.g. http://my.org/repo</span></span><br><span class="line">            url uri(<span class="string">'/home/wangyz/repos'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后在控制台，输入以下指令:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">.<span class="regexp">/gradlew publish</span></span><br></pre></td></tr></table></figure></div>

<p>发布成功后，配置引用：</p>
<p>在需要引入依赖的工程根目录下的build.gradle添加以下内容:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            <span class="comment">//local maven repo path</span></span><br><span class="line">            url uri(<span class="string">'/home/wangyz/repos'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="comment">//这里配置为发布时填写的:groupId:artifactId:version</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.wangyz.plugins:customplugin:1.0.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在App的build.gradle下添加以下内容：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;这里的配置为:</span><br><span class="line">apply plugin: &#39;com.wangyz.plugins.customplugin&#39;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle任务</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC4%E7%AB%A0-Gradle%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Gradle任务"><a href="#Gradle任务" class="headerlink" title="Gradle任务"></a>Gradle任务</h1><h2 id="多种方式创建任务"><a href="#多种方式创建任务" class="headerlink" title="多种方式创建任务"></a>多种方式创建任务</h2><p>1、直接以一个任务名字创建一个任务的方式:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="keyword">Task</span> task1 = <span class="keyword">task</span>(task1)</span><br><span class="line">task1.<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'task1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这种方式的创建其实是调用Project对象中的task(String name)方法。该方法的完整定义:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Task</span> <span class="keyword">task</span>(String name) <span class="keyword">throws</span> InvalidUserDataException</span><br></pre></td></tr></table></figure></div>

<p>2、以一个任务名字+一个对该任务配置的Map对象来创建任务:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="keyword">Task</span> task2 = <span class="keyword">task</span>(task2,<span class="keyword">group</span>:BasePlugin.BUILD_GROUP)</span><br><span class="line"></span><br><span class="line">task2.<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'task2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Task参数Map可用配置</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>基于一个存在的Task来创建，和我们类继承差不多</td>
<td>DefaultTask</td>
</tr>
<tr>
<td>overwrite</td>
<td>是否替换存在的Task，这个和type配合起来用</td>
<td>false</td>
</tr>
<tr>
<td>dependsOn</td>
<td>用于配置任务的依赖</td>
<td>[]</td>
</tr>
<tr>
<td>action</td>
<td>添加到任务中的一个Action或者闭包</td>
<td>null</td>
</tr>
<tr>
<td>description</td>
<td>用于配置任务的描述</td>
<td>null</td>
</tr>
<tr>
<td>group</td>
<td>用于配置任务的分组</td>
<td>null</td>
</tr>
</tbody></table>
<p>3、任务名字+闭包配置的方式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task3&#123;</span><br><span class="line">    <span class="keyword">description</span> <span class="string">'task3'</span></span><br><span class="line">    <span class="keyword">doLast</span>&#123;</span><br><span class="line">        <span class="keyword">println</span> <span class="string">'task3'</span></span><br><span class="line">        <span class="keyword">println</span> <span class="string">"任务描述:$&#123;description&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Map配置的项有限，所以可以通过闭包的方式进行更加灵活的配置。闭包里的委托对象就是Task，所以你可以使用Task对象的任何方法，属性等信息。</p>
<p>TaskContainer创建任务的方式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">tasks.create(<span class="string">"task4"</span>)&#123;</span><br><span class="line">    <span class="keyword">description</span> <span class="string">'task4'</span></span><br><span class="line">    <span class="keyword">doLast</span>&#123;</span><br><span class="line">        <span class="keyword">println</span> <span class="string">'task4'</span></span><br><span class="line">        <span class="keyword">println</span> <span class="string">"任务描述:$&#123;description&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>tasks是Project对象的属性，其类型是TaskContainer，可以用它来直接创建任务。</p>
<h2 id="多种方式访问任务"><a href="#多种方式访问任务" class="headerlink" title="多种方式访问任务"></a>多种方式访问任务</h2><p>创建的任务都会作为项目的一个属性，属性名就是任务名，所以可以直接通过任务名称来访问和操作任务:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task5</span><br><span class="line"></span><br><span class="line">task5.<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'task5:doLast'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>任务都是通过TaskContainer创建的，其实TaskContainer就是我们创建的集合。在Project中可以通过tasks属性访问TaskContainer，所以可以通过访问集合的方式来访问创建的任务：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task6</span><br><span class="line"></span><br><span class="line">tasks[<span class="string">'task6'</span>].<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'task6:doLast'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过路径来访问。访问方式有两种，一种是get,一种是find，区别在于get如果找不到任务会抛出UnKnownTaskException异常，而find在找不到任务时返回null。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task7</span><br><span class="line"></span><br><span class="line">tasks[<span class="string">'task7'</span>].<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> tasks.findByPath(<span class="string">':Chapter4:task7'</span>)</span><br><span class="line">    <span class="keyword">println</span> tasks.getByPath(<span class="string">':Chapter4:task7'</span>)</span><br><span class="line">    <span class="keyword">println</span> tasks.findByPath(<span class="string">'abc'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过名称访问。方式也有两种：get和find，区别和路径方式相同:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task8</span><br><span class="line"></span><br><span class="line">tasks[<span class="string">'task8'</span>].<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> tasks.findByName(<span class="string">'task8'</span>)</span><br><span class="line">    <span class="keyword">println</span> tasks.findByName(<span class="string">'task8'</span>)</span><br><span class="line">    <span class="keyword">println</span> tasks.findByName(<span class="string">'abc'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过路径访问的时候，参数值可以是任务路径，也可以是任务名字。而通过名称访问，参数只能是任务名称,不能是路径。</p>
<h2 id="任务分组和描述"><a href="#任务分组和描述" class="headerlink" title="任务分组和描述"></a>任务分组和描述</h2><p>任务是可以分组和添加描述的。任务分组其实就是对任务分类，便于对任务归类整理。任务的描述就是说明任务有什么用，是任务的大概说明。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task9&#123;</span><br><span class="line">    <span class="keyword">group</span> BasePlugin.BUILD_GROUP</span><br><span class="line">    <span class="keyword">description</span> <span class="string">'构建任务'</span></span><br><span class="line">    <span class="keyword">doLast</span>&#123;</span><br><span class="line">        <span class="keyword">println</span> <span class="string">'task9:doLast'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="lt-lt-操作符"><a href="#lt-lt-操作符" class="headerlink" title="&lt;&lt;操作符"></a>&lt;&lt;操作符</h2><p>在Gradle 5.1后已经废弃。</p>
<h2 id="任务的执行分析"><a href="#任务的执行分析" class="headerlink" title="任务的执行分析"></a>任务的执行分析</h2><p>当我们执行一个任务的时候，其实就是执行其拥有的actions列表。这个列表保存在Task的对象实例中的actions成员变量中，其类型是List。</p>
<h2 id="任务排序"><a href="#任务排序" class="headerlink" title="任务排序"></a>任务排序</h2><p>通过任务的shouldRunAfter和mustRunAfter这两个方法，可以控制一个任务应该或者一定要在某个任务之后执行。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task12&#123;</span><br><span class="line">    <span class="keyword">doLast</span>&#123;</span><br><span class="line">        <span class="keyword">println</span> <span class="string">'task12'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> task13&#123;</span><br><span class="line">    <span class="keyword">doLast</span>&#123;</span><br><span class="line">        <span class="keyword">println</span> <span class="string">'task13'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task12.mustRunAfter task13</span><br></pre></td></tr></table></figure></div>

<h2 id="任务的启用和禁用"><a href="#任务的启用和禁用" class="headerlink" title="任务的启用和禁用"></a>任务的启用和禁用</h2><p>Task中有个enabled属性，用于启用和禁用任务，默认为true,表示启用，设置为false，则禁止任务执行，输出会提示该任务被跳过。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> task14 &#123;</span><br><span class="line">    <span class="keyword">doLast</span>&#123;</span><br><span class="line">        <span class="keyword">println</span> <span class="string">'task14'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task14.enabled = <span class="keyword">false</span></span><br></pre></td></tr></table></figure></div>

<h2 id="任务的onlyIf断言"><a href="#任务的onlyIf断言" class="headerlink" title="任务的onlyIf断言"></a>任务的onlyIf断言</h2><p>Task有一个onlyIf方法，它接受一个闭包作为参数，如果该闭包返回true,则该任务执行，否则跳过。</p>
<p>以打渠道包为例。首发应用宝和百度，直接编译会打出所有包，执行时间长，不符合需求，可以采用onlyIf来控制：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String BUILD_APP = <span class="string">"build_app"</span></span><br><span class="line"><span class="keyword">final</span> String BUILD_APPS_ALL = <span class="string">"all"</span></span><br><span class="line"><span class="keyword">final</span> String BUILD_APPS_SHOUFA = <span class="string">"shoufa"</span></span><br><span class="line"><span class="keyword">final</span> String BUILD_APPS_EXCLUDE_SHOUFA = <span class="string">"exclude_shoufa"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span>(QQRelease).<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'打应用宝的包'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span>(BaiduRelease).<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'打百度的包'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span>(HuaWeiRelease).<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'打华为的包'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span>(MIUIRelease).<span class="keyword">doLast</span>&#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'打MIUI的包'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> build&#123;</span><br><span class="line">    <span class="keyword">group</span> BasePlugin.BUILD_GROUP</span><br><span class="line">    <span class="keyword">description</span> <span class="string">"打渠道包"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build.dependsOn QQRelease,BaiduRelease,HuaWeiRelease,MIUIRelease</span><br><span class="line"></span><br><span class="line">QQRelease.onlyIf&#123;</span><br><span class="line">    <span class="keyword">def</span> execute = <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">project</span>.hasProperty(BUILD_APP))</span><br><span class="line">    &#123;</span><br><span class="line">        Object buildApp = <span class="keyword">project</span>.property(BUILD_APP)</span><br><span class="line">        <span class="keyword">if</span>(BUILD_APPS_SHOUFA.equals(buildApp)||BUILD_APPS_ALL.equals(buildApp))</span><br><span class="line">        &#123;</span><br><span class="line">            execute = <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            execute = <span class="keyword">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        execute = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    execute</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BaiduRelease.onlyIf&#123;</span><br><span class="line">    <span class="keyword">def</span> execute = <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">project</span>.hasProperty(BUILD_APP))</span><br><span class="line">    &#123;</span><br><span class="line">        Object buildApp = <span class="keyword">project</span>.property(BUILD_APP)</span><br><span class="line">        <span class="keyword">if</span>(BUILD_APPS_SHOUFA.equals(buildApp)||BUILD_APPS_ALL.equals(buildApp))</span><br><span class="line">        &#123;</span><br><span class="line">            execute = <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            execute = <span class="keyword">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        execute = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    execute</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HuaWeiRelease.onlyIf&#123;</span><br><span class="line">    <span class="keyword">def</span> execute = <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">project</span>.hasProperty(BUILD_APP))</span><br><span class="line">    &#123;</span><br><span class="line">        Object buildApp = <span class="keyword">project</span>.property(BUILD_APP)</span><br><span class="line">        <span class="keyword">if</span>(BUILD_APPS_EXCLUDE_SHOUFA.equals(buildApp)||BUILD_APPS_ALL.equals(buildApp))</span><br><span class="line">        &#123;</span><br><span class="line">            execute = <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            execute = <span class="keyword">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        execute = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    execute</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MIUIRelease.onlyIf&#123;</span><br><span class="line">    <span class="keyword">def</span> execute = <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">project</span>.hasProperty(BUILD_APP))</span><br><span class="line">    &#123;</span><br><span class="line">        Object buildApp = <span class="keyword">project</span>.property(BUILD_APP)</span><br><span class="line">        <span class="keyword">if</span>(BUILD_APPS_EXCLUDE_SHOUFA.equals(buildApp)||BUILD_APPS_ALL.equals(buildApp))</span><br><span class="line">        &#123;</span><br><span class="line">            execute = <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            execute = <span class="keyword">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        execute = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    execute</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行方式如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">#打所有渠道包</span><br><span class="line">gradle build</span><br><span class="line">gradle -Pbuild_app=all build</span><br><span class="line">#打首发包</span><br><span class="line">gradle -Pbuild_app=shoufa build</span><br><span class="line">#打非首发包</span><br><span class="line">gradle -Pbuild_app=exclude_shoufa build</span><br></pre></td></tr></table></figure></div>

<p>命令行中-P意思是为Project指定K-V格式的属性键值对，格式为-PK=V。</p>
<h2 id="任务规则"><a href="#任务规则" class="headerlink" title="任务规则"></a>任务规则</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">tasks.addRule(<span class="string">"对规则的描述"</span>)&#123;</span><br><span class="line">    String taskName-&gt;</span><br><span class="line">        <span class="keyword">task</span>(taskName) &#123;</span><br><span class="line">            <span class="keyword">println</span> <span class="string">"$&#123;taskName&#125;任务不存在"</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> task15&#123;</span><br><span class="line">    dependsOn missTask</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>View的工作原理</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="View的工作原理"><a href="#View的工作原理" class="headerlink" title="View的工作原理"></a>View的工作原理</h1><h2 id="1、ViewRoot和DecorView"><a href="#1、ViewRoot和DecorView" class="headerlink" title="1、ViewRoot和DecorView"></a>1、ViewRoot和DecorView</h2><p>ViewRoot对应于ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均是通过ViewRoot来完成的。在ActivityThread中，当Activity对象被创建完毕后，会将DecorView添加到Window中,同时会创建ViewRootImpl对象，并将ViewRootImpl对象和DecorView建立关联。</p>
<p>View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才最终将一个View绘制出来。</p>
<p>measure过程决定了View的宽/高，Measure完成以后，可以通过getMeasuredWidth和getMeasuredHeight方法来获取View测量后的宽/高，在几乎所有的情况下，它等同于View的最终的宽/高，但是特殊情况除外。Layout过程决定了View的四个顶点的坐标和实际的宽/高，完成以后，可以通过getTop、getBottom、getLeft和getRight来拿到View的四个顶点的位置，可以通过getWidth和getHeight方法拿到View的最终宽/高。Draw过程决定了View的显示，只有draw方法完成后View的内容才能呈现在屏幕上。</p>
<p>DecorView作为顶级View，一般情况下，它内部会包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分，上面是标题栏，下面是内容栏。在Activity中，我们通过setContentView所设置的布局文件其实就是被加到内容栏中的，而内容栏id为content。可以通过下面方法得到content:ViewGroup content = findViewById(R.android.id.content)。通过content.getChildAt(0)可以得到设置的view。DecorView其实是一个FrameLayout,View层的事件都先经过DecorView，然后才传递给我们的View。</p>
<p><a href="/images/DecorView%E7%9A%84%E7%BB%93%E6%9E%84.png" data-fancybox="group" data-caption="DecorView的结构" class="fancybox"><img alt="DecorView的结构" title="DecorView的结构" data-src="/images/DecorView%E7%9A%84%E7%BB%93%E6%9E%84.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="2、MeasureSpec"><a href="#2、MeasureSpec" class="headerlink" title="2、MeasureSpec"></a>2、MeasureSpec</h2><p>MeasureSpec代表一个32位的int值，高2位代表SpecMode,低30位代表SpecSize,SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。</p>
<p>SpecMode有三类，如下所示：</p>
<p><strong>UNSPECIFIED</strong></p>
<blockquote>
<p>父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部。</p>
</blockquote>
<p><strong>EXACTLY</strong></p>
<blockquote>
<p>父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值，对应于LayoutParams中的match_parent和具体的数值这两种模式。</p>
</blockquote>
<p><strong>AT_MOST</strong></p>
<blockquote>
<p>父容器指定一个可用大小即SpecSize，View的大小不能大于这个值，对应于LayoutParams中的wrap_content。</p>
</blockquote>
<p>LayoutParams需要和父容器一起才能决定View的MeasureSpec，从而进一步决定View的宽/高。对于顶级View，即DecorView和普通View来说，MeasureSpec的转换过程略有不同。对于DecorView，其MeasureSpec由窗口的尺寸和其自身的LayoutParams共同确定；对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的Layoutparams共同决定，MeasureSpec一旦确定，onMeasure就可以确定View的测量宽/高。</p>
<p>当View采用固定宽/高时，不管父容器的MeasureSpec是什么，View的MeasureSpec都是精确模式并且大小遵循LayoutParams中的大小。当View的宽/高是match_parent时，如果父容器的模式是精准模式，那么View也是精准模式并且其大小是父容器的剩余空间；如果父容器是最大模式，那么View也是最大模式并且大小不会超过父容器的剩余空间。当View的宽/高是wrap_content时，不管父容器的模式是精准还是最大化，View的模式总是最大化并且大小不超过父容器的剩余空间。</p>
<h2 id="3、View的工作流程"><a href="#3、View的工作流程" class="headerlink" title="3、View的工作流程"></a>3、View的工作流程</h2><p>View的工作流程主要是指measure、layout、draw三大流程，即测量、布局、绘制。</p>
<p><a href="/images/performTraversals%E6%B5%81%E7%A8%8B.png" data-fancybox="group" data-caption="performTraversals流程" class="fancybox"><img alt="performTraversals流程" title="performTraversals流程" data-src="/images/performTraversals%E6%B5%81%E7%A8%8B.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="3-1、measure过程"><a href="#3-1、measure过程" class="headerlink" title="3.1、measure过程"></a>3.1、measure过程</h3><p>measure过程要分情况，如果只是一个原始的view，则通过measure方法就完成了其测量过程，如果是一个ViewGroup，除了完成自己的测量过程外，还会遍历调用所有子元素的measure方法，各个子元素再递归去执行这个流程。</p>
<p><strong>View的measure过程</strong></p>
<p>直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content就相当于使用match_parent。</p>
<p><strong>ViewGroup的measure过程</strong></p>
<p>ViewGroup并没有定义其测量的具体过程，因为ViewGroup是一个抽象类，其测量过程的onMeasure方法需要各个子类去具体实现。</p>
<p>View的measure是三大流程中最复杂的一个，measure完成后，通过getMeasuredWidth/Height方法就可以正确获取到View的测量宽/高，但在某些极端情况下，系统可能会多次measure才能确实最终端的测量宽/高，建议在onLayout方法去获取View的测量宽/高或者最终宽/高。</p>
<p>在Activity已启动的时候获取View的宽/高：</p>
<p><strong>1、Activity/View#onWindowFocusChanged</strong></p>
<p>View已经初始化完毕，宽/高已经准备好了。onWindowFocusChanged会被调用多次，当Activity的窗口得到焦点和失去焦点均会被调用一次。</p>
<p><strong>2、view.post(runnable)</strong></p>
<p>通过post可以将一个runnable投递到消息队列的尾部，然后等Looper调用此消息的时候，View也已经初始化好了。</p>
<p><strong>3、ViewTreeObserver</strong></p>
<p>使用OnGlobalLayoutListener接口，当View树的状态发生改变或者View树内部的View的可见性发生改变时，onGlobalLayout方法会回调。onGlobalLayout会调用多次。</p>
<p><strong>4、view.measure(int widthMeasureSpec,int heightMeasureSpec)</strong></p>
<h3 id="3-2、layout过程"><a href="#3-2、layout过程" class="headerlink" title="3.2、layout过程"></a>3.2、layout过程</h3><p>Layout的作用是ViewGroup用来确定子元素的位置，当ViewGroup的位置被确定后，它在onLayout中会遍历所有子元素并调用其layout方法，在layout方法中onLayout方法又会被调用。</p>
<h3 id="3-3、draw过程"><a href="#3-3、draw过程" class="headerlink" title="3.3、draw过程"></a>3.3、draw过程</h3><p>View的绘制过程遵循如下几步:</p>
<ul>
<li><p>1、绘制背景-background.draw(canvas)</p>
</li>
<li><p>2、绘制自己-onDraw</p>
</li>
<li><p>3、绘制children-dispatchDraw</p>
</li>
<li><p>4、绘制装饰-onDrawScrollBars</p>
</li>
</ul>
<h2 id="4、自定义View"><a href="#4、自定义View" class="headerlink" title="4、自定义View"></a>4、自定义View</h2><h3 id="4-1、自定义View的分类"><a href="#4-1、自定义View的分类" class="headerlink" title="4.1、自定义View的分类"></a>4.1、自定义View的分类</h3><ul>
<li><strong>继承View重写onDraw方法</strong></li>
</ul>
<p>用于实现一些不规则的图形。采用这种方式需要自己支持wrap_content,并且padding也需要自己处理。</p>
<ul>
<li><strong>继承ViewGroup派生特殊的Layout</strong></li>
</ul>
<p>主要用于实现自定义的布局，需要合理处理ViewGroup的测量、布局这两个过程，并同时处理子元素的测量和布局过程。</p>
<ul>
<li>继承特定的View(如TextView)</li>
</ul>
<p>一般用于扩展某种已有的View的功能，比如TextView，这种方法比较容易实现。不需要自己支持wrap_content和padding等。</p>
<ul>
<li>继承特定的ViewGroup(如LinearLayout)</li>
</ul>
<p>这种方法不用自己处理ViewGroup的测量和布局这两个过程。</p>
]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>View</tag>
      </tags>
  </entry>
  <entry>
    <title>View的事件体系</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="View的事件体系"><a href="#View的事件体系" class="headerlink" title="View的事件体系"></a>View的事件体系</h1><h2 id="1、View基础知识"><a href="#1、View基础知识" class="headerlink" title="1、View基础知识"></a>1、View基础知识</h2><h3 id="1-1、什么是View"><a href="#1-1、什么是View" class="headerlink" title="1.1、什么是View"></a>1.1、什么是View</h3><p>View是Android中所有控件的基类。View是一种界面层的控件的一种抽象，代表了一个控件。除了View,还有ViewGroup，内部包含了许多个控件，即一组View。</p>
<h3 id="1-2、View的位置参数"><a href="#1-2、View的位置参数" class="headerlink" title="1.2、View的位置参数"></a>1.2、View的位置参数</h3><p>View的位置主要由它的四个顶点来决定，分别对应于View的四个属性：top、left、right、bottom，其中top是左上角纵坐标，left是左上角横坐标，right是右下角横坐标，bottom是右下角纵坐标。这些坐标都是相对于View的父容器来说的。是一种相对坐标。</p>
<p><a href="/images/View%E7%9A%84%E5%9D%90%E6%A0%87%E4%BD%8D%E7%BD%AE%E5%92%8C%E7%88%B6%E5%AE%B9%E5%99%A8%E7%9A%84%E5%85%B3%E7%B3%BB.png" data-fancybox="group" data-caption="View的坐标位置和父容器的关系" class="fancybox"><img alt="View的坐标位置和父容器的关系" title="View的坐标位置和父容器的关系" data-src="/images/View%E7%9A%84%E5%9D%90%E6%A0%87%E4%BD%8D%E7%BD%AE%E5%92%8C%E7%88%B6%E5%AE%B9%E5%99%A8%E7%9A%84%E5%85%B3%E7%B3%BB.png" src="/img/loading.gif" class="lazyload"></a></p>
<blockquote>
<p>width = right - left</p>
<p>height = bottom - top</p>
</blockquote>
<p>获取这四个参数的方法:</p>
<p>left=getLeft();</p>
<p>right=getRight();</p>
<p>top=getTop();</p>
<p>bottom=getBottom();</p>
<p>Android3.0开始，View增加了额外的几个参数:x、y、translationX和translationY,其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于父容器的偏移量。这几个参数也是相对于父容器的坐标，并且translationX和translationY的默认值为0.</p>
<blockquote>
<p>x=left+translationX</p>
</blockquote>
<blockquote>
<p>y=top+translationY</p>
</blockquote>
<p>View在平移的过程中，top和left表示的是原始左上角的位置信息，其值并不会发生改变，此时发生改变的是x、y、transaltionX和translationY这四个参数。</p>
<p><a href="/images/ScrollX%E5%92%8CScrollY.png" data-fancybox="group" data-caption="ScrollX和ScrollY" class="fancybox"><img alt="ScrollX和ScrollY" title="ScrollX和ScrollY" data-src="/images/ScrollX%E5%92%8CScrollY.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="1-3、MotionEvent和ToushSlop"><a href="#1-3、MotionEvent和ToushSlop" class="headerlink" title="1.3、MotionEvent和ToushSlop"></a>1.3、MotionEvent和ToushSlop</h3><p><strong>MotionEvent</strong></p>
<p>在手指接触屏幕后产生的一系列事件中，典型的事件类型有如下几种:</p>
<blockquote>
<p>ACTION_DOWN–手指刚接触屏幕；</p>
<p>ACTION_MOVE–手指在屏幕上移动；</p>
<p>ACTION_UP–手指从屏幕上松开的瞬间。</p>
</blockquote>
<p>通过MotionEvent可以获取点击事件发生的x和y坐标:getX/getY和getRawX/getRawY。getX/getY返回的是相对于当前View左上角的x和y坐标，而getRawX/getRawY返回的是相对于手机屏幕左上角的x和y坐标。</p>
<p><strong>TouchSlop</strong></p>
<p>TouchSlop是系统所能识别出来的被认为是滑动的最小距离。这是一个常量，和设备有关，不同设备上这个值可能是不同的，可通过如下方式获取这个常量：ViewConfiguration.get(getContext().getScaledTouchSlop())。这个常量定义在frameworks/base/core/res/res/values/config.xml文件中，”config_viewConfigurationTouchSlop”对应的就是这个常量的定义。</p>
<h3 id="1-4、VelocityTracker、GestureDetector和Scroller"><a href="#1-4、VelocityTracker、GestureDetector和Scroller" class="headerlink" title="1.4、VelocityTracker、GestureDetector和Scroller"></a>1.4、VelocityTracker、GestureDetector和Scroller</h3><p><strong>VelocityTracker</strong></p>
<p>速度追踪，用于追踪手指在滑动过程中的速度，包括水平和竖直方向的速度。使用方法如下：</p>
<p>首先，在View的onTouchEvent方法中追踪当前单击事件的速度：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">VelocityTracker velocityTracker = VelocityTracker.obtain();</span><br><span class="line">velocityTracker.addMovement(event);</span><br></pre></td></tr></table></figure></div>

<p>接着，当我们先知道当前的滑动速度 时，可用如下方式来获得当前的速度:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">velocityTracker.computeCurrentVelocity(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">int</span> xVelocity = (<span class="keyword">int</span>) velocityTracker.getXVelocity();</span><br><span class="line"><span class="keyword">int</span> yVelocity = (<span class="keyword">int</span>) velocityTracker.getYVelocity();</span><br></pre></td></tr></table></figure></div>

<p>最后，当不需要使用它的时候，需要调用clear方法来重置并回收内存：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">velocityTracker.clear();</span><br><span class="line">velocityTracker.recycle();</span><br></pre></td></tr></table></figure></div>

<p>速度=(终点位置-起点位置)/时间段</p>
<p>速度可以为负数，当手指从右往左滑时，水平方向速度即为负值。当手指从左往右滑时，水平方向速度即为正值。</p>
<p><strong>GestureDetector</strong></p>
<p>手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。使用方法如下：</p>
<p>首先，需要创建一个GestureDetector对象并实现OnGestureListener接口，根据需要还可以实现OnDoubleTapListener从而能够监听双击行为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   GestureDetector mGestureDetector = <span class="keyword">new</span> GestureDetector(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//解决长按屏幕后无法手动的问题</span></span><br><span class="line">mGestureDetector.setIsLongpressEnabled(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></div>

<p>接着，接管目标View的onTouchEvent方法，在待监听的onTouchEvent方法中添加如下实现：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> consume = mGestureDetector.onTouchEvent(event);</span><br><span class="line"><span class="keyword">return</span> consume;</span><br></pre></td></tr></table></figure></div>

<p>如果只是监听滑动相关，可以自己在onTouchEvent中实现，如果要监听双击行为，可以使用GestureDetector。</p>
<p><strong>Scroller</strong><br>使用View的scrollTo/scrollBy方法来进行滑动时，其过程是瞬间完成的，这个没有过度效果的滑动，用户体验不好。这个时候可以使用Scroller来实现有过渡效果的滑动，其过程不是瞬间完成，而是在一定时间间隔内完成的。Scroller本身无法让View弹性滑动，它需要和View的computeScroll方法配合使用才能共同完成这个功能。使用方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   Scroller mScroller = <span class="keyword">new</span> Scroller(mContext);</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓慢滚到到指定位置</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">smoothScrollTo</span><span class="params">(<span class="keyword">int</span> destX,<span class="keyword">int</span> destY)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> scrollX = getScrollX();</span><br><span class="line">	<span class="keyword">int</span> delta = destX-scrollX;</span><br><span class="line">	<span class="comment">//1000ms内滑向destX,效果就是慢慢滑动</span></span><br><span class="line">	mScroller.startScroll(scrollX,<span class="number">0</span>,delta,<span class="number">0</span>,<span class="number">1000</span>);</span><br><span class="line">	invalidate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(mScroller.computeScrollOffset())&#123;</span><br><span class="line">		scrollTo(mScroller.getCurrX(),mScroller.getCurrY());</span><br><span class="line">		postInvalidate();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2、View的滑动"><a href="#2、View的滑动" class="headerlink" title="2、View的滑动"></a>2、View的滑动</h2><p>通过三种方式可以实现View的滑动：第一种是通过View本身提供的scrollTo/scrollBy方法来实现滑动；第二种是通过动画给View施加平移效果来实现滑动；第三种是改变View的LayoutParams使用View重新布局从而实现滑动。</p>
<h3 id="2-1、使用scrollTo-scrollBy"><a href="#2-1、使用scrollTo-scrollBy" class="headerlink" title="2.1、使用scrollTo/scrollBy"></a>2.1、使用scrollTo/scrollBy</h3><p>scrollBy实际也是调用了scrollTo方法，它实现了基于当前位置的相对滑动，而scrollTo实现了基于所传递参数的绝对滑动。在滑动过程中，mScrollX的值总是等于View的左边缘和View内容左边缘在水平方向的距离,而mScrollY的值总等于View的上边缘和View内容上边缘在竖直方向的距离。scrollTo和scrollBy只能改变View内容的位置而不能改变View在布局中的位置。mScrollX和mScrollY的单位为像素，并且当View左边缘在View内容左边缘的右边时，mScrollX为正值，反之为负值；当View上边缘在View内容上边缘的下边时，mScrollY为正值，反之为负值。换句话说，如果从左向右滑动，那么mScrollX为负值，反之为正值；如果从上往下滑动，那么mScrollY为负值，反之为正值。</p>
<h3 id="2-2、使用动画"><a href="#2-2、使用动画" class="headerlink" title="2.2、使用动画"></a>2.2、使用动画</h3><p>使用动画，主要就是操作View的translationX和translationY属性，既可以采用View动画，也可以采用属性动画。</p>
<p>View动画是对View的影像做操作，它并不能真正改变View的位置参数，包括宽/高，并且如果希望动画后的状态得以保留还必须将fillAfter属性设置为true,否则动画完成后其动画结果会消失，View会瞬间恢复到动画前的状态。使用属性动画不会存在上述问题。</p>
<h3 id="2-3、改变布局参数"><a href="#2-3、改变布局参数" class="headerlink" title="2.3、改变布局参数"></a>2.3、改变布局参数</h3><p>改变布局参数，即改变LayoutParams。简单示例如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MarginLayoutParams params = (MarginLayoutParams)mButton.getLayoutParams();</span><br><span class="line">params.width += <span class="number">100</span>;</span><br><span class="line">params.leftMargin += <span class="number">100</span>;</span><br><span class="line">mButton.requestLayout();</span><br><span class="line"><span class="comment">//或者mButton.setLayoutParams(params);</span></span><br></pre></td></tr></table></figure></div>

<p><strong>各种滑动方式的对比</strong></p>
<blockquote>
<p>scrollTo/scrollBy:View提供的原生方法，可以比较方便地实现滑动效果并且不影响内部元素的单击事件。缺点：只能滑动View的内容，并不能滑动View本身。</p>
<p>动画:如果是Android3.0以上并采用属性动画，那么这种方式没有明显的缺点；如果是使用View动画或者在Android3.0以下使用属性动画，均不能改变View本身的属性。如果动画元素不需要响应用户的交互，那么可以用动画来做滑动，否则不太适合。一些复杂的效果必须通过动画才能实现。</p>
<p>改变布局:使用起来麻烦些，没有明显的缺点。适用于一些具有交互性的View。</p>
</blockquote>
<h2 id="3、弹性滑动"><a href="#3、弹性滑动" class="headerlink" title="3、弹性滑动"></a>3、弹性滑动</h2><h3 id="3-1、使用Scroller"><a href="#3-1、使用Scroller" class="headerlink" title="3.1、使用Scroller"></a>3.1、使用Scroller</h3><p>Scroller本身并不能实现View的滑动，它需要配合View的computeScroll方法才能完成弹性滑动的效果，它不断地让View重绘，而每一次重绘距离滑动起始时间会有一个时间间隔，通过这个时间间隔Scroller就可以得出View当前的滑动位置，知道了滑动位置就可以通过scrollTo方法来完成View的滑动。View的每一次重绘都会导致View进行小幅度的滑动，而多次小幅度滑动就组成了弹性滑动，这就是Scroller的工作机制。</p>
<h3 id="3-2、通过动画"><a href="#3-2、通过动画" class="headerlink" title="3.2、通过动画"></a>3.2、通过动画</h3><h3 id="3-3、使用延时策略"><a href="#3-3、使用延时策略" class="headerlink" title="3.3、使用延时策略"></a>3.3、使用延时策略</h3><p>核心思想是通过发送一系统延时消息从而达到一种渐进式的效果。具体来说，可以使用Handler或View的postDelayed方式，也可以使用纯种的sleep方法。</p>
<h2 id="4、View的事件分发机制"><a href="#4、View的事件分发机制" class="headerlink" title="4、View的事件分发机制"></a>4、View的事件分发机制</h2><h3 id="4-1、点击事件的传递规则"><a href="#4-1、点击事件的传递规则" class="headerlink" title="4.1、点击事件的传递规则"></a>4.1、点击事件的传递规则</h3><p>所谓点击事件的事件分发，其实就是对MotionEvent事件的分发过程，即当一个Motion产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。点击事件的分发过程由三个很重要的方法来共同完成：dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent。</p>
<p><strong>public boolean dispatchTouchEvent(MotionEvent ev)</strong></p>
<p>用来进行事件的分发。如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和下级View的dispatchTouchEvent方法的影响，表示是否消耗当前事件。</p>
<p><strong>public boolean onInterceptTouchEvent(MotionEvent event)</strong></p>
<p>在上述方法内部调用，用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件。</p>
<p><strong>public boolean onTouchEvent(MotionEvent event)</strong></p>
<p>在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件。</p>
<p>上面三个方法的关系可以用以下伪代码表示:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> consume = <span class="keyword">false</span>;</span><br><span class="line">	<span class="keyword">if</span>(onInterceptTouchEvent(event))&#123;</span><br><span class="line">		consume = onTouchEvent(event);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		consume = child.dispatchTouchEvent(event);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> consume;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过上述伪代码，可以大致了解点击事件的传递规则：对于一个根ViewGroup来说，点击事件产生后，首先会传递给它，这时它的dispatchTouchEvent就会被调用，如果这个ViewGroup的onInterceptTouchEvent方法返回true就表示它要拦截当前事件，接着事件就会交给这个ViewGroup处理，即它的onTouchEvent方法就会被调用；如果这个ViewGroup的onInterceptTouchEvent方法返回false，就表示它不拦截当前事件，这时当前事件就会继续传递给它的子元素，接着子元素的dispatchTouchEvent方法就会被调用，如此反复直到事件被最终处理。</p>
<p>当一个View需要处理事件时，如果它设置了OnTouchListener，那么OnTouchListener中的onTouch方法会被回调。这时事件如何处理还要看onTouch的返回值，如果返回false,则当前View的onTouchEvent方法会被调用；如果返回true,那么onTouchEvent方法将不会被调用。由此可见，给View设置的OnTouchListener,其优先级比onTouchEvent要高。在onTouchEvent方法中，如果当前设置的有OnClickListener，那么它的onClick方法会被调用。可以看出，平时我们常用的OnClickListener，其优先级最低，即处于事件传递的尾端。</p>
<p>当一个点击事件产生后，它的传递过程遵循如下顺序：Activity-&gt;Window-&gt;View，即事件总是先传递给Activity,Activity再传递给Window，最后Window再传递给顶级View。顶级View接收到事件后，就会按照事件分发机制去分发事件。如果一个View的onTouchEvent返回false,那么父容器的onTouchEvent将会被调用，依此类推。如果所有元素都不处理这个事件，那么这个事件将会最终传递给Activity处理，即Activity的onTouchEvent方法会被调用。</p>
<p>关于事件传递的机制，有以下结论：</p>
<blockquote>
<p>1、同一个事件序列是指从手指接触屏幕的那一刻起，到手指屏幕的那一刻结束，在这个过程中所产生的一系统事件，这个事件序列以down事件开始，中间含有数量不定的move事件，最终以up事件结束。</p>
<p>2、正常情况下，一个事件序列只能被一个View拦截且消耗。因为一旦一个元素拦截了某些事件，那么同一个事件序列的所有事件都会直接交给它处理，因此同一个事件序列中的事件不能分别由两个View同时处理，但是通过特殊手段可以做到，比如一个View将本该自己处理的事件通过onTouchEvent强行传递给其它View处理。</p>
<p>3、某个View一旦决定拦截，那么这一个事件序列都只能由它来处理（如果事件序列能够传递给它的话），并且它的onInterceptTouchEvent不会再被调用。</p>
<p>4、某个View一旦开始处理事件，如果它不消耗ACTION_DOWN事件（onTouchEvent返回了false),那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将重新交由它的父元素去处理，即父元素的onTouchEvent会被调用。</p>
<p>5、如果View不消耗除ACTION_DOWN以外的其它事件，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以持续收到后续事件，最终这些消失的点击事件会传递给Activity处理。</p>
<p>6、ViewGroup默认不拦截任何事件。</p>
<p>7、View没有onInterceptTouchEvent方法，一旦有点击事件传递给它，它的onTouchEvent方法会被调用。</p>
<p>8、View的onTouchEvent默认会消耗事件(返回true)，除非它是不可点击的(clickable和longClickable同时为false)。View的longClickable属性默认都为false,clickable属性要分情况，比如Button的clickable属性默认为true,而TextView的clickable属性默认为false。</p>
<p>9、View的enable属性不影响onTouchEvent的默认返回值。哪怕一个View是disable状态的，只要它的clickable或者longClickable有一个true,那么它的onTouchEvent返回true。</p>
<p>10、onClick会发生的前提是当前View是可点击的，并且收到了down和up的事件。</p>
<p>11、事件传递过程是由外向内的，即事件总是先传递给父元素，然后再由父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN事件除外。</p>
</blockquote>
<h3 id="4-2、事件分发的源码解析"><a href="#4-2、事件分发的源码解析" class="headerlink" title="4.2、事件分发的源码解析"></a>4.2、事件分发的源码解析</h3><h4 id="4-2-1、Activity对点击事件的分发过程"><a href="#4-2-1、Activity对点击事件的分发过程" class="headerlink" title="4.2.1、Activity对点击事件的分发过程"></a>4.2.1、Activity对点击事件的分发过程</h4><p>点击事件用MotionEvent来表示，当一个点击操作发生时，事件最先传递给当前Activity，由Activity的dispatchTouchEvent来进行事件派发，具体工作是由Activity内部的Window来完成的。Window会将事件传递给decor View,decor view一般就是当前界面的底层容器，即setContentView所设置的View的父容器,通过Activity.getWindow().getDecorView()可以获得。Activity的dispatchTouchEvent方法如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(event.getAction()==MotionEvent.ACTION_DOWN)&#123;</span><br><span class="line">		onUserInteraction();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(getWindow().superDispatchTouchEvent(event))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>首先，事件开始交给Activity所附属的Window进行分发，如果返回true，整个事件循环就结束了，返回false意味着事件没人处理，所有View的onTouchEvent都返回了false,那么Activity的onTouchEvent就会被调用。</p>
<p>接下来看Window是如何将事件传递给ViewGroup的。通过源码可以知道，Window是个抽象类，而Window的superDispatchTouchEvent方法也是个抽象方法，因此必须找到Window的实现类才行。<strong>window的唯一实现类是PhoneWindow</strong>。phoneWindow的superDispatchTouchEvent方法如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> mDecor.superDispatchTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>PhoneWindow将事件直接传递给了DecorView。通过((ViewGroup)getWindow().getDecorView().findViewById(android.R.id.content)).getChildAt(0)这种方式就可以获取Activity所设置的View,这个mDecor显示就是getWindow().getDecorView()返回的View,而我们通过setContentView设置的View是它的一个子View。</p>
<h4 id="4-2-1、顶级View对点击事件的分发过程"><a href="#4-2-1、顶级View对点击事件的分发过程" class="headerlink" title="4.2.1、顶级View对点击事件的分发过程"></a>4.2.1、顶级View对点击事件的分发过程</h4><p>点击事件达到顶级View(一般是一个ViewGroup)以后，会调用ViewGroup的dispatchTouchEvent方法，然后的逻辑是这样的：如果顶级ViewGroup拦截事件即onInterceptTouchEvent返回true，则事件由ViewGroup处理，这时如果ViewGroup的mOnTouchListener被设置，则onTouch会被调用，否则onTouchEvent会被调用，也就是说，如果都提供的话，onTouch会屏蔽掉onTouchEvent。在onTouchEvent中，如果设置了mOnClickListener，则onClick会被调用。如果顶级ViewGroup不拦截事件，则事件会传递给它所在的点击事件链上的子View.这时子View的dispatchTouchEvent会被调用 。到此为止，事件已经从顶级View传递给了下一层View。接下来的传递过程和顶级View是一致的，如此循环，完成整个事件的分发。</p>
<p><strong>ViewGroup对点击事件的分发过程：</strong></p>
<p>主要实现在ViewGroup的dispatchTouchEvent方法中。描述了当前View是否拦截点击事件的逻辑。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;</span><br><span class="line"><span class="keyword">if</span>(actionMasked==MotionEvent.ACTION_DOWN||mFirstTouchTarget!=<span class="keyword">null</span>)&#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">boolean</span> disallowIntercept = (mGroupFlags&amp;FLAG_DISALLOW_INTERCEPT)!=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(!disallowIntercept)&#123;</span><br><span class="line">		intercepted=onInterceptTouchEvent(event);</span><br><span class="line">		event.setAction(action);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		intercepted = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	intercepted = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>ViewGroup在如下两种情况下会判断是否拦截当前事件：事件类型为ACTION_DOWN或者mFirstTouchTarget!=null。当事件由ViewGroup的子元素成功处理时，mFirstTouchTarget会被赋值并指向子元素，即：当ViewGroup不拦截事件并将事件交由子元素处理时，mFirstTouchTarget!=null。反过来，一旦事件由当前ViewGroup拦截时，mFirstTouchTarget！=null就不成立。那么当ACTION_MOVE和ACTION_UP事件到来时，由于(actionMasked==MotionEvent.ACTION_DOWN||mFirstTouchTarget!=null)这个条件为false，将导致ViewGroupr onInterceptTouchEvent不会再被调用，并且同一序列中的其他事件都会默认交给它处理。</p>
<p>还有种特殊情况，那就是FLAG_DISALLOW_INTERCEPT标记位，这个标记位是通过requestDisallowInterceptTouchEvent方法来设置的，一般用于子View中。这个标记一旦设置后，ViewGroup将无法拦截除了ACTION_DOWN以外的其它点击事件。总结起来两点:第一点，onInterceptTouchEvent方法并不是每次事件都被调用，如果想提前处理所有的点击事件，要选择dispatchTouchEvent方法，只有这个方法确保每次会调用，当然前提是事件能够传递到当前的ViewGroup；另外一点，FLAG_DISALLOW_INTERCEPT标记位的作用，可以在滑动冲突时，可以用这种方法去解决问题。</p>
<p>首先遍历ViewGroup的所有子元素，然后判断子元素是否能够接收点击事件。是否能够接收点击事件，主要由两点来衡量：子元素是否在播动画和点击事件的坐标是否落在子元素的区域内。如果子元素满足这两个条件，那么事件就会传递给它来处理。</p>
<p><strong>View的事件处理:</strong></p>
<p>首先判断有没有设置OnTouchListener，如果OnTouchListener中的onTouch方法返回true,那么onTouchEvent就不会被调用，可见OnTouchListener的优先级高于onTouchEvent，这样的好处是方便在外界处理点击事件。</p>
<p>接下来，看onTouchEvent的实现。当View处于不可用状态下时，照样会消耗点击事件。如果View设置有代理，还会执行TouchDelegate的onTouchEvent方法。</p>
<p>通过setClickable和setLongClickable会分别改变View的CLICKABLE和LONG_CLICKABLE属性。setOnClickListener会自动将View的CLICKABLE设为true,setOnLongClickListener会自动将View的LONG_CLICKABLE设为true。</p>
<h2 id="5、View的滑动冲突"><a href="#5、View的滑动冲突" class="headerlink" title="5、View的滑动冲突"></a>5、View的滑动冲突</h2><h3 id="5-1、常见的滑动冲突场景"><a href="#5-1、常见的滑动冲突场景" class="headerlink" title="5.1、常见的滑动冲突场景"></a>5.1、常见的滑动冲突场景</h3><p>常见滑动冲突场景可以简单分为如下三种：</p>
<ul>
<li><p>场景1–外部滑动方向和内部滑动方向不一致</p>
</li>
<li><p>场景2–外部滑动方向和内部滑动方向一致</p>
</li>
<li><p>场景3–上面两种情况的嵌套</p>
</li>
</ul>
<p><a href="https://upload-images.jianshu.io/upload_/images/3381990-7a840c64ca54d99a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="03.滑动冲突的场景.png" class="fancybox"><img alt="03.滑动冲突的场景.png" title="03.滑动冲突的场景.png" data-src="https://upload-images.jianshu.io/upload_/images/3381990-7a840c64ca54d99a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="5-2、滑动冲突的处理规则"><a href="#5-2、滑动冲突的处理规则" class="headerlink" title="5.2、滑动冲突的处理规则"></a>5.2、滑动冲突的处理规则</h3><p>对于场景1，根据滑动是水平滑动还是竖直滑动来判断到底由谁来拦截事件。</p>
<p>对于场景2，根据业务规则来决定由谁拦截事件。</p>
<p>对于场景3，根据业务规则来决定由谁拦截事件。</p>
<h3 id="5-3、滑动冲突的解决方式"><a href="#5-3、滑动冲突的解决方式" class="headerlink" title="5.3、滑动冲突的解决方式"></a>5.3、滑动冲突的解决方式</h3><p><strong>1、外部拦截法</strong></p>
<p>点击事件都先经过父容器的拦截处理，如果父容器需要此事件就拦截，如果不需要此事件就不拦截，这样就可以解决滑动冲突的问题，这种方法比较符合点击事件的分发机制。外部拦截法需要重写父容器的onInterceptTouchEvent方法，在内部做相应的拦截即可。伪代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> intercepted = <span class="keyword">false</span>;</span><br><span class="line">	<span class="keyword">int</span> x = (<span class="keyword">int</span>)event.getX();</span><br><span class="line">	<span class="keyword">int</span> y = (<span class="keyword">int</span>)event.getY();</span><br><span class="line">	<span class="keyword">switch</span>(event.getAction())&#123;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_DOWN:&#123;</span><br><span class="line">			intercepted = <span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_MOVE:&#123;</span><br><span class="line">			<span class="keyword">if</span>(父容器需要当前的点击事件)&#123;</span><br><span class="line">				intercepted = <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				intercepted = <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_UP:&#123;</span><br><span class="line">			intercepted = <span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	mLastXIntercept = x;</span><br><span class="line">	mLastYIntercept = y;</span><br><span class="line">	<span class="keyword">return</span> intercepted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>2、内部拦截法</strong></p>
<p>内部拦截法是指父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件，就直接消耗掉，否则就交由父容器进行处理，这种方法和Android中的事件分发机制不一致，需要配合requestDisallowInterceptTouchEvent方法才能正常工作，作用起来较外部拦截法稍显复杂。我们需要重写子元素的dispathTouchEvent方法，伪代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> intercepted = <span class="keyword">false</span>;</span><br><span class="line">	<span class="keyword">int</span> x = (<span class="keyword">int</span>)event.getX();</span><br><span class="line">	<span class="keyword">int</span> y = (<span class="keyword">int</span>)event.getY();</span><br><span class="line">	<span class="keyword">switch</span>(event.getAction())&#123;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_DOWN:&#123;</span><br><span class="line">			parent.requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_MOVE:&#123;</span><br><span class="line">			<span class="keyword">int</span> deltaX = x - mLastX;</span><br><span class="line">			<span class="keyword">int</span> deltaY = y - mLastY;</span><br><span class="line">			<span class="keyword">if</span>(父容器需要当前的点击事件)&#123;</span><br><span class="line">				parent.requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_UP:&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	mLastX = x;</span><br><span class="line">	mLastY = y;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>除了子元素需要做处理以外，父元素也要默认拦截除了ACTION_DOWN以外的其它事件，这样当子元素调用parent.requestDisallowInterceptTouchEvent(false)方法时，父元素才能继续拦截所需的事件。父元素修改如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> action = event.getAction();</span><br><span class="line">	<span class="keyword">if</span>(action==MotionEvent.ACTION_DOWN)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>View</tag>
        <tag>事件</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle构建脚本基础</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC3%E7%AB%A0-Gradle%E6%9E%84%E5%BB%BA%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Gradle构建脚本基础"><a href="#Gradle构建脚本基础" class="headerlink" title="Gradle构建脚本基础"></a>Gradle构建脚本基础</h1><h2 id="Settings文件"><a href="#Settings文件" class="headerlink" title="Settings文件"></a>Settings文件</h2><p>在Gradle中，定义了一个设置文件，用于初始化以及工程树的配置。设置文件的默认名为settings.gradle,放在根工程目录下。</p>
<p>设置文件大多数的作用都是为了配置子工程。根工程相当于Android Studio中的Project，一个根工程可以有很多子工程。</p>
<p>一个子工程只有在Settings文件里配置了Gradle才会识别，才会在构建的时候被包含进去。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">rootProject.name = <span class="string">'android-gradle'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">':Chapter1'</span></span><br><span class="line"><span class="keyword">project</span>(<span class="string">':Chapter1'</span>).projectDir = <span class="keyword">new</span> <span class="keyword">File</span>(rootDir,<span class="string">'Chapter1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">':Chapter2'</span></span><br><span class="line"><span class="keyword">project</span>(<span class="string">':Chapter2'</span>).projectDir = <span class="keyword">new</span> <span class="keyword">File</span>(rootDir,<span class="string">'Chapter2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">':Chapter3'</span></span><br><span class="line"><span class="keyword">project</span>(<span class="string">':Chapter3'</span>).projectDir = <span class="keyword">new</span> <span class="keyword">File</span>(rootDir,<span class="string">'Chapter3'</span>)</span><br></pre></td></tr></table></figure></div>

<p>上面的配置，定义了一些子项目，并且为它们指定了相应的目录。如果不指定，则默认为同级目录。利用这个特性，我们可以把我们的工程放到任何目录下，可以非常灵活地对我们的工程进行分级，分类等。只要在Settings文件里指定好路径就可以了。</p>
<h2 id="Build文件"><a href="#Build文件" class="headerlink" title="Build文件"></a>Build文件</h2><p>每个Project都会有一个Build文件，该文件是该Project构建的入口，可以在这里对Project进行配置，比如配置版本，需要哪些插件，依赖哪些库等。</p>
<p>Root Project也有自己的Build文件。Root Project 可以取到所有的Child Project，所以在Root Project的Build文件里可以对Child Project统一配置，如应用的插件，依赖的Maven中心库等。比如配置所有的Child Project的仓库为jcenter：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">subprojects</span>&#123;</span><br><span class="line">    <span class="keyword">repositories</span>&#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>又比如，开发一个大型的Java工程，该工程被分为很多小模块，每个模块都是一个Child Project，这些模块也是Java工程，这种情况下可以统一配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">subprojects</span>&#123;</span><br><span class="line">    apply plugin:<span class="string">"java"</span></span><br><span class="line">    <span class="keyword">repositories</span>&#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>除了subprojects外，还有allprojects,用于对所有工程进行配置。</p>
<h2 id="Projects以及Tasks"><a href="#Projects以及Tasks" class="headerlink" title="Projects以及Tasks"></a>Projects以及Tasks</h2><p>一个Project包含很多个Task，也就是说每个Project是由多个Task组成的。</p>
<h2 id="创建一个任务"><a href="#创建一个任务" class="headerlink" title="创建一个任务"></a>创建一个任务</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> customTask1&#123;</span><br><span class="line">	<span class="keyword">doFirst</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'customTask1:doFirst'</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">doLast</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'customTaks1:doLast'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建任务的另一种方式:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">tasks.create(<span class="string">"customTask2"</span>)&#123;</span><br><span class="line">	<span class="keyword">doFirst</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'customTask2:doFirst'</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">doLast</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'customTask2:doLast'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="任务依赖"><a href="#任务依赖" class="headerlink" title="任务依赖"></a>任务依赖</h2><p>任务之间是可以有依赖关系的，这样我们就能控制哪些任务优先于哪些任务执行。</p>
<p>创建任务的时候，通过dependsOn可以指定依赖的任务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> customTask3(dependsOn:customTask2)&#123;</span><br><span class="line">	<span class="keyword">doLast</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'customTask3:doLast'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>另外，一个任务可以依赖多个任务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> customTask4&#123;</span><br><span class="line">	dependsOn customTask3,customTask1</span><br><span class="line">	<span class="keyword">doLast</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'customTask4:doLast'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="任务间通过API控制、交互"><a href="#任务间通过API控制、交互" class="headerlink" title="任务间通过API控制、交互"></a>任务间通过API控制、交互</h2><p>要使用任务名操作任务，必须先定义声明，因为脚本是顺序执行的。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> customTask5&#123;</span><br><span class="line">	<span class="keyword">println</span> <span class="string">'customTask5'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customTask5.<span class="keyword">doFirst</span>&#123;</span><br><span class="line">	<span class="keyword">println</span> <span class="string">'customTask5:doFirst'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customTask5.<span class="keyword">doLast</span>&#123;</span><br><span class="line">	<span class="keyword">println</span> <span class="string">'customTask5:doLast'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p>Project和Task都允许用户添加额外的自定义属性，要添加自定义属性，通过应用所属对应的ext即可实现。添加之后，通过ext属性可以读取和设置，如果要同时添加多个自定义属性，可以通过ext代码块来实现。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">ext.name=<span class="string">'张三'</span></span><br><span class="line"></span><br><span class="line">ext&#123;</span><br><span class="line">	age = <span class="number">18</span></span><br><span class="line">	address = <span class="string">'中国'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> customTask6&#123;</span><br><span class="line">	<span class="keyword">println</span> <span class="string">"姓名是:$&#123;name&#125;,年龄是:$&#123;age&#125;,地址是：$&#123;address&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>相比局部变量，自定义属性有更为广泛的作用范围。可以跨Project，跨Task访问这些自定义的属性。只要能访问到这些属性所属的对象，这些属性就可以被访问到。</p>
<p>自定义属性不仅仅局限在Project和Task上，还可以应用在SourceSet中。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin:<span class="string">"java"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceSets</span>.all&#123;</span><br><span class="line">	ext.resourcesDir = <span class="keyword">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceSets</span>&#123;</span><br><span class="line">	main&#123;</span><br><span class="line">		resourcesDir= <span class="string">'main/res'</span></span><br><span class="line">	&#125;</span><br><span class="line">	test&#123;</span><br><span class="line">		resourcesDir = <span class="string">'test/res'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> customTask7&#123;</span><br><span class="line">	<span class="keyword">sourceSets</span>.<span class="keyword">each</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">"$&#123;it.name&#125;的resourcesDir是:$&#123;it.resourcesDir&#125;"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在项目中，一般使用它来自定义版本和版本名称，把版本号和版本名称单独放在一个Gradle文件中。</p>
<h2 id="脚本即代码，代码即脚本"><a href="#脚本即代码，代码即脚本" class="headerlink" title="脚本即代码，代码即脚本"></a>脚本即代码，代码即脚本</h2>]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>IPC机制</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/IPC%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="IPC机制"><a href="#IPC机制" class="headerlink" title="IPC机制"></a>IPC机制</h1><h2 id="1、Android-IPC简介"><a href="#1、Android-IPC简介" class="headerlink" title="1、Android IPC简介"></a>1、Android IPC简介</h2><blockquote>
<p>IPC是Inter-Process Communication的缩写，含义为进程间通信或者跨进程通信，是指两个进程之间进行数据交换的过程。</p>
</blockquote>
<p>ANR:Application Not Responding,应用无响应。</p>
<h2 id="2、Android中的多进程模式"><a href="#2、Android中的多进程模式" class="headerlink" title="2、Android中的多进程模式"></a>2、Android中的多进程模式</h2><p>在Android中使用多进程，可以通过给四大组件在AndroidMenifest中指定android:process属性。默认进程的进程名是包名。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:process</span>=<span class="string">":remote"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:process</span>=<span class="string">"com.example.ipc.remote"</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>上述两种声明的区别：</p>
<blockquote>
<p>首先，”:”的含义是指要在当前的进程名前附加上当前的包名，即完整进程名为:com.example.ipc:remote,而第二种则为完整的命名方式。其次，进程名以”:”开头的进程属于当前应用的私有进程，其它应用的组件不可以和它跑在同一个进程中，而进程名不以”:”开头的进程属于全局进程，其它应用通过ShareUID方式可以和它跑在同一个进程中。</p>
</blockquote>
<blockquote>
<p>Android系统会为每个应用分配一个唯一的UID，具有相同UID的应用才能共享数据。两个应用通过ShareUID跑在同一个进程，需要这两个应用有相同的ShareUID并且签名相同才可以。在这种情况下，它们可以互相访问对方的私有数据，比如data目录，组件信息等，不管他们是否跑在同一个进程中。如果在同一个进程中，还可以共享内存数据。</p>
</blockquote>
<h2 id="3、IPC基础概念"><a href="#3、IPC基础概念" class="headerlink" title="3、IPC基础概念"></a>3、IPC基础概念</h2><p>Serializable接口</p>
<blockquote>
<p>静态成员变量属于类不属于对象，所以不会参与序列化过程；用transient关键字标记的成员变量不参与序列化过程。</p>
<p>可以通过重写writeObject和readObject方法去修改serialize的过程。</p>
</blockquote>
<p>Parcelable接口</p>
<blockquote>
<p>一个类只要实现这个接口，就可以实现序列化并可以通过Intent和Binder传递。</p>
</blockquote>
<p>Serializable是Java中的序列化接口，其使用起来简单但是开销很大，序列化和反序列化过程需要大量I/O操作。Parcelable是Android中的序列化方式，因此更适合在Android平台上，它的缺点是使用起来稍微麻烦，但是效率很高，这是Android推荐的序列化方式，因此首选Parcelable。Parcelable主要用在内存序列化上。如果要将对象序列化到存储设备或将对象序列化后通过网络传输，建议使用Serializable。</p>
<p>Binder</p>
<blockquote>
<p>首先，当客户端发起远程请求时，由于当前线程会被挂起直至服务端进程返回数据，所以如果一个远程方法是很耗时的，那么不能在UI线程中发起此远程请求；其它，由于服务端的Binder方法运行在Binder的线程池中，所以Binder方法不管是否耗时都应该采用同步的方式去实现，因为它已经运行在一个线程中了。</p>
</blockquote>
<p><a href="/images/Binder%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" data-fancybox="group" data-caption="Binder的工作机制" class="fancybox"><img alt="Binder的工作机制" title="Binder的工作机制" data-src="/images/Binder%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>linkToDeath和unlinkToDeath</p>
<blockquote>
<p>Binder运行在服务端进程，如果服务端进程由于某些原因异常终止，这个时候我们到服务端的Binder连接断裂（称之为Binder死亡）,会导致我们的远程调用失败。如果我们不知道Binder连接已经断裂，那么客户端的功能就会受到影响。为了解决这个问题，Binder中提供了两个配对的方法linkToDeath和unlinkToDeath,通过linkToDeath，可以给Binder设置一个死亡代理，当Binder死亡时，我们就会收到通知，这个时候就可以重新发起连接请求从而恢复连接。具体设置代理的步骤如下：</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> IBinder.DeathRecipient mDeathRecipient = <span class="keyword">new</span> IBinder.DeathRecipient()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binderDied</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(mBookManager==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		mBookManager.asBinder().unlinkToDeath(mDeathRecipient,<span class="number">0</span>);</span><br><span class="line">		mBookManager=<span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>重新绑定远程Service</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在客户端绑定远程服务成功后，给binder设置死亡代理:<br>    mService = IMessageBoxManager.Stub.asInterface(binder);<br>    binder.linkToDeath(mDeathRecipient,0);</p>
<p>通过Binder的isBinderAlive方法可以判断Binder是否死亡。</p>
<h2 id="4、Android中的IPC方式"><a href="#4、Android中的IPC方式" class="headerlink" title="4、Android中的IPC方式"></a>4、Android中的IPC方式</h2><ul>
<li><p>使用Bundle</p>
<blockquote>
<p>Bundle实现了Parcelable接口，可以方便地在不同的进程间传输。传输的数据必须能被序列化，比如基本类型、实现了Parcelable接口的对象、实现了Serializable接口的对象以及一些Android支持的特殊对象。</p>
</blockquote>
</li>
<li><p>使用文件共享</p>
</li>
<li><p>使用Messenger</p>
<blockquote>
<p>一次处理一个请求，因此在服务端不用考虑线程同步的问题，因为服务端中不存在并发执行的情形。</p>
</blockquote>
</li>
</ul>
<p><a href="/images/Messenger%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" data-fancybox="group" data-caption="Messenger的工作原理" class="fancybox"><img alt="Messenger的工作原理" title="Messenger的工作原理" data-src="/images/Messenger%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" src="/img/loading.gif" class="lazyload"></a></p>
<ul>
<li>使用AIDL</li>
</ul>
<p>AIDL支持的数据类型:</p>
<blockquote>
<p>基本数据类型(int、long、char、boolean、double等)；</p>
</blockquote>
<blockquote>
<p>String和CharSequence;</p>
</blockquote>
<blockquote>
<p>List:只支持ArrayList,里面每个元素都必须能够被AIDL支持;</p>
</blockquote>
<blockquote>
<p>Map:只支持HashMap,里面的每个元素都必须能够被AIDL支持，包括key和value;</p>
</blockquote>
<blockquote>
<p>Parcelable:所有实现了Parcelable接口的对象;</p>
</blockquote>
<blockquote>
<p>AIDL:所有的AIDL接口本身也可以在AIDL文件中使用。</p>
</blockquote>
<p>以上6种数据类型就是AIDL所支持的所有类型，其中自定义的Parcelable对象和AIDL对象必须要显式import进来，不管它们是否和当前的AIDL文件位于同一个包内。</p>
<p>如果AIDL文件中用到了自定义的Parcelable对象，那么必须新建一个和它同名的AIDL文件，并在其中声明它为Parcelable类型。</p>
<p>AIDL中除了基本数据类型，其它类型的参数必须标上方向：in、out或者inout，in表示输入型参数，out表示输出型参数，inout表示输入输出型参数。</p>
<p>AIDL接口只支持方法，不支持声明静态常量。</p>
<p>为了方便AIDL开发，建议把所有和AIDL相关的类和文件全部放入同一个包中。AIDL的包结构在服务端和客户端要保持一致，否则运行会出错。这是因为客户端需要反序列化服务端中和AIDL接口相关的所有类，如果类的完整路径不一样的话，就无法成功反序列化，程序也无法正常运行。</p>
<p>CopyOnWriteArrayList支持并发读/写。</p>
<p>RemoteCallbackList是系统专门提供的用于删除跨进程listener的接口。RemoteCallbackList是一个泛型，支持管理任意的AIDL接口。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteCallbackList</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">IInterface</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在它的内部有一个Map结构专门用来保存所有的AIDL回调，这个Map的key是IBinder类型，value是Callback类型。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayMap&lt;IBinder,Callback&gt; mCallbacks = <span class="keyword">new</span> ArrayMap&lt;IBinder,Callback&gt;();</span><br></pre></td></tr></table></figure></div>

<p>其中Callback封装了真正的远程listener。当客户端注册listener的时候，它会把这个listener的信息存入mCallbacks中，其中Key和value分别通过下面的方式获得：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IBinder key = listener.asBinder();</span><br><span class="line">Callback value = <span class="keyword">new</span> Callback(listener,cookie);</span><br></pre></td></tr></table></figure></div>

<p>当客户端解注册的时候，只要遍历服务端所有的listener,找出那个和解注册listener具有相同Binder对象的服务端listener并把它删除就可以了。当客户端进程终止后，RemoteCallbackList能够自动移除客户端所注册的listener。RemoteCallbackList内部自动实现了线程同步的功能，所以使用它来注册和解注册时，不需要做额外的线程同步工作。</p>
<p>使用RemoteCallbackList,有一点需要注意。我们无法像操作List一样去操作它，尽管它的名字中也带个List，但是它并不是一个List。遍历RemoteCallbackList，必须要按照下面的方式进行，其中beginBroadcast和finishBroadcast必须配对使用，哪怕我们仅仅是想要获取RemoteCallbackList的元素个数。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">final</span> <span class="keyword">int</span> N = mListenerList.beginBroadcast();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;	</span><br><span class="line">	IOnNewBookArrivedListener l = mListenerList.getBroadcastItem(i);</span><br><span class="line">	<span class="keyword">if</span>(l!=<span class="keyword">null</span>)&#123;</span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">mListenerList.finishBroadcast();</span><br></pre></td></tr></table></figure></div>

<p>AIDL中使用权限验证功能</p>
<blockquote>
<p>第一种方法：在onBind中进行验证，验证不通过就直接返回null。可以使用permission验证这种验证方式。先在AndroidMenifest中声明所需的权限。</p>
</blockquote>
<blockquote>
<p>定义权限后，就可以在Service的onBind方法做权限验证。</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> check = checkCallingOrSelfPermission(<span class="string">"xx.xx.xx"</span>);</span><br><span class="line">	<span class="keyword">if</span>(check==PackageManager.PERMISSION_DENIED)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> mBinder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>第二种方法：可以在服务端的onTransact中进行权限验证，如果验证失败，就直接返回false,这样服务端就不会终止执行AIDL中的方法从而达到保护服务端的效果。可以验证permission,也可以验证Uid和Pid。</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code,Parcel data,Parcel reply,<span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> RemoteException</span>&#123;</span><br><span class="line">	<span class="keyword">int</span> check = checkCallingOrSelfPermission(<span class="string">"xx.xx.xx"</span>);</span><br><span class="line">	<span class="keyword">if</span>(check==PackageManager.PERMISSION_DENIED)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	String packageName = <span class="keyword">null</span>;</span><br><span class="line">	String[] packages = getPackageManager().getPackgesForUid(getCallingUid());</span><br><span class="line">	<span class="keyword">if</span>(packages!=<span class="keyword">null</span>&amp;&amp;packages.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		packageName = packages[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!packageName.startWith(<span class="string">"xx.xx"</span>))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code,data,reply,flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>使用ContentProvider</li>
</ul>
<blockquote>
<p>ContentProvider的onCreate方法运行在主线程，其它query、getType、insert、delete、update方法运行在Binder线程池中。需要注意，query、update、insert、delete四大方法存在多线程并发访问，因此方法内部要做好线程同步。</p>
</blockquote>
<ul>
<li>使用Socket</li>
</ul>
]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>IPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Groovy基础</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC2%E7%AB%A0-Groovy%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Groovy基础"><a href="#Groovy基础" class="headerlink" title="Groovy基础"></a>Groovy基础</h1><p>Groovy是基于JVM虚拟机的一种动态语言。每个Gradle的build脚本文件都是一个Groovy脚本文件。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>在Groovy中，分号不是必需的。在Groovy中，单引号和双引号都可以定义一个字符串变量 ，单引号标记的是纯粹的字符串变量，而不是对字符串里的表达式做运行，但是双引号可以。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> printString &#123;</span><br><span class="line">	<span class="keyword">def</span> str1 = <span class="string">'单引号'</span></span><br><span class="line">	<span class="keyword">def</span> str2 = <span class="string">"双引号"</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">println</span> <span class="string">"单引号定义的字符串类型:"</span>+str1.getClass().name</span><br><span class="line">	<span class="keyword">println</span> <span class="string">"双引号定义的字符串类型:"</span>+str2.getClass().name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">单引号定义的字符串类型:java.lang.String</span><br><span class="line">双引号定义的字符串类型:java.lang.String</span><br></pre></td></tr></table></figure></div>

<p>而双引号可以做运算:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span>  printStringVar&#123;</span><br><span class="line">	<span class="keyword">def</span> name = <span class="string">'张三'</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">println</span> <span class="string">'单引号的变量计算:$&#123;name&#125;'</span></span><br><span class="line">	<span class="keyword">println</span> <span class="string">"双引号的变量计算:$&#123;name&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">单引号的变量计算:$&#123;name&#125;</span><br><span class="line">双引号的变量计算:张三</span><br></pre></td></tr></table></figure></div>

<p>一个$符号紧跟着一对花括号，花括号里放表达式，如${name}、${1+1}等，只有一个变量的时候，可以省略花括号，如$name。</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> printList &#123;</span><br><span class="line">	<span class="keyword">def</span> numList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">	<span class="keyword">println</span> numList.getClass().name</span><br><span class="line"></span><br><span class="line">	<span class="keyword">println</span> numList[<span class="number">1</span>]<span class="comment">//访问第二个元素</span></span><br><span class="line">	<span class="keyword">println</span> numList[-<span class="number">1</span>]<span class="comment">//访问最后一个元素</span></span><br><span class="line">	<span class="keyword">println</span> numList[-<span class="number">2</span>]<span class="comment">//访问倒数第二个元素</span></span><br><span class="line">	<span class="keyword">println</span> numList[<span class="number">1</span>..<span class="number">3</span>]<span class="comment">//访问第二个到第四个元素</span></span><br><span class="line"></span><br><span class="line">	numList.<span class="keyword">each</span> &#123;</span><br><span class="line">		<span class="keyword">println</span> it</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Groovy还为List提供了非常方便的迭代操作，这就是each方法。</p>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map用法和List想像，只不过它的值是一个K:V键值对。访问也非常灵活，采用map[key]或者map.key都可以。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> printMap&#123;</span><br><span class="line">	<span class="keyword">def</span> map1 = [<span class="string">'name'</span>:<span class="string">'张三'</span>,<span class="string">'age'</span>:<span class="number">18</span>]</span><br><span class="line">	<span class="keyword">println</span> map1.getClass().name</span><br><span class="line"></span><br><span class="line">	<span class="keyword">println</span> map1[<span class="string">'name'</span>]</span><br><span class="line">	<span class="keyword">println</span> map1.age</span><br><span class="line"></span><br><span class="line">	map1.<span class="keyword">each</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">"key:$&#123;it.key&#125;,Value:$&#123;it.value&#125;"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="括号可以省略"><a href="#括号可以省略" class="headerlink" title="括号可以省略"></a>括号可以省略</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> invokeMethod&#123;</span><br><span class="line">	method1(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">	method1 <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> method1(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line">	<span class="keyword">println</span> a+b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="return可以不写"><a href="#return可以不写" class="headerlink" title="return可以不写"></a>return可以不写</h3><p>在Groovy中，定义有返回值的方法时，return语句不是必需的。当没有return时，Groovy会把方法执行过程中的最后一句代码作为返回值。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> printMethodReturn&#123;</span><br><span class="line">	<span class="keyword">def</span> max1 = method2 <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">	<span class="keyword">def</span> max2 = method2 <span class="number">3</span>,<span class="number">5</span></span><br><span class="line">	<span class="keyword">println</span> <span class="string">"max1:$&#123;max1&#125;,max2:$&#123;max2&#125;"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> method2(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">		a	</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		b</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="代码块可以作为参数传递"><a href="#代码块可以作为参数传递" class="headerlink" title="代码块可以作为参数传递"></a>代码块可以作为参数传递</h3><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> helloJavaBean&#123;</span><br><span class="line">	Person p = <span class="keyword">new</span> Person()</span><br><span class="line">	<span class="keyword">println</span> <span class="string">"名字是:$&#123;p.name&#125;"</span></span><br><span class="line">	p.name=<span class="string">"张三"</span></span><br><span class="line">	<span class="keyword">println</span> <span class="string">"名字是:$&#123;p.name&#125;"</span></span><br><span class="line">	<span class="keyword">println</span> <span class="string">"年龄是:$&#123;p.age&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person&#123;</span><br><span class="line">	<span class="keyword">private</span> String name</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> getAge()&#123;</span><br><span class="line">		<span class="number">18</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在Groovy中，并不是一定要定义成员变量才能作为类的属性访问。我们直接用getter/setter方法，也一样可以当作属性访问。</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是Groovy的一个非常重要的特性，是DSL的基础。</p>
<h3 id="初识闭包"><a href="#初识闭包" class="headerlink" title="初识闭包"></a>初识闭包</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> helloClosure&#123;</span><br><span class="line">	customEach&#123;</span><br><span class="line">		<span class="keyword">println</span> it</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	eachMap&#123;k,v-&gt;<span class="keyword">println</span> <span class="string">"$&#123;k&#125; is $&#123;v&#125;"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> customEach(closure)&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i in <span class="number">1</span>..<span class="number">10</span>)&#123;</span><br><span class="line">		closure(i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="向闭包传递参数"><a href="#向闭包传递参数" class="headerlink" title="向闭包传递参数"></a>向闭包传递参数</h3><p>当闭包有一个参数时，默认就是it，当有多个参数时，it就不能表达了，我们需要把参数一一列出。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> eachMap(closure)&#123;</span><br><span class="line">	<span class="keyword">def</span> map1 = [<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="number">18</span>]</span><br><span class="line">	map1.<span class="keyword">each</span>&#123;</span><br><span class="line">		closure(it.key,it.value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="闭包委托"><a href="#闭包委托" class="headerlink" title="闭包委托"></a>闭包委托</h3><p>Groovy的闭包有thisObject,owener,delegate三个属性。默认情况下，delegate和owner是相等的，但是delegate是可以被修改的。</p>
<p>thisObject的优先级最高，thisObject其实就是这个构建脚本的上下文，它和脚本中的this对象是相等的。优先级从高到低依次是：thisObject&gt;owner&gt;delegate。</p>
<p>在DSL中，比如Gradle，我们一般会指定delegate为当前的it，这样我们在闭包内就可以对该it进行配置，如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> configClosure&#123;</span><br><span class="line">	person&#123;</span><br><span class="line">		name=<span class="string">"张三"</span></span><br><span class="line">		age = <span class="number">18</span></span><br><span class="line">		dumpPerson()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person&#123;</span><br><span class="line">	String name</span><br><span class="line">	<span class="keyword">int</span> age</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> dumpPerson()&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">"name:$&#123;name&#125;,age:$&#123;age&#125;"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> person(Closure&lt;Person&gt; closure)&#123;</span><br><span class="line">	Person p = <span class="keyword">new</span> Person()</span><br><span class="line">	closure.delegate = p</span><br><span class="line">	closure.setResolveStrategy(Closure.DELEGATE_FIRST)</span><br><span class="line">	closure(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="DSL"><a href="#DSL" class="headerlink" title="DSL"></a>DSL</h2><p>DSL,即Domain Specific Language，领域特定语言，就是专门关注某一领域的语言，在于专，而不是全。</p>
<p>Gradle就是一门DSL,它是基于Groovy，专门解决自动化构建的DSL。</p>
]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Groovy</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle入门</title>
    <url>/2020/01/01/Gradle%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/%E7%AC%AC1%E7%AB%A0-Gradle%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Gradle入门"><a href="#Gradle入门" class="headerlink" title="Gradle入门"></a>Gradle入门</h1><h2 id="配置Gradle环境"><a href="#配置Gradle环境" class="headerlink" title="配置Gradle环境"></a>配置Gradle环境</h2><p>安装之前确保已经安装配置好Java环境，要求JDK6以上，并且在环境变量里配置了JAVA_HOME，查看Java版本可以在终端输入如下命令：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></div>

<p>显示结果如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java version <span class="string">"1.8.0_221"</span></span><br><span class="line">Java(TM) <span class="function">SE Runtime <span class="title">Environment</span> <span class="params">(build <span class="number">1.8</span><span class="number">.0</span>_221-b11)</span></span></span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server <span class="title">VM</span> <span class="params">(build <span class="number">25.221</span>-b11, mixed mode)</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="Linux下搭建Gradle构建环境"><a href="#Linux下搭建Gradle构建环境" class="headerlink" title="Linux下搭建Gradle构建环境"></a>Linux下搭建Gradle构建环境</h3><p>先到Gradle官网<a href="https://gradle.org下载好Gradle" target="_blank" rel="noopener">https://gradle.org下载好Gradle</a> SDK。建议下载all版本，包含了Gradle SDK所有相关内容，包括源代码，文档，示例等。下载后解压。</p>
<p>要运行Gradle，必须把Gradle_HOME/bin目录添加到环境变量PATH中。在Linux下，如果只想为当前登录的用户配置可以运行Gradle，那么可以编辑~/.bashrc文件，添加以下内容:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#这里是我的Gradle目录，换成你自己的</span><br><span class="line">GRADLE_HOME=/home/wangyz/gradle</span><br><span class="line">PATH=$&#123;PATH&#125;:$&#123;GRADLE_HOME&#125;/bin</span><br><span class="line">Export GRADLE_HOME PATH</span><br></pre></td></tr></table></figure></div>

<p>上面GRADLE_HOME是我的Gradle解压后的目录，这里需要换成你自己的。添加保存后，在终端输入source ~/.bashrc，回车执行让刚才的配置生效。</p>
<p>如果想让所有用户都可以使用Gradle，那么你需要在/etc/profile中添加以上内容，并执行source /etc/profile使配置生效。</p>
<p>现在已经配置好了，要验证我们的配置是否正确，是否可以运行Gradle，只需要打开终端，输入gradle -v命令查看即可，如果能正确显示Gradle版本号，Groovy版本号，JVM等相关信息，那么说明已经配置成功。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle <span class="number">5.6</span></span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build time:   <span class="number">2019</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">21</span>:<span class="number">05</span>:<span class="number">25</span> UTC</span><br><span class="line">Revision:     f0b9d60906c7b8c42cd6c61a39ae7b74767bb012</span><br><span class="line"></span><br><span class="line">Kotlin:       <span class="number">1.3</span><span class="number">.41</span></span><br><span class="line">Groovy:       <span class="number">2.5</span><span class="number">.4</span></span><br><span class="line">Ant:          <span class="function">Apache <span class="title">Ant</span><span class="params">(TM)</span> version 1.9.14 compiled on March 12 2019</span></span><br><span class="line"><span class="function">JVM:          1.8.0<span class="title">_221</span> <span class="params">(Oracle Corporation <span class="number">25.221</span>-b11)</span></span></span><br><span class="line"><span class="function">OS:           Linux 4.18.0-15-generic amd64</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Windows下搭建Gradle构建环境"><a href="#Windows下搭建Gradle构建环境" class="headerlink" title="Windows下搭建Gradle构建环境"></a>Windows下搭建Gradle构建环境</h3><p>通过右击我的电脑，打开属性面板，然后找到环境变量配置项，添加GRADLE_HOME环境变量，然后把GRADLE_HOME/bin添加到PATH系统变量里保存即可。完成后打开CMD，运行gradle -v来进行验证。</p>
<h2 id="Gradle版Hello-World"><a href="#Gradle版Hello-World" class="headerlink" title="Gradle版Hello World"></a>Gradle版Hello World</h2><p>新建一个目录，我这里是Gradle,然后在该目录下创建一个名为build.gradle的文件。打开编辑该文件，输入以下内容:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> hello&#123;</span><br><span class="line">	<span class="keyword">doLast</span>&#123;</span><br><span class="line">		<span class="keyword">println</span> <span class="string">'hello,world!'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>打开终端，然后移动到gradle下，使用gradle -q hello命令来执行构建脚本：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">gradle -q hello</span><br><span class="line">hello,world!</span><br></pre></td></tr></table></figure></div>

<p>build.gradle是Gradle默认的构建脚本文件，执行Gradle命令的时候，会默认加载当前目录下的build.gradle脚本文件。也可以通过-b参数来指定想要加载执行的文件。</p>
<p>gradle -q hello,这段命令，意思是想执行build.gradle脚本中定义的名为hello的Task，-q参数用于控制gradle输出的日志级别，以及哪些日志可以输出被看到。</p>
<p>在Gradle中，单引号和双引号所包含的内容都是字符串。</p>
<h2 id="Gradle-Wrapper"><a href="#Gradle-Wrapper" class="headerlink" title="Gradle Wrapper"></a>Gradle Wrapper</h2><p>Wrapper就是对Gradle的一层包装，便于在团队开发过程中统一Gradle构建的脚本，避免因为Gradle版本不统一带来的不必要问题。</p>
<h3 id="生成Wrapper"><a href="#生成Wrapper" class="headerlink" title="生成Wrapper"></a>生成Wrapper</h3><p>Gradle提供了内置的Wrapper task帮助我们自动生成Wrapper所需的目录文件，在一个项目的根目录下输入gradle wrapper即可生成。</p>
<p>gradlew和gradle.bat分别是Linux和Windows下的可执行脚本，它们的用法和Gradle原生命令是一样的。</p>
<h3 id="Wrapper配置"><a href="#Wrapper配置" class="headerlink" title="Wrapper配置"></a>Wrapper配置</h3><p>当我们在终端执行gradle wrapper生成相关文件的时候，可以为其指定一些参数，来控制Wrapper的生成。</p>
<p>–gradle-version:用于指定使用的Gradle版本</p>
<p>–gradle-distribution-url:用于指定下载Gradle发行版的url地址</p>
<p>如果在调用gradle wrapper的时候，不添加任何参数，那么就会使用当前Gradle版本作为生成的Wrapper的gradle version。</p>
<h3 id="gralde-wrapper-properties"><a href="#gralde-wrapper-properties" class="headerlink" title="gralde-wrapper.properties"></a>gralde-wrapper.properties</h3><p>该配置文件是gradle wrapper的相关配置文件，我们上面执行该任务的任何配置都会被写进该文件。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper<span class="regexp">/dists</span></span><br><span class="line"><span class="regexp">distributionUrl=https\:/</span><span class="regexp">/services.gradle.org/</span>distributions<span class="regexp">/gradle-5.6-bin.zip</span></span><br><span class="line"><span class="regexp">zipStoreBase=GRADLE_USER_HOME</span></span><br><span class="line"><span class="regexp">zipStorePath=wrapper/</span>dists</span><br></pre></td></tr></table></figure></div>

<h3 id="自定义Wrapper-Task"><a href="#自定义Wrapper-Task" class="headerlink" title="自定义Wrapper Task"></a>自定义Wrapper Task</h3><p>在build.gradle构建文件中加入以下脚本：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">task</span> mywrapper(type:Wrapper)&#123;</span><br><span class="line">	gradleVersion=<span class="string">'5.6'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里指定了gradle版本。</p>
<h2 id="Gradle日志"><a href="#Gradle日志" class="headerlink" title="Gradle日志"></a>Gradle日志</h2><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p>Gradle的日志级别和我们使用的大部分语言差不多。除了这些通用的之外，Gradle又增加了QUIET和LIFECYCLE两个级别，用于标记重要以及进度级别的日志信息。</p>
<table>
<thead>
<tr>
<th>级别</th>
<th>用于</th>
</tr>
</thead>
<tbody><tr>
<td>ERROR</td>
<td>错误消息</td>
</tr>
<tr>
<td>QUIET</td>
<td>重要消息</td>
</tr>
<tr>
<td>WARNING</td>
<td>警告消息</td>
</tr>
<tr>
<td>LIFECYCLE</td>
<td>进度消息</td>
</tr>
<tr>
<td>INFO</td>
<td>信息消息</td>
</tr>
<tr>
<td>DEBUG</td>
<td>调试消息</td>
</tr>
</tbody></table>
<p>具体用法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">#输出QUIET级别及以上的日志信息</span><br><span class="line">gradle -q <span class="keyword">task</span></span><br></pre></td></tr></table></figure></div>

<h3 id="输出错误堆栈信息"><a href="#输出错误堆栈信息" class="headerlink" title="输出错误堆栈信息"></a>输出错误堆栈信息</h3><p>默认情况下，堆栈信息的输出是关闭的。</p>
<table>
<thead>
<tr>
<th>命令行选项</th>
<th>用于</th>
</tr>
</thead>
<tbody><tr>
<td>无选项</td>
<td>没有堆栈信息输出</td>
</tr>
<tr>
<td>-s或者-stacktrace</td>
<td>输出关键性的堆栈信息</td>
</tr>
<tr>
<td>-S或者–full-stacktrace</td>
<td>输出全部堆栈信息</td>
</tr>
</tbody></table>
<p>一般推荐使用-s而不是-S，因为-S输出的堆栈太多太长。不好看。而-s比较精简，可以定位解决我们大部分的问题。</p>
<h3 id="自己使用日志信息调试"><a href="#自己使用日志信息调试" class="headerlink" title="自己使用日志信息调试"></a>自己使用日志信息调试</h3><p>通常情况下我们一般都是使用print系统方法，把日志信息输出到标准的控制台输出流。</p>
<p>除了print系统方法之外，也可以使用内置的logger更灵活地控制输出不同级别的日志。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">logger.quiet(<span class="string">'quiet日志信息'</span>)</span><br><span class="line">logger.error(<span class="string">'error日志信息'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn日志信息'</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="Gradle命令行"><a href="#Gradle命令行" class="headerlink" title="Gradle命令行"></a>Gradle命令行</h2><h3 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h3><p>查看帮助的方式很简单，基本都是在命令后跟-h或者–help。有的时候会有-?.如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">.<span class="regexp">/gradlew -?</span></span><br><span class="line"><span class="regexp">./g</span>radle -h</span><br><span class="line">.<span class="regexp">/gradle -help</span></span><br></pre></td></tr></table></figure></div>

<h3 id="查看所有可执行的Tasks"><a href="#查看所有可执行的Tasks" class="headerlink" title="查看所有可执行的Tasks"></a>查看所有可执行的Tasks</h3><p>通过运行./gradlew tasks命令。</p>
<h3 id="Gradle-Help任务"><a href="#Gradle-Help任务" class="headerlink" title="Gradle Help任务"></a>Gradle Help任务</h3><p>Gradle还内置了一个help task,这个help可以让我们了解每一个task的使用帮助，用法是./gradlew help –task.</p>
<h3 id="强制刷新依赖"><a href="#强制刷新依赖" class="headerlink" title="强制刷新依赖"></a>强制刷新依赖</h3><p>强制刷新很简单，只要在命令行运行的时候加上–refresh-dependencies参数就可以。</p>
<h3 id="多任务调用"><a href="#多任务调用" class="headerlink" title="多任务调用"></a>多任务调用</h3><p>通过命令行执行多个任务非常简单，只需要按顺序以空格分开就可以了。如./gradlew clean jar。</p>
<h3 id="通过任务名字缩写执行"><a href="#通过任务名字缩写执行" class="headerlink" title="通过任务名字缩写执行"></a>通过任务名字缩写执行</h3><p>Gradle提供了基于驼峰命名法的缩写调用。比如connectCheck，执行的时候可以使用./gradlew connectTask,也可以使用./gradlew cC的方法来执行。</p>
]]></content>
      <categories>
        <category>Gradle权威指南</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Activity的生命周期和启动模式</title>
    <url>/2020/01/01/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2/Activity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Activity的生命周期和启动模式"><a href="#Activity的生命周期和启动模式" class="headerlink" title="Activity的生命周期和启动模式"></a>Activity的生命周期和启动模式</h1><h2 id="1、Activity的生命周期"><a href="#1、Activity的生命周期" class="headerlink" title="1、Activity的生命周期"></a>1、Activity的生命周期</h2><h3 id="1-1、典型情况下的生命周期"><a href="#1-1、典型情况下的生命周期" class="headerlink" title="1.1、典型情况下的生命周期"></a>1.1、典型情况下的生命周期</h3><blockquote>
<p>在有用户参与的情况下，Activity所经过的生命周期的改变。</p>
</blockquote>
<p><strong>Activity会经历如下生命周期:</strong></p>
<p>onCreate-onRestart-onStart-onResume-onPause-onStop-onDestroy</p>
<p><a href="/images/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" data-fancybox="group" data-caption="Activity生命周期" class="fancybox"><img alt="Activity生命周期" title="Activity生命周期" data-src="/images/Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="1-2、异常情况下的生命周期"><a href="#1-2、异常情况下的生命周期" class="headerlink" title="1.2、异常情况下的生命周期"></a>1.2、异常情况下的生命周期</h3><blockquote>
<p>Activity被系统回收或者由于当前设备的Configuration发生改变从而导致Activity被销毁重建。</p>
</blockquote>
<p><a href="/images/%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84Activity%E7%9A%84%E9%87%8D%E5%BB%BA%E8%BF%87%E7%A8%8B.png" data-fancybox="group" data-caption="异常情况下的Activity的重建过程.png" class="fancybox"><img alt="异常情况下的Activity的重建过程.png" title="异常情况下的Activity的重建过程.png" data-src="/images/%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84Activity%E7%9A%84%E9%87%8D%E5%BB%BA%E8%BF%87%E7%A8%8B.png" src="/img/loading.gif" class="lazyload"></a></p>
<h4 id="1-2-1资源相关的系统配置发生改变导致Activity被杀死并重新创建"><a href="#1-2-1资源相关的系统配置发生改变导致Activity被杀死并重新创建" class="headerlink" title="1.2.1资源相关的系统配置发生改变导致Activity被杀死并重新创建"></a>1.2.1资源相关的系统配置发生改变导致Activity被杀死并重新创建</h4><p>系统只在Activity异常终止的时候才会调用onSaveInstanceState和onRestoreInstanceState来存储和恢复数据，其它情况不会触发这个过程。</p>
<h4 id="1-2-2资源内存不足导致低优先级的Activity被杀死"><a href="#1-2-2资源内存不足导致低优先级的Activity被杀死" class="headerlink" title="1.2.2资源内存不足导致低优先级的Activity被杀死"></a>1.2.2资源内存不足导致低优先级的Activity被杀死</h4><p>Activity优先级:</p>
<p>1、前台Activity–正在和用户交互的Activity，优先级最高。</p>
<p>2、可见但非前台Activity–Activity可见但位于后台无法和用户直接交互，如Activity中弹出一个对话框。</p>
<p>3、后台Activity–已经被暂停的Activity，比如执行了onStop，优先级最低。</p>
<blockquote>
<p>当系统内存不足时，系统会按照上述优先级去杀死目标Activity所在的进程，并在后续通过onSaveInstanceState和onRestoreInstanceState来存储和恢复数据。如果一个进程中没有四大组件在执行，那么这个进程将很快被系统杀死，因此，一些后台工作不适合脱离四大组件而独立运行在后台中，这样进程容易被杀死。比较好的方法是将后台工作放入Service中从而保证进程有一定的优先级，这样就不会轻易被系统杀死。</p>
</blockquote>
<h2 id="2、Activity的启动模式"><a href="#2、Activity的启动模式" class="headerlink" title="2、Activity的启动模式"></a>2、Activity的启动模式</h2><p>1、standard:标准模式。</p>
<blockquote>
<p>每次启动一个Activity都会重新创建一个新的实例，不管这个实例是否已经存在。</p>
</blockquote>
<p>2、singleTop:栈顶复用模式。</p>
<blockquote>
<p>如果新Activity已经位于任务栈的栈顶，那么此Activity不会被重新创建，同时它的onNewIntent方法会被回调，通过此方法的参数，我们可以取出当前请求的信息。此时，Activity的onCreate、onStart不会被系统调用，因为它并没有发生改变。如果新Activity的实例已存在但不是位于栈顶，那么新的Activity仍然会重新创建。</p>
</blockquote>
<p>3、singleTask:栈内复用模式。</p>
<blockquote>
<p>这是一种单实例模式。在这种模式下，只要Activity在一个栈中存在，那么多次启动此Activity都不会重新创建实例，和singleTop一样，系统也会回调onNewIntent。当一个具有singleTask模式的Activity请求启动后，比如Activity A,系统首先会寻找是否存在A想要的任务栈，如果不存在，就重新创建一个任务栈，然后创建A的实例后把A放入栈中。如果存在A所需的任务栈，这时要看A是否在栈中有实例存在，如果有实例存在，那么系统会把A调到栈顶并调用它的onNewIntent方法，如果实例不存在，就创建A的实例并把A放入栈中。singleTask默认具体有clearTop的效果，会导致栈内所有在A上的Activity全部出栈。</p>
</blockquote>
<blockquote>
<p>TaskAffinity:任务相关性。这个参数标识了一个Activity所需要的任务栈的名字。默认情况下，所有Activity所需的任务栈的名字为应用的包名。我们也可以为每个Activity都单独指定TaskAffinity属性，这个属性值必须不能和包名相同，否则就相当于没有指定。TaskAffinity属性主要和singleTask启动模式或者allowTaskReparenting属性配对使用，在其它情况下没有意义。</p>
</blockquote>
<p>4、singleInstance:单实例模式。</p>
<blockquote>
<p>这是一种加强的singleTask模式，它除了具有singleTask模式的所有特性外，还加强了一点，那就是具有此种模式的Activity只能单独地位于一个任务栈中。</p>
</blockquote>
<p>可以通过AndroidMenifest为Activity指定启动模式。或者通过Intent中设置标志位来为Activity指定启动模式。这两种方式都可以为Activity指定启动模式，但是二者还是有区别。首先，优先级上，第二种方式的优先级要高于第一种；其它，上述两种方式在限定范围上有所不同，第一种方式无法直接为Activity设定FLAG_ACTIVITY_CLEAR_TOP标识，而第二种方式无法为Activity指定singleInstance模式。</p>
<h2 id="3、IntentFilter的匹配规则"><a href="#3、IntentFilter的匹配规则" class="headerlink" title="3、IntentFilter的匹配规则"></a>3、IntentFilter的匹配规则</h2><blockquote>
<p>启动Activity分为两种：显示调用和隐式调用。显示调用需要明确地指定启动对象的组件信息，包括包名和类名，而隐式调用则不需要明确地指定组件信息。隐式调用需要Intent能够匹配目标组件的IntentFilter所设置的过滤信息，如果不匹配将无法启动目标Activity。IntentFilter中的过滤信息有action、category、data。</p>
</blockquote>
<blockquote>
<p>为了匹配过滤列表，需要同时匹配过滤列表中的action、category、data信息，否则匹配失败。只有一个Intent同时匹配action类别、category类别、data类别才算完全匹配，只有完全匹配才能启动目标Activity。一个Activity中可以有多个intent-filter，一个Intent只要能匹配任务一组intent-filter即可成功启动对应的Activity。</p>
</blockquote>
<h3 id="1、action的匹配规则"><a href="#1、action的匹配规则" class="headerlink" title="1、action的匹配规则"></a>1、action的匹配规则</h3><blockquote>
<p>一个过滤规则中可以有多个action，那么只要Intent中的action能够和过滤规则中的任务一个action相同即可匹配成功。action的匹配要求Intent中的action存在且必须和过滤规则中的其中一个aciton相同。</p>
</blockquote>
<h3 id="2、category的匹配规则"><a href="#2、category的匹配规则" class="headerlink" title="2、category的匹配规则"></a>2、category的匹配规则</h3><blockquote>
<p>如果Intent中含有category，那么所有的category必须和过滤规则中的其它一个category相同。Intent中可以没有category,如果没有category的话，系统在调用startActivity或者startActivityForResult的时候会默认为Intent加上”android.intent.category.DEFAULT”这个category。同时，为了我们的activity能够接收隐式调用，就必须在intent-filter中指定”android.intent.category.DEFAULT”这个category。</p>
</blockquote>
<h3 id="3、data的匹配规则"><a href="#3、data的匹配规则" class="headerlink" title="3、data的匹配规则"></a>3、data的匹配规则</h3><blockquote>
<p>data由两部分组成，mineType和URI。mimeType指媒体类型，比如image/jpeg、audio/mpeg4-generic和video/*等，可以表示图片、文本、视频等不同的媒体格式。而URI包含的数据就比较多了，下面是URI的结构：</p>
<p>scheme://host:port/path|pathPrefix|pathPattern</p>
<p>具体的例子如：</p>
<p><a href="http://www.baidu.com:80/search/info" target="_blank" rel="noopener">http://www.baidu.com:80/search/info</a></p>
<p>content://com.example.project:200/folder/subfolder/etc</p>
</blockquote>
<p>Scheme:URI的模式，比如http、file、content等。如果URI中没有指定scheme，那么整个URI的其它参数无效，也意味着URI是无效的。</p>
<p>Host:URI的主机名。比如:<a href="http://www.baidu.com。如果URI中没有指定host，那么整个URI的其它参数无效，也意味着URI是无效的。" target="_blank" rel="noopener">www.baidu.com。如果URI中没有指定host，那么整个URI的其它参数无效，也意味着URI是无效的。</a></p>
<p>Port：URI中的端口号，如80，仅当URI中指定了scheme和host参数，port参数才有意义。</p>
<p>Path、pathPattern、pathPrefix:这三个参数表述路径信息，其中path表示完整的路径信息；pathPattern也表示完整的路径信息，但是它里面可以包含通配符”*”,”*”表示0个或多个任意字符，需要注意的是，由于正则表达式的规则，如果想表示真实的字符串，那么”*”要写成”\*”,”&quot;要写在”\\“;pathPrefix表示路径的前缀信息。</p>
<blockquote>
<p>如果要为Intent指定完整的data，必须要调用setDataAndType方法。不能先调用setData再调用setType。因为这两个方法彼此会清除对方的值。</p>
</blockquote>
<blockquote>
<p>当我们通过隐式方式启动一个Activity的时候，可以做一下判断，看是否有Activity能够匹配我们的隐式Intent。如果不做判断就有可能出现错误。判断方法有两种：采用PackageManager的resolveActivity方式或者Intent的resolveActivity方法，如果找不到匹配的Activity会返回null。另外，PackageManager还提供了queryIntentActivities方法，这个方法和resolveActivity方法不同的是：它不是返回最佳匹配的Activity信息，而是返回所有成功的Activity信息。</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;ResolveInfo&gt; <span class="title">queryIntentActivities</span><span class="params">(Intent intent,<span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ResolveInfo <span class="title">resolveActivity</span><span class="params">(Intent intent,<span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure></div>

<p>上面两个方法的第二个参数，需要使用MATCH_DEFAULT_ONLY标记位。这个标记的含义是仅仅匹配那些在intent-filter中声明了<category android:name="android.intent.category.DEFAULT">这个category的Activity.使用这个标记位的意义在于，只要上述两个方法不返回null,那么startActivity一定可以成功。</category></p>
]]></content>
      <categories>
        <category>Android艺术探索</category>
      </categories>
      <tags>
        <tag>Activity</tag>
        <tag>生命周期</tag>
        <tag>启动模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio NDK 开发</title>
    <url>/2019/12/31/Android/Android%20Studio%20NDK%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android-Studio-NDK-开发"><a href="#Android-Studio-NDK-开发" class="headerlink" title="Android Studio NDK 开发"></a>Android Studio NDK 开发</h1><p>记录在Android Studio中NDK简单开发的步骤</p>
<p>用到的Android Studio版本为3.5。</p>
<h2 id="配置NDK"><a href="#配置NDK" class="headerlink" title="配置NDK"></a>配置NDK</h2><h3 id="下载NDK"><a href="#下载NDK" class="headerlink" title="下载NDK"></a>下载NDK</h3><p>一般在SDK下已经有自带的ndk文件夹，如sdk目录下的ndk-bundle文件夹。</p>
<a id="more"></a>

<p><a href="/images/ndk.png" data-fancybox="group" data-caption="ndk" class="fancybox"><img alt="ndk" title="ndk" data-src="/images/ndk.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>如果没有，可以在SDK Manager中下载</p>
<p><a href="/images/ndk2.png" data-fancybox="group" data-caption="ndk" class="fancybox"><img alt="ndk" title="ndk" data-src="/images/ndk2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>下载LLDB、NDK两项</p>
<p>下载完成后，可以在sdk目录下看到ndk的文件夹</p>
<p><a href="/images/ndk3.png" data-fancybox="group" data-caption="ndk" class="fancybox"><img alt="ndk" title="ndk" data-src="/images/ndk3.png" src="/img/loading.gif" class="lazyload"></a></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>我的电脑-属性-高级系统设置-环境变量</p>
<p>新建一个ANDROID_NDK变量，配置上ndk文件夹的位置(在这个文件夹下可以看ndk-build.cmd等文件)</p>
<p><a href="/images/ndk4.png" data-fancybox="group" data-caption="ndk" class="fancybox"><img alt="ndk" title="ndk" data-src="/images/ndk4.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>然后将这个变量加入到path变量中</p>
<p><a href="/images/ndk5.png" data-fancybox="group" data-caption="ndk" class="fancybox"><img alt="ndk" title="ndk" data-src="/images/ndk5.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="生成SO库"><a href="#生成SO库" class="headerlink" title="生成SO库"></a>生成SO库</h2><p>新建一个Hello.java文件，里面增加一个本地方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">hi</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></div>

<p>执行Build-Make Project，在app\build\intermediates\javac\debug\classes目录下执行以下cmd命令生成头文件:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cmd</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">javah -jni com.wangyz.ndk.Hello</span><br></pre></td></tr></table></figure></div>

<p>在该目录下，可以看到生成的com_wangyz_ndk_Hello.h文件。</p>
<p>在app/src/main/目录下新建jni目录，将生成的头文件复制到jni目录下。</p>
<p>在jni目录下新建com_wangyz_ndk_Hello.c文件，编写C语言实现代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_wangyz_ndk_Hello.h"</span></span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_wangyz_ndk_Hello_hi</span><br><span class="line">  (JNIEnv *env, jclass clazz)&#123;</span><br><span class="line">  <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env,<span class="string">"Hello"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>在jni目录下新建Android.mk文件，内容如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">mk</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight mk"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := Hello</span><br><span class="line">LOCAL_SRC_FILES := com_wangyz_ndk_Hello.c</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure></div>

<p>在jni目录下新建Application.mk文件，内容如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">mk</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight mk"><table><tr><td class="code"><pre><span class="line">APP_ABI := all</span><br></pre></td></tr></table></figure></div>

<p>在该目录下执行cmd命令:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cmd</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ndk-build</span><br></pre></td></tr></table></figure></div>

<p>执行后生成所需的so文件。</p>
<h2 id="引用SO库"><a href="#引用SO库" class="headerlink" title="引用SO库"></a>引用SO库</h2><p>在app/src/main目录下新建目录jniLibs,将对应的so复制到该目录下:</p>
<p><a href="/images/ndk6.png" data-fancybox="group" data-caption="ndk" class="fancybox"><img alt="ndk" title="ndk" data-src="/images/ndk6.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在Activity中引入：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>使用SO库中的方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hi = Hello.hi();</span><br><span class="line">Toast.makeText(getApplicationContext(), hi, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure></div>

<p>Android Studio中NDK的简单开发到此结束。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>NDK</tag>
        <tag>Android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Android多渠道打包--Gradle打包</title>
    <url>/2019/12/31/Android/Android%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android多渠道打包–Gradle打包"><a href="#Android多渠道打包–Gradle打包" class="headerlink" title="Android多渠道打包–Gradle打包"></a>Android多渠道打包–Gradle打包</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于App一般都会在多个应用市场上架，为了分析App在每个不同渠道的具体的数据，一般都会对不同渠道打包不同的App。多渠道打包有多种方式，这里只介绍利用Gradle进行多渠道打包。</p>
<a id="more"></a>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1、在AndroidManifest-xml中增加配置"><a href="#1、在AndroidManifest-xml中增加配置" class="headerlink" title="1、在AndroidManifest.xml中增加配置"></a>1、在AndroidManifest.xml中增加配置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"APP_CHANNEL"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"$&#123;APP_CHANNEL_VALUE&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>其中,APP_CHANNEL为配置的属性名。APP_CHANNEL_VALUE为在build.gradle中配置的变量。</p>
<h3 id="2、在build-gradle中增加productFlavors配置"><a href="#2、在build-gradle中增加productFlavors配置" class="headerlink" title="2、在build.gradle中增加productFlavors配置"></a>2、在build.gradle中增加productFlavors配置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">        baidu &#123;</span><br><span class="line">            manifestPlaceholders = [APP_CHANNEL_VALUE: "baidu"]</span><br><span class="line">        &#125;</span><br><span class="line">        qq &#123;</span><br><span class="line">            manifestPlaceholders = [APP_CHANNEL_VALUE: "qq"]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在这里，增加了两个渠道配置信息：baidu和qq。在manifestPlaceholders的配置中，APP_CHANNEL_VALUE即为在AndroidManifest用到的变量。</p>
<p>注意:Gradle3.0以上版本，需要在defaultConfig节点中增加以下配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">flavorDimensions "default"</span><br></pre></td></tr></table></figure></div>

<h3 id="3、渠道名称获取"><a href="#3、渠道名称获取" class="headerlink" title="3、渠道名称获取"></a>3、渠道名称获取</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getMetaData</span><span class="params">(Context context, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PackageManager packageManager = context.getPackageManager();</span><br><span class="line">            ApplicationInfo applicationInfo = packageManager.getApplicationInfo(context</span><br><span class="line">                    .getPackageName(), PackageManager.GET_META_DATA);</span><br><span class="line">            <span class="keyword">return</span> applicationInfo.metaData.getString(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4、修改应用名称"><a href="#4、修改应用名称" class="headerlink" title="4、修改应用名称"></a>4、修改应用名称</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">        baidu &#123;</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_baidu", APP_CHANNEL_VALUE: "baidu"]</span><br><span class="line">        &#125;</span><br><span class="line">        qq &#123;</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_qq",APP_CHANNEL_VALUE: "qq"]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在manifestPlaceholders中增加app_name的配置，在AndroidManifest.xml中引用:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"$&#123;app_icon&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"$&#123;app_name&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"$&#123;app_icon&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"APP_CHANNEL"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"$&#123;APP_CHANNEL_VALUE&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        //省略其它内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="5、修改应用图标"><a href="#5、修改应用图标" class="headerlink" title="5、修改应用图标"></a>5、修改应用图标</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">        baidu &#123;</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_baidu",app_icon:"@mipmap/icon_baidu", APP_CHANNEL_VALUE: "baidu"]</span><br><span class="line">        &#125;</span><br><span class="line">        qq &#123;</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_qq", app_icon:"@mipmap/icon_qq",APP_CHANNEL_VALUE: "qq"]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在manifestPlaceholders中增加app_icon的配置，在AndroidManifest.xml中引用:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"$&#123;app_icon&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"$&#123;app_name&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"$&#123;app_icon&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"APP_CHANNEL"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"$&#123;APP_CHANNEL_VALUE&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        //省略其它内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6、修改应用包名"><a href="#6、修改应用包名" class="headerlink" title="6、修改应用包名"></a>6、修改应用包名</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">        baidu &#123;</span><br><span class="line">            applicationIdSuffix ".baidu"</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_baidu",app_icon:"@mipmap/icon_baidu", APP_CHANNEL_VALUE: "baidu"]</span><br><span class="line">        &#125;</span><br><span class="line">        qq &#123;</span><br><span class="line">            applicationIdSuffix ".qq"</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_qq", app_icon:"@mipmap/icon_qq",APP_CHANNEL_VALUE: "qq"]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>增加applicationIdSuffix属性。</p>
<h3 id="7、Java中调用gradle中的变量"><a href="#7、Java中调用gradle中的变量" class="headerlink" title="7、Java中调用gradle中的变量"></a>7、Java中调用gradle中的变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span><br><span class="line">            buildConfigField "String","FIELD_TEST","\"FIELD_TEST\""</span><br><span class="line">        &#125;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span><br><span class="line">            buildConfigField "String","FIELD_TEST","\"FIELD_TEST\""</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>增加buildConfigField。同步后，通过BuildConfig.FIELD_TEST能获取到新增的变量值。</p>
<h3 id="8、完整的gradle"><a href="#8、完整的gradle" class="headerlink" title="8、完整的gradle"></a>8、完整的gradle</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">apply plugin: 'com.android.application'</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 28</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId "com.wangyz.multichannel"</span><br><span class="line">        minSdkVersion 21</span><br><span class="line">        targetSdkVersion 28</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName "1.0"</span><br><span class="line">        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"</span><br><span class="line">        flavorDimensions "default"</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span><br><span class="line">            buildConfigField "String","FIELD_TEST","\"FIELD_TEST\""</span><br><span class="line">        &#125;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span><br><span class="line">            buildConfigField "String","FIELD_TEST","\"FIELD_TEST\""</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        baidu &#123;</span><br><span class="line">            applicationIdSuffix ".baidu"</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_baidu",app_icon:"@mipmap/icon_baidu", APP_CHANNEL_VALUE: "baidu"]</span><br><span class="line">        &#125;</span><br><span class="line">        qq &#123;</span><br><span class="line">            applicationIdSuffix ".qq"</span><br><span class="line">            manifestPlaceholders = [app_name: "@string/app_name_qq", app_icon:"@mipmap/icon_qq",APP_CHANNEL_VALUE: "qq"]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(dir: 'libs', include: ['*.jar'])</span><br><span class="line">    implementation 'com.android.support:appcompat-v7:28.+'</span><br><span class="line">    implementation 'com.android.support.constraint:constraint-layout:1.0.2'</span><br><span class="line">    testImplementation 'junit:junit:4.12'</span><br><span class="line">    androidTestImplementation 'com.android.support.test:runner:1.0.1'</span><br><span class="line">    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="9、完整的AndroidManifest-xml"><a href="#9、完整的AndroidManifest-xml" class="headerlink" title="9、完整的AndroidManifest.xml"></a>9、完整的AndroidManifest.xml</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.wangyz.multichannel"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"$&#123;app_icon&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"$&#123;app_name&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"$&#123;app_icon&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"APP_CHANNEL"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"$&#123;APP_CHANNEL_VALUE&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android Studio</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中的线程池</title>
    <url>/2019/12/31/Android/Android%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Android中的线程池"><a href="#Android中的线程池" class="headerlink" title="Android中的线程池"></a>Android中的线程池</h1><p>在Android中，主线程不能执行耗时的操作，否则可能会导致ANR。那么，耗时操作应该在其它线程中执行。线程的创建和销毁都会有性能开销，创建过多的线程也会由于互相抢占系统资源而导致阻塞的现象。这个时候，就需要使用线程池。</p>
<a id="more"></a>

<p>线程池的优点可以概括为以下几点:</p>
<ul>
<li><p>1、重用线程池中的线程，避免线程创建、销毁带来的性能开销；</p>
</li>
<li><p>2、能有效地控制线程池的最大并发数，避免大量的线程之间因互相抢占系统资源导致的阻塞现象；</p>
</li>
<li><p>3、能够对线程进行简单的管理。</p>
</li>
</ul>
<blockquote>
<p>以上线程池的优点引用自《Android开发艺术探索》</p>
</blockquote>
<p>线程池的具体实现类为ThreadPoolExecutor，ThreadPoolExecutor继承自AbstractExecutorService,AbstractExecutorService又实现了ExecutorService接口，ExecutorService继承自Executor。</p>
<p>ThreadPoolExecutor有四个重载的构造方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">            Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">            threadFactory, defaultHandler);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">            Executors.defaultThreadFactory(), handler);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                             RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">           maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">           maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">           keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">       <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">       <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">       <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">       <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">       <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">       <span class="keyword">this</span>.handler = handler;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>最终都调用到了:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment"> * parameters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment"> *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment"> *        pool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment"> *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment"> *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment"> *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment"> *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> threadFactory the factory to use when the executor</span></span><br><span class="line"><span class="comment"> *        creates a new thread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler the handler to use when execution is blocked</span></span><br><span class="line"><span class="comment"> *        because the thread bounds and queue capacities are reached</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment"> *         or &#123;<span class="doctag">@code</span> threadFactory&#125; or &#123;<span class="doctag">@code</span> handler&#125; is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>对应这个方法中的参数:</p>
<ul>
<li><p><strong>corePoolSize</strong>:核心线程数。如果没有设置<strong>allowCoreThreadTimeOut</strong>为true，则核心线程空闲时也不会销毁。如果设置<strong>allowCoreThreadTimeOut</strong>为true,则受keepAliveTime控制，空闲时间超过keepAliveTime，会被回收。</p>
</li>
<li><p><strong>maximumPoolSize</strong>:最大线程数。</p>
</li>
<li><p><strong>keepAliveTime</strong>:非核心线程的空闲超时时长。超过这个时间，非核心线程会被回收。核心线程如果<strong>allowCoreThreadTimeOut</strong>为true,则在空闲超过这个时间也会被回收。</p>
</li>
<li><p><strong>unit</strong>:超时的单位。</p>
</li>
<li><p><strong>workQueue</strong>:线程池中的任务队列。通过线程池的execute()方法提交的Runnable任务会被放入任务队列中。</p>
</li>
<li><p><strong>threadFactory</strong>:线程工厂。</p>
</li>
<li><p><strong>handler</strong>:饱和策略。当任务队列和线程池都满后，对新提交的任务的处理策略。</p>
</li>
</ul>
<p>ThreadPoolExecutor执行任务的规则:</p>
<ul>
<li><p>1、<strong>如果线程池中的线程数量未达到核心线程数量，则开启一个新的核心线程来执行任务</strong>；</p>
</li>
<li><p>2、<strong>如果线程池中的线程数量已经大于等于核心线程数量，则会把新的任务放入任务队列中</strong>；</p>
</li>
<li><p>3、<strong>如果任务队列已满，并且线程池中的线程未满，则开启非核心线程来处理新的任务</strong>；</p>
</li>
<li><p>4、<strong>如果任务队列和线程池都已满，则会交给handler饱和策略来处理</strong>。</p>
</li>
</ul>
<p><a href="/images/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%AD%96%E7%95%A5.png" data-fancybox="group" data-caption="线程池策略" class="fancybox"><img alt="线程池策略" title="线程池策略" data-src="/images/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%AD%96%E7%95%A5.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>下面通过一个简单的案例来验证以上规则：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WorkThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">			System.out.println(<span class="string">"Thread: "</span> + name + <span class="string">" work finish"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Executor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">100</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">5</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">		WorkThread thread = <span class="keyword">new</span> WorkThread(<span class="string">""</span> + i);</span><br><span class="line">		executor.execute(thread);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<p>定义了一个线程池，核心线程池数量为5，线程数量为100，超时时间为60秒，任务队列为5。在子线程中，sleep 5秒来模拟耗时的操作。然后开启了20个线程，并放入线程池中执行。执行的结果如下：</p>
<pre><code>Thread: 0 work finish
Thread: 1 work finish
Thread: 13 work finish
Thread: 10 work finish
Thread: 3 work finish
Thread: 11 work finish
Thread: 4 work finish
Thread: 2 work finish
Thread: 19 work finish
Thread: 18 work finish
Thread: 17 work finish
Thread: 15 work finish
Thread: 16 work finish
Thread: 14 work finish
Thread: 12 work finish
Thread: 5 work finish
Thread: 9 work finish
Thread: 8 work finish
Thread: 7 work finish
Thread: 6 work finish</code></pre><p>前五个线程在核心线程中执行，第6-10个线程由于核心线程已满，因此在任务队列中等待执行，第11-20个线程，由于核心线程和队列都已满，而线程池中还可以开启线程，因此在非核心线程中执行。从结果来看，线程0-4，10-19会先执行完，然后任务队列中的线程5-9才执行，验证了以上的线程池任务执行规则。</p>
<p>为便于使用线程池，线程池还有几种简便的定义方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                     <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                     <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                     <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                     <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">           (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                   <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                   <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> corePoolSize, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize, threadFactory);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">             <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>通过Executors的static方法来创建。其中:</p>
<ul>
<li><p><strong>FixedThreadPool</strong>:线程数量固定的线程池。从方法的定义来看，这种线程池里的线程全都是核心线程，并且没有超时时间,任务队列也是没有限制的。</p>
</li>
<li><p><strong>CachedThreadPool</strong>:这种线程池没有核心线程，全是非核心线程，并且超时时间为60秒，任务队列没有限制。这种线程适合执行大量的耗时较短的任务。</p>
</li>
<li><p><strong>SingleThreadExecutor</strong>:只有一个核心线程，没有超时时间，任务队列没有限制。可以确保任务按顺序执行。</p>
</li>
<li><p><strong>ScheduledThreadPool</strong>:核心线程数量固定。非核心线程没有限制。非核心线程闲置时会被立即回收。这类线程池适合执行定时任务和具有固定周期的重复任务。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>IntentService原理分析</title>
    <url>/2019/12/31/Android/IntentService%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="IntentService原理分析"><a href="#IntentService原理分析" class="headerlink" title="IntentService原理分析"></a>IntentService原理分析</h1><p>IntentService是一个异步处理请求的服务，通过Context#startService(Intent)可以将请求发送给IntentService,IntentService在工作线程中依次串行处理每一个Intent，当处理完所有请求后，IntentService会自动停止。</p>
<p>在IntentService内部是通过HandlerThread来切换线程和处理消息的。</p>
<a id="more"></a>

<p>当IntentService首次启动时,会调用onCreate()方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onCreate();</span><br><span class="line"><span class="comment">//创建HandlerThread</span></span><br><span class="line">      HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"IntentService["</span> + mName + <span class="string">"]"</span>);</span><br><span class="line">      <span class="comment">//启动线程</span></span><br><span class="line">thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//从HandlerThread中获取looper</span></span><br><span class="line">      mServiceLooper = thread.getLooper();</span><br><span class="line"><span class="comment">//实例化Handler</span></span><br><span class="line">      mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>在onCreate()方法中，首先创建了HandlerThread，然后启动它。然后从创建的thread中获取looper，并实例化Handler。</p>
<p>onStartCommand()方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * You should not override this method for your IntentService. Instead,</span></span><br><span class="line"><span class="comment"> * override &#123;<span class="doctag">@link</span> #onHandleIntent&#125;, which the system calls when the IntentService</span></span><br><span class="line"><span class="comment"> * receives a start request.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> android.app.Service#onStartCommand</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">    onStart(intent, startId);</span><br><span class="line">    <span class="keyword">return</span> mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>onStartCommand()方法，在自定义类继承自IntentService时，不要去重写，而应该重写onHandleIntent()方法。在onStartCommand()方法中，调用了onStart()方法，将intent传入Message，并发送出去。</p>
<p>onStart()方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">    Message msg = mServiceHandler.obtainMessage();</span><br><span class="line">    msg.arg1 = startId;</span><br><span class="line">    msg.obj = intent;</span><br><span class="line">    mServiceHandler.sendMessage(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在onStart()方法中，将intent信息打包到Message中，并发送到消息队列。</p>
<p>Message消息的处理:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        onHandleIntent((Intent)msg.obj);</span><br><span class="line">        stopSelf(msg.arg1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>onStart()方法将intent传入了Message,最终在ServiceHandler的handleMessage()方法处理，在handleMessage()方法中，回调了onHandleIntent()方法，这个方法是需要我们重写的,由于ServiceHandler是运行在子线程中，所以onHandleIntent()的执行也会在子线程中。当依次执行完任务后，调用了stopSelf(startId)方法停止Service。</p>
<p>stopSelf(startId)方法，只有当startId和最后启动Service时的startId一致时，才会停止服务,所以如果还有任务没有执行完成，则不会成功停止服务。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mServiceLooper.quit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在onDestory()方法中，调用Looper的quit()方法，退出消息循环。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>IntentService</tag>
      </tags>
  </entry>
  <entry>
    <title>HandlerThread原理分析</title>
    <url>/2019/12/31/Android/HandlerThread%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="HandlerThread原理分析"><a href="#HandlerThread原理分析" class="headerlink" title="HandlerThread原理分析"></a>HandlerThread原理分析</h1><p>HandlerThread是一个内部拥有Handler和Looper的特殊Thread，可以方便地在子线程中处理消息。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>HandlerThread的使用比较简单。</p>
<a id="more"></a>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mHandlerThread = <span class="keyword">new</span> HandlerThread(THREAD_NAME);</span><br><span class="line">mHandlerThread.start();</span><br></pre></td></tr></table></figure></div>

<p>首先,实例化一个HandlerThread，然后调用start()方法。在start()方法中，会调用run()方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      mTid = Process.myTid();</span><br><span class="line"><span class="comment">//实例化looper对象</span></span><br><span class="line">      Looper.prepare();</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">	<span class="comment">//获取looper对象</span></span><br><span class="line">          mLooper = Looper.myLooper();</span><br><span class="line">	<span class="comment">//通知其它线程</span></span><br><span class="line">          notifyAll();</span><br><span class="line">      &#125;</span><br><span class="line">      Process.setThreadPriority(mPriority);</span><br><span class="line">      onLooperPrepared();</span><br><span class="line"><span class="comment">//开启循环</span></span><br><span class="line">      Looper.loop();</span><br><span class="line">      mTid = -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>然后，定义处理子线程消息的Handler:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   mThreadLooper = mHandlerThread.getLooper();</span><br><span class="line"></span><br><span class="line">mThreadHandler = <span class="keyword">new</span> Handler(mThreadLooper, <span class="keyword">new</span> Handler.Callback() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                   <span class="keyword">case</span> MSG_THREAD_UPDATE:</span><br><span class="line">                       <span class="comment">//在子线程中执行耗时任务</span></span><br><span class="line">                       SystemClock.sleep(<span class="number">3000</span>);</span><br><span class="line">                       mMainHandler.sendEmptyMessage(MSG_MAIN_UPDATE);</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   <span class="keyword">default</span>:</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></div>

<p>在HandlerThread.getLooper()方法中:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Looper <span class="title">getLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isAlive()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// If the thread has been started, wait until the looper has been created.</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive() &amp;&amp; mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mLooper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在getLooper()方法中，由于子线程可能还没有准备好looper,因此，会调用wait()方法等待，如果子线程looper已经准备好了，则会通过notifyAll()来唤醒。</p>
<p>在子线程中可以执行耗时的操作，执行完成后，可以通过在UI线程的Handler发送消息去通知UI变更。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mMainHandler.sendEmptyMessage(MSG_MAIN_UPDATE);</span><br></pre></td></tr></table></figure></div>

<p>UI线程的Handler:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为防止内存泄漏，引入WeakReference</span></span><br><span class="line">      <span class="keyword">private</span> WeakReference&lt;Activity&gt; mWeakReference;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">MainHandler</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">          mWeakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">          MainActivity activity = (MainActivity) mWeakReference.get();</span><br><span class="line">          <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                  <span class="keyword">case</span> MSG_MAIN_UPDATE:</span><br><span class="line">                      activity.updateInfo();</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  <span class="keyword">default</span>:</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>为防止内存泄漏，引入WeakReference。在onDestory()方法中，移除所有消息:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   mMainHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">mThreadLooper.quit();</span><br></pre></td></tr></table></figure></div>

<p>源码地址:<a href="https://github.com/milovetingting/Samples/tree/master/HandlerThread" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/HandlerThread</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>HandlerThread</tag>
      </tags>
  </entry>
  <entry>
    <title>AsyncTask机制</title>
    <url>/2019/12/31/Android/AsyncTask%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="AsyncTask机制"><a href="#AsyncTask机制" class="headerlink" title="AsyncTask机制"></a>AsyncTask机制</h1><p>AsyncTask可以让我们更容易地使用UI线程。它允许执行后台操作，并把结果发布到UI线程上，而不需要操作线程或Handler。AsyncTask被设计成一个和Thread、Handler相关的一个帮助类。AsyncTask用于短时(最多是几秒)的操作。</p>
<a id="more"></a>

<p>AsyncTask使用需要注意以下几点:</p>
<blockquote>
<ul>
<li><p>AsyncTask类必须在UI线程上加载。AsyncTask必须在UI线程实例化。execute()方法也必须在UI线程调用。</p>
</li>
<li><p>不要手动调用onPreExecute()、onPostExecute()、doInBackground()、onProgressUpdate()方法。</p>
</li>
<li><p>每个AsyncTask实例只能调用一次execute，如果再次调用，则会抛出异常。</p>
</li>
</ul>
</blockquote>
<p><strong>AsyncTask首次引入时，AsyncTask中的任务是串行的。从Android1.6之后，AsyncTask被设计成并行的。从Android3.0后，AsyncTask被重新设计成串行。如果在3.0后的版本需要并行，则可以调用AsyncTask的executeOnExecutor(java.util.concurrent.Executor, Object[])方法，手动传入Executor。</strong></p>
<p>在AsyncTask类加载时，会初始化ThreadPoolExecutor:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">            CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</span><br><span class="line">            sPoolWorkQueue, sThreadFactory);</span><br><span class="line">    threadPoolExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">    THREAD_POOL_EXECUTOR = threadPoolExecutor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中，核心线程数,最小为2个，最大为4个:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = Math.max(<span class="number">2</span>, Math.min(CPU_COUNT - <span class="number">1</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure></div>

<p>最大线程数CPU数量*2+1:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>

<p>KeepAlive时间为30s:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_SECONDS = <span class="number">30</span>;</span><br></pre></td></tr></table></figure></div>

<p>任务队列最大是128：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>);</span><br></pre></td></tr></table></figure></div>


<p>AsyncTask的基本使用:</p>
<p>1、定义一个类，继承自AsyncTask，根据需要重写doInBackground()、onProgressUpdate()、onPostExecute()方法，一般doInBackground()、onPostExecute()方法是需要重写的，在这里实现自己的业务。doInBackground()方法运行在子线程中。onProgressUpdate()和onPostExecute()运行在UI线程。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadFilesTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">URL</span>, <span class="title">Integer</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> Long <span class="title">doInBackground</span><span class="params">(URL... urls)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">int</span> count = urls.length;</span><br><span class="line">          <span class="keyword">long</span> totalSize = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">              totalSize += Downloader.downloadFile(urls[i]);</span><br><span class="line">              publishProgress((<span class="keyword">int</span>) ((i / (<span class="keyword">float</span>) count) * <span class="number">100</span>));</span><br><span class="line">              <span class="comment">// Escape early if cancel() is called</span></span><br><span class="line">              <span class="keyword">if</span> (isCancelled()) <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> totalSize;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... progress)</span> </span>&#123;</span><br><span class="line">          setProgressPercent(progress[<span class="number">0</span>]);</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Long result)</span> </span>&#123;</span><br><span class="line">          showDialog(<span class="string">"Downloaded "</span> + result + <span class="string">" bytes"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>2、创建DownloadFilesTask的实例，并执行execute()方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> DownloadFilesTask().execute(url1, url2, url3);</span><br></pre></td></tr></table></figure></div>

<p>下面，从源码角度来分析下AsyncTask的原理。</p>
<p>AsyncTask的执行入口是execute方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>execute()方法必须在UI线程调用。在方法内部调用了executeOnExecutor()方法。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@MainThread</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></span><br><span class="line"><span class="function"><span class="params">          Params... params)</span> </span>&#123;</span><br><span class="line"><span class="comment">//检查AsyncTask状态，不是未执行状态(如任务正在运行或已完成)，则会抛出相应异常</span></span><br><span class="line">      <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">          <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">              <span class="keyword">case</span> RUNNING:</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                          + <span class="string">" the task is already running."</span>);</span><br><span class="line">              <span class="keyword">case</span> FINISHED:</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                          + <span class="string">" the task has already been executed "</span></span><br><span class="line">                          + <span class="string">"(a task can be executed only once)"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将状态置为RUNNING</span></span><br><span class="line">      mStatus = Status.RUNNING;</span><br><span class="line"></span><br><span class="line">      onPreExecute();</span><br><span class="line"></span><br><span class="line">      mWorker.mParams = params;</span><br><span class="line">      exec.execute(mFuture);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>executeOnExecutor()方法也必须在UI线程调用。在方法开始时，会检查AsyncTask状态，不是未执行状态(如任务正在运行或已完成)，则会抛出相应异常。然后，将任务状态置为RUNNING状态,调用onPreExecute()方法，这个方法需要自己重写，可以做一些UI提示。然后，将参数设置为mWorker，调用Executor的execute()方法。</p>
<p>如果使用默认的Executor，则为串行。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">    sDefaultExecutor.execute(runnable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接下来，看看sDefaultExecutor的定义:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</span><br></pre></td></tr></table></figure></div>

<p>而SERIAL_EXECUTOR的具体实现如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">       Runnable mActive;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">           mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       r.run();</span><br><span class="line">                   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                       scheduleNext();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">               scheduleNext();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>mWorker的定义:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            mTaskInvoked.set(<span class="keyword">true</span>);</span><br><span class="line">            Result result = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="comment">//将线程设置为后台线程</span></span><br><span class="line">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">                <span class="comment">//noinspection unchecked</span></span><br><span class="line">	<span class="comment">//调用doInBackground方法</span></span><br><span class="line">                result = doInBackground(mParams);</span><br><span class="line">                Binder.flushPendingCommands();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</span><br><span class="line">                mCancelled.set(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">throw</span> tr;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	<span class="comment">//发送结果</span></span><br><span class="line">                postResult(result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></div>

<p>当执行execute()方法，会调用mWorker的call()方法，在此方法中，会将线程设置为后台线程，然后调用doInBackground()方法，并在执行完成后调用postResult()方法。在doInBackground()方法中，可以调用publishProgress()方法，将进度信息发送到UI线程中。</p>
<p>postResult()方法:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class="line">            <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">    message.sendToTarget();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>发送一个Message到Handler中.</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</span><br><span class="line">                <span class="comment">// There is only one result</span></span><br><span class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</span><br><span class="line">                result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在Handler的handleMessage()方法中处理消息。如果已经执行完成，则会调用AsyncTask的finish()方法,如果是更新进度，则会调用AsyncTask的onProgressUpdate()方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isCancelled()) &#123;</span><br><span class="line">			<span class="comment">//如果是取消任务，则回调onCancelled()方法。</span></span><br><span class="line">            onCancelled(result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//回调onPostExecute()方法</span></span><br><span class="line">            onPostExecute(result);</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//设置状态为FINISHED</span></span><br><span class="line">        mStatus = Status.FINISHED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">publishProgress()方法:</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WorkerThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isCancelled()) &#123;</span><br><span class="line">            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</span><br><span class="line">                    <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>AsyncTask</tag>
      </tags>
  </entry>
  <entry>
    <title>Handler消息机制</title>
    <url>/2019/12/31/Android/Handler%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="Handler消息机制"><a href="#Handler消息机制" class="headerlink" title="Handler消息机制"></a>Handler消息机制</h1><p>Handler消息机制主要涉及Looper、Handler、MessageQueue、Message。其中，Looper主要负责获取消息，Handler负责发送消息及处理消息，MessageQueue是消息队列，Message是消息类。</p>
<a id="more"></a>

<h2 id="Looper循环获取消息"><a href="#Looper循环获取消息" class="headerlink" title="Looper循环获取消息"></a>Looper循环获取消息</h2><blockquote>
<p>1、ActivityThread的main()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备looper</span></span><br><span class="line">      Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入无限循环</span></span><br><span class="line">      Looper.loop();</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果loop()循环退出，则抛出异常，整个应用退出</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>2、prepareMainLooper()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Initialize the current thread as a looper, marking it as an</span></span><br><span class="line"><span class="comment">   * application's main looper. The main looper for your application</span></span><br><span class="line"><span class="comment">   * is created by the Android environment, so you should never need</span></span><br><span class="line"><span class="comment">   * to call this function yourself.  See also: &#123;<span class="doctag">@link</span> #prepare()&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化looper</span></span><br><span class="line">      prepare(<span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">synchronized</span> (Looper<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//如果已经设置过sMainLooper，则抛出异常。每个线程中只允许存在一个looper。</span></span><br><span class="line">          <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">          &#125;</span><br><span class="line">	<span class="comment">//设置sMainLooper</span></span><br><span class="line">          sMainLooper = myLooper();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>3、在prepareMainLooper()方法中，首先调用prepare(false)方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果ThreadLocal中已经存在looper,则抛出异常</span></span><br><span class="line">      <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//如果没有初始化looper，则将looper保存到ThradLocal中。</span></span><br><span class="line">      sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>4、在prepare()方法中调用Looper的构造方法初始化MessageQueue:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化MessageQueue</span></span><br><span class="line">      mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line"><span class="comment">//设置当前线程给mThread变量</span></span><br><span class="line">      mThread = Thread.currentThread();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>5、在prepareMainLooper()方法调用prepare(false)方法后，会调用myLooper()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Return the Looper object associated with the current thread.  Returns</span></span><br><span class="line"><span class="comment">   * null if the calling thread is not associated with a Looper.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//将保存在ThreadLocal中的looper返回</span></span><br><span class="line">      <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>5、到这里，prepareMainLooper()方法执行完毕。然后执行Looper.loop()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Run the message queue in this thread. Be sure to call</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取looper</span></span><br><span class="line">       <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">	<span class="comment">//如果looper为null,则抛出异常</span></span><br><span class="line">       <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">       &#125;</span><br><span class="line">	<span class="comment">//获取MessageQueue</span></span><br><span class="line">       <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">//开启无限循环</span></span><br><span class="line">       <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">		<span class="comment">//从消息队列中取消息，如果没有消息，则会阻塞</span></span><br><span class="line">           Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">		<span class="comment">//如果消息为null，则表示退出循环</span></span><br><span class="line">           <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">		</span><br><span class="line">		...</span><br><span class="line">         </span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//回调target，即Handler的dispatchMessage方法</span></span><br><span class="line">               msg.target.dispatchMessage(msg);</span><br><span class="line">               ...</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">                   Trace.traceEnd(traceTag);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">		...</span><br><span class="line"></span><br><span class="line">           msg.recycleUnchecked();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>首先，获取looper,如果没有设置过looper，则抛出异常。然后，开启无限循环，通过looper的MessageQueue，不停获取消息，如果没有消息，则阻塞。如果获取到了消息，则会回调Handler的dispatchMessage方法，方法执行会切换到Handler的线程。</p>
</blockquote>
<blockquote>
<p>6、MessageQueue的next()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Return here if the message loop has already quit and been disposed.</span></span><br><span class="line">    <span class="comment">// This can happen if the application tries to restart a looper after quit</span></span><br><span class="line">    <span class="comment">// which is not supported.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">    <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">            Binder.flushPendingCommands();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// Try to retrieve the next message.  Return if found.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">            Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">            Message msg = mMessages;</span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    prevMsg = msg;</span><br><span class="line">                    msg = msg.next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                    <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></span><br><span class="line">                    nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Got a message.</span></span><br><span class="line">                    mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        prevMsg.next = msg.next;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mMessages = msg.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    msg.next = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Returning message: "</span> + msg);</span><br><span class="line">                    msg.markInUse();</span><br><span class="line">                    <span class="keyword">return</span> msg;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// No more messages.</span></span><br><span class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process the quit message now that all pending messages have been handled.</span></span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                dispose();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If first time idle, then get the number of idlers to run.</span></span><br><span class="line">            <span class="comment">// Idle handles only run if the queue is empty or if the first message</span></span><br><span class="line">            <span class="comment">// in the queue (possibly a barrier) is due to be handled in the future.</span></span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                    &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class="line">                mBlocked = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Run the idle handlers.</span></span><br><span class="line">        <span class="comment">// We only ever reach this code block during the first iteration.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class="line">            mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">// release the reference to the handler</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                keep = idler.queueIdle();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                Log.wtf(TAG, <span class="string">"IdleHandler threw exception"</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    mIdleHandlers.remove(idler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset the idle handler count to 0 so we do not run them again.</span></span><br><span class="line">        pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// While calling an idle handler, a new message could have been delivered</span></span><br><span class="line">        <span class="comment">// so go back and look again for a pending message without waiting.</span></span><br><span class="line">        nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>在next()方法中，通过for(;;)开启无限循环去获取消息，如果获取到消息则返回。</p>
</blockquote>
<h2 id="Handler发送消息"><a href="#Handler发送消息" class="headerlink" title="Handler发送消息"></a>Handler发送消息</h2><blockquote>
<p>1、sendMessage()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pushes a message onto the end of the message queue after all pending messages</span></span><br><span class="line"><span class="comment"> * before the current time. It will be received in &#123;<span class="doctag">@link</span> #handleMessage&#125;,</span></span><br><span class="line"><span class="comment"> * in the thread attached to this handler.</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the </span></span><br><span class="line"><span class="comment"> *         message queue.  Returns false on failure, usually because the</span></span><br><span class="line"><span class="comment"> *         looper processing the message queue is exiting.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>2、sendMessage()方法会调用sendMessageDelayed()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enqueue a message into the message queue after all pending messages</span></span><br><span class="line"><span class="comment"> * before (current time + delayMillis). You will receive it in</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #handleMessage&#125;, in the thread attached to this handler.</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the </span></span><br><span class="line"><span class="comment"> *         message queue.  Returns false on failure, usually because the</span></span><br><span class="line"><span class="comment"> *         looper processing the message queue is exiting.  Note that a</span></span><br><span class="line"><span class="comment"> *         result of true does not mean the message will be processed -- if</span></span><br><span class="line"><span class="comment"> *         the looper is quit before the delivery time of the message</span></span><br><span class="line"><span class="comment"> *         occurs then the message will be dropped.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        delayMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>3、sendMessageDelayed()方法会调用sendMessageAtTime():</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enqueue a message into the message queue after all pending messages</span></span><br><span class="line"><span class="comment"> * before the absolute time (in milliseconds) &lt;var&gt;uptimeMillis&lt;/var&gt;.</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;The time-base is &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125;.&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * Time spent in deep sleep will add an additional delay to execution.</span></span><br><span class="line"><span class="comment"> * You will receive it in &#123;<span class="doctag">@link</span> #handleMessage&#125;, in the thread attached</span></span><br><span class="line"><span class="comment"> * to this handler.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uptimeMillis The absolute time at which the message should be</span></span><br><span class="line"><span class="comment"> *         delivered, using the</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125; time-base.</span></span><br><span class="line"><span class="comment"> *         </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the </span></span><br><span class="line"><span class="comment"> *         message queue.  Returns false on failure, usually because the</span></span><br><span class="line"><span class="comment"> *         looper processing the message queue is exiting.  Note that a</span></span><br><span class="line"><span class="comment"> *         result of true does not mean the message will be processed -- if</span></span><br><span class="line"><span class="comment"> *         the looper is quit before the delivery time of the message</span></span><br><span class="line"><span class="comment"> *         occurs then the message will be dropped.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    MessageQueue queue = mQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</span><br><span class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>4、在这个方法中，会通过MessageQueue的enqueueMessage()方法，将消息发送到消息队列中。</p>
</blockquote>
<blockquote>
<p>5、enqueueMessage()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line"><span class="comment">//设置Message的target为当前的Handler，以便获取到消息后能回调dispatchMessage方法。</span></span><br><span class="line">      msg.target = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">          msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>6、MessageQueue的enqueueMessage()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">            IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</span><br><span class="line">            Log.w(TAG, e.getMessage(), e);</span><br><span class="line">            msg.recycle();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg.markInUse();</span><br><span class="line">        msg.when = when;</span><br><span class="line">        Message p = mMessages;</span><br><span class="line">        <span class="keyword">boolean</span> needWake;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">            msg.next = p;</span><br><span class="line">            mMessages = msg;</span><br><span class="line">            needWake = mBlocked;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">            <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">            <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">            Message prev;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                    needWake = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">            prev.next = msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">        <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">            nativeWake(mPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>sendMessageAtTime()方法中的mQueue是在Handler的构造方法中赋值的:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</span><br><span class="line">	<span class="comment">//检测是否会有泄漏</span></span><br><span class="line">          <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</span><br><span class="line">          <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</span><br><span class="line">                  (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">              Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</span><br><span class="line">                  klass.getCanonicalName());</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取looper</span></span><br><span class="line">      mLooper = Looper.myLooper();</span><br><span class="line"><span class="comment">//如果looper为null,则抛出异常</span></span><br><span class="line">      <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">              <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//设置mQueue</span></span><br><span class="line">      mQueue = mLooper.mQueue;</span><br><span class="line">      mCallback = callback;</span><br><span class="line">      mAsynchronous = async;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果没有传入looper，则会通过Looper.myLooper()获取looper,如果没有在线程中设置过looper，则会抛出异常</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">    mLooper = looper;</span><br><span class="line">    mQueue = looper.mQueue;</span><br><span class="line">    mCallback = callback;</span><br><span class="line">    mAsynchronous = async;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果传入了looper，则直接设置mQueue。</p>
</blockquote>
<h2 id="Handler处理消息"><a href="#Handler处理消息" class="headerlink" title="Handler处理消息"></a>Handler处理消息</h2><blockquote>
<p>dispatchMessage()方法,如果Message设置了callBack,则会回调callBack的run()方法；如果Message没有设置callBack,在这种情况下，如果Handler的callBack不为null，则会回调handleMessage()方法;如果Handler没有设置callBack或者Handler的callBack处理了消息，并没有返回true,则会回调Handler的handleMessage()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果callBack不为null,则传给callBack处理。</span></span><br><span class="line">      <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">          handleCallback(msg);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">//如果Handler的callBack不为空，则传给callBack处理</span></span><br><span class="line">          <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          handleMessage(msg);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>handleCallback()方法:</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line"><span class="comment">//回调Runnable的run()方法</span></span><br><span class="line">      message.callback.run();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Handler</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Android的模拟点击探索</title>
    <url>/2019/12/31/Android/%E5%9F%BA%E4%BA%8EAndroid%E7%9A%84%E6%A8%A1%E6%8B%9F%E7%82%B9%E5%87%BB%E6%8E%A2%E7%B4%A2/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="基于Android的模拟点击探索"><a href="#基于Android的模拟点击探索" class="headerlink" title="基于Android的模拟点击探索"></a>基于Android的模拟点击探索</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>压力测试中，一般会用到自动化测试。准备写一个APP，可以记录屏幕上的点击事件，然后通过shell命令来模拟自动执行。shell指令，比较容易实现。那么，关键的一步是获取点击的坐标。对于Android来说，为便于开发者调试，Android系统中的”开发者选项”中，有一个”指针位置”的选项。打开这个选项，点击屏幕，就会显示当前点击的位置坐标。接下来，来看一下打开选项的过程。</p>
<a id="more"></a>

<h2 id="开发者选项页面"><a href="#开发者选项页面" class="headerlink" title="开发者选项页面"></a>开发者选项页面</h2><p><strong>“开发者选项”的源码位于packages/apps/settings/src/com/android/settings/DevelopmentSettings.java文件中。</strong></p>
<pre><code>private SwitchPreference mPointerLocation;</code></pre><p><strong>在onCreate()方法中初始化:</strong></p>
<pre><code>mPointerLocation = findAndInitSwitchPref(POINTER_LOCATION_KEY);</code></pre><p><strong>findAndInitSwitchPref()方法:</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SwitchPreference <span class="title">findAndInitSwitchPref</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    SwitchPreference pref = (SwitchPreference) findPreference(key);</span><br><span class="line">    <span class="keyword">if</span> (pref == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot find preference with key = "</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line">    mAllPrefs.add(pref);</span><br><span class="line">    mResetSwitchPrefs.add(pref);</span><br><span class="line">    <span class="keyword">return</span> pref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>当点击选项开关切换后，会把当前的开关状态存入Settings数据库。</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writePointerLocationOptions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Settings.System.putInt(getActivity().getContentResolver(),</span><br><span class="line">            Settings.System.POINTER_LOCATION, mPointerLocation.isChecked() ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="PhoneWindowManager"><a href="#PhoneWindowManager" class="headerlink" title="PhoneWindowManager"></a>PhoneWindowManager</h2><p><strong>PhoneWindowManager的源码位于framework/base/services/core/java/com/android/server/policy/PhoneWindowManager.java文件中。</strong></p>
<p><strong>PhoneWindowManager会监听Settings.System.POINTER_LOCATION字段的变化。</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SettingsObserver</span> <span class="keyword">extends</span> <span class="title">ContentObserver</span> </span>&#123;</span><br><span class="line">    SettingsObserver(Handler handler) &#123;</span><br><span class="line">        <span class="keyword">super</span>(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">observe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Observe all users' changes</span></span><br><span class="line">        ContentResolver resolver = mContext.getContentResolver();</span><br><span class="line">        ...</span><br><span class="line">        resolver.registerContentObserver(Settings.System.getUriFor(</span><br><span class="line">                Settings.System.POINTER_LOCATION), <span class="keyword">false</span>, <span class="keyword">this</span>,</span><br><span class="line">                UserHandle.USER_ALL);</span><br><span class="line">        ...</span><br><span class="line">        updateSettings();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange)</span> </span>&#123;</span><br><span class="line">        updateSettings();</span><br><span class="line">        updateRotation(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>当这个值发生变化时，在updateSettings()方法中调用：</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateSettings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ContentResolver resolver = mContext.getContentResolver();</span><br><span class="line">    <span class="keyword">boolean</span> updateRotation = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mSystemReady) &#123;</span><br><span class="line">            <span class="keyword">int</span> pointerLocation = Settings.System.getIntForUser(resolver,</span><br><span class="line">                    Settings.System.POINTER_LOCATION, <span class="number">0</span>, UserHandle.USER_CURRENT);</span><br><span class="line">            <span class="keyword">if</span> (mPointerLocationMode != pointerLocation) &#123;</span><br><span class="line">                mPointerLocationMode = pointerLocation;</span><br><span class="line">                mHandler.sendEmptyMessage(pointerLocation != <span class="number">0</span> ?</span><br><span class="line">                        MSG_ENABLE_POINTER_LOCATION : MSG_DISABLE_POINTER_LOCATION);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (mWindowManagerFuncs.getWindowManagerLock()) &#123;</span><br><span class="line">        PolicyControl.reloadFromSetting(mContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (updateRotation) &#123;</span><br><span class="line">        updateRotation(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>在这个方法中，会通过Handler能送一个Message去处理。</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PolicyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MSG_ENABLE_POINTER_LOCATION:</span><br><span class="line">                enablePointerLocation();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MSG_DISABLE_POINTER_LOCATION:</span><br><span class="line">                disablePointerLocation();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>如果打开了”指针位置”的选项开关，那么会调用enablePointerLocation()方法</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enablePointerLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mPointerLocationView == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mPointerLocationView = <span class="keyword">new</span> PointerLocationView(mContext);</span><br><span class="line">        mPointerLocationView.setPrintCoords(<span class="keyword">false</span>);</span><br><span class="line">        WindowManager.LayoutParams lp = <span class="keyword">new</span> WindowManager.LayoutParams(</span><br><span class="line">                WindowManager.LayoutParams.MATCH_PARENT,</span><br><span class="line">                WindowManager.LayoutParams.MATCH_PARENT);</span><br><span class="line">        lp.type = WindowManager.LayoutParams.TYPE_SECURE_SYSTEM_OVERLAY;</span><br><span class="line">        lp.flags = WindowManager.LayoutParams.FLAG_FULLSCREEN</span><br><span class="line">                | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE</span><br><span class="line">                | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</span><br><span class="line">                | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;</span><br><span class="line">        <span class="keyword">if</span> (ActivityManager.isHighEndGfx()) &#123;</span><br><span class="line">            lp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;</span><br><span class="line">            lp.privateFlags |=</span><br><span class="line">                    WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED;</span><br><span class="line">        &#125;</span><br><span class="line">        lp.format = PixelFormat.TRANSLUCENT;</span><br><span class="line">        lp.setTitle(<span class="string">"PointerLocation"</span>);</span><br><span class="line">        WindowManager wm = (WindowManager) mContext.getSystemService(WINDOW_SERVICE);</span><br><span class="line">        lp.inputFeatures |= WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL;</span><br><span class="line">        wm.addView(mPointerLocationView, lp);</span><br><span class="line">        mWindowManagerFuncs.registerPointerEventListener(mPointerLocationView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>在这个方法中，首先初始化一个PointerLocationView对象，然后设置WindowManager.LayoutParams，然后将PointerLocationView实例添加到window中。再通过WindowManagerFuncs注册监听。</strong></p>
<p><strong>当屏幕上有点击时，会回调PointerLocationView的onPointerEvent()方法：</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPointerEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过反射可以获取到PointerLocationView的实例，但是无法获取到WindowManagerFuncs实例。WindowManagerFuncs是在PhoneWindowManager的init()方法中初始化的。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, IWindowManager windowManager,</span></span></span><br><span class="line"><span class="function"><span class="params">        WindowManagerFuncs windowManagerFuncs)</span> </span>&#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">    mWindowManager = windowManager;</span><br><span class="line">    mWindowManagerFuncs = windowManagerFuncs;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>对于WindowManager的流程不了解。这种方法看来是行不通了。。。</p>
<p>在网上查了相关的资料，还有种方法是通过adb的getevent命令来获取/dev/input/路径下的event事件数据，然后解析相关数据。不过对于这块也不熟悉，就没有再深入研究。</p>
<p>总的来说，开发基于Android的模拟点击的应用是以失败告终。后面有时间再研究下是否有其它方法可以实现。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>模拟点击</tag>
      </tags>
  </entry>
  <entry>
    <title>Android组件化开发的简单应用</title>
    <url>/2019/12/31/Android/Android%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="组件化开发的主要步骤："><a href="#组件化开发的主要步骤：" class="headerlink" title="组件化开发的主要步骤："></a>组件化开发的主要步骤：</h1><h2 id="一、新建Modules"><a href="#一、新建Modules" class="headerlink" title="一、新建Modules"></a>一、新建Modules</h2><p>1、新建Project,作为应用的主Module。</p>
<p>2、新建Module:”Common”，类型选择”Android Library”,作为所有其它Module的基础依赖库。</p>
<p>3、新建Module:”Home”，类型选择”Android Library”,依赖”Common”。</p>
<p>4、新建Module:”Project”，类型选择”Android Library”,依赖”Common”。</p>
<p>5、新建Module:”User”，类型选择”Android Library”,依赖”Common”。</p>
<a id="more"></a>

<p><strong>具体新建怎样的Module，可以根据实际业务来调整。这里选择新建”Home”、”Project”、”User”来模拟业务。</strong></p>
<h2 id="二、增加Flag以便在release和debug模式下切换"><a href="#二、增加Flag以便在release和debug模式下切换" class="headerlink" title="二、增加Flag以便在release和debug模式下切换"></a>二、增加Flag以便在release和debug模式下切换</h2><p><strong>1、在gradle.properties文件中增加一个变量</strong></p>
<pre><code>isDebug = false</code></pre><p><a href="/images/flag.png" data-fancybox="group" data-caption="flag" class="fancybox"><img alt="flag" title="flag" data-src="/images/flag.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><strong>当isDebug为true时，为Debug模式，其它的Module可以作为单独的App运行。当isDebug为false时，为Release模式，其它的Module为Library模式，不能单独运行,此时只有主App可以运行。</strong></p>
<p><strong>2、修改app的build.gradle文件</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation <span class="keyword">project</span>(<span class="string">':common'</span>)</span><br><span class="line"><span class="keyword">if</span> (!isDebug.toBoolean()) &#123;</span><br><span class="line">    implementation <span class="keyword">project</span>(<span class="string">':home'</span>)</span><br><span class="line">    implementation <span class="keyword">project</span>(<span class="string">':project'</span>)</span><br><span class="line">    implementation <span class="keyword">project</span>(<span class="string">':user'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/app_flag.png" data-fancybox="group" data-caption="app_flag" class="fancybox"><img alt="app_flag" title="app_flag" data-src="/images/app_flag.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><strong>3、修改home的build.gradle文件</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">if</span> (isDebug.toBoolean()) &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.library'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/home_flag.png" data-fancybox="group" data-caption="home_flag" class="fancybox"><img alt="home_flag" title="home_flag" data-src="/images/home_flag.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><strong>4、修改project的build.gradle文件</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">if</span> (isDebug.toBoolean()) &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.library'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/project_flag.png" data-fancybox="group" data-caption="project_flag" class="fancybox"><img alt="project_flag" title="project_flag" data-src="/images/project_flag.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><strong>5、修改user的build.gradle文件</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">if</span> (isDebug.toBoolean()) &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    apply plugin: <span class="string">'com.android.library'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/user_flag.png" data-fancybox="group" data-caption="user_flag" class="fancybox"><img alt="user_flag" title="user_flag" data-src="/images/user_flag.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>为便于各Module单独调试开发，可以在各Module下根据isDebug的变量区分模式。</p>
<p>切换工程到Project模式下，将原来的AndroidManifest.xml文件移除，在Module的src/main目录下新建debug和release目录，在新建的两个目录下，分别新建AndroidManifest.xml文件。以Home模块为例：</p>
<p><a href="/images/home_manifest.png" data-fancybox="group" data-caption="home_manifest" class="fancybox"><img alt="home_manifest" title="home_manifest" data-src="/images/home_manifest.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><strong>Debug模式下的AndroidManifest.xml</strong></p>
<p><a href="/images/home_debug_manifest.png" data-fancybox="group" data-caption="home_debug_manifest" class="fancybox"><img alt="home_debug_manifest" title="home_debug_manifest" data-src="/images/home_debug_manifest.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><strong>Release模式下的AndroidManifest.mxl</strong></p>
<p><a href="/images/home_release_manifest.png" data-fancybox="group" data-caption="home_release_manifest" class="fancybox"><img alt="home_release_manifest" title="home_release_manifest" data-src="/images/home_release_manifest.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在Home下的build.gradle文件中配置AndroidManifest.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        if (isDebug.toBoolean()) &#123;</span><br><span class="line">            manifest.srcFile 'src/main/debug/AndroidManifest.xml'</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            manifest.srcFile 'src/main/release/AndroidManifest.xml'</span><br><span class="line">            java &#123; exclude 'debug/**' &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<p><a href="/images/home_gradle_source.png" data-fancybox="group" data-caption="home_gradle_source" class="fancybox"><img alt="home_gradle_source" title="home_gradle_source" data-src="/images/home_gradle_source.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>其它Module也是相似的处理。</p>
<h2 id="三、统一管理Module版本号"><a href="#三、统一管理Module版本号" class="headerlink" title="三、统一管理Module版本号"></a>三、统一管理Module版本号</h2><p>1、为便于统一管理版本号，在项目的根目录下的build.gradle文件中增加统一的版本号:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   ext &#123;</span><br><span class="line">    compileSdkVersion = <span class="number">28</span></span><br><span class="line"></span><br><span class="line">    minSdkVersion = <span class="number">21</span></span><br><span class="line">    targetSdkVersion = <span class="number">28</span></span><br><span class="line">    versionCode = <span class="number">1</span></span><br><span class="line">    versionName = <span class="string">"1.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/version.png" data-fancybox="group" data-caption="version" class="fancybox"><img alt="version" title="version" data-src="/images/version.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>2、在其它Module下相应修改</p>
<p><strong>App模块:</strong></p>
<p><a href="/images/app_version.png" data-fancybox="group" data-caption="app_version" class="fancybox"><img alt="app_version" title="app_version" data-src="/images/app_version.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><strong>Common模块:</strong></p>
<p><a href="/images/common_version.png" data-fancybox="group" data-caption="common_version" class="fancybox"><img alt="common_version" title="common_version" data-src="/images/common_version.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><strong>Home模块:</strong></p>
<p><a href="/images/home_version.png" data-fancybox="group" data-caption="home_version" class="fancybox"><img alt="home_version" title="home_version" data-src="/images/home_version.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><strong>Project模块:</strong></p>
<p><a href="/images/project_version.png" data-fancybox="group" data-caption="project_version" class="fancybox"><img alt="project_version" title="project_version" data-src="/images/project_version.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><strong>User模块:</strong></p>
<p><a href="/images/user_version.png" data-fancybox="group" data-caption="user_version" class="fancybox"><img alt="user_version" title="user_version" data-src="/images/user_version.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="四、各Module间通信"><a href="#四、各Module间通信" class="headerlink" title="四、各Module间通信"></a>四、各Module间通信</h2><p>为解决各Module间通信的问题，引入ARouter框架。GitHub地址：<a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener" title="ARouter">ARouter</a></p>
<p>为避免各Module重复引用，在Common中引用一次，其它Module复用即可。</p>
<p><a href="/images/common_arouter.png" data-fancybox="group" data-caption="common_arouter" class="fancybox"><img alt="common_arouter" title="common_arouter" data-src="/images/common_arouter.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><strong>注意：由于其它依赖Common的Module也需要使用Arouter，因此在引入时，需要把implementation改为api。如果使用implementation,其它Module会无法使用Arouter。</strong></p>
<p>其它Module中使用:</p>
<p>不需要再次implementation,但是还是需要在dependencies增加</p>
<pre><code>annotationProcessor &apos;com.alibaba:arouter-compiler:1.2.2&apos;</code></pre><p>以及在android-defaultConfig中增加：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">javaCompileOptions &#123;</span><br><span class="line">           annotationProcessorOptions &#123;</span><br><span class="line">               arguments = [AROUTER_MODULE_NAME: <span class="keyword">project</span>.getName()]</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></div>

<p>注意：”AROUTER_MODULE_NAME”这个名称，不可以改为其它字符串，否则会编译报错。</p>
<p><a href="/images/home_arouter.png" data-fancybox="group" data-caption="home_arouter" class="fancybox"><img alt="home_arouter" title="home_arouter" data-src="/images/home_arouter.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在Common模块下增加BaseApplication,对ARouter进行初始化。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isDebugARouter = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDebugARouter) &#123;</span><br><span class="line">            ARouter.openLog();</span><br><span class="line">            ARouter.openDebug();</span><br><span class="line">        &#125;</span><br><span class="line">        ARouter.init(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在主Module:App中增加App,继承自BaseApplication,然后在AndroidManifefst.xml中引用。</p>
<blockquote>
<p>   <code>public class App extends BaseApplication {}</code></p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.wangyz.modules"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".App"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:appComponentFactory</span>=<span class="string">"whateverString"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:replace</span>=<span class="string">"android:appComponentFactory"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>对于需要被调用的Activity或者Fragment增加注解：</p>
<p><a href="/images/home_route.png" data-fancybox="group" data-caption="home_route" class="fancybox"><img alt="home_route" title="home_route" data-src="/images/home_route.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><strong>可以新建一个常量类，用来保存这些路由地址。这里出于简化，没有再定义这个常量类。</strong></p>
<h3 id="调用方使用ARouter："><a href="#调用方使用ARouter：" class="headerlink" title="调用方使用ARouter："></a>调用方使用ARouter：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Fragment fragment = (Fragment) ARouter.getInstance().build(<span class="string">"/home/fragment"</span>).navigation();</span><br><span class="line">mFragmentManager.beginTransaction().replace(R.id.container, fragment).commit();</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/app_arouter.png" data-fancybox="group" data-caption="app_arouter" class="fancybox"><img alt="app_arouter" title="app_arouter" data-src="/images/app_arouter.png" src="/img/loading.gif" class="lazyload"></a></p>
<h2 id="五、ButterKnife的引入"><a href="#五、ButterKnife的引入" class="headerlink" title="五、ButterKnife的引入"></a>五、ButterKnife的引入</h2><p>ButterKnife在单Module中使用时，比较简单，当在多Module下使用时，还是有些需要注意的事项。具体引用步骤如下:</p>
<p><strong>1、在项目根目录的build.gradle中引入依赖:</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.1.4'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.jakewharton:butterknife-gradle-plugin:9.0.0'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p><a href="/images/root_gradle.png" data-fancybox="group" data-caption="root_gradle" class="fancybox"><img alt="root_gradle" title="root_gradle" data-src="/images/root_gradle.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在common中引入依赖:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">api <span class="string">'com.jakewharton:butterknife:9.0.0'</span></span><br><span class="line">annotationProcessor <span class="string">'com.jakewharton:butterknife-compiler:9.0.0'</span></span><br></pre></td></tr></table></figure></div>

<p><a href="/images/common_butterknife.png" data-fancybox="group" data-caption="common_butterknife" class="fancybox"><img alt="common_butterknife" title="common_butterknife" data-src="/images/common_butterknife.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>在具体使用ButterKnife的Module中引入依赖:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   apply plugin: <span class="string">'com.jakewharton.butterknife'</span></span><br><span class="line"></span><br><span class="line">annotationProcessor <span class="string">'com.jakewharton:butterknife-compiler:9.0.0'</span></span><br></pre></td></tr></table></figure></div>

<p><a href="/images/home_butterknife_1.png" data-fancybox="group" data-caption="home_butterknife_1" class="fancybox"><img alt="home_butterknife_1" title="home_butterknife_1" data-src="/images/home_butterknife_1.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><a href="/images/home_butterknife_2.png" data-fancybox="group" data-caption="home_butterknife_2" class="fancybox"><img alt="home_butterknife_2" title="home_butterknife_2" data-src="/images/home_butterknife_2.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>和ARouter一样，使用ButterKnife的Module虽然不用重复引用butterknife本身这个库，但是注解相关的库还是需要引用。</p>
<p>具体使用：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BindView</span>(R2.id.click)</span><br><span class="line">TextView mText;</span><br></pre></td></tr></table></figure></div>

<p><strong>BindView的时候，需要使用R2.id.xx</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OnClick</span>(R2.id.click)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Toast.makeText(getActivity().getApplicationContext(), <span class="string">"click"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>对应的点击事件等，如果是单个使用，也是使用R2.id.xx。如果是多个id一起使用，内部通过id来判断，则需要使用if…else if…，不能使用switch…case，并且if判断的id需要使用R.id.xx</strong></p>
<p><strong>默认是会报错，找不到R2相关的class，需要手动build一次才会生成。</strong></p>
<p><strong>注意：ButterKnife.9.0以后，需要jdk版本1.8以上，否则编译会报错。</strong></p>
<p>源码地址：<a href="https://github.com/milovetingting/Samples/tree/master/Modules" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/Modules</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>动态更新Icon</title>
    <url>/2019/12/31/Android/%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0Icon/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="动态更新Icon"><a href="#动态更新Icon" class="headerlink" title="动态更新Icon"></a>动态更新Icon</h1><p>动态更改图标主要用到<strong>activity-alias</strong>和<strong>PackageManager的setComponentEnabledSetting方法</strong>。具体步骤如下：</p>
<a id="more"></a>

<h2 id="1、在AndroidManifest-xml中增加以下声明"><a href="#1、在AndroidManifest-xml中增加以下声明" class="headerlink" title="1、在AndroidManifest.xml中增加以下声明:"></a>1、在AndroidManifest.xml中增加以下声明:</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity-alias</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".alias"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:enabled</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/icon"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"Alias"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:targetActivity</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>完整文件如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.wangyz.dynamicicon"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity-alias</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".alias"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/icon"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"Alias"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetActivity</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2、切换图标"><a href="#2、切换图标" class="headerlink" title="2、切换图标"></a>2、切换图标</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getPackageManager().setComponentEnabledSetting(getComponentName(),</span><br><span class="line">            PackageManager.COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class="line">            PackageManager.DONT_KILL_APP);</span><br><span class="line">getPackageManager().setComponentEnabledSetting(<span class="keyword">new</span> ComponentName(<span class="keyword">this</span>,</span><br><span class="line">                    getPackageName() + <span class="string">".alias"</span>),</span><br><span class="line">            PackageManager.COMPONENT_ENABLED_STATE_ENABLED,</span><br><span class="line">            <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div>

<p>setComponentEnabledSetting方法的最后一个参数，PackageManager.DONT_KILL_APP表示不关闭App，0表示关闭App刷新图标。</p>
<p>完整文件如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">package</span> com.wangyz.dynamicicon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.ComponentName;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeIcon</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        getPackageManager().setComponentEnabledSetting(getComponentName(),</span><br><span class="line">                PackageManager.COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class="line">                PackageManager.DONT_KILL_APP);</span><br><span class="line">        getPackageManager().setComponentEnabledSetting(<span class="keyword">new</span> ComponentName(<span class="keyword">this</span>,</span><br><span class="line">                        getPackageName() + <span class="string">".MainActivity"</span>),</span><br><span class="line">                PackageManager.COMPONENT_ENABLED_STATE_ENABLED,</span><br><span class="line">                <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeIconAlias</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        getPackageManager().setComponentEnabledSetting(getComponentName(),</span><br><span class="line">                PackageManager.COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class="line">                PackageManager.DONT_KILL_APP);</span><br><span class="line">        getPackageManager().setComponentEnabledSetting(<span class="keyword">new</span> ComponentName(<span class="keyword">this</span>,</span><br><span class="line">                        getPackageName() + <span class="string">".alias"</span>),</span><br><span class="line">                PackageManager.COMPONENT_ENABLED_STATE_ENABLED,</span><br><span class="line">                <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>源码地址:<a href="https://github.com/milovetingting/Samples/tree/master/DynamicIcon" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/DynamicIcon</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>动态更新</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualAPK的简单使用</title>
    <url>/2019/12/31/Android/VirtualAPK%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>个人博客:<br><a href="http://www.milovetingting.cn">http://www.milovetingting.cn</a></p>
</blockquote>
<h1 id="VirtualAPK的简单使用"><a href="#VirtualAPK的简单使用" class="headerlink" title="VirtualAPK的简单使用"></a>VirtualAPK的简单使用</h1><p><strong>VirtualApk引入步骤：</strong></p>
<h2 id="一、宿主应用引入VirtualApk"><a href="#一、宿主应用引入VirtualApk" class="headerlink" title="一、宿主应用引入VirtualApk"></a>一、宿主应用引入VirtualApk</h2><h3 id="1、在项目的build-gradle文件中加入依赖"><a href="#1、在项目的build-gradle文件中加入依赖" class="headerlink" title="1、在项目的build.gradle文件中加入依赖"></a>1、在项目的build.gradle文件中加入依赖</h3><a id="more"></a>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">classpath</span> <span class="string">'com.didi.virtualapk:gradle:0.9.8.6'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>完整的gradle文件如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.1.4'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.didi.virtualapk:gradle:0.9.8.6'</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2、在app的build-gradle文件中加入依赖"><a href="#2、在app的build-gradle文件中加入依赖" class="headerlink" title="2、在app的build.gradle文件中加入依赖"></a>2、在app的build.gradle文件中加入依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   apply plugin: <span class="string">'com.didi.virtualapk.host'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">   	implementation <span class="string">'com.didi.virtualapk:core:0.9.8'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>完整的gradle文件如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">apply plugin: <span class="string">'com.didi.virtualapk.host'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.virtualapk.host"</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:28.+'</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.0.2'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.1'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.1'</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'com.didi.virtualapk:core:0.9.8'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3、新建项目的Application，继承自Application-并在attachBaseContext方法中初始化"><a href="#3、新建项目的Application，继承自Application-并在attachBaseContext方法中初始化" class="headerlink" title="3、新建项目的Application，继承自Application,并在attachBaseContext方法中初始化"></a>3、新建项目的Application，继承自Application,并在attachBaseContext方法中初始化</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">        PluginManager.getInstance(base).init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4、在AndroidManifest-xml中引入自定义的Application"><a href="#4、在AndroidManifest-xml中引入自定义的Application" class="headerlink" title="4、在AndroidManifest.xml中引入自定义的Application"></a>4、在AndroidManifest.xml中引入自定义的Application</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".App"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="5、申明权限"><a href="#5、申明权限" class="headerlink" title="5、申明权限"></a>5、申明权限</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="二、Plugin中引入VirtualApk"><a href="#二、Plugin中引入VirtualApk" class="headerlink" title="二、Plugin中引入VirtualApk"></a>二、Plugin中引入VirtualApk</h2><h3 id="1、在项目的build-gradle文件中加入依赖-1"><a href="#1、在项目的build-gradle文件中加入依赖-1" class="headerlink" title="1、在项目的build.gradle文件中加入依赖"></a>1、在项目的build.gradle文件中加入依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">classpath</span> <span class="string">'com.didi.virtualapk:gradle:0.9.8.6'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>完整的gradle文件如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.1.4'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.didi.virtualapk:gradle:0.9.8.6'</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2、在app的build-gradle文件中加入依赖-1"><a href="#2、在app的build-gradle文件中加入依赖-1" class="headerlink" title="2、在app的build.gradle文件中加入依赖"></a>2、在app的build.gradle文件中加入依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   apply plugin: <span class="string">'com.didi.virtualapk.plugin'</span></span><br><span class="line"></span><br><span class="line">virtualApk&#123;</span><br><span class="line">    packageId = <span class="number">0</span>x6f</span><br><span class="line">    targetHost = <span class="string">'../../VirtualAPKHost/app'</span><span class="comment">//宿主应用的app模块路径</span></span><br><span class="line">    applyHostMapping = <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3、在app的build-gradle文件中加入签名配置"><a href="#3、在app的build-gradle文件中加入签名配置" class="headerlink" title="3、在app的build.gradle文件中加入签名配置"></a>3、在app的build.gradle文件中加入签名配置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">'../../android.keystore'</span>)</span><br><span class="line">            storePassword <span class="string">"android"</span></span><br><span class="line">            keyAlias <span class="string">"android"</span></span><br><span class="line">            keyPassword <span class="string">"android"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	buildTypes &#123;</span><br><span class="line">       release &#123;</span><br><span class="line">           minifyEnabled <span class="keyword">false</span></span><br><span class="line">           signingConfig signingConfigs.release</span><br><span class="line">           proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>完整的gradle文件如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gradle</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">   apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">apply plugin: <span class="string">'com.didi.virtualapk.plugin'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.wangyz.virtualapk.plugin"</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">'../../android.keystore'</span>)</span><br><span class="line">            storePassword <span class="string">"android"</span></span><br><span class="line">            keyAlias <span class="string">"android"</span></span><br><span class="line">            keyPassword <span class="string">"android"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:28.+'</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.0.2'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.1'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.1'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtualApk&#123;</span><br><span class="line">    packageId = <span class="number">0</span>x6f</span><br><span class="line">    targetHost = <span class="string">'../../VirtualAPKHost/app'</span></span><br><span class="line">    applyHostMapping = <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>注意：Plugin应用的资源文件不能和宿主的资源文件重名，否则在生成插件APK时会报错:</strong></p>
<p><a href="/images/error.png" data-fancybox="group" data-caption="error" class="fancybox"><img alt="error" title="error" data-src="/images/error.png" src="/img/loading.gif" class="lazyload"></a></p>
<p><strong>建议各模块资源命名以模块名开头。</strong></p>
<h3 id="4、生成插件APK"><a href="#4、生成插件APK" class="headerlink" title="4、生成插件APK"></a>4、生成插件APK</h3><p>打开gradle窗口，双击assemblePlugin，生成APK</p>
<p><a href="/images/build.png" data-fancybox="group" data-caption="build" class="fancybox"><img alt="build" title="build" data-src="/images/build.png" src="/img/loading.gif" class="lazyload"></a></p>
<p>文件生成目录：app/build/outputs/plugin/release/</p>
<h2 id="三、在宿主应用中加载插件APK"><a href="#三、在宿主应用中加载插件APK" class="headerlink" title="三、在宿主应用中加载插件APK"></a>三、在宿主应用中加载插件APK</h2><h3 id="1、将生成的插件APK推送-通过网络或者adb等-到手机指定路径，如-sdcard-Plugin-apk。"><a href="#1、将生成的插件APK推送-通过网络或者adb等-到手机指定路径，如-sdcard-Plugin-apk。" class="headerlink" title="1、将生成的插件APK推送(通过网络或者adb等)到手机指定路径，如/sdcard/Plugin.apk。"></a>1、将生成的插件APK推送(通过网络或者adb等)到手机指定路径，如/sdcard/Plugin.apk。</h3><h3 id="2、在宿主应用中加载APK"><a href="#2、在宿主应用中加载APK" class="headerlink" title="2、在宿主应用中加载APK"></a>2、在宿主应用中加载APK</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PLUGIN_PACKAGE_NAME = <span class="string">"com.wangyz.virtualapk.plugin"</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PLUGIN_NAME = <span class="string">"com.wangyz.virtualapk.plugin.MainActivity"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadPlugin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           String pluginPath = Environment.getExternalStorageDirectory().getAbsolutePath().concat(<span class="string">"/Plugin.apk"</span>);</span><br><span class="line">           File plugin = <span class="keyword">new</span> File(pluginPath);</span><br><span class="line">           PluginManager.getInstance(<span class="keyword">this</span>).loadPlugin(plugin);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3、调用APK中的Activity"><a href="#3、调用APK中的Activity" class="headerlink" title="3、调用APK中的Activity"></a>3、调用APK中的Activity</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPlugin</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (PluginManager.getInstance(<span class="keyword">this</span>).getLoadedPlugin(PLUGIN_PACKAGE_NAME) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Toast.makeText(getApplicationContext(), <span class="string">"未加载插件"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.setComponent(<span class="keyword">new</span> ComponentName(PLUGIN_PACKAGE_NAME, PLUGIN_NAME));</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>源码地址:<a href="https://github.com/milovetingting/Samples/tree/master/VirtualAPK" target="_blank" rel="noopener">https://github.com/milovetingting/Samples/tree/master/VirtualAPK</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>VirtualAPK</tag>
      </tags>
  </entry>
</search>
